
ArmRadioH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb74  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000f3f8  0800ee18  0800ee18  0001ee18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e210  0801e210  0004f600  2**0
                  CONTENTS
  4 .ARM          00000008  0801e210  0801e210  0002e210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e218  0801e218  0004f600  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e218  0801e218  0002e218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e21c  0801e21c  0002e21c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003dc  24000000  0801e220  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d268  240003e0  0801e5fc  000303e0  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  20000000  20000000  00040000  2**0
                  ALLOC
 11 .dtcm         0000f000  20000600  20000600  00040600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  0004f600  2**0
                  CONTENTS, READONLY
 13 .debug_info   00035c8c  00000000  00000000  0004f62e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000533d  00000000  00000000  000852ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001c0ad  00000000  00000000  0008a5f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001300  00000000  00000000  000a66a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00004308  00000000  00000000  000a79a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003a73d  00000000  00000000  000abcb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0001a1e8  00000000  00000000  000e63ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0017a8a7  00000000  00000000  001005d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      000000e9  00000000  00000000  0027ae7c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000051f4  00000000  00000000  0027af68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240003e0 	.word	0x240003e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800edfc 	.word	0x0800edfc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240003e4 	.word	0x240003e4
 80002dc:	0800edfc 	.word	0x0800edfc

080002e0 <arm_bitreversal_32>:
 80002e0:	1c4b      	adds	r3, r1, #1
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	bf98      	it	ls
 80002e6:	4770      	bxls	lr
 80002e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002ec:	1c91      	adds	r1, r2, #2
 80002ee:	089b      	lsrs	r3, r3, #2

080002f0 <arm_bitreversal_32_0>:
 80002f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002f8:	880a      	ldrh	r2, [r1, #0]
 80002fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002fe:	4480      	add	r8, r0
 8000300:	4481      	add	r9, r0
 8000302:	4402      	add	r2, r0
 8000304:	4484      	add	ip, r0
 8000306:	f8d9 7000 	ldr.w	r7, [r9]
 800030a:	f8d8 6000 	ldr.w	r6, [r8]
 800030e:	6815      	ldr	r5, [r2, #0]
 8000310:	f8dc 4000 	ldr.w	r4, [ip]
 8000314:	f8c9 6000 	str.w	r6, [r9]
 8000318:	f8c8 7000 	str.w	r7, [r8]
 800031c:	f8cc 5000 	str.w	r5, [ip]
 8000320:	6014      	str	r4, [r2, #0]
 8000322:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000326:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800032a:	6855      	ldr	r5, [r2, #4]
 800032c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000330:	f8c9 6004 	str.w	r6, [r9, #4]
 8000334:	f8c8 7004 	str.w	r7, [r8, #4]
 8000338:	f8cc 5004 	str.w	r5, [ip, #4]
 800033c:	6054      	str	r4, [r2, #4]
 800033e:	3108      	adds	r1, #8
 8000340:	3b01      	subs	r3, #1
 8000342:	d1d5      	bne.n	80002f0 <arm_bitreversal_32_0>
 8000344:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000348:	4770      	bx	lr

0800034a <arm_bitreversal_16>:
 800034a:	1c4b      	adds	r3, r1, #1
 800034c:	2b01      	cmp	r3, #1
 800034e:	bf98      	it	ls
 8000350:	4770      	bxls	lr
 8000352:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000356:	1c91      	adds	r1, r2, #2
 8000358:	089b      	lsrs	r3, r3, #2

0800035a <arm_bitreversal_16_0>:
 800035a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800035e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000362:	880a      	ldrh	r2, [r1, #0]
 8000364:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000368:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800036c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000370:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000374:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000378:	f8d9 7000 	ldr.w	r7, [r9]
 800037c:	f8d8 6000 	ldr.w	r6, [r8]
 8000380:	6815      	ldr	r5, [r2, #0]
 8000382:	f8dc 4000 	ldr.w	r4, [ip]
 8000386:	f8c9 6000 	str.w	r6, [r9]
 800038a:	f8c8 7000 	str.w	r7, [r8]
 800038e:	f8cc 5000 	str.w	r5, [ip]
 8000392:	6014      	str	r4, [r2, #0]
 8000394:	3108      	adds	r1, #8
 8000396:	3b01      	subs	r3, #1
 8000398:	d1df      	bne.n	800035a <arm_bitreversal_16_0>
 800039a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800039e:	4770      	bx	lr

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <memchr>:
 80003b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003b4:	2a10      	cmp	r2, #16
 80003b6:	db2b      	blt.n	8000410 <memchr+0x60>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	d008      	beq.n	80003d0 <memchr+0x20>
 80003be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003c2:	3a01      	subs	r2, #1
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d02d      	beq.n	8000424 <memchr+0x74>
 80003c8:	f010 0f07 	tst.w	r0, #7
 80003cc:	b342      	cbz	r2, 8000420 <memchr+0x70>
 80003ce:	d1f6      	bne.n	80003be <memchr+0xe>
 80003d0:	b4f0      	push	{r4, r5, r6, r7}
 80003d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003da:	f022 0407 	bic.w	r4, r2, #7
 80003de:	f07f 0700 	mvns.w	r7, #0
 80003e2:	2300      	movs	r3, #0
 80003e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003e8:	3c08      	subs	r4, #8
 80003ea:	ea85 0501 	eor.w	r5, r5, r1
 80003ee:	ea86 0601 	eor.w	r6, r6, r1
 80003f2:	fa85 f547 	uadd8	r5, r5, r7
 80003f6:	faa3 f587 	sel	r5, r3, r7
 80003fa:	fa86 f647 	uadd8	r6, r6, r7
 80003fe:	faa5 f687 	sel	r6, r5, r7
 8000402:	b98e      	cbnz	r6, 8000428 <memchr+0x78>
 8000404:	d1ee      	bne.n	80003e4 <memchr+0x34>
 8000406:	bcf0      	pop	{r4, r5, r6, r7}
 8000408:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800040c:	f002 0207 	and.w	r2, r2, #7
 8000410:	b132      	cbz	r2, 8000420 <memchr+0x70>
 8000412:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000416:	3a01      	subs	r2, #1
 8000418:	ea83 0301 	eor.w	r3, r3, r1
 800041c:	b113      	cbz	r3, 8000424 <memchr+0x74>
 800041e:	d1f8      	bne.n	8000412 <memchr+0x62>
 8000420:	2000      	movs	r0, #0
 8000422:	4770      	bx	lr
 8000424:	3801      	subs	r0, #1
 8000426:	4770      	bx	lr
 8000428:	2d00      	cmp	r5, #0
 800042a:	bf06      	itte	eq
 800042c:	4635      	moveq	r5, r6
 800042e:	3803      	subeq	r0, #3
 8000430:	3807      	subne	r0, #7
 8000432:	f015 0f01 	tst.w	r5, #1
 8000436:	d107      	bne.n	8000448 <memchr+0x98>
 8000438:	3001      	adds	r0, #1
 800043a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800043e:	bf02      	ittt	eq
 8000440:	3001      	addeq	r0, #1
 8000442:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000446:	3001      	addeq	r0, #1
 8000448:	bcf0      	pop	{r4, r5, r6, r7}
 800044a:	3801      	subs	r0, #1
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295
 8000460:	f04f 30ff 	movne.w	r0, #4294967295
 8000464:	f000 b972 	b.w	800074c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9e08      	ldr	r6, [sp, #32]
 8000486:	4604      	mov	r4, r0
 8000488:	4688      	mov	r8, r1
 800048a:	2b00      	cmp	r3, #0
 800048c:	d14b      	bne.n	8000526 <__udivmoddi4+0xa6>
 800048e:	428a      	cmp	r2, r1
 8000490:	4615      	mov	r5, r2
 8000492:	d967      	bls.n	8000564 <__udivmoddi4+0xe4>
 8000494:	fab2 f282 	clz	r2, r2
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0720 	rsb	r7, r2, #32
 800049e:	fa01 f302 	lsl.w	r3, r1, r2
 80004a2:	fa20 f707 	lsr.w	r7, r0, r7
 80004a6:	4095      	lsls	r5, r2
 80004a8:	ea47 0803 	orr.w	r8, r7, r3
 80004ac:	4094      	lsls	r4, r2
 80004ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fbb8 f7fe 	udiv	r7, r8, lr
 80004b8:	fa1f fc85 	uxth.w	ip, r5
 80004bc:	fb0e 8817 	mls	r8, lr, r7, r8
 80004c0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004c4:	fb07 f10c 	mul.w	r1, r7, ip
 80004c8:	4299      	cmp	r1, r3
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x60>
 80004cc:	18eb      	adds	r3, r5, r3
 80004ce:	f107 30ff 	add.w	r0, r7, #4294967295
 80004d2:	f080 811b 	bcs.w	800070c <__udivmoddi4+0x28c>
 80004d6:	4299      	cmp	r1, r3
 80004d8:	f240 8118 	bls.w	800070c <__udivmoddi4+0x28c>
 80004dc:	3f02      	subs	r7, #2
 80004de:	442b      	add	r3, r5
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb00 fc0c 	mul.w	ip, r0, ip
 80004f4:	45a4      	cmp	ip, r4
 80004f6:	d909      	bls.n	800050c <__udivmoddi4+0x8c>
 80004f8:	192c      	adds	r4, r5, r4
 80004fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80004fe:	f080 8107 	bcs.w	8000710 <__udivmoddi4+0x290>
 8000502:	45a4      	cmp	ip, r4
 8000504:	f240 8104 	bls.w	8000710 <__udivmoddi4+0x290>
 8000508:	3802      	subs	r0, #2
 800050a:	442c      	add	r4, r5
 800050c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000510:	eba4 040c 	sub.w	r4, r4, ip
 8000514:	2700      	movs	r7, #0
 8000516:	b11e      	cbz	r6, 8000520 <__udivmoddi4+0xa0>
 8000518:	40d4      	lsrs	r4, r2
 800051a:	2300      	movs	r3, #0
 800051c:	e9c6 4300 	strd	r4, r3, [r6]
 8000520:	4639      	mov	r1, r7
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	428b      	cmp	r3, r1
 8000528:	d909      	bls.n	800053e <__udivmoddi4+0xbe>
 800052a:	2e00      	cmp	r6, #0
 800052c:	f000 80eb 	beq.w	8000706 <__udivmoddi4+0x286>
 8000530:	2700      	movs	r7, #0
 8000532:	e9c6 0100 	strd	r0, r1, [r6]
 8000536:	4638      	mov	r0, r7
 8000538:	4639      	mov	r1, r7
 800053a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053e:	fab3 f783 	clz	r7, r3
 8000542:	2f00      	cmp	r7, #0
 8000544:	d147      	bne.n	80005d6 <__udivmoddi4+0x156>
 8000546:	428b      	cmp	r3, r1
 8000548:	d302      	bcc.n	8000550 <__udivmoddi4+0xd0>
 800054a:	4282      	cmp	r2, r0
 800054c:	f200 80fa 	bhi.w	8000744 <__udivmoddi4+0x2c4>
 8000550:	1a84      	subs	r4, r0, r2
 8000552:	eb61 0303 	sbc.w	r3, r1, r3
 8000556:	2001      	movs	r0, #1
 8000558:	4698      	mov	r8, r3
 800055a:	2e00      	cmp	r6, #0
 800055c:	d0e0      	beq.n	8000520 <__udivmoddi4+0xa0>
 800055e:	e9c6 4800 	strd	r4, r8, [r6]
 8000562:	e7dd      	b.n	8000520 <__udivmoddi4+0xa0>
 8000564:	b902      	cbnz	r2, 8000568 <__udivmoddi4+0xe8>
 8000566:	deff      	udf	#255	; 0xff
 8000568:	fab2 f282 	clz	r2, r2
 800056c:	2a00      	cmp	r2, #0
 800056e:	f040 808f 	bne.w	8000690 <__udivmoddi4+0x210>
 8000572:	1b49      	subs	r1, r1, r5
 8000574:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000578:	fa1f f885 	uxth.w	r8, r5
 800057c:	2701      	movs	r7, #1
 800057e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000582:	0c23      	lsrs	r3, r4, #16
 8000584:	fb0e 111c 	mls	r1, lr, ip, r1
 8000588:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800058c:	fb08 f10c 	mul.w	r1, r8, ip
 8000590:	4299      	cmp	r1, r3
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x124>
 8000594:	18eb      	adds	r3, r5, r3
 8000596:	f10c 30ff 	add.w	r0, ip, #4294967295
 800059a:	d202      	bcs.n	80005a2 <__udivmoddi4+0x122>
 800059c:	4299      	cmp	r1, r3
 800059e:	f200 80cd 	bhi.w	800073c <__udivmoddi4+0x2bc>
 80005a2:	4684      	mov	ip, r0
 80005a4:	1a59      	subs	r1, r3, r1
 80005a6:	b2a3      	uxth	r3, r4
 80005a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ac:	fb0e 1410 	mls	r4, lr, r0, r1
 80005b0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80005b4:	fb08 f800 	mul.w	r8, r8, r0
 80005b8:	45a0      	cmp	r8, r4
 80005ba:	d907      	bls.n	80005cc <__udivmoddi4+0x14c>
 80005bc:	192c      	adds	r4, r5, r4
 80005be:	f100 33ff 	add.w	r3, r0, #4294967295
 80005c2:	d202      	bcs.n	80005ca <__udivmoddi4+0x14a>
 80005c4:	45a0      	cmp	r8, r4
 80005c6:	f200 80b6 	bhi.w	8000736 <__udivmoddi4+0x2b6>
 80005ca:	4618      	mov	r0, r3
 80005cc:	eba4 0408 	sub.w	r4, r4, r8
 80005d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005d4:	e79f      	b.n	8000516 <__udivmoddi4+0x96>
 80005d6:	f1c7 0c20 	rsb	ip, r7, #32
 80005da:	40bb      	lsls	r3, r7
 80005dc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80005e0:	ea4e 0e03 	orr.w	lr, lr, r3
 80005e4:	fa01 f407 	lsl.w	r4, r1, r7
 80005e8:	fa20 f50c 	lsr.w	r5, r0, ip
 80005ec:	fa21 f30c 	lsr.w	r3, r1, ip
 80005f0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80005f4:	4325      	orrs	r5, r4
 80005f6:	fbb3 f9f8 	udiv	r9, r3, r8
 80005fa:	0c2c      	lsrs	r4, r5, #16
 80005fc:	fb08 3319 	mls	r3, r8, r9, r3
 8000600:	fa1f fa8e 	uxth.w	sl, lr
 8000604:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000608:	fb09 f40a 	mul.w	r4, r9, sl
 800060c:	429c      	cmp	r4, r3
 800060e:	fa02 f207 	lsl.w	r2, r2, r7
 8000612:	fa00 f107 	lsl.w	r1, r0, r7
 8000616:	d90b      	bls.n	8000630 <__udivmoddi4+0x1b0>
 8000618:	eb1e 0303 	adds.w	r3, lr, r3
 800061c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000620:	f080 8087 	bcs.w	8000732 <__udivmoddi4+0x2b2>
 8000624:	429c      	cmp	r4, r3
 8000626:	f240 8084 	bls.w	8000732 <__udivmoddi4+0x2b2>
 800062a:	f1a9 0902 	sub.w	r9, r9, #2
 800062e:	4473      	add	r3, lr
 8000630:	1b1b      	subs	r3, r3, r4
 8000632:	b2ad      	uxth	r5, r5
 8000634:	fbb3 f0f8 	udiv	r0, r3, r8
 8000638:	fb08 3310 	mls	r3, r8, r0, r3
 800063c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000640:	fb00 fa0a 	mul.w	sl, r0, sl
 8000644:	45a2      	cmp	sl, r4
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x1da>
 8000648:	eb1e 0404 	adds.w	r4, lr, r4
 800064c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000650:	d26b      	bcs.n	800072a <__udivmoddi4+0x2aa>
 8000652:	45a2      	cmp	sl, r4
 8000654:	d969      	bls.n	800072a <__udivmoddi4+0x2aa>
 8000656:	3802      	subs	r0, #2
 8000658:	4474      	add	r4, lr
 800065a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800065e:	fba0 8902 	umull	r8, r9, r0, r2
 8000662:	eba4 040a 	sub.w	r4, r4, sl
 8000666:	454c      	cmp	r4, r9
 8000668:	46c2      	mov	sl, r8
 800066a:	464b      	mov	r3, r9
 800066c:	d354      	bcc.n	8000718 <__udivmoddi4+0x298>
 800066e:	d051      	beq.n	8000714 <__udivmoddi4+0x294>
 8000670:	2e00      	cmp	r6, #0
 8000672:	d069      	beq.n	8000748 <__udivmoddi4+0x2c8>
 8000674:	ebb1 050a 	subs.w	r5, r1, sl
 8000678:	eb64 0403 	sbc.w	r4, r4, r3
 800067c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000680:	40fd      	lsrs	r5, r7
 8000682:	40fc      	lsrs	r4, r7
 8000684:	ea4c 0505 	orr.w	r5, ip, r5
 8000688:	e9c6 5400 	strd	r5, r4, [r6]
 800068c:	2700      	movs	r7, #0
 800068e:	e747      	b.n	8000520 <__udivmoddi4+0xa0>
 8000690:	f1c2 0320 	rsb	r3, r2, #32
 8000694:	fa20 f703 	lsr.w	r7, r0, r3
 8000698:	4095      	lsls	r5, r2
 800069a:	fa01 f002 	lsl.w	r0, r1, r2
 800069e:	fa21 f303 	lsr.w	r3, r1, r3
 80006a2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006a6:	4338      	orrs	r0, r7
 80006a8:	0c01      	lsrs	r1, r0, #16
 80006aa:	fbb3 f7fe 	udiv	r7, r3, lr
 80006ae:	fa1f f885 	uxth.w	r8, r5
 80006b2:	fb0e 3317 	mls	r3, lr, r7, r3
 80006b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006ba:	fb07 f308 	mul.w	r3, r7, r8
 80006be:	428b      	cmp	r3, r1
 80006c0:	fa04 f402 	lsl.w	r4, r4, r2
 80006c4:	d907      	bls.n	80006d6 <__udivmoddi4+0x256>
 80006c6:	1869      	adds	r1, r5, r1
 80006c8:	f107 3cff 	add.w	ip, r7, #4294967295
 80006cc:	d22f      	bcs.n	800072e <__udivmoddi4+0x2ae>
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d92d      	bls.n	800072e <__udivmoddi4+0x2ae>
 80006d2:	3f02      	subs	r7, #2
 80006d4:	4429      	add	r1, r5
 80006d6:	1acb      	subs	r3, r1, r3
 80006d8:	b281      	uxth	r1, r0
 80006da:	fbb3 f0fe 	udiv	r0, r3, lr
 80006de:	fb0e 3310 	mls	r3, lr, r0, r3
 80006e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006e6:	fb00 f308 	mul.w	r3, r0, r8
 80006ea:	428b      	cmp	r3, r1
 80006ec:	d907      	bls.n	80006fe <__udivmoddi4+0x27e>
 80006ee:	1869      	adds	r1, r5, r1
 80006f0:	f100 3cff 	add.w	ip, r0, #4294967295
 80006f4:	d217      	bcs.n	8000726 <__udivmoddi4+0x2a6>
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d915      	bls.n	8000726 <__udivmoddi4+0x2a6>
 80006fa:	3802      	subs	r0, #2
 80006fc:	4429      	add	r1, r5
 80006fe:	1ac9      	subs	r1, r1, r3
 8000700:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000704:	e73b      	b.n	800057e <__udivmoddi4+0xfe>
 8000706:	4637      	mov	r7, r6
 8000708:	4630      	mov	r0, r6
 800070a:	e709      	b.n	8000520 <__udivmoddi4+0xa0>
 800070c:	4607      	mov	r7, r0
 800070e:	e6e7      	b.n	80004e0 <__udivmoddi4+0x60>
 8000710:	4618      	mov	r0, r3
 8000712:	e6fb      	b.n	800050c <__udivmoddi4+0x8c>
 8000714:	4541      	cmp	r1, r8
 8000716:	d2ab      	bcs.n	8000670 <__udivmoddi4+0x1f0>
 8000718:	ebb8 0a02 	subs.w	sl, r8, r2
 800071c:	eb69 020e 	sbc.w	r2, r9, lr
 8000720:	3801      	subs	r0, #1
 8000722:	4613      	mov	r3, r2
 8000724:	e7a4      	b.n	8000670 <__udivmoddi4+0x1f0>
 8000726:	4660      	mov	r0, ip
 8000728:	e7e9      	b.n	80006fe <__udivmoddi4+0x27e>
 800072a:	4618      	mov	r0, r3
 800072c:	e795      	b.n	800065a <__udivmoddi4+0x1da>
 800072e:	4667      	mov	r7, ip
 8000730:	e7d1      	b.n	80006d6 <__udivmoddi4+0x256>
 8000732:	4681      	mov	r9, r0
 8000734:	e77c      	b.n	8000630 <__udivmoddi4+0x1b0>
 8000736:	3802      	subs	r0, #2
 8000738:	442c      	add	r4, r5
 800073a:	e747      	b.n	80005cc <__udivmoddi4+0x14c>
 800073c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000740:	442b      	add	r3, r5
 8000742:	e72f      	b.n	80005a4 <__udivmoddi4+0x124>
 8000744:	4638      	mov	r0, r7
 8000746:	e708      	b.n	800055a <__udivmoddi4+0xda>
 8000748:	4637      	mov	r7, r6
 800074a:	e6e9      	b.n	8000520 <__udivmoddi4+0xa0>

0800074c <__aeabi_idiv0>:
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop

08000750 <Load_Presets>:



// Load from the Presets table
void Load_Presets(void)
{
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <Load_Presets+0x40>)
 8000752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000756:	4c0f      	ldr	r4, [pc, #60]	; (8000794 <Load_Presets+0x44>)
 8000758:	f503 78a8 	add.w	r8, r3, #336	; 0x150
 800075c:	4f0e      	ldr	r7, [pc, #56]	; (8000798 <Load_Presets+0x48>)
 800075e:	4e0f      	ldr	r6, [pc, #60]	; (800079c <Load_Presets+0x4c>)
 8000760:	4d0f      	ldr	r5, [pc, #60]	; (80007a0 <Load_Presets+0x50>)
  int k;

  for(k=0; k<MAXPRESETS; k++)
  {
    strcpy(psets[k].name, pNames[k]);
 8000762:	4621      	mov	r1, r4
 8000764:	4618      	mov	r0, r3
 8000766:	f00b fa67 	bl	800bc38 <strcpy>
    psets[k].freq = pFreqs[k];
    psets[k].mode = pModes[k];
 800076a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    strcpy(psets[k].name, pNames[k]);
 800076e:	4603      	mov	r3, r0
    psets[k].bw   = pBws[k];    
 8000770:	f815 2f01 	ldrb.w	r2, [r5, #1]!
    psets[k].freq = pFreqs[k];
 8000774:	f857 0b04 	ldr.w	r0, [r7], #4
 8000778:	3410      	adds	r4, #16
    psets[k].mode = pModes[k];
 800077a:	7519      	strb	r1, [r3, #20]
 800077c:	3318      	adds	r3, #24
    psets[k].freq = pFreqs[k];
 800077e:	f843 0c08 	str.w	r0, [r3, #-8]
    psets[k].bw   = pBws[k];    
 8000782:	f803 2c03 	strb.w	r2, [r3, #-3]
  for(k=0; k<MAXPRESETS; k++)
 8000786:	4543      	cmp	r3, r8
 8000788:	d1eb      	bne.n	8000762 <Load_Presets+0x12>
  }    
}
 800078a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800078e:	bf00      	nop
 8000790:	24008760 	.word	0x24008760
 8000794:	24000004 	.word	0x24000004
 8000798:	0801ae28 	.word	0x0801ae28
 800079c:	0801ae5f 	.word	0x0801ae5f
 80007a0:	0801ae17 	.word	0x0801ae17

080007a4 <SetBW>:
// Load the FFT mask according to the mode and the bandwidth chosen,
// and change the color of the buttons to indicate the active bandwidth
void SetBW(/*WM_HWIN ptr,*/ Bwidth newbw)
{
	CurrentBW = newbw;
	switch(CurrentMode)
 80007a4:	4b2a      	ldr	r3, [pc, #168]	; (8000850 <SetBW+0xac>)
	CurrentBW = newbw;
 80007a6:	4a2b      	ldr	r2, [pc, #172]	; (8000854 <SetBW+0xb0>)
	switch(CurrentMode)
 80007a8:	781b      	ldrb	r3, [r3, #0]
{
 80007aa:	b470      	push	{r4, r5, r6}
 80007ac:	4604      	mov	r4, r0
	CurrentBW = newbw;
 80007ae:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 80007b0:	2b03      	cmp	r3, #3
 80007b2:	d84b      	bhi.n	800084c <SetBW+0xa8>
 80007b4:	e8df f003 	tbb	[pc, r3]
 80007b8:	02142638 	.word	0x02142638
				             (float *)FFTmaskSSB_I[USBindex], FFTmask, FFTLEN);	
      break; 

    case CW  : 			
      bw[CW] = newbw;
      CWindex = (newbw == Narrow) ? 0 : 1;
 80007bc:	1c02      	adds	r2, r0, #0
 80007be:	4d26      	ldr	r5, [pc, #152]	; (8000858 <SetBW+0xb4>)
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 80007c0:	4e26      	ldr	r6, [pc, #152]	; (800085c <SetBW+0xb8>)
 80007c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
      CWindex = (newbw == Narrow) ? 0 : 1;
 80007c6:	bf18      	it	ne
 80007c8:	2201      	movne	r2, #1
				             (float *)FFTmaskCW_I[CWindex], FFTmask, FFTLEN);	
 80007ca:	4925      	ldr	r1, [pc, #148]	; (8000860 <SetBW+0xbc>)
 80007cc:	0310      	lsls	r0, r2, #12
      CWindex = (newbw == Narrow) ? 0 : 1;
 80007ce:	802a      	strh	r2, [r5, #0]
      bw[CW] = newbw;
 80007d0:	4d24      	ldr	r5, [pc, #144]	; (8000864 <SetBW+0xc0>)
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 80007d2:	4401      	add	r1, r0
 80007d4:	4a24      	ldr	r2, [pc, #144]	; (8000868 <SetBW+0xc4>)
 80007d6:	4430      	add	r0, r6
      bw[CW] = newbw;
 80007d8:	70ec      	strb	r4, [r5, #3]
      break; 

    default :
      break;		
  }    
}	
 80007da:	bc70      	pop	{r4, r5, r6}
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 80007dc:	f001 bbf2 	b.w	8001fc4 <SDR_2R_toC_f32>
      USBindex = (newbw == Narrow) ? 0 : 1;
 80007e0:	1c02      	adds	r2, r0, #0
 80007e2:	4d22      	ldr	r5, [pc, #136]	; (800086c <SetBW+0xc8>)
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex], 
 80007e4:	4e22      	ldr	r6, [pc, #136]	; (8000870 <SetBW+0xcc>)
 80007e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
      USBindex = (newbw == Narrow) ? 0 : 1;
 80007ea:	bf18      	it	ne
 80007ec:	2201      	movne	r2, #1
				             (float *)FFTmaskSSB_I[USBindex], FFTmask, FFTLEN);	
 80007ee:	4921      	ldr	r1, [pc, #132]	; (8000874 <SetBW+0xd0>)
 80007f0:	0310      	lsls	r0, r2, #12
      USBindex = (newbw == Narrow) ? 0 : 1;
 80007f2:	802a      	strh	r2, [r5, #0]
      bw[USB] = newbw;
 80007f4:	4d1b      	ldr	r5, [pc, #108]	; (8000864 <SetBW+0xc0>)
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex], 
 80007f6:	4401      	add	r1, r0
 80007f8:	4a1b      	ldr	r2, [pc, #108]	; (8000868 <SetBW+0xc4>)
 80007fa:	4430      	add	r0, r6
      bw[USB] = newbw;
 80007fc:	70ac      	strb	r4, [r5, #2]
}	
 80007fe:	bc70      	pop	{r4, r5, r6}
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex], 
 8000800:	f001 bbe0 	b.w	8001fc4 <SDR_2R_toC_f32>
      LSBindex = (newbw == Narrow) ? 0 : 1;
 8000804:	1c02      	adds	r2, r0, #0
 8000806:	4d1c      	ldr	r5, [pc, #112]	; (8000878 <SetBW+0xd4>)
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex], 
 8000808:	4e19      	ldr	r6, [pc, #100]	; (8000870 <SetBW+0xcc>)
 800080a:	f44f 6380 	mov.w	r3, #1024	; 0x400
      LSBindex = (newbw == Narrow) ? 0 : 1;
 800080e:	bf18      	it	ne
 8000810:	2201      	movne	r2, #1
				             (float *)FFTmaskSSB_I[LSBindex], FFTmask, FFTLEN);	
 8000812:	4918      	ldr	r1, [pc, #96]	; (8000874 <SetBW+0xd0>)
 8000814:	0310      	lsls	r0, r2, #12
      LSBindex = (newbw == Narrow) ? 0 : 1;
 8000816:	802a      	strh	r2, [r5, #0]
      bw[LSB] = newbw;
 8000818:	4d12      	ldr	r5, [pc, #72]	; (8000864 <SetBW+0xc0>)
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex], 
 800081a:	4401      	add	r1, r0
 800081c:	4a12      	ldr	r2, [pc, #72]	; (8000868 <SetBW+0xc4>)
 800081e:	4430      	add	r0, r6
      bw[LSB] = newbw;
 8000820:	706c      	strb	r4, [r5, #1]
}	
 8000822:	bc70      	pop	{r4, r5, r6}
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex], 
 8000824:	f001 bbce 	b.w	8001fc4 <SDR_2R_toC_f32>
      AMindex = (newbw == Narrow) ? 0 : 1;
 8000828:	1c02      	adds	r2, r0, #0
 800082a:	4d14      	ldr	r5, [pc, #80]	; (800087c <SetBW+0xd8>)
      SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex], 
 800082c:	4e14      	ldr	r6, [pc, #80]	; (8000880 <SetBW+0xdc>)
 800082e:	f44f 6380 	mov.w	r3, #1024	; 0x400
      AMindex = (newbw == Narrow) ? 0 : 1;
 8000832:	bf18      	it	ne
 8000834:	2201      	movne	r2, #1
				             (float *)FFTmaskAM_I[AMindex], FFTmask, FFTLEN);	
 8000836:	4913      	ldr	r1, [pc, #76]	; (8000884 <SetBW+0xe0>)
 8000838:	0310      	lsls	r0, r2, #12
      AMindex = (newbw == Narrow) ? 0 : 1;
 800083a:	802a      	strh	r2, [r5, #0]
      bw[AM] = newbw;
 800083c:	4d09      	ldr	r5, [pc, #36]	; (8000864 <SetBW+0xc0>)
      SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex], 
 800083e:	4401      	add	r1, r0
 8000840:	4a09      	ldr	r2, [pc, #36]	; (8000868 <SetBW+0xc4>)
 8000842:	4430      	add	r0, r6
      bw[AM] = newbw;
 8000844:	702c      	strb	r4, [r5, #0]
}	
 8000846:	bc70      	pop	{r4, r5, r6}
      SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex], 
 8000848:	f001 bbbc 	b.w	8001fc4 <SDR_2R_toC_f32>
}	
 800084c:	bc70      	pop	{r4, r5, r6}
 800084e:	4770      	bx	lr
 8000850:	2400c23c 	.word	0x2400c23c
 8000854:	24000910 	.word	0x24000910
 8000858:	24008d08 	.word	0x24008d08
 800085c:	08014e18 	.word	0x08014e18
 8000860:	08012e18 	.word	0x08012e18
 8000864:	24008d0c 	.word	0x24008d0c
 8000868:	20004600 	.word	0x20004600
 800086c:	24007ed4 	.word	0x24007ed4
 8000870:	08018e18 	.word	0x08018e18
 8000874:	08016e18 	.word	0x08016e18
 8000878:	2400d640 	.word	0x2400d640
 800087c:	2400d642 	.word	0x2400d642
 8000880:	08010e18 	.word	0x08010e18
 8000884:	0800ee18 	.word	0x0800ee18

08000888 <Tune_Preset>:
{
 8000888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LOfreq = psets[Idx].freq;
 800088c:	0045      	lsls	r5, r0, #1
 800088e:	4e89      	ldr	r6, [pc, #548]	; (8000ab4 <Tune_Preset+0x22c>)
 8000890:	4a89      	ldr	r2, [pc, #548]	; (8000ab8 <Tune_Preset+0x230>)
{
 8000892:	4604      	mov	r4, r0
  LOfreq = psets[Idx].freq;
 8000894:	182b      	adds	r3, r5, r0
// Set the new demodulation mode chosen by the user, and change the color
// of the buttons to indicate the active mode

void SetMode(/*WM_HWIN ptr,*/ Mode newmode)
{
	CurrentMode = newmode;
 8000896:	4f89      	ldr	r7, [pc, #548]	; (8000abc <Tune_Preset+0x234>)
  LOfreq = psets[Idx].freq;
 8000898:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800089c:	6919      	ldr	r1, [r3, #16]
	SetMode( psets[Idx].mode);
 800089e:	7d1b      	ldrb	r3, [r3, #20]
  LOfreq = psets[Idx].freq;
 80008a0:	6011      	str	r1, [r2, #0]
	CurrentMode = newmode;
 80008a2:	703b      	strb	r3, [r7, #0]

	switch(CurrentMode)
 80008a4:	2b03      	cmp	r3, #3
 80008a6:	d849      	bhi.n	800093c <Tune_Preset+0xb4>
 80008a8:	e8df f003 	tbb	[pc, r3]
 80008ac:	02152637 	.word	0x02152637
 //     ChangeColor(ptr, hUSB, GUI_RED);		
 //     ChangeColor(ptr, hCW,  GUI_BLACK);		
      break; 

    case CW  : 			
      SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 80008b0:	f8df 8248 	ldr.w	r8, [pc, #584]	; 8000afc <Tune_Preset+0x274>
 80008b4:	f898 0003 	ldrb.w	r0, [r8, #3]
 80008b8:	f7ff ff74 	bl	80007a4 <SetBW>
 80008bc:	4b80      	ldr	r3, [pc, #512]	; (8000ac0 <Tune_Preset+0x238>)
	CurrentAGC =newAGC;
 80008be:	4881      	ldr	r0, [pc, #516]	; (8000ac4 <Tune_Preset+0x23c>)
      SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 80008c0:	78da      	ldrb	r2, [r3, #3]
	switch(CurrentMode)
 80008c2:	7839      	ldrb	r1, [r7, #0]
	CurrentAGC =newAGC;
 80008c4:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 80008c6:	2903      	cmp	r1, #3
 80008c8:	d838      	bhi.n	800093c <Tune_Preset+0xb4>
 80008ca:	e8df f011 	tbh	[pc, r1, lsl #1]
 80008ce:	00a6      	.short	0x00a6
 80008d0:	006c0089 	.word	0x006c0089
 80008d4:	00e7      	.short	0x00e7
      SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 80008d6:	f8df 8224 	ldr.w	r8, [pc, #548]	; 8000afc <Tune_Preset+0x274>
 80008da:	f898 0002 	ldrb.w	r0, [r8, #2]
 80008de:	f7ff ff61 	bl	80007a4 <SetBW>
 80008e2:	4b77      	ldr	r3, [pc, #476]	; (8000ac0 <Tune_Preset+0x238>)
	CurrentAGC =newAGC;
 80008e4:	4877      	ldr	r0, [pc, #476]	; (8000ac4 <Tune_Preset+0x23c>)
      SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 80008e6:	789a      	ldrb	r2, [r3, #2]
	switch(CurrentMode)
 80008e8:	7839      	ldrb	r1, [r7, #0]
	CurrentAGC =newAGC;
 80008ea:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 80008ec:	2903      	cmp	r1, #3
 80008ee:	d825      	bhi.n	800093c <Tune_Preset+0xb4>
 80008f0:	e8df f001 	tbb	[pc, r1]
 80008f4:	33b07693 	.word	0x33b07693
      SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 80008f8:	f8df 8200 	ldr.w	r8, [pc, #512]	; 8000afc <Tune_Preset+0x274>
 80008fc:	f898 0001 	ldrb.w	r0, [r8, #1]
 8000900:	f7ff ff50 	bl	80007a4 <SetBW>
 8000904:	4b6e      	ldr	r3, [pc, #440]	; (8000ac0 <Tune_Preset+0x238>)
	CurrentAGC =newAGC;
 8000906:	486f      	ldr	r0, [pc, #444]	; (8000ac4 <Tune_Preset+0x23c>)
      SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000908:	785a      	ldrb	r2, [r3, #1]
	switch(CurrentMode)
 800090a:	7839      	ldrb	r1, [r7, #0]
	CurrentAGC =newAGC;
 800090c:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 800090e:	2903      	cmp	r1, #3
 8000910:	d814      	bhi.n	800093c <Tune_Preset+0xb4>
 8000912:	e8df f001 	tbb	[pc, r1]
 8000916:	ab82      	.short	0xab82
 8000918:	2248      	.short	0x2248
      SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 800091a:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8000afc <Tune_Preset+0x274>
 800091e:	f898 0000 	ldrb.w	r0, [r8]
 8000922:	f7ff ff3f 	bl	80007a4 <SetBW>
 8000926:	4b66      	ldr	r3, [pc, #408]	; (8000ac0 <Tune_Preset+0x238>)
	CurrentAGC =newAGC;
 8000928:	4866      	ldr	r0, [pc, #408]	; (8000ac4 <Tune_Preset+0x23c>)
      SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 800092a:	781a      	ldrb	r2, [r3, #0]
	switch(CurrentMode)
 800092c:	7839      	ldrb	r1, [r7, #0]
	CurrentAGC =newAGC;
 800092e:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8000930:	2903      	cmp	r1, #3
 8000932:	d803      	bhi.n	800093c <Tune_Preset+0xb4>
 8000934:	e8df f001 	tbb	[pc, r1]
 8000938:	113754a6 	.word	0x113754a6
  SetBW( psets[Idx].bw);
 800093c:	4425      	add	r5, r4
	CurrentBW = newbw;
 800093e:	4b62      	ldr	r3, [pc, #392]	; (8000ac8 <Tune_Preset+0x240>)
  SetBW( psets[Idx].bw);
 8000940:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
	CurrentBW = newbw;
 8000944:	7d6a      	ldrb	r2, [r5, #21]
 8000946:	701a      	strb	r2, [r3, #0]
	strcpy(msg, psets[Idx].name);
 8000948:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800094c:	485f      	ldr	r0, [pc, #380]	; (8000acc <Tune_Preset+0x244>)
 800094e:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
}
 8000952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	strcpy(msg, psets[Idx].name);
 8000956:	f00b b96f 	b.w	800bc38 <strcpy>
      Decay[CW]   = AGC_decay[newAGC];
 800095a:	495d      	ldr	r1, [pc, #372]	; (8000ad0 <Tune_Preset+0x248>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 800095c:	4f5d      	ldr	r7, [pc, #372]	; (8000ad4 <Tune_Preset+0x24c>)
      Decay[CW]   = AGC_decay[newAGC];
 800095e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    case CW :       agc[CW] = newAGC;
 8000962:	70da      	strb	r2, [r3, #3]
      Decay[CW]   = AGC_decay[newAGC];
 8000964:	485c      	ldr	r0, [pc, #368]	; (8000ad8 <Tune_Preset+0x250>)
 8000966:	6809      	ldr	r1, [r1, #0]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000968:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 800096c:	4b5b      	ldr	r3, [pc, #364]	; (8000adc <Tune_Preset+0x254>)
      Decay[CW]   = AGC_decay[newAGC];
 800096e:	60c1      	str	r1, [r0, #12]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000970:	80da      	strh	r2, [r3, #6]
  SetBW( psets[Idx].bw);
 8000972:	4425      	add	r5, r4
				             (float *)FFTmaskCW_I[CWindex], FFTmask, FFTLEN);	
 8000974:	495a      	ldr	r1, [pc, #360]	; (8000ae0 <Tune_Preset+0x258>)
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 8000976:	4f5b      	ldr	r7, [pc, #364]	; (8000ae4 <Tune_Preset+0x25c>)
 8000978:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SetBW( psets[Idx].bw);
 800097c:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
	CurrentBW = newbw;
 8000980:	4851      	ldr	r0, [pc, #324]	; (8000ac8 <Tune_Preset+0x240>)
      CWindex = (newbw == Narrow) ? 0 : 1;
 8000982:	f8df c17c 	ldr.w	ip, [pc, #380]	; 8000b00 <Tune_Preset+0x278>
  SetBW( psets[Idx].bw);
 8000986:	7d6a      	ldrb	r2, [r5, #21]
      CWindex = (newbw == Narrow) ? 0 : 1;
 8000988:	1c15      	adds	r5, r2, #0
      bw[CW] = newbw;
 800098a:	f888 2003 	strb.w	r2, [r8, #3]
      CWindex = (newbw == Narrow) ? 0 : 1;
 800098e:	bf18      	it	ne
 8000990:	2501      	movne	r5, #1
	CurrentBW = newbw;
 8000992:	7002      	strb	r2, [r0, #0]
 8000994:	0328      	lsls	r0, r5, #12
      CWindex = (newbw == Narrow) ? 0 : 1;
 8000996:	f8ac 5000 	strh.w	r5, [ip]
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 800099a:	4401      	add	r1, r0
 800099c:	4a52      	ldr	r2, [pc, #328]	; (8000ae8 <Tune_Preset+0x260>)
 800099e:	4438      	add	r0, r7
 80009a0:	f001 fb10 	bl	8001fc4 <SDR_2R_toC_f32>
 80009a4:	e7d0      	b.n	8000948 <Tune_Preset+0xc0>
      Decay[USB]  = AGC_decay[newAGC];
 80009a6:	494a      	ldr	r1, [pc, #296]	; (8000ad0 <Tune_Preset+0x248>)
      Hcount[USB] = Hangcount[newAGC]; break;
 80009a8:	4f4a      	ldr	r7, [pc, #296]	; (8000ad4 <Tune_Preset+0x24c>)
      Decay[USB]  = AGC_decay[newAGC];
 80009aa:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    case USB :      agc[USB] = newAGC;
 80009ae:	709a      	strb	r2, [r3, #2]
      Decay[USB]  = AGC_decay[newAGC];
 80009b0:	4849      	ldr	r0, [pc, #292]	; (8000ad8 <Tune_Preset+0x250>)
 80009b2:	6809      	ldr	r1, [r1, #0]
      Hcount[USB] = Hangcount[newAGC]; break;
 80009b4:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80009b8:	4b48      	ldr	r3, [pc, #288]	; (8000adc <Tune_Preset+0x254>)
      Decay[USB]  = AGC_decay[newAGC];
 80009ba:	6081      	str	r1, [r0, #8]
      Hcount[USB] = Hangcount[newAGC]; break;
 80009bc:	809a      	strh	r2, [r3, #4]
  SetBW( psets[Idx].bw);
 80009be:	4425      	add	r5, r4
				             (float *)FFTmaskSSB_I[USBindex], FFTmask, FFTLEN);	
 80009c0:	494a      	ldr	r1, [pc, #296]	; (8000aec <Tune_Preset+0x264>)
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex], 
 80009c2:	4f4b      	ldr	r7, [pc, #300]	; (8000af0 <Tune_Preset+0x268>)
 80009c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SetBW( psets[Idx].bw);
 80009c8:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
	CurrentBW = newbw;
 80009cc:	483e      	ldr	r0, [pc, #248]	; (8000ac8 <Tune_Preset+0x240>)
      USBindex = (newbw == Narrow) ? 0 : 1;
 80009ce:	f8df c134 	ldr.w	ip, [pc, #308]	; 8000b04 <Tune_Preset+0x27c>
  SetBW( psets[Idx].bw);
 80009d2:	7d6a      	ldrb	r2, [r5, #21]
      USBindex = (newbw == Narrow) ? 0 : 1;
 80009d4:	1c15      	adds	r5, r2, #0
      bw[USB] = newbw;
 80009d6:	f888 2002 	strb.w	r2, [r8, #2]
      USBindex = (newbw == Narrow) ? 0 : 1;
 80009da:	bf18      	it	ne
 80009dc:	2501      	movne	r5, #1
 80009de:	e7d8      	b.n	8000992 <Tune_Preset+0x10a>
      Decay[LSB]  = AGC_decay[newAGC];
 80009e0:	493b      	ldr	r1, [pc, #236]	; (8000ad0 <Tune_Preset+0x248>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 80009e2:	4f3c      	ldr	r7, [pc, #240]	; (8000ad4 <Tune_Preset+0x24c>)
      Decay[LSB]  = AGC_decay[newAGC];
 80009e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    case LSB :      agc[LSB] = newAGC;
 80009e8:	705a      	strb	r2, [r3, #1]
      Decay[LSB]  = AGC_decay[newAGC];
 80009ea:	483b      	ldr	r0, [pc, #236]	; (8000ad8 <Tune_Preset+0x250>)
 80009ec:	6809      	ldr	r1, [r1, #0]
      Hcount[LSB] = Hangcount[newAGC]; break;
 80009ee:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80009f2:	4b3a      	ldr	r3, [pc, #232]	; (8000adc <Tune_Preset+0x254>)
      Decay[LSB]  = AGC_decay[newAGC];
 80009f4:	6041      	str	r1, [r0, #4]
      Hcount[LSB] = Hangcount[newAGC]; break;
 80009f6:	805a      	strh	r2, [r3, #2]
  SetBW( psets[Idx].bw);
 80009f8:	4425      	add	r5, r4
				             (float *)FFTmaskSSB_I[LSBindex], FFTmask, FFTLEN);	
 80009fa:	493c      	ldr	r1, [pc, #240]	; (8000aec <Tune_Preset+0x264>)
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex], 
 80009fc:	4f3c      	ldr	r7, [pc, #240]	; (8000af0 <Tune_Preset+0x268>)
 80009fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SetBW( psets[Idx].bw);
 8000a02:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
	CurrentBW = newbw;
 8000a06:	4830      	ldr	r0, [pc, #192]	; (8000ac8 <Tune_Preset+0x240>)
      LSBindex = (newbw == Narrow) ? 0 : 1;
 8000a08:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8000b08 <Tune_Preset+0x280>
  SetBW( psets[Idx].bw);
 8000a0c:	7d6a      	ldrb	r2, [r5, #21]
      LSBindex = (newbw == Narrow) ? 0 : 1;
 8000a0e:	1c15      	adds	r5, r2, #0
      bw[LSB] = newbw;
 8000a10:	f888 2001 	strb.w	r2, [r8, #1]
      LSBindex = (newbw == Narrow) ? 0 : 1;
 8000a14:	bf18      	it	ne
 8000a16:	2501      	movne	r5, #1
 8000a18:	e7bb      	b.n	8000992 <Tune_Preset+0x10a>
      Decay[AM]   = AGC_decay[newAGC];
 8000a1a:	492d      	ldr	r1, [pc, #180]	; (8000ad0 <Tune_Preset+0x248>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000a1c:	4f2d      	ldr	r7, [pc, #180]	; (8000ad4 <Tune_Preset+0x24c>)
      Decay[AM]   = AGC_decay[newAGC];
 8000a1e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
	  case AM :       agc[AM] = newAGC;
 8000a22:	701a      	strb	r2, [r3, #0]
      Decay[AM]   = AGC_decay[newAGC];
 8000a24:	482c      	ldr	r0, [pc, #176]	; (8000ad8 <Tune_Preset+0x250>)
 8000a26:	6809      	ldr	r1, [r1, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000a28:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8000a2c:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <Tune_Preset+0x254>)
      Decay[AM]   = AGC_decay[newAGC];
 8000a2e:	6001      	str	r1, [r0, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000a30:	801a      	strh	r2, [r3, #0]
  SetBW( psets[Idx].bw);
 8000a32:	4425      	add	r5, r4
				             (float *)FFTmaskAM_I[AMindex], FFTmask, FFTLEN);	
 8000a34:	492f      	ldr	r1, [pc, #188]	; (8000af4 <Tune_Preset+0x26c>)
      SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex], 
 8000a36:	4f30      	ldr	r7, [pc, #192]	; (8000af8 <Tune_Preset+0x270>)
 8000a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SetBW( psets[Idx].bw);
 8000a3c:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
	CurrentBW = newbw;
 8000a40:	4821      	ldr	r0, [pc, #132]	; (8000ac8 <Tune_Preset+0x240>)
      AMindex = (newbw == Narrow) ? 0 : 1;
 8000a42:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 8000b0c <Tune_Preset+0x284>
  SetBW( psets[Idx].bw);
 8000a46:	7d6a      	ldrb	r2, [r5, #21]
      AMindex = (newbw == Narrow) ? 0 : 1;
 8000a48:	1c15      	adds	r5, r2, #0
      bw[AM] = newbw;
 8000a4a:	f888 2000 	strb.w	r2, [r8]
      AMindex = (newbw == Narrow) ? 0 : 1;
 8000a4e:	bf18      	it	ne
 8000a50:	2501      	movne	r5, #1
 8000a52:	e79e      	b.n	8000992 <Tune_Preset+0x10a>
      Decay[USB]  = AGC_decay[newAGC];
 8000a54:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <Tune_Preset+0x248>)
      Hcount[USB] = Hangcount[newAGC]; break;
 8000a56:	481f      	ldr	r0, [pc, #124]	; (8000ad4 <Tune_Preset+0x24c>)
      Decay[USB]  = AGC_decay[newAGC];
 8000a58:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000a5c:	491e      	ldr	r1, [pc, #120]	; (8000ad8 <Tune_Preset+0x250>)
      Hcount[USB] = Hangcount[newAGC]; break;
 8000a5e:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[USB]  = AGC_decay[newAGC];
 8000a62:	6818      	ldr	r0, [r3, #0]
      Hcount[USB] = Hangcount[newAGC]; break;
 8000a64:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <Tune_Preset+0x254>)
      Decay[USB]  = AGC_decay[newAGC];
 8000a66:	6088      	str	r0, [r1, #8]
      Hcount[USB] = Hangcount[newAGC]; break;
 8000a68:	809a      	strh	r2, [r3, #4]
 8000a6a:	e7a8      	b.n	80009be <Tune_Preset+0x136>
      Decay[LSB]  = AGC_decay[newAGC];
 8000a6c:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <Tune_Preset+0x248>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000a6e:	4819      	ldr	r0, [pc, #100]	; (8000ad4 <Tune_Preset+0x24c>)
      Decay[LSB]  = AGC_decay[newAGC];
 8000a70:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000a74:	4918      	ldr	r1, [pc, #96]	; (8000ad8 <Tune_Preset+0x250>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000a76:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[LSB]  = AGC_decay[newAGC];
 8000a7a:	6818      	ldr	r0, [r3, #0]
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <Tune_Preset+0x254>)
      Decay[LSB]  = AGC_decay[newAGC];
 8000a7e:	6048      	str	r0, [r1, #4]
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000a80:	805a      	strh	r2, [r3, #2]
 8000a82:	e7b9      	b.n	80009f8 <Tune_Preset+0x170>
      Decay[AM]   = AGC_decay[newAGC];
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <Tune_Preset+0x248>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000a86:	4813      	ldr	r0, [pc, #76]	; (8000ad4 <Tune_Preset+0x24c>)
      Decay[AM]   = AGC_decay[newAGC];
 8000a88:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000a8c:	4912      	ldr	r1, [pc, #72]	; (8000ad8 <Tune_Preset+0x250>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000a8e:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[AM]   = AGC_decay[newAGC];
 8000a92:	6818      	ldr	r0, [r3, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <Tune_Preset+0x254>)
      Decay[AM]   = AGC_decay[newAGC];
 8000a96:	6008      	str	r0, [r1, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000a98:	801a      	strh	r2, [r3, #0]
 8000a9a:	e7ca      	b.n	8000a32 <Tune_Preset+0x1aa>
      Decay[CW]   = AGC_decay[newAGC];
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <Tune_Preset+0x248>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000a9e:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <Tune_Preset+0x24c>)
      Decay[CW]   = AGC_decay[newAGC];
 8000aa0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000aa4:	490c      	ldr	r1, [pc, #48]	; (8000ad8 <Tune_Preset+0x250>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000aa6:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[CW]   = AGC_decay[newAGC];
 8000aaa:	6818      	ldr	r0, [r3, #0]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <Tune_Preset+0x254>)
      Decay[CW]   = AGC_decay[newAGC];
 8000aae:	60c8      	str	r0, [r1, #12]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000ab0:	80da      	strh	r2, [r3, #6]
 8000ab2:	e75e      	b.n	8000972 <Tune_Preset+0xea>
 8000ab4:	24008760 	.word	0x24008760
 8000ab8:	24009d1c 	.word	0x24009d1c
 8000abc:	2400c23c 	.word	0x2400c23c
 8000ac0:	24007688 	.word	0x24007688
 8000ac4:	24000500 	.word	0x24000500
 8000ac8:	24000910 	.word	0x24000910
 8000acc:	240042dc 	.word	0x240042dc
 8000ad0:	2400c22c 	.word	0x2400c22c
 8000ad4:	24009d18 	.word	0x24009d18
 8000ad8:	24002918 	.word	0x24002918
 8000adc:	24007ec8 	.word	0x24007ec8
 8000ae0:	08012e18 	.word	0x08012e18
 8000ae4:	08014e18 	.word	0x08014e18
 8000ae8:	20004600 	.word	0x20004600
 8000aec:	08016e18 	.word	0x08016e18
 8000af0:	08018e18 	.word	0x08018e18
 8000af4:	0800ee18 	.word	0x0800ee18
 8000af8:	08010e18 	.word	0x08010e18
 8000afc:	24008d0c 	.word	0x24008d0c
 8000b00:	24008d08 	.word	0x24008d08
 8000b04:	24007ed4 	.word	0x24007ed4
 8000b08:	2400d640 	.word	0x2400d640
 8000b0c:	2400d642 	.word	0x2400d642

08000b10 <SetAGC>:
	switch(CurrentMode)
 8000b10:	4b23      	ldr	r3, [pc, #140]	; (8000ba0 <SetAGC+0x90>)
	CurrentAGC =newAGC;
 8000b12:	4a24      	ldr	r2, [pc, #144]	; (8000ba4 <SetAGC+0x94>)
	switch(CurrentMode)
 8000b14:	781b      	ldrb	r3, [r3, #0]
{
 8000b16:	b430      	push	{r4, r5}
	CurrentAGC =newAGC;
 8000b18:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	d810      	bhi.n	8000b40 <SetAGC+0x30>
 8000b1e:	e8df f003 	tbb	[pc, r3]
 8000b22:	202f      	.short	0x202f
 8000b24:	0211      	.short	0x0211
      Decay[CW]   = AGC_decay[newAGC];
 8000b26:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <SetAGC+0x98>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000b28:	4a20      	ldr	r2, [pc, #128]	; (8000bac <SetAGC+0x9c>)
      Decay[CW]   = AGC_decay[newAGC];
 8000b2a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000b2e:	4c20      	ldr	r4, [pc, #128]	; (8000bb0 <SetAGC+0xa0>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000b30:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
      Decay[CW]   = AGC_decay[newAGC];
 8000b34:	681d      	ldr	r5, [r3, #0]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000b36:	4a1f      	ldr	r2, [pc, #124]	; (8000bb4 <SetAGC+0xa4>)
    case CW :       agc[CW] = newAGC;
 8000b38:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <SetAGC+0xa8>)
      Decay[CW]   = AGC_decay[newAGC];
 8000b3a:	60e5      	str	r5, [r4, #12]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000b3c:	80d1      	strh	r1, [r2, #6]
    case CW :       agc[CW] = newAGC;
 8000b3e:	70d8      	strb	r0, [r3, #3]
}	
 8000b40:	bc30      	pop	{r4, r5}
 8000b42:	4770      	bx	lr
      Decay[USB]  = AGC_decay[newAGC];
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <SetAGC+0x98>)
      Hcount[USB] = Hangcount[newAGC]; break;
 8000b46:	4a19      	ldr	r2, [pc, #100]	; (8000bac <SetAGC+0x9c>)
      Decay[USB]  = AGC_decay[newAGC];
 8000b48:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000b4c:	4c18      	ldr	r4, [pc, #96]	; (8000bb0 <SetAGC+0xa0>)
      Hcount[USB] = Hangcount[newAGC]; break;
 8000b4e:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
      Decay[USB]  = AGC_decay[newAGC];
 8000b52:	681d      	ldr	r5, [r3, #0]
      Hcount[USB] = Hangcount[newAGC]; break;
 8000b54:	4a17      	ldr	r2, [pc, #92]	; (8000bb4 <SetAGC+0xa4>)
    case USB :      agc[USB] = newAGC;
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <SetAGC+0xa8>)
      Decay[USB]  = AGC_decay[newAGC];
 8000b58:	60a5      	str	r5, [r4, #8]
      Hcount[USB] = Hangcount[newAGC]; break;
 8000b5a:	8091      	strh	r1, [r2, #4]
    case USB :      agc[USB] = newAGC;
 8000b5c:	7098      	strb	r0, [r3, #2]
}	
 8000b5e:	bc30      	pop	{r4, r5}
 8000b60:	4770      	bx	lr
      Decay[LSB]  = AGC_decay[newAGC];
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <SetAGC+0x98>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000b64:	4a11      	ldr	r2, [pc, #68]	; (8000bac <SetAGC+0x9c>)
      Decay[LSB]  = AGC_decay[newAGC];
 8000b66:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000b6a:	4c11      	ldr	r4, [pc, #68]	; (8000bb0 <SetAGC+0xa0>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000b6c:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
      Decay[LSB]  = AGC_decay[newAGC];
 8000b70:	681d      	ldr	r5, [r3, #0]
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000b72:	4a10      	ldr	r2, [pc, #64]	; (8000bb4 <SetAGC+0xa4>)
    case LSB :      agc[LSB] = newAGC;
 8000b74:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <SetAGC+0xa8>)
      Decay[LSB]  = AGC_decay[newAGC];
 8000b76:	6065      	str	r5, [r4, #4]
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000b78:	8051      	strh	r1, [r2, #2]
    case LSB :      agc[LSB] = newAGC;
 8000b7a:	7058      	strb	r0, [r3, #1]
}	
 8000b7c:	bc30      	pop	{r4, r5}
 8000b7e:	4770      	bx	lr
      Decay[AM]   = AGC_decay[newAGC];
 8000b80:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <SetAGC+0x98>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000b82:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <SetAGC+0x9c>)
      Decay[AM]   = AGC_decay[newAGC];
 8000b84:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000b88:	4c09      	ldr	r4, [pc, #36]	; (8000bb0 <SetAGC+0xa0>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000b8a:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
      Decay[AM]   = AGC_decay[newAGC];
 8000b8e:	681d      	ldr	r5, [r3, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000b90:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <SetAGC+0xa4>)
	  case AM :       agc[AM] = newAGC;
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <SetAGC+0xa8>)
      Decay[AM]   = AGC_decay[newAGC];
 8000b94:	6025      	str	r5, [r4, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000b96:	8011      	strh	r1, [r2, #0]
	  case AM :       agc[AM] = newAGC;
 8000b98:	7018      	strb	r0, [r3, #0]
}	
 8000b9a:	bc30      	pop	{r4, r5}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	2400c23c 	.word	0x2400c23c
 8000ba4:	24000500 	.word	0x24000500
 8000ba8:	2400c22c 	.word	0x2400c22c
 8000bac:	24009d18 	.word	0x24009d18
 8000bb0:	24002918 	.word	0x24002918
 8000bb4:	24007ec8 	.word	0x24007ec8
 8000bb8:	24007688 	.word	0x24007688

08000bbc <SetMode>:
{
 8000bbc:	b570      	push	{r4, r5, r6, lr}
	CurrentMode = newmode;
 8000bbe:	4c66      	ldr	r4, [pc, #408]	; (8000d58 <SetMode+0x19c>)
 8000bc0:	7020      	strb	r0, [r4, #0]
	switch(CurrentMode)
 8000bc2:	2803      	cmp	r0, #3
 8000bc4:	d80e      	bhi.n	8000be4 <SetMode+0x28>
 8000bc6:	e8df f000 	tbb	[pc, r0]
 8000bca:	4260      	.short	0x4260
 8000bcc:	0e33      	.short	0x0e33
      Decay[CW]   = AGC_decay[newAGC];
 8000bce:	4b63      	ldr	r3, [pc, #396]	; (8000d5c <SetMode+0x1a0>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000bd0:	4863      	ldr	r0, [pc, #396]	; (8000d60 <SetMode+0x1a4>)
      Decay[CW]   = AGC_decay[newAGC];
 8000bd2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000bd6:	4963      	ldr	r1, [pc, #396]	; (8000d64 <SetMode+0x1a8>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000bd8:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[CW]   = AGC_decay[newAGC];
 8000bdc:	6818      	ldr	r0, [r3, #0]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000bde:	4b62      	ldr	r3, [pc, #392]	; (8000d68 <SetMode+0x1ac>)
      Decay[CW]   = AGC_decay[newAGC];
 8000be0:	60c8      	str	r0, [r1, #12]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000be2:	80da      	strh	r2, [r3, #6]
      break; 

    default :
      break;			
	}
}	
 8000be4:	bd70      	pop	{r4, r5, r6, pc}
      SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000be6:	4a61      	ldr	r2, [pc, #388]	; (8000d6c <SetMode+0x1b0>)
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 8000be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
	CurrentBW = newbw;
 8000bec:	4860      	ldr	r0, [pc, #384]	; (8000d70 <SetMode+0x1b4>)
      SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000bee:	78d5      	ldrb	r5, [r2, #3]
				             (float *)FFTmaskCW_I[CWindex], FFTmask, FFTLEN);	
 8000bf0:	4960      	ldr	r1, [pc, #384]	; (8000d74 <SetMode+0x1b8>)
      CWindex = (newbw == Narrow) ? 0 : 1;
 8000bf2:	1c2a      	adds	r2, r5, #0
	CurrentBW = newbw;
 8000bf4:	7005      	strb	r5, [r0, #0]
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 8000bf6:	4e60      	ldr	r6, [pc, #384]	; (8000d78 <SetMode+0x1bc>)
      CWindex = (newbw == Narrow) ? 0 : 1;
 8000bf8:	bf18      	it	ne
 8000bfa:	2201      	movne	r2, #1
 8000bfc:	4d5f      	ldr	r5, [pc, #380]	; (8000d7c <SetMode+0x1c0>)
 8000bfe:	0310      	lsls	r0, r2, #12
 8000c00:	802a      	strh	r2, [r5, #0]
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 8000c02:	4a5f      	ldr	r2, [pc, #380]	; (8000d80 <SetMode+0x1c4>)
 8000c04:	4401      	add	r1, r0
 8000c06:	4430      	add	r0, r6
 8000c08:	f001 f9dc 	bl	8001fc4 <SDR_2R_toC_f32>
      SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000c0c:	4b5d      	ldr	r3, [pc, #372]	; (8000d84 <SetMode+0x1c8>)
	CurrentAGC =newAGC;
 8000c0e:	485e      	ldr	r0, [pc, #376]	; (8000d88 <SetMode+0x1cc>)
      SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000c10:	78da      	ldrb	r2, [r3, #3]
	switch(CurrentMode)
 8000c12:	7821      	ldrb	r1, [r4, #0]
	CurrentAGC =newAGC;
 8000c14:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8000c16:	2903      	cmp	r1, #3
 8000c18:	d8e4      	bhi.n	8000be4 <SetMode+0x28>
 8000c1a:	a001      	add	r0, pc, #4	; (adr r0, 8000c20 <SetMode+0x64>)
 8000c1c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8000c20:	08000cf7 	.word	0x08000cf7
 8000c24:	08000cdd 	.word	0x08000cdd
 8000c28:	08000cc3 	.word	0x08000cc3
 8000c2c:	08000bcf 	.word	0x08000bcf
      SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000c30:	4b4e      	ldr	r3, [pc, #312]	; (8000d6c <SetMode+0x1b0>)
 8000c32:	7898      	ldrb	r0, [r3, #2]
 8000c34:	f7ff fdb6 	bl	80007a4 <SetBW>
 8000c38:	4b52      	ldr	r3, [pc, #328]	; (8000d84 <SetMode+0x1c8>)
	CurrentAGC =newAGC;
 8000c3a:	4853      	ldr	r0, [pc, #332]	; (8000d88 <SetMode+0x1cc>)
      SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000c3c:	789a      	ldrb	r2, [r3, #2]
	switch(CurrentMode)
 8000c3e:	7821      	ldrb	r1, [r4, #0]
	CurrentAGC =newAGC;
 8000c40:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8000c42:	2903      	cmp	r1, #3
 8000c44:	d8ce      	bhi.n	8000be4 <SetMode+0x28>
 8000c46:	e8df f001 	tbb	[pc, r1]
 8000c4a:	4956      	.short	0x4956
 8000c4c:	2f63      	.short	0x2f63
      SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000c4e:	4a47      	ldr	r2, [pc, #284]	; (8000d6c <SetMode+0x1b0>)
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex], 
 8000c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
	CurrentBW = newbw;
 8000c54:	4846      	ldr	r0, [pc, #280]	; (8000d70 <SetMode+0x1b4>)
      SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000c56:	7855      	ldrb	r5, [r2, #1]
				             (float *)FFTmaskSSB_I[LSBindex], FFTmask, FFTLEN);	
 8000c58:	494c      	ldr	r1, [pc, #304]	; (8000d8c <SetMode+0x1d0>)
      LSBindex = (newbw == Narrow) ? 0 : 1;
 8000c5a:	1c2a      	adds	r2, r5, #0
	CurrentBW = newbw;
 8000c5c:	7005      	strb	r5, [r0, #0]
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex], 
 8000c5e:	4e4c      	ldr	r6, [pc, #304]	; (8000d90 <SetMode+0x1d4>)
      LSBindex = (newbw == Narrow) ? 0 : 1;
 8000c60:	bf18      	it	ne
 8000c62:	2201      	movne	r2, #1
 8000c64:	4d4b      	ldr	r5, [pc, #300]	; (8000d94 <SetMode+0x1d8>)
 8000c66:	0310      	lsls	r0, r2, #12
 8000c68:	802a      	strh	r2, [r5, #0]
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex], 
 8000c6a:	4a45      	ldr	r2, [pc, #276]	; (8000d80 <SetMode+0x1c4>)
 8000c6c:	4401      	add	r1, r0
 8000c6e:	4430      	add	r0, r6
 8000c70:	f001 f9a8 	bl	8001fc4 <SDR_2R_toC_f32>
      SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000c74:	4b43      	ldr	r3, [pc, #268]	; (8000d84 <SetMode+0x1c8>)
	CurrentAGC =newAGC;
 8000c76:	4844      	ldr	r0, [pc, #272]	; (8000d88 <SetMode+0x1cc>)
      SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000c78:	785a      	ldrb	r2, [r3, #1]
	switch(CurrentMode)
 8000c7a:	7821      	ldrb	r1, [r4, #0]
	CurrentAGC =newAGC;
 8000c7c:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8000c7e:	2903      	cmp	r1, #3
 8000c80:	d8b0      	bhi.n	8000be4 <SetMode+0x28>
 8000c82:	e8df f001 	tbb	[pc, r1]
 8000c86:	5138      	.short	0x5138
 8000c88:	111e      	.short	0x111e
      SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000c8a:	4b38      	ldr	r3, [pc, #224]	; (8000d6c <SetMode+0x1b0>)
 8000c8c:	7818      	ldrb	r0, [r3, #0]
 8000c8e:	f7ff fd89 	bl	80007a4 <SetBW>
 8000c92:	4b3c      	ldr	r3, [pc, #240]	; (8000d84 <SetMode+0x1c8>)
	CurrentAGC =newAGC;
 8000c94:	483c      	ldr	r0, [pc, #240]	; (8000d88 <SetMode+0x1cc>)
      SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000c96:	781a      	ldrb	r2, [r3, #0]
	switch(CurrentMode)
 8000c98:	7821      	ldrb	r1, [r4, #0]
	CurrentAGC =newAGC;
 8000c9a:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8000c9c:	2903      	cmp	r1, #3
 8000c9e:	d8a1      	bhi.n	8000be4 <SetMode+0x28>
 8000ca0:	e8df f001 	tbb	[pc, r1]
 8000ca4:	020f1c4e 	.word	0x020f1c4e
      Decay[CW]   = AGC_decay[newAGC];
 8000ca8:	492c      	ldr	r1, [pc, #176]	; (8000d5c <SetMode+0x1a0>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000caa:	482d      	ldr	r0, [pc, #180]	; (8000d60 <SetMode+0x1a4>)
      Decay[CW]   = AGC_decay[newAGC];
 8000cac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8000cb0:	4c2c      	ldr	r4, [pc, #176]	; (8000d64 <SetMode+0x1a8>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000cb2:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
      Decay[CW]   = AGC_decay[newAGC];
 8000cb6:	680d      	ldr	r5, [r1, #0]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000cb8:	492b      	ldr	r1, [pc, #172]	; (8000d68 <SetMode+0x1ac>)
    case CW :       agc[CW] = newAGC;
 8000cba:	70da      	strb	r2, [r3, #3]
      Decay[CW]   = AGC_decay[newAGC];
 8000cbc:	60e5      	str	r5, [r4, #12]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000cbe:	80c8      	strh	r0, [r1, #6]
}	
 8000cc0:	bd70      	pop	{r4, r5, r6, pc}
      Decay[USB]  = AGC_decay[newAGC];
 8000cc2:	4926      	ldr	r1, [pc, #152]	; (8000d5c <SetMode+0x1a0>)
      Hcount[USB] = Hangcount[newAGC]; break;
 8000cc4:	4826      	ldr	r0, [pc, #152]	; (8000d60 <SetMode+0x1a4>)
      Decay[USB]  = AGC_decay[newAGC];
 8000cc6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8000cca:	4c26      	ldr	r4, [pc, #152]	; (8000d64 <SetMode+0x1a8>)
      Hcount[USB] = Hangcount[newAGC]; break;
 8000ccc:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
      Decay[USB]  = AGC_decay[newAGC];
 8000cd0:	680d      	ldr	r5, [r1, #0]
      Hcount[USB] = Hangcount[newAGC]; break;
 8000cd2:	4925      	ldr	r1, [pc, #148]	; (8000d68 <SetMode+0x1ac>)
    case USB :      agc[USB] = newAGC;
 8000cd4:	709a      	strb	r2, [r3, #2]
      Decay[USB]  = AGC_decay[newAGC];
 8000cd6:	60a5      	str	r5, [r4, #8]
      Hcount[USB] = Hangcount[newAGC]; break;
 8000cd8:	8088      	strh	r0, [r1, #4]
}	
 8000cda:	bd70      	pop	{r4, r5, r6, pc}
      Decay[LSB]  = AGC_decay[newAGC];
 8000cdc:	491f      	ldr	r1, [pc, #124]	; (8000d5c <SetMode+0x1a0>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000cde:	4820      	ldr	r0, [pc, #128]	; (8000d60 <SetMode+0x1a4>)
      Decay[LSB]  = AGC_decay[newAGC];
 8000ce0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8000ce4:	4c1f      	ldr	r4, [pc, #124]	; (8000d64 <SetMode+0x1a8>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000ce6:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
      Decay[LSB]  = AGC_decay[newAGC];
 8000cea:	680d      	ldr	r5, [r1, #0]
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000cec:	491e      	ldr	r1, [pc, #120]	; (8000d68 <SetMode+0x1ac>)
    case LSB :      agc[LSB] = newAGC;
 8000cee:	705a      	strb	r2, [r3, #1]
      Decay[LSB]  = AGC_decay[newAGC];
 8000cf0:	6065      	str	r5, [r4, #4]
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000cf2:	8048      	strh	r0, [r1, #2]
}	
 8000cf4:	bd70      	pop	{r4, r5, r6, pc}
      Decay[AM]   = AGC_decay[newAGC];
 8000cf6:	4919      	ldr	r1, [pc, #100]	; (8000d5c <SetMode+0x1a0>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000cf8:	4819      	ldr	r0, [pc, #100]	; (8000d60 <SetMode+0x1a4>)
      Decay[AM]   = AGC_decay[newAGC];
 8000cfa:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8000cfe:	4c19      	ldr	r4, [pc, #100]	; (8000d64 <SetMode+0x1a8>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000d00:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
      Decay[AM]   = AGC_decay[newAGC];
 8000d04:	680d      	ldr	r5, [r1, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000d06:	4918      	ldr	r1, [pc, #96]	; (8000d68 <SetMode+0x1ac>)
	  case AM :       agc[AM] = newAGC;
 8000d08:	701a      	strb	r2, [r3, #0]
      Decay[AM]   = AGC_decay[newAGC];
 8000d0a:	6025      	str	r5, [r4, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000d0c:	8008      	strh	r0, [r1, #0]
}	
 8000d0e:	bd70      	pop	{r4, r5, r6, pc}
      Decay[USB]  = AGC_decay[newAGC];
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <SetMode+0x1a0>)
      Hcount[USB] = Hangcount[newAGC]; break;
 8000d12:	4813      	ldr	r0, [pc, #76]	; (8000d60 <SetMode+0x1a4>)
      Decay[USB]  = AGC_decay[newAGC];
 8000d14:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000d18:	4912      	ldr	r1, [pc, #72]	; (8000d64 <SetMode+0x1a8>)
      Hcount[USB] = Hangcount[newAGC]; break;
 8000d1a:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[USB]  = AGC_decay[newAGC];
 8000d1e:	6818      	ldr	r0, [r3, #0]
      Hcount[USB] = Hangcount[newAGC]; break;
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <SetMode+0x1ac>)
      Decay[USB]  = AGC_decay[newAGC];
 8000d22:	6088      	str	r0, [r1, #8]
      Hcount[USB] = Hangcount[newAGC]; break;
 8000d24:	809a      	strh	r2, [r3, #4]
}	
 8000d26:	bd70      	pop	{r4, r5, r6, pc}
      Decay[LSB]  = AGC_decay[newAGC];
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <SetMode+0x1a0>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000d2a:	480d      	ldr	r0, [pc, #52]	; (8000d60 <SetMode+0x1a4>)
      Decay[LSB]  = AGC_decay[newAGC];
 8000d2c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000d30:	490c      	ldr	r1, [pc, #48]	; (8000d64 <SetMode+0x1a8>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000d32:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[LSB]  = AGC_decay[newAGC];
 8000d36:	6818      	ldr	r0, [r3, #0]
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <SetMode+0x1ac>)
      Decay[LSB]  = AGC_decay[newAGC];
 8000d3a:	6048      	str	r0, [r1, #4]
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000d3c:	805a      	strh	r2, [r3, #2]
}	
 8000d3e:	bd70      	pop	{r4, r5, r6, pc}
      Decay[AM]   = AGC_decay[newAGC];
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <SetMode+0x1a0>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000d42:	4807      	ldr	r0, [pc, #28]	; (8000d60 <SetMode+0x1a4>)
      Decay[AM]   = AGC_decay[newAGC];
 8000d44:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000d48:	4906      	ldr	r1, [pc, #24]	; (8000d64 <SetMode+0x1a8>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000d4a:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[AM]   = AGC_decay[newAGC];
 8000d4e:	6818      	ldr	r0, [r3, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <SetMode+0x1ac>)
      Decay[AM]   = AGC_decay[newAGC];
 8000d52:	6008      	str	r0, [r1, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000d54:	801a      	strh	r2, [r3, #0]
}	
 8000d56:	bd70      	pop	{r4, r5, r6, pc}
 8000d58:	2400c23c 	.word	0x2400c23c
 8000d5c:	2400c22c 	.word	0x2400c22c
 8000d60:	24009d18 	.word	0x24009d18
 8000d64:	24002918 	.word	0x24002918
 8000d68:	24007ec8 	.word	0x24007ec8
 8000d6c:	24008d0c 	.word	0x24008d0c
 8000d70:	24000910 	.word	0x24000910
 8000d74:	08012e18 	.word	0x08012e18
 8000d78:	08014e18 	.word	0x08014e18
 8000d7c:	24008d08 	.word	0x24008d08
 8000d80:	20004600 	.word	0x20004600
 8000d84:	24007688 	.word	0x24007688
 8000d88:	24000500 	.word	0x24000500
 8000d8c:	08016e18 	.word	0x08016e18
 8000d90:	08018e18 	.word	0x08018e18
 8000d94:	2400d640 	.word	0x2400d640

08000d98 <SetFstep>:

//-----------------------------------------------------------------------------
// Set the frequency step according to the radio button pressed by the user
void SetFstep(int idx)
{
  Fstep = pow(10, 5 - idx);	
 8000d98:	f1c0 0005 	rsb	r0, r0, #5
 8000d9c:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8000da0:	ee07 0a90 	vmov	s15, r0
{
 8000da4:	b508      	push	{r3, lr}
  Fstep = pow(10, 5 - idx);	
 8000da6:	eeb8 1be7 	vcvt.f64.s32	d1, s15
 8000daa:	f00c fb89 	bl	800d4c0 <pow>
 8000dae:	eebc 0bc0 	vcvt.u32.f64	s0, d0
 8000db2:	4b02      	ldr	r3, [pc, #8]	; (8000dbc <SetFstep+0x24>)
 8000db4:	ed83 0a00 	vstr	s0, [r3]
}	
 8000db8:	bd08      	pop	{r3, pc}
 8000dba:	bf00      	nop
 8000dbc:	2400c234 	.word	0x2400c234

08000dc0 <FplusClicked>:
//-----------------------------------------------------------------------------
// Increase the frequency by the value of the current step
void FplusClicked()
{	
	LOfreq += Fstep;
 8000dc0:	4b81      	ldr	r3, [pc, #516]	; (8000fc8 <FplusClicked+0x208>)
 8000dc2:	4a82      	ldr	r2, [pc, #520]	; (8000fcc <FplusClicked+0x20c>)
 8000dc4:	edd3 7a00 	vldr	s15, [r3]
 8000dc8:	ed92 7a00 	vldr	s14, [r2]
 8000dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
{	
 8000dd0:	b570      	push	{r4, r5, r6, lr}
  LOfreq  = min(LOfreq, 50000000.f);
  psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000dd2:	4e7f      	ldr	r6, [pc, #508]	; (8000fd0 <FplusClicked+0x210>)
	LOfreq += Fstep;
 8000dd4:	ee77 7a87 	vadd.f32	s15, s15, s14
  psets[0].bw = bw[CurrentMode];
 8000dd8:	4d7e      	ldr	r5, [pc, #504]	; (8000fd4 <FplusClicked+0x214>)
  psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000dda:	7833      	ldrb	r3, [r6, #0]
 8000ddc:	4c7e      	ldr	r4, [pc, #504]	; (8000fd8 <FplusClicked+0x218>)
  LOfreq  = min(LOfreq, 50000000.f);
 8000dde:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8000fdc <FplusClicked+0x21c>
  psets[0].bw = bw[CurrentMode];
 8000de2:	5ce9      	ldrb	r1, [r5, r3]
  LOfreq  = min(LOfreq, 50000000.f);
 8000de4:	fec7 7ac7 	vminnm.f32	s15, s15, s14
  psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000de8:	7523      	strb	r3, [r4, #20]
  LOfreq  = min(LOfreq, 50000000.f);
 8000dea:	edc2 7a00 	vstr	s15, [r2]
  psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000dee:	edc4 7a04 	vstr	s15, [r4, #16]
  psets[0].bw = bw[CurrentMode];
 8000df2:	7561      	strb	r1, [r4, #21]
	switch(CurrentMode)
 8000df4:	2b03      	cmp	r3, #3
 8000df6:	d83e      	bhi.n	8000e76 <FplusClicked+0xb6>
 8000df8:	e8df f003 	tbb	[pc, r3]
 8000dfc:	0212202e 	.word	0x0212202e
      SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000e00:	78e8      	ldrb	r0, [r5, #3]
 8000e02:	f7ff fccf 	bl	80007a4 <SetBW>
 8000e06:	4b76      	ldr	r3, [pc, #472]	; (8000fe0 <FplusClicked+0x220>)
	CurrentAGC =newAGC;
 8000e08:	4876      	ldr	r0, [pc, #472]	; (8000fe4 <FplusClicked+0x224>)
      SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000e0a:	78da      	ldrb	r2, [r3, #3]
	switch(CurrentMode)
 8000e0c:	7831      	ldrb	r1, [r6, #0]
	CurrentAGC =newAGC;
 8000e0e:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8000e10:	2903      	cmp	r1, #3
 8000e12:	d82f      	bhi.n	8000e74 <FplusClicked+0xb4>
 8000e14:	e8df f011 	tbh	[pc, r1, lsl #1]
 8000e18:	0074008c 	.word	0x0074008c
 8000e1c:	00cb005c 	.word	0x00cb005c
      SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000e20:	78a8      	ldrb	r0, [r5, #2]
 8000e22:	f7ff fcbf 	bl	80007a4 <SetBW>
 8000e26:	4b6e      	ldr	r3, [pc, #440]	; (8000fe0 <FplusClicked+0x220>)
	CurrentAGC =newAGC;
 8000e28:	486e      	ldr	r0, [pc, #440]	; (8000fe4 <FplusClicked+0x224>)
      SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000e2a:	789a      	ldrb	r2, [r3, #2]
	switch(CurrentMode)
 8000e2c:	7831      	ldrb	r1, [r6, #0]
	CurrentAGC =newAGC;
 8000e2e:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8000e30:	2903      	cmp	r1, #3
 8000e32:	d81f      	bhi.n	8000e74 <FplusClicked+0xb4>
 8000e34:	e8df f001 	tbb	[pc, r1]
 8000e38:	2794647c 	.word	0x2794647c
      SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000e3c:	7868      	ldrb	r0, [r5, #1]
 8000e3e:	f7ff fcb1 	bl	80007a4 <SetBW>
 8000e42:	4b67      	ldr	r3, [pc, #412]	; (8000fe0 <FplusClicked+0x220>)
	CurrentAGC =newAGC;
 8000e44:	4867      	ldr	r0, [pc, #412]	; (8000fe4 <FplusClicked+0x224>)
      SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000e46:	785a      	ldrb	r2, [r3, #1]
	switch(CurrentMode)
 8000e48:	7831      	ldrb	r1, [r6, #0]
	CurrentAGC =newAGC;
 8000e4a:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8000e4c:	2903      	cmp	r1, #3
 8000e4e:	d811      	bhi.n	8000e74 <FplusClicked+0xb4>
 8000e50:	e8df f001 	tbb	[pc, r1]
 8000e54:	193e936e 	.word	0x193e936e
      SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000e58:	7828      	ldrb	r0, [r5, #0]
 8000e5a:	f7ff fca3 	bl	80007a4 <SetBW>
 8000e5e:	4b60      	ldr	r3, [pc, #384]	; (8000fe0 <FplusClicked+0x220>)
	CurrentAGC =newAGC;
 8000e60:	4860      	ldr	r0, [pc, #384]	; (8000fe4 <FplusClicked+0x224>)
      SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000e62:	781a      	ldrb	r2, [r3, #0]
	switch(CurrentMode)
 8000e64:	7831      	ldrb	r1, [r6, #0]
	CurrentAGC =newAGC;
 8000e66:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8000e68:	2903      	cmp	r1, #3
 8000e6a:	d803      	bhi.n	8000e74 <FplusClicked+0xb4>
 8000e6c:	e8df f001 	tbb	[pc, r1]
 8000e70:	0b304892 	.word	0x0b304892
 8000e74:	7d61      	ldrb	r1, [r4, #21]
	CurrentBW = newbw;
 8000e76:	4b5c      	ldr	r3, [pc, #368]	; (8000fe8 <FplusClicked+0x228>)
	strcpy(msg, psets[Idx].name);
 8000e78:	485c      	ldr	r0, [pc, #368]	; (8000fec <FplusClicked+0x22c>)
	CurrentBW = newbw;
 8000e7a:	7019      	strb	r1, [r3, #0]
	strcpy(msg, psets[Idx].name);
 8000e7c:	4956      	ldr	r1, [pc, #344]	; (8000fd8 <FplusClicked+0x218>)
  Tune_Preset(0);  // preset 0 means "User tuning"
}	
 8000e7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	strcpy(msg, psets[Idx].name);
 8000e82:	f00a bed9 	b.w	800bc38 <strcpy>
      Decay[CW]   = AGC_decay[newAGC];
 8000e86:	495a      	ldr	r1, [pc, #360]	; (8000ff0 <FplusClicked+0x230>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000e88:	4e5a      	ldr	r6, [pc, #360]	; (8000ff4 <FplusClicked+0x234>)
      Decay[CW]   = AGC_decay[newAGC];
 8000e8a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    case CW :       agc[CW] = newAGC;
 8000e8e:	70da      	strb	r2, [r3, #3]
      Decay[CW]   = AGC_decay[newAGC];
 8000e90:	4859      	ldr	r0, [pc, #356]	; (8000ff8 <FplusClicked+0x238>)
 8000e92:	6809      	ldr	r1, [r1, #0]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000e94:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8000e98:	4b58      	ldr	r3, [pc, #352]	; (8000ffc <FplusClicked+0x23c>)
 8000e9a:	7d64      	ldrb	r4, [r4, #21]
      Decay[CW]   = AGC_decay[newAGC];
 8000e9c:	60c1      	str	r1, [r0, #12]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000e9e:	80da      	strh	r2, [r3, #6]
      CWindex = (newbw == Narrow) ? 0 : 1;
 8000ea0:	1c22      	adds	r2, r4, #0
      bw[CW] = newbw;
 8000ea2:	70ec      	strb	r4, [r5, #3]
				             (float *)FFTmaskCW_I[CWindex], FFTmask, FFTLEN);	
 8000ea4:	4956      	ldr	r1, [pc, #344]	; (8001000 <FplusClicked+0x240>)
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 8000ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
      CWindex = (newbw == Narrow) ? 0 : 1;
 8000eaa:	bf18      	it	ne
 8000eac:	2201      	movne	r2, #1
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 8000eae:	4e55      	ldr	r6, [pc, #340]	; (8001004 <FplusClicked+0x244>)
      CWindex = (newbw == Narrow) ? 0 : 1;
 8000eb0:	4d55      	ldr	r5, [pc, #340]	; (8001008 <FplusClicked+0x248>)
 8000eb2:	0310      	lsls	r0, r2, #12
 8000eb4:	802a      	strh	r2, [r5, #0]
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 8000eb6:	4401      	add	r1, r0
	CurrentBW = newbw;
 8000eb8:	4d4b      	ldr	r5, [pc, #300]	; (8000fe8 <FplusClicked+0x228>)
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 8000eba:	4430      	add	r0, r6
 8000ebc:	4a53      	ldr	r2, [pc, #332]	; (800100c <FplusClicked+0x24c>)
	CurrentBW = newbw;
 8000ebe:	702c      	strb	r4, [r5, #0]
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 8000ec0:	f001 f880 	bl	8001fc4 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8000ec4:	4944      	ldr	r1, [pc, #272]	; (8000fd8 <FplusClicked+0x218>)
 8000ec6:	4849      	ldr	r0, [pc, #292]	; (8000fec <FplusClicked+0x22c>)
}	
 8000ec8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	strcpy(msg, psets[Idx].name);
 8000ecc:	f00a beb4 	b.w	800bc38 <strcpy>
      Decay[USB]  = AGC_decay[newAGC];
 8000ed0:	4947      	ldr	r1, [pc, #284]	; (8000ff0 <FplusClicked+0x230>)
      Hcount[USB] = Hangcount[newAGC]; break;
 8000ed2:	4e48      	ldr	r6, [pc, #288]	; (8000ff4 <FplusClicked+0x234>)
      Decay[USB]  = AGC_decay[newAGC];
 8000ed4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    case USB :      agc[USB] = newAGC;
 8000ed8:	709a      	strb	r2, [r3, #2]
      Decay[USB]  = AGC_decay[newAGC];
 8000eda:	4847      	ldr	r0, [pc, #284]	; (8000ff8 <FplusClicked+0x238>)
 8000edc:	6809      	ldr	r1, [r1, #0]
      Hcount[USB] = Hangcount[newAGC]; break;
 8000ede:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8000ee2:	4b46      	ldr	r3, [pc, #280]	; (8000ffc <FplusClicked+0x23c>)
 8000ee4:	7d64      	ldrb	r4, [r4, #21]
      Decay[USB]  = AGC_decay[newAGC];
 8000ee6:	6081      	str	r1, [r0, #8]
      Hcount[USB] = Hangcount[newAGC]; break;
 8000ee8:	809a      	strh	r2, [r3, #4]
      USBindex = (newbw == Narrow) ? 0 : 1;
 8000eea:	1c22      	adds	r2, r4, #0
      bw[USB] = newbw;
 8000eec:	70ac      	strb	r4, [r5, #2]
				             (float *)FFTmaskSSB_I[USBindex], FFTmask, FFTLEN);	
 8000eee:	4948      	ldr	r1, [pc, #288]	; (8001010 <FplusClicked+0x250>)
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex], 
 8000ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
      USBindex = (newbw == Narrow) ? 0 : 1;
 8000ef4:	bf18      	it	ne
 8000ef6:	2201      	movne	r2, #1
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex], 
 8000ef8:	4e46      	ldr	r6, [pc, #280]	; (8001014 <FplusClicked+0x254>)
      USBindex = (newbw == Narrow) ? 0 : 1;
 8000efa:	4d47      	ldr	r5, [pc, #284]	; (8001018 <FplusClicked+0x258>)
 8000efc:	0310      	lsls	r0, r2, #12
 8000efe:	e7d9      	b.n	8000eb4 <FplusClicked+0xf4>
      Decay[LSB]  = AGC_decay[newAGC];
 8000f00:	493b      	ldr	r1, [pc, #236]	; (8000ff0 <FplusClicked+0x230>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000f02:	4e3c      	ldr	r6, [pc, #240]	; (8000ff4 <FplusClicked+0x234>)
      Decay[LSB]  = AGC_decay[newAGC];
 8000f04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    case LSB :      agc[LSB] = newAGC;
 8000f08:	705a      	strb	r2, [r3, #1]
      Decay[LSB]  = AGC_decay[newAGC];
 8000f0a:	483b      	ldr	r0, [pc, #236]	; (8000ff8 <FplusClicked+0x238>)
 8000f0c:	6809      	ldr	r1, [r1, #0]
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000f0e:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8000f12:	4b3a      	ldr	r3, [pc, #232]	; (8000ffc <FplusClicked+0x23c>)
 8000f14:	7d64      	ldrb	r4, [r4, #21]
      Decay[LSB]  = AGC_decay[newAGC];
 8000f16:	6041      	str	r1, [r0, #4]
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000f18:	805a      	strh	r2, [r3, #2]
      LSBindex = (newbw == Narrow) ? 0 : 1;
 8000f1a:	1c22      	adds	r2, r4, #0
      bw[LSB] = newbw;
 8000f1c:	706c      	strb	r4, [r5, #1]
				             (float *)FFTmaskSSB_I[LSBindex], FFTmask, FFTLEN);	
 8000f1e:	493c      	ldr	r1, [pc, #240]	; (8001010 <FplusClicked+0x250>)
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex], 
 8000f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
      LSBindex = (newbw == Narrow) ? 0 : 1;
 8000f24:	bf18      	it	ne
 8000f26:	2201      	movne	r2, #1
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex], 
 8000f28:	4e3a      	ldr	r6, [pc, #232]	; (8001014 <FplusClicked+0x254>)
      LSBindex = (newbw == Narrow) ? 0 : 1;
 8000f2a:	4d3c      	ldr	r5, [pc, #240]	; (800101c <FplusClicked+0x25c>)
 8000f2c:	0310      	lsls	r0, r2, #12
 8000f2e:	e7c1      	b.n	8000eb4 <FplusClicked+0xf4>
      Decay[AM]   = AGC_decay[newAGC];
 8000f30:	492f      	ldr	r1, [pc, #188]	; (8000ff0 <FplusClicked+0x230>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000f32:	4e30      	ldr	r6, [pc, #192]	; (8000ff4 <FplusClicked+0x234>)
      Decay[AM]   = AGC_decay[newAGC];
 8000f34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
	  case AM :       agc[AM] = newAGC;
 8000f38:	701a      	strb	r2, [r3, #0]
      Decay[AM]   = AGC_decay[newAGC];
 8000f3a:	482f      	ldr	r0, [pc, #188]	; (8000ff8 <FplusClicked+0x238>)
 8000f3c:	6809      	ldr	r1, [r1, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000f3e:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8000f42:	4b2e      	ldr	r3, [pc, #184]	; (8000ffc <FplusClicked+0x23c>)
 8000f44:	7d64      	ldrb	r4, [r4, #21]
      Decay[AM]   = AGC_decay[newAGC];
 8000f46:	6001      	str	r1, [r0, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000f48:	801a      	strh	r2, [r3, #0]
      AMindex = (newbw == Narrow) ? 0 : 1;
 8000f4a:	1c22      	adds	r2, r4, #0
      bw[AM] = newbw;
 8000f4c:	702c      	strb	r4, [r5, #0]
				             (float *)FFTmaskAM_I[AMindex], FFTmask, FFTLEN);	
 8000f4e:	4934      	ldr	r1, [pc, #208]	; (8001020 <FplusClicked+0x260>)
      SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex], 
 8000f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
      AMindex = (newbw == Narrow) ? 0 : 1;
 8000f54:	bf18      	it	ne
 8000f56:	2201      	movne	r2, #1
      SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex], 
 8000f58:	4e32      	ldr	r6, [pc, #200]	; (8001024 <FplusClicked+0x264>)
      AMindex = (newbw == Narrow) ? 0 : 1;
 8000f5a:	4d33      	ldr	r5, [pc, #204]	; (8001028 <FplusClicked+0x268>)
 8000f5c:	0310      	lsls	r0, r2, #12
 8000f5e:	e7a9      	b.n	8000eb4 <FplusClicked+0xf4>
      Decay[USB]  = AGC_decay[newAGC];
 8000f60:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <FplusClicked+0x230>)
      Hcount[USB] = Hangcount[newAGC]; break;
 8000f62:	4824      	ldr	r0, [pc, #144]	; (8000ff4 <FplusClicked+0x234>)
      Decay[USB]  = AGC_decay[newAGC];
 8000f64:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000f68:	4923      	ldr	r1, [pc, #140]	; (8000ff8 <FplusClicked+0x238>)
      Hcount[USB] = Hangcount[newAGC]; break;
 8000f6a:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[USB]  = AGC_decay[newAGC];
 8000f6e:	6818      	ldr	r0, [r3, #0]
      Hcount[USB] = Hangcount[newAGC]; break;
 8000f70:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <FplusClicked+0x23c>)
 8000f72:	7d64      	ldrb	r4, [r4, #21]
      Decay[USB]  = AGC_decay[newAGC];
 8000f74:	6088      	str	r0, [r1, #8]
      Hcount[USB] = Hangcount[newAGC]; break;
 8000f76:	809a      	strh	r2, [r3, #4]
 8000f78:	e7b7      	b.n	8000eea <FplusClicked+0x12a>
      Decay[LSB]  = AGC_decay[newAGC];
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <FplusClicked+0x230>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000f7c:	481d      	ldr	r0, [pc, #116]	; (8000ff4 <FplusClicked+0x234>)
      Decay[LSB]  = AGC_decay[newAGC];
 8000f7e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000f82:	491d      	ldr	r1, [pc, #116]	; (8000ff8 <FplusClicked+0x238>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000f84:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[LSB]  = AGC_decay[newAGC];
 8000f88:	6818      	ldr	r0, [r3, #0]
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <FplusClicked+0x23c>)
 8000f8c:	7d64      	ldrb	r4, [r4, #21]
      Decay[LSB]  = AGC_decay[newAGC];
 8000f8e:	6048      	str	r0, [r1, #4]
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000f90:	805a      	strh	r2, [r3, #2]
 8000f92:	e7c2      	b.n	8000f1a <FplusClicked+0x15a>
      Decay[AM]   = AGC_decay[newAGC];
 8000f94:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <FplusClicked+0x230>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000f96:	4817      	ldr	r0, [pc, #92]	; (8000ff4 <FplusClicked+0x234>)
      Decay[AM]   = AGC_decay[newAGC];
 8000f98:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000f9c:	4916      	ldr	r1, [pc, #88]	; (8000ff8 <FplusClicked+0x238>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000f9e:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[AM]   = AGC_decay[newAGC];
 8000fa2:	6818      	ldr	r0, [r3, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <FplusClicked+0x23c>)
 8000fa6:	7d64      	ldrb	r4, [r4, #21]
      Decay[AM]   = AGC_decay[newAGC];
 8000fa8:	6008      	str	r0, [r1, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000faa:	801a      	strh	r2, [r3, #0]
 8000fac:	e7cd      	b.n	8000f4a <FplusClicked+0x18a>
      Decay[CW]   = AGC_decay[newAGC];
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <FplusClicked+0x230>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000fb0:	4810      	ldr	r0, [pc, #64]	; (8000ff4 <FplusClicked+0x234>)
      Decay[CW]   = AGC_decay[newAGC];
 8000fb2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000fb6:	4910      	ldr	r1, [pc, #64]	; (8000ff8 <FplusClicked+0x238>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000fb8:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[CW]   = AGC_decay[newAGC];
 8000fbc:	6818      	ldr	r0, [r3, #0]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <FplusClicked+0x23c>)
 8000fc0:	7d64      	ldrb	r4, [r4, #21]
      Decay[CW]   = AGC_decay[newAGC];
 8000fc2:	60c8      	str	r0, [r1, #12]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000fc4:	80da      	strh	r2, [r3, #6]
 8000fc6:	e76b      	b.n	8000ea0 <FplusClicked+0xe0>
 8000fc8:	2400c234 	.word	0x2400c234
 8000fcc:	24009d1c 	.word	0x24009d1c
 8000fd0:	2400c23c 	.word	0x2400c23c
 8000fd4:	24008d0c 	.word	0x24008d0c
 8000fd8:	24008760 	.word	0x24008760
 8000fdc:	4c3ebc20 	.word	0x4c3ebc20
 8000fe0:	24007688 	.word	0x24007688
 8000fe4:	24000500 	.word	0x24000500
 8000fe8:	24000910 	.word	0x24000910
 8000fec:	240042dc 	.word	0x240042dc
 8000ff0:	2400c22c 	.word	0x2400c22c
 8000ff4:	24009d18 	.word	0x24009d18
 8000ff8:	24002918 	.word	0x24002918
 8000ffc:	24007ec8 	.word	0x24007ec8
 8001000:	08012e18 	.word	0x08012e18
 8001004:	08014e18 	.word	0x08014e18
 8001008:	24008d08 	.word	0x24008d08
 800100c:	20004600 	.word	0x20004600
 8001010:	08016e18 	.word	0x08016e18
 8001014:	08018e18 	.word	0x08018e18
 8001018:	24007ed4 	.word	0x24007ed4
 800101c:	2400d640 	.word	0x2400d640
 8001020:	0800ee18 	.word	0x0800ee18
 8001024:	08010e18 	.word	0x08010e18
 8001028:	2400d642 	.word	0x2400d642

0800102c <FminusClicked>:
//-----------------------------------------------------------------------------
// Decrease the frequency by the value of the current step
void FminusClicked()
{	
	LOfreq -= Fstep;
 800102c:	4b81      	ldr	r3, [pc, #516]	; (8001234 <FminusClicked+0x208>)
 800102e:	4a82      	ldr	r2, [pc, #520]	; (8001238 <FminusClicked+0x20c>)
 8001030:	ed93 7a00 	vldr	s14, [r3]
 8001034:	edd2 7a00 	vldr	s15, [r2]
 8001038:	eeb8 7a47 	vcvt.f32.u32	s14, s14
{	
 800103c:	b570      	push	{r4, r5, r6, lr}
  LOfreq  = max(LOfreq, 8000.f);
  psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 800103e:	4e7f      	ldr	r6, [pc, #508]	; (800123c <FminusClicked+0x210>)
	LOfreq -= Fstep;
 8001040:	ee77 7ac7 	vsub.f32	s15, s15, s14
  psets[0].bw = bw[CurrentMode];
 8001044:	4d7e      	ldr	r5, [pc, #504]	; (8001240 <FminusClicked+0x214>)
  psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001046:	7833      	ldrb	r3, [r6, #0]
 8001048:	4c7e      	ldr	r4, [pc, #504]	; (8001244 <FminusClicked+0x218>)
  LOfreq  = max(LOfreq, 8000.f);
 800104a:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001248 <FminusClicked+0x21c>
  psets[0].bw = bw[CurrentMode];
 800104e:	5ce9      	ldrb	r1, [r5, r3]
  LOfreq  = max(LOfreq, 8000.f);
 8001050:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
  psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001054:	7523      	strb	r3, [r4, #20]
  LOfreq  = max(LOfreq, 8000.f);
 8001056:	edc2 7a00 	vstr	s15, [r2]
  psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 800105a:	edc4 7a04 	vstr	s15, [r4, #16]
  psets[0].bw = bw[CurrentMode];
 800105e:	7561      	strb	r1, [r4, #21]
	switch(CurrentMode)
 8001060:	2b03      	cmp	r3, #3
 8001062:	d83e      	bhi.n	80010e2 <FminusClicked+0xb6>
 8001064:	e8df f003 	tbb	[pc, r3]
 8001068:	0212202e 	.word	0x0212202e
      SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 800106c:	78e8      	ldrb	r0, [r5, #3]
 800106e:	f7ff fb99 	bl	80007a4 <SetBW>
 8001072:	4b76      	ldr	r3, [pc, #472]	; (800124c <FminusClicked+0x220>)
	CurrentAGC =newAGC;
 8001074:	4876      	ldr	r0, [pc, #472]	; (8001250 <FminusClicked+0x224>)
      SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8001076:	78da      	ldrb	r2, [r3, #3]
	switch(CurrentMode)
 8001078:	7831      	ldrb	r1, [r6, #0]
	CurrentAGC =newAGC;
 800107a:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 800107c:	2903      	cmp	r1, #3
 800107e:	d82f      	bhi.n	80010e0 <FminusClicked+0xb4>
 8001080:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001084:	0074008c 	.word	0x0074008c
 8001088:	00cb005c 	.word	0x00cb005c
      SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 800108c:	78a8      	ldrb	r0, [r5, #2]
 800108e:	f7ff fb89 	bl	80007a4 <SetBW>
 8001092:	4b6e      	ldr	r3, [pc, #440]	; (800124c <FminusClicked+0x220>)
	CurrentAGC =newAGC;
 8001094:	486e      	ldr	r0, [pc, #440]	; (8001250 <FminusClicked+0x224>)
      SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8001096:	789a      	ldrb	r2, [r3, #2]
	switch(CurrentMode)
 8001098:	7831      	ldrb	r1, [r6, #0]
	CurrentAGC =newAGC;
 800109a:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 800109c:	2903      	cmp	r1, #3
 800109e:	d81f      	bhi.n	80010e0 <FminusClicked+0xb4>
 80010a0:	e8df f001 	tbb	[pc, r1]
 80010a4:	2794647c 	.word	0x2794647c
      SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 80010a8:	7868      	ldrb	r0, [r5, #1]
 80010aa:	f7ff fb7b 	bl	80007a4 <SetBW>
 80010ae:	4b67      	ldr	r3, [pc, #412]	; (800124c <FminusClicked+0x220>)
	CurrentAGC =newAGC;
 80010b0:	4867      	ldr	r0, [pc, #412]	; (8001250 <FminusClicked+0x224>)
      SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 80010b2:	785a      	ldrb	r2, [r3, #1]
	switch(CurrentMode)
 80010b4:	7831      	ldrb	r1, [r6, #0]
	CurrentAGC =newAGC;
 80010b6:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 80010b8:	2903      	cmp	r1, #3
 80010ba:	d811      	bhi.n	80010e0 <FminusClicked+0xb4>
 80010bc:	e8df f001 	tbb	[pc, r1]
 80010c0:	193e936e 	.word	0x193e936e
      SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 80010c4:	7828      	ldrb	r0, [r5, #0]
 80010c6:	f7ff fb6d 	bl	80007a4 <SetBW>
 80010ca:	4b60      	ldr	r3, [pc, #384]	; (800124c <FminusClicked+0x220>)
	CurrentAGC =newAGC;
 80010cc:	4860      	ldr	r0, [pc, #384]	; (8001250 <FminusClicked+0x224>)
      SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 80010ce:	781a      	ldrb	r2, [r3, #0]
	switch(CurrentMode)
 80010d0:	7831      	ldrb	r1, [r6, #0]
	CurrentAGC =newAGC;
 80010d2:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 80010d4:	2903      	cmp	r1, #3
 80010d6:	d803      	bhi.n	80010e0 <FminusClicked+0xb4>
 80010d8:	e8df f001 	tbb	[pc, r1]
 80010dc:	0b304892 	.word	0x0b304892
 80010e0:	7d61      	ldrb	r1, [r4, #21]
	CurrentBW = newbw;
 80010e2:	4b5c      	ldr	r3, [pc, #368]	; (8001254 <FminusClicked+0x228>)
	strcpy(msg, psets[Idx].name);
 80010e4:	485c      	ldr	r0, [pc, #368]	; (8001258 <FminusClicked+0x22c>)
	CurrentBW = newbw;
 80010e6:	7019      	strb	r1, [r3, #0]
	strcpy(msg, psets[Idx].name);
 80010e8:	4956      	ldr	r1, [pc, #344]	; (8001244 <FminusClicked+0x218>)
  Tune_Preset(0);  // preset 0 means "User tuning"
}
 80010ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	strcpy(msg, psets[Idx].name);
 80010ee:	f00a bda3 	b.w	800bc38 <strcpy>
      Decay[CW]   = AGC_decay[newAGC];
 80010f2:	495a      	ldr	r1, [pc, #360]	; (800125c <FminusClicked+0x230>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 80010f4:	4e5a      	ldr	r6, [pc, #360]	; (8001260 <FminusClicked+0x234>)
      Decay[CW]   = AGC_decay[newAGC];
 80010f6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    case CW :       agc[CW] = newAGC;
 80010fa:	70da      	strb	r2, [r3, #3]
      Decay[CW]   = AGC_decay[newAGC];
 80010fc:	4859      	ldr	r0, [pc, #356]	; (8001264 <FminusClicked+0x238>)
 80010fe:	6809      	ldr	r1, [r1, #0]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8001100:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8001104:	4b58      	ldr	r3, [pc, #352]	; (8001268 <FminusClicked+0x23c>)
 8001106:	7d64      	ldrb	r4, [r4, #21]
      Decay[CW]   = AGC_decay[newAGC];
 8001108:	60c1      	str	r1, [r0, #12]
      Hcount[CW]  = Hangcount[newAGC]; break;
 800110a:	80da      	strh	r2, [r3, #6]
      CWindex = (newbw == Narrow) ? 0 : 1;
 800110c:	1c22      	adds	r2, r4, #0
      bw[CW] = newbw;
 800110e:	70ec      	strb	r4, [r5, #3]
				             (float *)FFTmaskCW_I[CWindex], FFTmask, FFTLEN);	
 8001110:	4956      	ldr	r1, [pc, #344]	; (800126c <FminusClicked+0x240>)
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 8001112:	f44f 6380 	mov.w	r3, #1024	; 0x400
      CWindex = (newbw == Narrow) ? 0 : 1;
 8001116:	bf18      	it	ne
 8001118:	2201      	movne	r2, #1
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 800111a:	4e55      	ldr	r6, [pc, #340]	; (8001270 <FminusClicked+0x244>)
      CWindex = (newbw == Narrow) ? 0 : 1;
 800111c:	4d55      	ldr	r5, [pc, #340]	; (8001274 <FminusClicked+0x248>)
 800111e:	0310      	lsls	r0, r2, #12
 8001120:	802a      	strh	r2, [r5, #0]
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 8001122:	4401      	add	r1, r0
	CurrentBW = newbw;
 8001124:	4d4b      	ldr	r5, [pc, #300]	; (8001254 <FminusClicked+0x228>)
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 8001126:	4430      	add	r0, r6
 8001128:	4a53      	ldr	r2, [pc, #332]	; (8001278 <FminusClicked+0x24c>)
	CurrentBW = newbw;
 800112a:	702c      	strb	r4, [r5, #0]
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 800112c:	f000 ff4a 	bl	8001fc4 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8001130:	4944      	ldr	r1, [pc, #272]	; (8001244 <FminusClicked+0x218>)
 8001132:	4849      	ldr	r0, [pc, #292]	; (8001258 <FminusClicked+0x22c>)
}
 8001134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	strcpy(msg, psets[Idx].name);
 8001138:	f00a bd7e 	b.w	800bc38 <strcpy>
      Decay[USB]  = AGC_decay[newAGC];
 800113c:	4947      	ldr	r1, [pc, #284]	; (800125c <FminusClicked+0x230>)
      Hcount[USB] = Hangcount[newAGC]; break;
 800113e:	4e48      	ldr	r6, [pc, #288]	; (8001260 <FminusClicked+0x234>)
      Decay[USB]  = AGC_decay[newAGC];
 8001140:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    case USB :      agc[USB] = newAGC;
 8001144:	709a      	strb	r2, [r3, #2]
      Decay[USB]  = AGC_decay[newAGC];
 8001146:	4847      	ldr	r0, [pc, #284]	; (8001264 <FminusClicked+0x238>)
 8001148:	6809      	ldr	r1, [r1, #0]
      Hcount[USB] = Hangcount[newAGC]; break;
 800114a:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 800114e:	4b46      	ldr	r3, [pc, #280]	; (8001268 <FminusClicked+0x23c>)
 8001150:	7d64      	ldrb	r4, [r4, #21]
      Decay[USB]  = AGC_decay[newAGC];
 8001152:	6081      	str	r1, [r0, #8]
      Hcount[USB] = Hangcount[newAGC]; break;
 8001154:	809a      	strh	r2, [r3, #4]
      USBindex = (newbw == Narrow) ? 0 : 1;
 8001156:	1c22      	adds	r2, r4, #0
      bw[USB] = newbw;
 8001158:	70ac      	strb	r4, [r5, #2]
				             (float *)FFTmaskSSB_I[USBindex], FFTmask, FFTLEN);	
 800115a:	4948      	ldr	r1, [pc, #288]	; (800127c <FminusClicked+0x250>)
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex], 
 800115c:	f44f 6380 	mov.w	r3, #1024	; 0x400
      USBindex = (newbw == Narrow) ? 0 : 1;
 8001160:	bf18      	it	ne
 8001162:	2201      	movne	r2, #1
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex], 
 8001164:	4e46      	ldr	r6, [pc, #280]	; (8001280 <FminusClicked+0x254>)
      USBindex = (newbw == Narrow) ? 0 : 1;
 8001166:	4d47      	ldr	r5, [pc, #284]	; (8001284 <FminusClicked+0x258>)
 8001168:	0310      	lsls	r0, r2, #12
 800116a:	e7d9      	b.n	8001120 <FminusClicked+0xf4>
      Decay[LSB]  = AGC_decay[newAGC];
 800116c:	493b      	ldr	r1, [pc, #236]	; (800125c <FminusClicked+0x230>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 800116e:	4e3c      	ldr	r6, [pc, #240]	; (8001260 <FminusClicked+0x234>)
      Decay[LSB]  = AGC_decay[newAGC];
 8001170:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    case LSB :      agc[LSB] = newAGC;
 8001174:	705a      	strb	r2, [r3, #1]
      Decay[LSB]  = AGC_decay[newAGC];
 8001176:	483b      	ldr	r0, [pc, #236]	; (8001264 <FminusClicked+0x238>)
 8001178:	6809      	ldr	r1, [r1, #0]
      Hcount[LSB] = Hangcount[newAGC]; break;
 800117a:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 800117e:	4b3a      	ldr	r3, [pc, #232]	; (8001268 <FminusClicked+0x23c>)
 8001180:	7d64      	ldrb	r4, [r4, #21]
      Decay[LSB]  = AGC_decay[newAGC];
 8001182:	6041      	str	r1, [r0, #4]
      Hcount[LSB] = Hangcount[newAGC]; break;
 8001184:	805a      	strh	r2, [r3, #2]
      LSBindex = (newbw == Narrow) ? 0 : 1;
 8001186:	1c22      	adds	r2, r4, #0
      bw[LSB] = newbw;
 8001188:	706c      	strb	r4, [r5, #1]
				             (float *)FFTmaskSSB_I[LSBindex], FFTmask, FFTLEN);	
 800118a:	493c      	ldr	r1, [pc, #240]	; (800127c <FminusClicked+0x250>)
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex], 
 800118c:	f44f 6380 	mov.w	r3, #1024	; 0x400
      LSBindex = (newbw == Narrow) ? 0 : 1;
 8001190:	bf18      	it	ne
 8001192:	2201      	movne	r2, #1
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex], 
 8001194:	4e3a      	ldr	r6, [pc, #232]	; (8001280 <FminusClicked+0x254>)
      LSBindex = (newbw == Narrow) ? 0 : 1;
 8001196:	4d3c      	ldr	r5, [pc, #240]	; (8001288 <FminusClicked+0x25c>)
 8001198:	0310      	lsls	r0, r2, #12
 800119a:	e7c1      	b.n	8001120 <FminusClicked+0xf4>
      Decay[AM]   = AGC_decay[newAGC];
 800119c:	492f      	ldr	r1, [pc, #188]	; (800125c <FminusClicked+0x230>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 800119e:	4e30      	ldr	r6, [pc, #192]	; (8001260 <FminusClicked+0x234>)
      Decay[AM]   = AGC_decay[newAGC];
 80011a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
	  case AM :       agc[AM] = newAGC;
 80011a4:	701a      	strb	r2, [r3, #0]
      Decay[AM]   = AGC_decay[newAGC];
 80011a6:	482f      	ldr	r0, [pc, #188]	; (8001264 <FminusClicked+0x238>)
 80011a8:	6809      	ldr	r1, [r1, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 80011aa:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 80011ae:	4b2e      	ldr	r3, [pc, #184]	; (8001268 <FminusClicked+0x23c>)
 80011b0:	7d64      	ldrb	r4, [r4, #21]
      Decay[AM]   = AGC_decay[newAGC];
 80011b2:	6001      	str	r1, [r0, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 80011b4:	801a      	strh	r2, [r3, #0]
      AMindex = (newbw == Narrow) ? 0 : 1;
 80011b6:	1c22      	adds	r2, r4, #0
      bw[AM] = newbw;
 80011b8:	702c      	strb	r4, [r5, #0]
				             (float *)FFTmaskAM_I[AMindex], FFTmask, FFTLEN);	
 80011ba:	4934      	ldr	r1, [pc, #208]	; (800128c <FminusClicked+0x260>)
      SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex], 
 80011bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
      AMindex = (newbw == Narrow) ? 0 : 1;
 80011c0:	bf18      	it	ne
 80011c2:	2201      	movne	r2, #1
      SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex], 
 80011c4:	4e32      	ldr	r6, [pc, #200]	; (8001290 <FminusClicked+0x264>)
      AMindex = (newbw == Narrow) ? 0 : 1;
 80011c6:	4d33      	ldr	r5, [pc, #204]	; (8001294 <FminusClicked+0x268>)
 80011c8:	0310      	lsls	r0, r2, #12
 80011ca:	e7a9      	b.n	8001120 <FminusClicked+0xf4>
      Decay[USB]  = AGC_decay[newAGC];
 80011cc:	4b23      	ldr	r3, [pc, #140]	; (800125c <FminusClicked+0x230>)
      Hcount[USB] = Hangcount[newAGC]; break;
 80011ce:	4824      	ldr	r0, [pc, #144]	; (8001260 <FminusClicked+0x234>)
      Decay[USB]  = AGC_decay[newAGC];
 80011d0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80011d4:	4923      	ldr	r1, [pc, #140]	; (8001264 <FminusClicked+0x238>)
      Hcount[USB] = Hangcount[newAGC]; break;
 80011d6:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[USB]  = AGC_decay[newAGC];
 80011da:	6818      	ldr	r0, [r3, #0]
      Hcount[USB] = Hangcount[newAGC]; break;
 80011dc:	4b22      	ldr	r3, [pc, #136]	; (8001268 <FminusClicked+0x23c>)
 80011de:	7d64      	ldrb	r4, [r4, #21]
      Decay[USB]  = AGC_decay[newAGC];
 80011e0:	6088      	str	r0, [r1, #8]
      Hcount[USB] = Hangcount[newAGC]; break;
 80011e2:	809a      	strh	r2, [r3, #4]
 80011e4:	e7b7      	b.n	8001156 <FminusClicked+0x12a>
      Decay[LSB]  = AGC_decay[newAGC];
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <FminusClicked+0x230>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 80011e8:	481d      	ldr	r0, [pc, #116]	; (8001260 <FminusClicked+0x234>)
      Decay[LSB]  = AGC_decay[newAGC];
 80011ea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80011ee:	491d      	ldr	r1, [pc, #116]	; (8001264 <FminusClicked+0x238>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 80011f0:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[LSB]  = AGC_decay[newAGC];
 80011f4:	6818      	ldr	r0, [r3, #0]
      Hcount[LSB] = Hangcount[newAGC]; break;
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <FminusClicked+0x23c>)
 80011f8:	7d64      	ldrb	r4, [r4, #21]
      Decay[LSB]  = AGC_decay[newAGC];
 80011fa:	6048      	str	r0, [r1, #4]
      Hcount[LSB] = Hangcount[newAGC]; break;
 80011fc:	805a      	strh	r2, [r3, #2]
 80011fe:	e7c2      	b.n	8001186 <FminusClicked+0x15a>
      Decay[AM]   = AGC_decay[newAGC];
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <FminusClicked+0x230>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 8001202:	4817      	ldr	r0, [pc, #92]	; (8001260 <FminusClicked+0x234>)
      Decay[AM]   = AGC_decay[newAGC];
 8001204:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001208:	4916      	ldr	r1, [pc, #88]	; (8001264 <FminusClicked+0x238>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 800120a:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[AM]   = AGC_decay[newAGC];
 800120e:	6818      	ldr	r0, [r3, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <FminusClicked+0x23c>)
 8001212:	7d64      	ldrb	r4, [r4, #21]
      Decay[AM]   = AGC_decay[newAGC];
 8001214:	6008      	str	r0, [r1, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8001216:	801a      	strh	r2, [r3, #0]
 8001218:	e7cd      	b.n	80011b6 <FminusClicked+0x18a>
      Decay[CW]   = AGC_decay[newAGC];
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <FminusClicked+0x230>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 800121c:	4810      	ldr	r0, [pc, #64]	; (8001260 <FminusClicked+0x234>)
      Decay[CW]   = AGC_decay[newAGC];
 800121e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001222:	4910      	ldr	r1, [pc, #64]	; (8001264 <FminusClicked+0x238>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 8001224:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[CW]   = AGC_decay[newAGC];
 8001228:	6818      	ldr	r0, [r3, #0]
      Hcount[CW]  = Hangcount[newAGC]; break;
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <FminusClicked+0x23c>)
 800122c:	7d64      	ldrb	r4, [r4, #21]
      Decay[CW]   = AGC_decay[newAGC];
 800122e:	60c8      	str	r0, [r1, #12]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8001230:	80da      	strh	r2, [r3, #6]
 8001232:	e76b      	b.n	800110c <FminusClicked+0xe0>
 8001234:	2400c234 	.word	0x2400c234
 8001238:	24009d1c 	.word	0x24009d1c
 800123c:	2400c23c 	.word	0x2400c23c
 8001240:	24008d0c 	.word	0x24008d0c
 8001244:	24008760 	.word	0x24008760
 8001248:	45fa0000 	.word	0x45fa0000
 800124c:	24007688 	.word	0x24007688
 8001250:	24000500 	.word	0x24000500
 8001254:	24000910 	.word	0x24000910
 8001258:	240042dc 	.word	0x240042dc
 800125c:	2400c22c 	.word	0x2400c22c
 8001260:	24009d18 	.word	0x24009d18
 8001264:	24002918 	.word	0x24002918
 8001268:	24007ec8 	.word	0x24007ec8
 800126c:	08012e18 	.word	0x08012e18
 8001270:	08014e18 	.word	0x08014e18
 8001274:	24008d08 	.word	0x24008d08
 8001278:	20004600 	.word	0x20004600
 800127c:	08016e18 	.word	0x08016e18
 8001280:	08018e18 	.word	0x08018e18
 8001284:	24007ed4 	.word	0x24007ed4
 8001288:	2400d640 	.word	0x2400d640
 800128c:	0800ee18 	.word	0x0800ee18
 8001290:	08010e18 	.word	0x08010e18
 8001294:	2400d642 	.word	0x2400d642

08001298 <LED_switch>:
{	

	
  //if (++timer_cnt & 1) {LED_On(1); LED_Off(0);} 
	//else                 {LED_On(0); LED_Off(1);}	
}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop

0800129c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
  short  *p;
  static uint8_t Idx = 1;

  if (pin == USER_Btn_Pin)
 800129c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
{
 80012a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pin == USER_Btn_Pin)
 80012a4:	d13c      	bne.n	8001320 <HAL_GPIO_EXTI_Callback+0x84>
  {
//	  if(EXTI_GetITStatus(EXTI_Line0) != RESET)
	  {
	// User button pressed, cycle through all the presets
	    Idx++; if(Idx >= MAXPRESETS) Idx = 1;
 80012a6:	4aa7      	ldr	r2, [pc, #668]	; (8001544 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80012a8:	7813      	ldrb	r3, [r2, #0]
 80012aa:	3301      	adds	r3, #1
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b0d      	cmp	r3, #13
 80012b0:	d917      	bls.n	80012e2 <HAL_GPIO_EXTI_Callback+0x46>
 80012b2:	2301      	movs	r3, #1
 80012b4:	2718      	movs	r7, #24
 80012b6:	461e      	mov	r6, r3
 80012b8:	7013      	strb	r3, [r2, #0]
  LOfreq = psets[Idx].freq;
 80012ba:	0074      	lsls	r4, r6, #1
 80012bc:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 80015b8 <HAL_GPIO_EXTI_Callback+0x31c>
 80012c0:	4aa1      	ldr	r2, [pc, #644]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80012c2:	19a3      	adds	r3, r4, r6
	CurrentMode = newmode;
 80012c4:	4da1      	ldr	r5, [pc, #644]	; (800154c <HAL_GPIO_EXTI_Callback+0x2b0>)
  LOfreq = psets[Idx].freq;
 80012c6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80012ca:	6919      	ldr	r1, [r3, #16]
	SetMode( psets[Idx].mode);
 80012cc:	7d1b      	ldrb	r3, [r3, #20]
  LOfreq = psets[Idx].freq;
 80012ce:	6011      	str	r1, [r2, #0]
	CurrentMode = newmode;
 80012d0:	702b      	strb	r3, [r5, #0]
	switch(CurrentMode)
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d817      	bhi.n	8001306 <HAL_GPIO_EXTI_Callback+0x6a>
 80012d6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80012da:	00d7      	.short	0x00d7
 80012dc:	00a800bf 	.word	0x00a800bf
 80012e0:	0096      	.short	0x0096
 80012e2:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 80012e6:	461e      	mov	r6, r3
	    Idx++; if(Idx >= MAXPRESETS) Idx = 1;
 80012e8:	7013      	strb	r3, [r2, #0]
 80012ea:	00ff      	lsls	r7, r7, #3
 80012ec:	e7e5      	b.n	80012ba <HAL_GPIO_EXTI_Callback+0x1e>
      Decay[CW]   = AGC_decay[newAGC];
 80012ee:	4998      	ldr	r1, [pc, #608]	; (8001550 <HAL_GPIO_EXTI_Callback+0x2b4>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 80012f0:	4d98      	ldr	r5, [pc, #608]	; (8001554 <HAL_GPIO_EXTI_Callback+0x2b8>)
      Decay[CW]   = AGC_decay[newAGC];
 80012f2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    case CW :       agc[CW] = newAGC;
 80012f6:	70da      	strb	r2, [r3, #3]
      Decay[CW]   = AGC_decay[newAGC];
 80012f8:	4897      	ldr	r0, [pc, #604]	; (8001558 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80012fa:	6809      	ldr	r1, [r1, #0]
      Hcount[CW]  = Hangcount[newAGC]; break;
 80012fc:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 8001300:	4b96      	ldr	r3, [pc, #600]	; (800155c <HAL_GPIO_EXTI_Callback+0x2c0>)
      Decay[CW]   = AGC_decay[newAGC];
 8001302:	60c1      	str	r1, [r0, #12]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8001304:	80da      	strh	r2, [r3, #6]
  SetBW( psets[Idx].bw);
 8001306:	4434      	add	r4, r6
 8001308:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 800130c:	7d60      	ldrb	r0, [r4, #21]
 800130e:	f7ff fa49 	bl	80007a4 <SetBW>
	strcpy(msg, psets[Idx].name);
 8001312:	eb08 0107 	add.w	r1, r8, r7
 8001316:	4892      	ldr	r0, [pc, #584]	; (8001560 <HAL_GPIO_EXTI_Callback+0x2c4>)
  SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
//LED_YELLOW_OFF;


 // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // set bit 8 of GPIOF low, to be observed with an oscilloscope
}
 8001318:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	strcpy(msg, psets[Idx].name);
 800131c:	f00a bc8c 	b.w	800bc38 <strcpy>
  SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 8001320:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001324:	498f      	ldr	r1, [pc, #572]	; (8001564 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8001326:	4890      	ldr	r0, [pc, #576]	; (8001568 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8001328:	f000 ff5a 	bl	80021e0 <SDR_memcpy_f32>
  SDR_memcpy_f32(Ibase, Ibasedata, BSIZE*4);
 800132c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001330:	498e      	ldr	r1, [pc, #568]	; (800156c <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001332:	488f      	ldr	r0, [pc, #572]	; (8001570 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001334:	f000 ff54 	bl	80021e0 <SDR_memcpy_f32>
	arm_fir_decimate_f32(&SfirR, Rbase, Rdata, BSIZE*4);
 8001338:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800133c:	4a8d      	ldr	r2, [pc, #564]	; (8001574 <HAL_GPIO_EXTI_Callback+0x2d8>)
 800133e:	498a      	ldr	r1, [pc, #552]	; (8001568 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8001340:	488d      	ldr	r0, [pc, #564]	; (8001578 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001342:	f009 fa9d 	bl	800a880 <arm_fir_decimate_f32>
	arm_fir_decimate_f32(&SfirI, Ibase, Idata, BSIZE*4);
 8001346:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800134a:	4a8c      	ldr	r2, [pc, #560]	; (800157c <HAL_GPIO_EXTI_Callback+0x2e0>)
 800134c:	4988      	ldr	r1, [pc, #544]	; (8001570 <HAL_GPIO_EXTI_Callback+0x2d4>)
 800134e:	488c      	ldr	r0, [pc, #560]	; (8001580 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001350:	f009 fa96 	bl	800a880 <arm_fir_decimate_f32>
  SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 8001354:	498b      	ldr	r1, [pc, #556]	; (8001584 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001356:	f44f 6280 	mov.w	r2, #1024	; 0x400
  if(CurrentMode == LSB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 800135a:	4d7c      	ldr	r5, [pc, #496]	; (800154c <HAL_GPIO_EXTI_Callback+0x2b0>)
  SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 800135c:	f5a1 5080 	sub.w	r0, r1, #4096	; 0x1000
 8001360:	f000 ff3e 	bl	80021e0 <SDR_memcpy_f32>
  SDR_2R_toC_f32(Rdata, Idata, fCbase + FFTLEN, BSIZE); 
 8001364:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001368:	4a86      	ldr	r2, [pc, #536]	; (8001584 <HAL_GPIO_EXTI_Callback+0x2e8>)
 800136a:	4984      	ldr	r1, [pc, #528]	; (800157c <HAL_GPIO_EXTI_Callback+0x2e0>)
 800136c:	4881      	ldr	r0, [pc, #516]	; (8001574 <HAL_GPIO_EXTI_Callback+0x2d8>)
 800136e:	f000 fe29 	bl	8001fc4 <SDR_2R_toC_f32>
  SDR_memcpy_f32(FFTbuf, fCbase, FFTLEN*2);
 8001372:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001376:	4984      	ldr	r1, [pc, #528]	; (8001588 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8001378:	4884      	ldr	r0, [pc, #528]	; (800158c <HAL_GPIO_EXTI_Callback+0x2f0>)
 800137a:	f000 ff31 	bl	80021e0 <SDR_memcpy_f32>
  arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf, DIRECTFFT, NOREVERSE);
 800137e:	2301      	movs	r3, #1
 8001380:	2200      	movs	r2, #0
 8001382:	4982      	ldr	r1, [pc, #520]	; (800158c <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001384:	4882      	ldr	r0, [pc, #520]	; (8001590 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001386:	f009 f9e5 	bl	800a754 <arm_cfft_f32>
  if(CurrentMode == LSB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 800138a:	782b      	ldrb	r3, [r5, #0]
 800138c:	2b01      	cmp	r3, #1
 800138e:	f000 80ba 	beq.w	8001506 <HAL_GPIO_EXTI_Callback+0x26a>
  arm_cmplx_mult_cmplx_f32(FFTbuf, FFTmask, FFTbuf2, FFTLEN);
 8001392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001396:	4a7f      	ldr	r2, [pc, #508]	; (8001594 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001398:	497f      	ldr	r1, [pc, #508]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2fc>)
 800139a:	487c      	ldr	r0, [pc, #496]	; (800158c <HAL_GPIO_EXTI_Callback+0x2f0>)
 800139c:	f009 fc2c 	bl	800abf8 <arm_cmplx_mult_cmplx_f32>
  arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf2, INVERSEFFT, NOREVERSE);
 80013a0:	2301      	movs	r3, #1
 80013a2:	497c      	ldr	r1, [pc, #496]	; (8001594 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80013a4:	461a      	mov	r2, r3
 80013a6:	487a      	ldr	r0, [pc, #488]	; (8001590 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80013a8:	f009 f9d4 	bl	800a754 <arm_cfft_f32>
  SDR_memcpy_f32(tmpSamp, FFTbuf2 + 2*FFTLEN - 2*BSIZE, 2*BSIZE);   
 80013ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013b0:	497a      	ldr	r1, [pc, #488]	; (800159c <HAL_GPIO_EXTI_Callback+0x300>)
 80013b2:	487b      	ldr	r0, [pc, #492]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x304>)
 80013b4:	f000 ff14 	bl	80021e0 <SDR_memcpy_f32>
  switch(CurrentMode)
 80013b8:	782b      	ldrb	r3, [r5, #0]
 80013ba:	2b03      	cmp	r3, #3
 80013bc:	d807      	bhi.n	80013ce <HAL_GPIO_EXTI_Callback+0x132>
 80013be:	e8df f003 	tbb	[pc, r3]
 80013c2:	1d02      	.short	0x1d02
 80013c4:	0f1d      	.short	0x0f1d
      SDR_demodAM_AGC(tmpSamp, fAudio);  break;
 80013c6:	4977      	ldr	r1, [pc, #476]	; (80015a4 <HAL_GPIO_EXTI_Callback+0x308>)
 80013c8:	4875      	ldr	r0, [pc, #468]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x304>)
 80013ca:	f001 f859 	bl	8002480 <SDR_demodAM_AGC>
  SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 80013ce:	4b76      	ldr	r3, [pc, #472]	; (80015a8 <HAL_GPIO_EXTI_Callback+0x30c>)
 80013d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d4:	4873      	ldr	r0, [pc, #460]	; (80015a4 <HAL_GPIO_EXTI_Callback+0x308>)
 80013d6:	6819      	ldr	r1, [r3, #0]
}
 80013d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 80013dc:	f000 be96 	b.w	800210c <SDR_float_to_DAC_audio>
		  SDR_demodSSB_CW_AGC(tmpSamp, fAudio);
 80013e0:	4970      	ldr	r1, [pc, #448]	; (80015a4 <HAL_GPIO_EXTI_Callback+0x308>)
 80013e2:	486f      	ldr	r0, [pc, #444]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x304>)
 80013e4:	f001 f8c8 	bl	8002578 <SDR_demodSSB_CW_AGC>
		  if(bw[CW] == Narrow)
 80013e8:	4b70      	ldr	r3, [pc, #448]	; (80015ac <HAL_GPIO_EXTI_Callback+0x310>)
 80013ea:	78db      	ldrb	r3, [r3, #3]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1ee      	bne.n	80013ce <HAL_GPIO_EXTI_Callback+0x132>
			  SDR_CWPeak(fAudio, BSIZE);
 80013f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f4:	486b      	ldr	r0, [pc, #428]	; (80015a4 <HAL_GPIO_EXTI_Callback+0x308>)
 80013f6:	f000 ffb9 	bl	800236c <SDR_CWPeak>
 80013fa:	e7e8      	b.n	80013ce <HAL_GPIO_EXTI_Callback+0x132>
		  SDR_demodSSB_CW_AGC(tmpSamp, fAudio); break;
 80013fc:	4969      	ldr	r1, [pc, #420]	; (80015a4 <HAL_GPIO_EXTI_Callback+0x308>)
 80013fe:	4868      	ldr	r0, [pc, #416]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x304>)
 8001400:	f001 f8ba 	bl	8002578 <SDR_demodSSB_CW_AGC>
 8001404:	e7e3      	b.n	80013ce <HAL_GPIO_EXTI_Callback+0x132>
      SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8001406:	4b69      	ldr	r3, [pc, #420]	; (80015ac <HAL_GPIO_EXTI_Callback+0x310>)
 8001408:	78d8      	ldrb	r0, [r3, #3]
 800140a:	f7ff f9cb 	bl	80007a4 <SetBW>
 800140e:	4b68      	ldr	r3, [pc, #416]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x314>)
	CurrentAGC =newAGC;
 8001410:	4868      	ldr	r0, [pc, #416]	; (80015b4 <HAL_GPIO_EXTI_Callback+0x318>)
      SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8001412:	78da      	ldrb	r2, [r3, #3]
	switch(CurrentMode)
 8001414:	7829      	ldrb	r1, [r5, #0]
	CurrentAGC =newAGC;
 8001416:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8001418:	2903      	cmp	r1, #3
 800141a:	f63f af74 	bhi.w	8001306 <HAL_GPIO_EXTI_Callback+0x6a>
 800141e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001422:	0065      	.short	0x0065
 8001424:	004b0058 	.word	0x004b0058
 8001428:	00d9      	.short	0x00d9
      SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 800142a:	4b60      	ldr	r3, [pc, #384]	; (80015ac <HAL_GPIO_EXTI_Callback+0x310>)
 800142c:	7898      	ldrb	r0, [r3, #2]
 800142e:	f7ff f9b9 	bl	80007a4 <SetBW>
 8001432:	4b5f      	ldr	r3, [pc, #380]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x314>)
	CurrentAGC =newAGC;
 8001434:	485f      	ldr	r0, [pc, #380]	; (80015b4 <HAL_GPIO_EXTI_Callback+0x318>)
      SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8001436:	789a      	ldrb	r2, [r3, #2]
	switch(CurrentMode)
 8001438:	7829      	ldrb	r1, [r5, #0]
	CurrentAGC =newAGC;
 800143a:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 800143c:	2903      	cmp	r1, #3
 800143e:	f63f af62 	bhi.w	8001306 <HAL_GPIO_EXTI_Callback+0x6a>
 8001442:	a001      	add	r0, pc, #4	; (adr r0, 8001448 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001444:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8001448:	080014ed 	.word	0x080014ed
 800144c:	080014d3 	.word	0x080014d3
 8001450:	080015bd 	.word	0x080015bd
 8001454:	080012ef 	.word	0x080012ef
      SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8001458:	4b54      	ldr	r3, [pc, #336]	; (80015ac <HAL_GPIO_EXTI_Callback+0x310>)
 800145a:	7858      	ldrb	r0, [r3, #1]
 800145c:	f7ff f9a2 	bl	80007a4 <SetBW>
 8001460:	4b53      	ldr	r3, [pc, #332]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x314>)
	CurrentAGC =newAGC;
 8001462:	4854      	ldr	r0, [pc, #336]	; (80015b4 <HAL_GPIO_EXTI_Callback+0x318>)
      SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8001464:	785a      	ldrb	r2, [r3, #1]
	switch(CurrentMode)
 8001466:	7829      	ldrb	r1, [r5, #0]
	CurrentAGC =newAGC;
 8001468:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 800146a:	2903      	cmp	r1, #3
 800146c:	f63f af4b 	bhi.w	8001306 <HAL_GPIO_EXTI_Callback+0x6a>
 8001470:	a001      	add	r0, pc, #4	; (adr r0, 8001478 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8001472:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8001476:	bf00      	nop
 8001478:	080014ed 	.word	0x080014ed
 800147c:	0800152b 	.word	0x0800152b
 8001480:	080014b9 	.word	0x080014b9
 8001484:	080012ef 	.word	0x080012ef
      SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8001488:	4b48      	ldr	r3, [pc, #288]	; (80015ac <HAL_GPIO_EXTI_Callback+0x310>)
 800148a:	7818      	ldrb	r0, [r3, #0]
 800148c:	f7ff f98a 	bl	80007a4 <SetBW>
 8001490:	4b47      	ldr	r3, [pc, #284]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x314>)
	CurrentAGC =newAGC;
 8001492:	4848      	ldr	r0, [pc, #288]	; (80015b4 <HAL_GPIO_EXTI_Callback+0x318>)
      SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8001494:	781a      	ldrb	r2, [r3, #0]
	switch(CurrentMode)
 8001496:	7829      	ldrb	r1, [r5, #0]
	CurrentAGC =newAGC;
 8001498:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 800149a:	2903      	cmp	r1, #3
 800149c:	f63f af33 	bhi.w	8001306 <HAL_GPIO_EXTI_Callback+0x6a>
 80014a0:	a001      	add	r0, pc, #4	; (adr r0, 80014a8 <HAL_GPIO_EXTI_Callback+0x20c>)
 80014a2:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80014a6:	bf00      	nop
 80014a8:	08001513 	.word	0x08001513
 80014ac:	080014d3 	.word	0x080014d3
 80014b0:	080014b9 	.word	0x080014b9
 80014b4:	080012ef 	.word	0x080012ef
      Decay[USB]  = AGC_decay[newAGC];
 80014b8:	4925      	ldr	r1, [pc, #148]	; (8001550 <HAL_GPIO_EXTI_Callback+0x2b4>)
      Hcount[USB] = Hangcount[newAGC]; break;
 80014ba:	4d26      	ldr	r5, [pc, #152]	; (8001554 <HAL_GPIO_EXTI_Callback+0x2b8>)
      Decay[USB]  = AGC_decay[newAGC];
 80014bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    case USB :      agc[USB] = newAGC;
 80014c0:	709a      	strb	r2, [r3, #2]
      Decay[USB]  = AGC_decay[newAGC];
 80014c2:	4825      	ldr	r0, [pc, #148]	; (8001558 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80014c4:	6809      	ldr	r1, [r1, #0]
      Hcount[USB] = Hangcount[newAGC]; break;
 80014c6:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 80014ca:	4b24      	ldr	r3, [pc, #144]	; (800155c <HAL_GPIO_EXTI_Callback+0x2c0>)
      Decay[USB]  = AGC_decay[newAGC];
 80014cc:	6081      	str	r1, [r0, #8]
      Hcount[USB] = Hangcount[newAGC]; break;
 80014ce:	809a      	strh	r2, [r3, #4]
 80014d0:	e719      	b.n	8001306 <HAL_GPIO_EXTI_Callback+0x6a>
      Decay[LSB]  = AGC_decay[newAGC];
 80014d2:	491f      	ldr	r1, [pc, #124]	; (8001550 <HAL_GPIO_EXTI_Callback+0x2b4>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 80014d4:	4d1f      	ldr	r5, [pc, #124]	; (8001554 <HAL_GPIO_EXTI_Callback+0x2b8>)
      Decay[LSB]  = AGC_decay[newAGC];
 80014d6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    case LSB :      agc[LSB] = newAGC;
 80014da:	705a      	strb	r2, [r3, #1]
      Decay[LSB]  = AGC_decay[newAGC];
 80014dc:	481e      	ldr	r0, [pc, #120]	; (8001558 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80014de:	6809      	ldr	r1, [r1, #0]
      Hcount[LSB] = Hangcount[newAGC]; break;
 80014e0:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 80014e4:	4b1d      	ldr	r3, [pc, #116]	; (800155c <HAL_GPIO_EXTI_Callback+0x2c0>)
      Decay[LSB]  = AGC_decay[newAGC];
 80014e6:	6041      	str	r1, [r0, #4]
      Hcount[LSB] = Hangcount[newAGC]; break;
 80014e8:	805a      	strh	r2, [r3, #2]
 80014ea:	e70c      	b.n	8001306 <HAL_GPIO_EXTI_Callback+0x6a>
      Decay[AM]   = AGC_decay[newAGC];
 80014ec:	4918      	ldr	r1, [pc, #96]	; (8001550 <HAL_GPIO_EXTI_Callback+0x2b4>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 80014ee:	4d19      	ldr	r5, [pc, #100]	; (8001554 <HAL_GPIO_EXTI_Callback+0x2b8>)
      Decay[AM]   = AGC_decay[newAGC];
 80014f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
	  case AM :       agc[AM] = newAGC;
 80014f4:	701a      	strb	r2, [r3, #0]
      Decay[AM]   = AGC_decay[newAGC];
 80014f6:	4818      	ldr	r0, [pc, #96]	; (8001558 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80014f8:	6809      	ldr	r1, [r1, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 80014fa:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 80014fe:	4b17      	ldr	r3, [pc, #92]	; (800155c <HAL_GPIO_EXTI_Callback+0x2c0>)
      Decay[AM]   = AGC_decay[newAGC];
 8001500:	6001      	str	r1, [r0, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8001502:	801a      	strh	r2, [r3, #0]
 8001504:	e6ff      	b.n	8001306 <HAL_GPIO_EXTI_Callback+0x6a>
  if(CurrentMode == LSB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 8001506:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800150a:	4820      	ldr	r0, [pc, #128]	; (800158c <HAL_GPIO_EXTI_Callback+0x2f0>)
 800150c:	f000 fe84 	bl	8002218 <SDR_mirror_LSB>
 8001510:	e73f      	b.n	8001392 <HAL_GPIO_EXTI_Callback+0xf6>
      Decay[AM]   = AGC_decay[newAGC];
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <HAL_GPIO_EXTI_Callback+0x2b4>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 8001514:	480f      	ldr	r0, [pc, #60]	; (8001554 <HAL_GPIO_EXTI_Callback+0x2b8>)
      Decay[AM]   = AGC_decay[newAGC];
 8001516:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800151a:	490f      	ldr	r1, [pc, #60]	; (8001558 <HAL_GPIO_EXTI_Callback+0x2bc>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 800151c:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[AM]   = AGC_decay[newAGC];
 8001520:	6818      	ldr	r0, [r3, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_GPIO_EXTI_Callback+0x2c0>)
      Decay[AM]   = AGC_decay[newAGC];
 8001524:	6008      	str	r0, [r1, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8001526:	801a      	strh	r2, [r3, #0]
 8001528:	e6ed      	b.n	8001306 <HAL_GPIO_EXTI_Callback+0x6a>
      Decay[LSB]  = AGC_decay[newAGC];
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_GPIO_EXTI_Callback+0x2b4>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 800152c:	4809      	ldr	r0, [pc, #36]	; (8001554 <HAL_GPIO_EXTI_Callback+0x2b8>)
      Decay[LSB]  = AGC_decay[newAGC];
 800152e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001532:	4909      	ldr	r1, [pc, #36]	; (8001558 <HAL_GPIO_EXTI_Callback+0x2bc>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 8001534:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[LSB]  = AGC_decay[newAGC];
 8001538:	6818      	ldr	r0, [r3, #0]
      Hcount[LSB] = Hangcount[newAGC]; break;
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_GPIO_EXTI_Callback+0x2c0>)
      Decay[LSB]  = AGC_decay[newAGC];
 800153c:	6048      	str	r0, [r1, #4]
      Hcount[LSB] = Hangcount[newAGC]; break;
 800153e:	805a      	strh	r2, [r3, #2]
 8001540:	e6e1      	b.n	8001306 <HAL_GPIO_EXTI_Callback+0x6a>
 8001542:	bf00      	nop
 8001544:	24000000 	.word	0x24000000
 8001548:	24009d1c 	.word	0x24009d1c
 800154c:	2400c23c 	.word	0x2400c23c
 8001550:	2400c22c 	.word	0x2400c22c
 8001554:	24009d18 	.word	0x24009d18
 8001558:	24002918 	.word	0x24002918
 800155c:	24007ec8 	.word	0x24007ec8
 8001560:	240042dc 	.word	0x240042dc
 8001564:	2000d600 	.word	0x2000d600
 8001568:	20009600 	.word	0x20009600
 800156c:	2000b600 	.word	0x2000b600
 8001570:	20007600 	.word	0x20007600
 8001574:	20006e00 	.word	0x20006e00
 8001578:	24000504 	.word	0x24000504
 800157c:	20006600 	.word	0x20006600
 8001580:	24008754 	.word	0x24008754
 8001584:	24001918 	.word	0x24001918
 8001588:	24000918 	.word	0x24000918
 800158c:	20002600 	.word	0x20002600
 8001590:	0801af6c 	.word	0x0801af6c
 8001594:	20000600 	.word	0x20000600
 8001598:	20004600 	.word	0x20004600
 800159c:	20001600 	.word	0x20001600
 80015a0:	24002aa4 	.word	0x24002aa4
 80015a4:	2400c240 	.word	0x2400c240
 80015a8:	24004304 	.word	0x24004304
 80015ac:	24008d0c 	.word	0x24008d0c
 80015b0:	24007688 	.word	0x24007688
 80015b4:	24000500 	.word	0x24000500
 80015b8:	24008760 	.word	0x24008760
      Decay[USB]  = AGC_decay[newAGC];
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <HAL_GPIO_EXTI_Callback+0x350>)
      Hcount[USB] = Hangcount[newAGC]; break;
 80015be:	480c      	ldr	r0, [pc, #48]	; (80015f0 <HAL_GPIO_EXTI_Callback+0x354>)
      Decay[USB]  = AGC_decay[newAGC];
 80015c0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80015c4:	490b      	ldr	r1, [pc, #44]	; (80015f4 <HAL_GPIO_EXTI_Callback+0x358>)
      Hcount[USB] = Hangcount[newAGC]; break;
 80015c6:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[USB]  = AGC_decay[newAGC];
 80015ca:	6818      	ldr	r0, [r3, #0]
      Hcount[USB] = Hangcount[newAGC]; break;
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <HAL_GPIO_EXTI_Callback+0x35c>)
      Decay[USB]  = AGC_decay[newAGC];
 80015ce:	6088      	str	r0, [r1, #8]
      Hcount[USB] = Hangcount[newAGC]; break;
 80015d0:	809a      	strh	r2, [r3, #4]
 80015d2:	e698      	b.n	8001306 <HAL_GPIO_EXTI_Callback+0x6a>
      Decay[CW]   = AGC_decay[newAGC];
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_GPIO_EXTI_Callback+0x350>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 80015d6:	4806      	ldr	r0, [pc, #24]	; (80015f0 <HAL_GPIO_EXTI_Callback+0x354>)
      Decay[CW]   = AGC_decay[newAGC];
 80015d8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80015dc:	4905      	ldr	r1, [pc, #20]	; (80015f4 <HAL_GPIO_EXTI_Callback+0x358>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 80015de:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[CW]   = AGC_decay[newAGC];
 80015e2:	6818      	ldr	r0, [r3, #0]
      Hcount[CW]  = Hangcount[newAGC]; break;
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <HAL_GPIO_EXTI_Callback+0x35c>)
      Decay[CW]   = AGC_decay[newAGC];
 80015e6:	60c8      	str	r0, [r1, #12]
      Hcount[CW]  = Hangcount[newAGC]; break;
 80015e8:	80da      	strh	r2, [r3, #6]
 80015ea:	e68c      	b.n	8001306 <HAL_GPIO_EXTI_Callback+0x6a>
 80015ec:	2400c22c 	.word	0x2400c22c
 80015f0:	24009d18 	.word	0x24009d18
 80015f4:	24002918 	.word	0x24002918
 80015f8:	24007ec8 	.word	0x24007ec8

080015fc <ADC_Stream0_Handler>:

//-----------------------------------------------------------------------------  
// This the handler of the highest priority task interrupts, those generated
// by DMA2 Stream when a new ADC buffer is just filled
void ADC_Stream0_Handler(uint8_t FullConversion)
{
 80015fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#ifdef AG_TEST_SIGNAL
  uint16_t test_data[BSIZE];
#endif


 LED_YELLOW_ON;
 8001600:	2201      	movs	r2, #1
{
 8001602:	4605      	mov	r5, r0
 LED_YELLOW_ON;
 8001604:	2102      	movs	r1, #2
 8001606:	487e      	ldr	r0, [pc, #504]	; (8001800 <ADC_Stream0_Handler+0x204>)


// process the data contained in the just filled buffer
	if(FullConversion)
		pR =(uint16_t *) &aADCDualConvertedValues[BSIZE/2];
 8001608:	4c7e      	ldr	r4, [pc, #504]	; (8001804 <ADC_Stream0_Handler+0x208>)
{
 800160a:	ed2d 8b10 	vpush	{d8-d15}
 800160e:	b095      	sub	sp, #84	; 0x54
 LED_YELLOW_ON;
 8001610:	f004 fc2a 	bl	8005e68 <HAL_GPIO_WritePin>
		}
#endif


// compute the new NCO buffer, with the CWpitch offset if receiving CW  
 if(CurrentMode == CW)
 8001614:	4b7c      	ldr	r3, [pc, #496]	; (8001808 <ADC_Stream0_Handler+0x20c>)
		pR =(uint16_t *) &aADCDualConvertedValues[BSIZE/2];
 8001616:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 800161a:	4a7c      	ldr	r2, [pc, #496]	; (800180c <ADC_Stream0_Handler+0x210>)
 if(CurrentMode == CW)
 800161c:	781b      	ldrb	r3, [r3, #0]
		pR =(uint16_t *) &aADCDualConvertedValues[BSIZE/2];
 800161e:	2d00      	cmp	r5, #0
 8001620:	bf18      	it	ne
 8001622:	4604      	movne	r4, r0
 8001624:	ed92 0a00 	vldr	s0, [r2]
 if(CurrentMode == CW)
 8001628:	2b03      	cmp	r3, #3
 800162a:	f000 8384 	beq.w	8001d36 <ADC_Stream0_Handler+0x73a>
	  SDR_ComputeLO(LOfreq-cwpitch);  // prepare next LO buffer
  else
	  SDR_ComputeLO(LOfreq);          // prepare next LO buffer
 800162e:	f000 fc0d 	bl	8001e4c <SDR_ComputeLO>
 8001632:	f204 33fe 	addw	r3, r4, #1022	; 0x3fe
 8001636:	1ea2      	subs	r2, r4, #2

// compute the smoothed average value of the buffer, to be used as offset
// in the short words to floating point conversion routine  
	sum = 0; k = BSIZE;
 8001638:	ed9f 5a75 	vldr	s10, [pc, #468]	; 8001810 <ADC_Stream0_Handler+0x214>
  while(k)
	{ 	
		sum += pR[k-1];
 800163c:	8819      	ldrh	r1, [r3, #0]
 800163e:	3b08      	subs	r3, #8
 8001640:	ee07 1a90 	vmov	s15, r1
		sum += pR[k-2];
 8001644:	88d9      	ldrh	r1, [r3, #6]
 8001646:	ee07 1a10 	vmov	s14, r1
		sum += pR[k-3];
 800164a:	8899      	ldrh	r1, [r3, #4]
		sum += pR[k-1];
 800164c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
		sum += pR[k-4];
 8001650:	8858      	ldrh	r0, [r3, #2]
		sum += pR[k-3];
 8001652:	ee07 1a90 	vmov	s15, r1
		sum += pR[k-2];
 8001656:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		sum += pR[k-4];
 800165a:	ee06 0a90 	vmov	s13, r0
  while(k)
 800165e:	429a      	cmp	r2, r3
		sum += pR[k-3];
 8001660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		sum += pR[k-4];
 8001664:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001668:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001670:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001674:	ee35 5a27 	vadd.f32	s10, s10, s15
  while(k)
 8001678:	d1e0      	bne.n	800163c <ADC_Stream0_Handler+0x40>
		k-=4;
	}	

	TestSampledValue=pR[BSIZE/2];
 800167a:	f8b4 2200 	ldrh.w	r2, [r4, #512]	; 0x200
 800167e:	2300      	movs	r3, #0

	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8001680:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001814 <ADC_Stream0_Handler+0x218>

// downconvert to zero IF, by multiplication by the exp(-jwt) signal
// generated by the NCO, and at the same time convert to floating point  
SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8001684:	4620      	mov	r0, r4
	TestSampledValue=pR[BSIZE/2];
 8001686:	ee07 2a90 	vmov	s15, r2
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 800168a:	4e63      	ldr	r6, [pc, #396]	; (8001818 <ADC_Stream0_Handler+0x21c>)
 800168c:	ee25 5a07 	vmul.f32	s10, s10, s14
	TestSampledValue=pR[BSIZE/2];
 8001690:	4c62      	ldr	r4, [pc, #392]	; (800181c <ADC_Stream0_Handler+0x220>)
 8001692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001696:	4d62      	ldr	r5, [pc, #392]	; (8001820 <ADC_Stream0_Handler+0x224>)
SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8001698:	4a62      	ldr	r2, [pc, #392]	; (8001824 <ADC_Stream0_Handler+0x228>)
 800169a:	eeb0 0a45 	vmov.f32	s0, s10
 800169e:	4962      	ldr	r1, [pc, #392]	; (8001828 <ADC_Stream0_Handler+0x22c>)
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80016a0:	ed86 5a00 	vstr	s10, [r6]
	TestSampledValue=pR[BSIZE/2];
 80016a4:	edc4 7a00 	vstr	s15, [r4]
 80016a8:	802b      	strh	r3, [r5, #0]
SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80016aa:	f000 fcbd 	bl	8002028 <SDR_downconvert_f32>
// A dividing by 16, order 4, CIC is used. Then a 4096-entry buffer is filled, and
// passed to the baseband interrupt routine, where it is additionally filtered with a
// sync-compensating FIR, which also adds further stop band rejection and a decimation by 4
//-------------------------------------------------------------------------

  k=BSIZE/2;  // BSIZE/2 to process BSIZE entries, two at a time  
 80016ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b2:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 80018b0 <ADC_Stream0_Handler+0x2b4>
 80016b6:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 80018b4 <ADC_Stream0_Handler+0x2b8>
  while(k--)
 80016ba:	23ff      	movs	r3, #255	; 0xff
  k=BSIZE/2;  // BSIZE/2 to process BSIZE entries, two at a time  
 80016bc:	8029      	strh	r1, [r5, #0]
//        which being separated in even and odd samples in advance becomes
// (1 + 6z^-1 + z^-2) for odd samples and (4 + 4z^-1) for even samples, which, when summed, give :
// odd + 6odd_old + odd_old2 + 4even + 4even_old =	odd + 6odd_old + odd_old2 + 4(even + even_old)		

		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;  
    outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 80016be:	eeb1 5a08 	vmov.f32	s10, #24	; 0x40c00000  6.0
 80016c2:	495a      	ldr	r1, [pc, #360]	; (800182c <ADC_Stream0_Handler+0x230>)
 80016c4:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
 80016c8:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 80018b8 <ADC_Stream0_Handler+0x2bc>
 80016cc:	ed91 4a00 	vldr	s8, [r1]
 80016d0:	4957      	ldr	r1, [pc, #348]	; (8001830 <ADC_Stream0_Handler+0x234>)
 80016d2:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 80018bc <ADC_Stream0_Handler+0x2c0>
 80016d6:	edd1 4a00 	vldr	s9, [r1]
 80016da:	4956      	ldr	r1, [pc, #344]	; (8001834 <ADC_Stream0_Handler+0x238>)
 80016dc:	ed9c fa00 	vldr	s30, [ip]
 80016e0:	ed91 7a00 	vldr	s14, [r1]
 80016e4:	4954      	ldr	r1, [pc, #336]	; (8001838 <ADC_Stream0_Handler+0x23c>)
 80016e6:	edde ea00 	vldr	s29, [lr]
 80016ea:	ed91 2a00 	vldr	s4, [r1]
 80016ee:	4953      	ldr	r1, [pc, #332]	; (800183c <ADC_Stream0_Handler+0x240>)
 80016f0:	edd8 9a00 	vldr	s19, [r8]
 80016f4:	edd1 7a00 	vldr	s15, [r1]
 80016f8:	4951      	ldr	r1, [pc, #324]	; (8001840 <ADC_Stream0_Handler+0x244>)
 80016fa:	edd9 fa00 	vldr	s31, [r9]
 80016fe:	edd1 2a00 	vldr	s5, [r1]
 8001702:	4950      	ldr	r1, [pc, #320]	; (8001844 <ADC_Stream0_Handler+0x248>)
 8001704:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 80018c0 <ADC_Stream0_Handler+0x2c4>
 8001708:	ed91 1a00 	vldr	s2, [r1]
 800170c:	494e      	ldr	r1, [pc, #312]	; (8001848 <ADC_Stream0_Handler+0x24c>)
 800170e:	4c4f      	ldr	r4, [pc, #316]	; (800184c <ADC_Stream0_Handler+0x250>)
 8001710:	edd1 1a00 	vldr	s3, [r1]
 8001714:	494e      	ldr	r1, [pc, #312]	; (8001850 <ADC_Stream0_Handler+0x254>)
 8001716:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 80018c4 <ADC_Stream0_Handler+0x2c8>
 800171a:	ed91 6a00 	vldr	s12, [r1]
 800171e:	494d      	ldr	r1, [pc, #308]	; (8001854 <ADC_Stream0_Handler+0x258>)
 8001720:	4a4d      	ldr	r2, [pc, #308]	; (8001858 <ADC_Stream0_Handler+0x25c>)
 8001722:	edd1 aa00 	vldr	s21, [r1]
 8001726:	494d      	ldr	r1, [pc, #308]	; (800185c <ADC_Stream0_Handler+0x260>)
 8001728:	f502 6000 	add.w	r0, r2, #2048	; 0x800
 800172c:	edd1 6a00 	vldr	s13, [r1]
 8001730:	494b      	ldr	r1, [pc, #300]	; (8001860 <ADC_Stream0_Handler+0x264>)
 8001732:	ed91 aa00 	vldr	s20, [r1]
 8001736:	494b      	ldr	r1, [pc, #300]	; (8001864 <ADC_Stream0_Handler+0x268>)
 8001738:	edd1 ba00 	vldr	s23, [r1]
 800173c:	494a      	ldr	r1, [pc, #296]	; (8001868 <ADC_Stream0_Handler+0x26c>)
 800173e:	ed91 ba00 	vldr	s22, [r1]
 8001742:	494a      	ldr	r1, [pc, #296]	; (800186c <ADC_Stream0_Handler+0x270>)
 8001744:	ed91 3a00 	vldr	s6, [r1]
 8001748:	4949      	ldr	r1, [pc, #292]	; (8001870 <ADC_Stream0_Handler+0x274>)
 800174a:	edd1 ca00 	vldr	s25, [r1]
 800174e:	4949      	ldr	r1, [pc, #292]	; (8001874 <ADC_Stream0_Handler+0x278>)
 8001750:	edd1 3a00 	vldr	s7, [r1]
 8001754:	4948      	ldr	r1, [pc, #288]	; (8001878 <ADC_Stream0_Handler+0x27c>)
 8001756:	ed91 ca00 	vldr	s24, [r1]
 800175a:	4948      	ldr	r1, [pc, #288]	; (800187c <ADC_Stream0_Handler+0x280>)
 800175c:	ed91 ea00 	vldr	s28, [r1]
 8001760:	4947      	ldr	r1, [pc, #284]	; (8001880 <ADC_Stream0_Handler+0x284>)
 8001762:	ed91 9a00 	vldr	s18, [r1]
 8001766:	4947      	ldr	r1, [pc, #284]	; (8001884 <ADC_Stream0_Handler+0x288>)
 8001768:	edd1 0a00 	vldr	s1, [r1]
 800176c:	4946      	ldr	r1, [pc, #280]	; (8001888 <ADC_Stream0_Handler+0x28c>)
 800176e:	edcd 0a05 	vstr	s1, [sp, #20]
 8001772:	edd1 0a00 	vldr	s1, [r1]
 8001776:	4945      	ldr	r1, [pc, #276]	; (800188c <ADC_Stream0_Handler+0x290>)
 8001778:	edcd 0a07 	vstr	s1, [sp, #28]
 800177c:	edd1 0a00 	vldr	s1, [r1]
 8001780:	4943      	ldr	r1, [pc, #268]	; (8001890 <ADC_Stream0_Handler+0x294>)
 8001782:	edcd 0a04 	vstr	s1, [sp, #16]
 8001786:	edd1 0a00 	vldr	s1, [r1]
 800178a:	4942      	ldr	r1, [pc, #264]	; (8001894 <ADC_Stream0_Handler+0x298>)
 800178c:	edcd 0a02 	vstr	s1, [sp, #8]
 8001790:	edd1 0a00 	vldr	s1, [r1]
 8001794:	4940      	ldr	r1, [pc, #256]	; (8001898 <ADC_Stream0_Handler+0x29c>)
 8001796:	edcd 0a06 	vstr	s1, [sp, #24]
 800179a:	edd1 0a00 	vldr	s1, [r1]
 800179e:	493f      	ldr	r1, [pc, #252]	; (800189c <ADC_Stream0_Handler+0x2a0>)
 80017a0:	edcd 0a03 	vstr	s1, [sp, #12]
 80017a4:	edd1 0a00 	vldr	s1, [r1]
 80017a8:	493d      	ldr	r1, [pc, #244]	; (80018a0 <ADC_Stream0_Handler+0x2a4>)
 80017aa:	edcd 0a0d 	vstr	s1, [sp, #52]	; 0x34
 80017ae:	edda 0a00 	vldr	s1, [sl]
 80017b2:	edcd 0a0f 	vstr	s1, [sp, #60]	; 0x3c
 80017b6:	edd4 0a00 	vldr	s1, [r4]
 80017ba:	4c3a      	ldr	r4, [pc, #232]	; (80018a4 <ADC_Stream0_Handler+0x2a8>)
 80017bc:	edcd 0a0c 	vstr	s1, [sp, #48]	; 0x30
 80017c0:	edd4 0a00 	vldr	s1, [r4]
 80017c4:	4c38      	ldr	r4, [pc, #224]	; (80018a8 <ADC_Stream0_Handler+0x2ac>)
 80017c6:	edcd 0a08 	vstr	s1, [sp, #32]
 80017ca:	edd4 0a00 	vldr	s1, [r4]
 80017ce:	4c37      	ldr	r4, [pc, #220]	; (80018ac <ADC_Stream0_Handler+0x2b0>)
 80017d0:	edcd 0a0e 	vstr	s1, [sp, #56]	; 0x38
 80017d4:	edd4 0a00 	vldr	s1, [r4]
 80017d8:	f9bb 4000 	ldrsh.w	r4, [fp]
 80017dc:	edcd 0a09 	vstr	s1, [sp, #36]	; 0x24
 80017e0:	eef0 0a64 	vmov.f32	s1, s9
 80017e4:	4626      	mov	r6, r4
 80017e6:	eef0 4a61 	vmov.f32	s9, s3
 80017ea:	460c      	mov	r4, r1
 80017ec:	eef0 1a4f 	vmov.f32	s3, s30
 80017f0:	eeb0 fa4c 	vmov.f32	s30, s24
 80017f4:	eeb0 ca6d 	vmov.f32	s24, s27
 80017f8:	eef0 da4d 	vmov.f32	s27, s26
  while(k--)
 80017fc:	e162      	b.n	8001ac4 <ADC_Stream0_Handler+0x4c8>
 80017fe:	bf00      	nop
 8001800:	58021000 	.word	0x58021000
 8001804:	2400ca40 	.word	0x2400ca40
 8001808:	2400c23c 	.word	0x2400c23c
 800180c:	24009d1c 	.word	0x24009d1c
 8001810:	00000000 	.word	0x00000000
 8001814:	3b000000 	.word	0x3b000000
 8001818:	2400c220 	.word	0x2400c220
 800181c:	2400c238 	.word	0x2400c238
 8001820:	24000490 	.word	0x24000490
 8001824:	24007ed8 	.word	0x24007ed8
 8001828:	240076c8 	.word	0x240076c8
 800182c:	24000404 	.word	0x24000404
 8001830:	24000400 	.word	0x24000400
 8001834:	2400043c 	.word	0x2400043c
 8001838:	24000438 	.word	0x24000438
 800183c:	24000434 	.word	0x24000434
 8001840:	24000430 	.word	0x24000430
 8001844:	2400040c 	.word	0x2400040c
 8001848:	24000408 	.word	0x24000408
 800184c:	2400048c 	.word	0x2400048c
 8001850:	2400044c 	.word	0x2400044c
 8001854:	24000448 	.word	0x24000448
 8001858:	240076d0 	.word	0x240076d0
 800185c:	24000444 	.word	0x24000444
 8001860:	24000440 	.word	0x24000440
 8001864:	24000414 	.word	0x24000414
 8001868:	24000410 	.word	0x24000410
 800186c:	2400045c 	.word	0x2400045c
 8001870:	24000458 	.word	0x24000458
 8001874:	24000454 	.word	0x24000454
 8001878:	24000450 	.word	0x24000450
 800187c:	24000418 	.word	0x24000418
 8001880:	24000464 	.word	0x24000464
 8001884:	24000424 	.word	0x24000424
 8001888:	24000420 	.word	0x24000420
 800188c:	2400047c 	.word	0x2400047c
 8001890:	24000478 	.word	0x24000478
 8001894:	24000474 	.word	0x24000474
 8001898:	24000470 	.word	0x24000470
 800189c:	2400042c 	.word	0x2400042c
 80018a0:	24007ee0 	.word	0x24007ee0
 80018a4:	24000488 	.word	0x24000488
 80018a8:	24000484 	.word	0x24000484
 80018ac:	24000480 	.word	0x24000480
 80018b0:	2400041c 	.word	0x2400041c
 80018b4:	2400046c 	.word	0x2400046c
 80018b8:	24000468 	.word	0x24000468
 80018bc:	24000460 	.word	0x24000460
 80018c0:	24000428 	.word	0x24000428
 80018c4:	240003fc 	.word	0x240003fc
// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
// produced using 4 input samples, totalling a decimation by 2		
// now compute the couple of elements for the next step

    inER=tmp1R;  inOR=outR;                    inEI=tmp1I;  inOI=outI;
    outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 80018c8:	eeaa 6a85 	vfma.f32	s12, s21, s10

		inE2Rold = inER;                           inE2Iold = inEI;  
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
		
		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 80018cc:	0799      	lsls	r1, r3, #30
    outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 80018ce:	eeea 6a05 	vfma.f32	s13, s20, s10
 80018d2:	ee3d 4aa4 	vadd.f32	s8, s27, s9
 80018d6:	ee31 1a0c 	vadd.f32	s2, s2, s24
 80018da:	eea1 6a25 	vfma.f32	s12, s2, s11
 80018de:	eee4 6a25 	vfma.f32	s13, s8, s11
 80018e2:	ee76 4a07 	vadd.f32	s9, s12, s14
 80018e6:	ee36 4aa7 	vadd.f32	s8, s13, s15
		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 80018ea:	f100 810d 	bmi.w	8001b08 <ADC_Stream0_Handler+0x50c>
// now we have the input samples decimated by 4, even element in tmp2R, tmp2I,
// and the odd element in outR, outI		
// now compute the couple of elements for the next step
		
    inER=tmp2R;  inOR=outR;                    inEI=tmp2I;  inOI=outI;
    outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 80018ee:	eeac 3a85 	vfma.f32	s6, s25, s10
 80018f2:	eddd 6a00 	vldr	s13, [sp]
 80018f6:	eeef 3a05 	vfma.f32	s7, s30, s10
 80018fa:	ed9d 6a01 	vldr	s12, [sp, #4]
 80018fe:	ee76 baab 	vadd.f32	s23, s13, s23

		inE3Rold  = inER;                          inE3Iold  = inEI;  
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;

		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 8001902:	075f      	lsls	r7, r3, #29
    outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 8001904:	ee36 ba0b 	vadd.f32	s22, s12, s22
 8001908:	eeab 3aa5 	vfma.f32	s6, s23, s11
 800190c:	eeeb 3a25 	vfma.f32	s7, s22, s11
 8001910:	ee33 1a24 	vadd.f32	s2, s6, s9
 8001914:	ee73 0a84 	vadd.f32	s1, s7, s8
		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 8001918:	f100 819c 	bmi.w	8001c54 <ADC_Stream0_Handler+0x658>
		// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
		// produced using 4 input samples, totalling a decimation by 8
		// now compute the couple of elements for the next step

		    inER=tmp3R;  inOR=outR;                    inEI=tmp3I;  inOI=outI;
		    outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 800191c:	eeef 9a85 	vfma.f32	s19, s31, s10
 8001920:	eddd 3a0b 	vldr	s7, [sp, #44]	; 0x2c
 8001924:	eea1 9a85 	vfma.f32	s18, s3, s10
 8001928:	ed9d 3a0a 	vldr	s6, [sp, #40]	; 0x28
 800192c:	ee7e eaa3 	vadd.f32	s29, s29, s7

				inE4Rold = inER;                           inE4Iold = inEI;
				inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;

				if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 8001930:	0719      	lsls	r1, r3, #28
		    outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 8001932:	ee3e ea03 	vadd.f32	s28, s28, s6
 8001936:	eeee 9aa5 	vfma.f32	s19, s29, s11
 800193a:	eeae 9a25 	vfma.f32	s18, s28, s11
 800193e:	ee39 ba81 	vadd.f32	s22, s19, s2
 8001942:	ee79 ba20 	vadd.f32	s23, s18, s1
				if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 8001946:	f100 81a2 	bmi.w	8001c8e <ADC_Stream0_Handler+0x692>
		// now we have the input samples decimated by 8, even element in tmp2R, tmp2I,
		// and the odd element in outR, outI
		// now compute the couple of elements for the next step

		    inER=tmp4R;  inOR=outR;                    inEI=tmp4I;  inOI=outI;
		    outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 800194a:	ed9d ea04 	vldr	s28, [sp, #16]

				inE5Rold  = inER;                          inE5Iold  = inEI;
				inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;

				if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 800194e:	f013 0110 	ands.w	r1, r3, #16
		    outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 8001952:	ed9d 9a02 	vldr	s18, [sp, #8]
 8001956:	eddd ea06 	vldr	s29, [sp, #24]
 800195a:	eddd 9a03 	vldr	s19, [sp, #12]
 800195e:	eea9 ea05 	vfma.f32	s28, s18, s10
 8001962:	ed9d 3a05 	vldr	s6, [sp, #20]
 8001966:	eddd 3a11 	vldr	s7, [sp, #68]	; 0x44
 800196a:	eee9 ea85 	vfma.f32	s29, s19, s10
 800196e:	eddd 6a07 	vldr	s13, [sp, #28]
 8001972:	ee33 6a83 	vadd.f32	s12, s7, s6
 8001976:	ed9d 3a10 	vldr	s6, [sp, #64]	; 0x40
				if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 800197a:	9105      	str	r1, [sp, #20]
		    outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 800197c:	ee73 6a26 	vadd.f32	s13, s6, s13
 8001980:	eea6 ea25 	vfma.f32	s28, s12, s11
 8001984:	eee6 eaa5 	vfma.f32	s29, s13, s11
 8001988:	ee3e ea0b 	vadd.f32	s28, s28, s22
 800198c:	ee7e eaab 	vadd.f32	s29, s29, s23
				if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8001990:	f040 81a6 	bne.w	8001ce0 <ADC_Stream0_Handler+0x6e4>
// at this point we have two elem. (tmp3R[even] and outR[odd] and also the I counterparts)
// produced with 4 of the previous elem, i.e. with 16 input samples, totalling 
// a decimation by 16. Now compute the couple of elements for the next step

    inER=tmp5R;  inOR=outR;                    inEI=tmp5I;  inOI=outI;
    outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001994:	ed9d 6a08 	vldr	s12, [sp, #32]
// we downscale it with a factor of 8388608, i.e. the gain of the CIC, i.e.	R^M = 64^4 = 16777216
// divided by two, to compensate for the 3 dB loss caused by keeping just half of the band    

// create a block of BSIZE*4 entries, which will be then decimated by 4

	  Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001998:	00b1      	lsls	r1, r6, #2
    outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 800199a:	eddd 6a0c 	vldr	s13, [sp, #48]	; 0x30
	  Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 800199e:	3601      	adds	r6, #1
    outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80019a0:	eddd 3a09 	vldr	s7, [sp, #36]	; 0x24
 80019a4:	eee6 6a05 	vfma.f32	s13, s12, s10
 80019a8:	ed9d 6a0e 	vldr	s12, [sp, #56]	; 0x38
 80019ac:	ed9d 3a12 	vldr	s6, [sp, #72]	; 0x48
	  Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80019b0:	b236      	sxth	r6, r6
    outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80019b2:	eea3 6a85 	vfma.f32	s12, s7, s10
 80019b6:	eddd 3a0d 	vldr	s7, [sp, #52]	; 0x34
 80019ba:	ed9d 9a0f 	vldr	s18, [sp, #60]	; 0x3c
//	  Rbasedata[idx] = outR/65536.f;    Ibasedata[idx++] = outI/65536.f; //decimate by 16

		if(idx < BSIZE*4)
 80019be:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
    outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80019c2:	ee73 3a23 	vadd.f32	s7, s6, s7
 80019c6:	ed9d 3a13 	vldr	s6, [sp, #76]	; 0x4c
	  Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80019ca:	4fdf      	ldr	r7, [pc, #892]	; (8001d48 <ADC_Stream0_Handler+0x74c>)
    outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80019cc:	ee33 3a09 	vadd.f32	s6, s6, s18
 80019d0:	eee3 6aa5 	vfma.f32	s13, s7, s11
	  Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80019d4:	440f      	add	r7, r1
 80019d6:	eddf 3add 	vldr	s7, [pc, #884]	; 8001d4c <ADC_Stream0_Handler+0x750>
    outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80019da:	eea3 6a25 	vfma.f32	s12, s6, s11
	  Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80019de:	9704      	str	r7, [sp, #16]
 80019e0:	4fdb      	ldr	r7, [pc, #876]	; (8001d50 <ADC_Stream0_Handler+0x754>)
 80019e2:	4439      	add	r1, r7
 80019e4:	9f04      	ldr	r7, [sp, #16]
    outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80019e6:	ee76 6a8e 	vadd.f32	s13, s13, s28
 80019ea:	ee36 6a2e 	vadd.f32	s12, s12, s29
	  Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80019ee:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80019f2:	ee26 6a23 	vmul.f32	s12, s12, s7
 80019f6:	edc7 6a00 	vstr	s13, [r7]
 80019fa:	ed81 6a00 	vstr	s12, [r1]
		if(idx < BSIZE*4)
 80019fe:	f2c0 81eb 	blt.w	8001dd8 <ADC_Stream0_Handler+0x7dc>

#endif

// generate now an interrupt to signal the base band processing routine that it has a new buffer			 

		EXTI->SWIER1 |= GPIO_PIN_14;
 8001a02:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8001a06:	eddd 6a09 	vldr	s13, [sp, #36]	; 0x24
 8001a0a:	ed9d 9a02 	vldr	s18, [sp, #8]
 8001a0e:	eef0 3a4f 	vmov.f32	s7, s30
 8001a12:	68b9      	ldr	r1, [r7, #8]
 8001a14:	eeb0 3a6c 	vmov.f32	s6, s25
 8001a18:	ed9d 6a08 	vldr	s12, [sp, #32]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001a1c:	eeb0 fa44 	vmov.f32	s30, s8
		EXTI->SWIER1 |= GPIO_PIN_14;
 8001a20:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8001a24:	eef0 6a4a 	vmov.f32	s13, s20
 8001a28:	edcd 9a06 	vstr	s19, [sp, #24]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a2c:	eeb0 aa67 	vmov.f32	s20, s15
		EXTI->SWIER1 |= GPIO_PIN_14;
 8001a30:	ed8d 9a04 	vstr	s18, [sp, #16]
 8001a34:	eef0 9a6f 	vmov.f32	s19, s31
 8001a38:	eeb0 9a61 	vmov.f32	s18, s3
 8001a3c:	ed8d 6a0c 	vstr	s12, [sp, #48]	; 0x30
				inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a40:	eef0 1a60 	vmov.f32	s3, s1
		EXTI->SWIER1 |= GPIO_PIN_14;
 8001a44:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
				inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a48:	eef0 fa41 	vmov.f32	s31, s2
		inE6Rold = inER;                           inE6Iold = inEI;
 8001a4c:	ed9d 4a13 	vldr	s8, [sp, #76]	; 0x4c
		EXTI->SWIER1 |= GPIO_PIN_14;
 8001a50:	eeb0 6a6a 	vmov.f32	s12, s21
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001a54:	edcd ea09 	vstr	s29, [sp, #36]	; 0x24
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001a58:	eef0 ca64 	vmov.f32	s25, s9
		inE6Rold = inER;                           inE6Iold = inEI;
 8001a5c:	eddd 4a12 	vldr	s9, [sp, #72]	; 0x48
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a60:	eef0 aa47 	vmov.f32	s21, s14
				inE5Rold  = inER;                          inE5Iold  = inEI;
 8001a64:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001a68:	ed8d ea08 	vstr	s28, [sp, #32]
				inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001a6c:	edcd ba03 	vstr	s23, [sp, #12]
 8001a70:	ed8d ba02 	vstr	s22, [sp, #8]
		idx = 0;
 8001a74:	9e05      	ldr	r6, [sp, #20]
		EXTI->SWIER1 |= GPIO_PIN_14;
 8001a76:	60b9      	str	r1, [r7, #8]
		inE6Rold = inER;                           inE6Iold = inEI;
 8001a78:	ed8d 4a0f 	vstr	s8, [sp, #60]	; 0x3c
 8001a7c:	edcd 4a0d 	vstr	s9, [sp, #52]	; 0x34
				inE5Rold  = inER;                          inE5Iold  = inEI;
 8001a80:	ed8d 7a07 	vstr	s14, [sp, #28]
		inE2Rold = inER;                           inE2Iold = inEI;  
 8001a84:	eef0 4a6d 	vmov.f32	s9, s27
				inE5Rold  = inER;                          inE5Iold  = inEI;
 8001a88:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
		inE2Rold = inER;                           inE2Iold = inEI;  
 8001a8c:	eeb0 1a4c 	vmov.f32	s2, s24
		inE3Rold  = inER;                          inE3Iold  = inEI;  
 8001a90:	ed9d ba01 	vldr	s22, [sp, #4]
 8001a94:	eddd ba00 	vldr	s23, [sp]
				inE4Rold = inER;                           inE4Iold = inEI;
 8001a98:	ed9d ea0a 	vldr	s28, [sp, #40]	; 0x28
 8001a9c:	eddd ea0b 	vldr	s29, [sp, #44]	; 0x2c
				inE5Rold  = inER;                          inE5Iold  = inEI;
 8001aa0:	edcd 7a05 	vstr	s15, [sp, #20]
 8001aa4:	3b01      	subs	r3, #1
		inE1Rold = inER;                           inE1Iold = inEI;
 8001aa6:	eef0 7a62 	vmov.f32	s15, s5
 8001aaa:	eeb0 7a42 	vmov.f32	s14, s4
 8001aae:	3208      	adds	r2, #8
 8001ab0:	eef0 0a4d 	vmov.f32	s1, s26
 8001ab4:	b29b      	uxth	r3, r3
		inO1Rold2 = inO1Rold; inO1Rold = inOR;     inO1Iold2 = inO1Iold; inO1Iold = inOI;
 8001ab6:	eef0 2a68 	vmov.f32	s5, s17
 8001aba:	3408      	adds	r4, #8
		inE1Rold = inER;                           inE1Iold = inEI;
 8001abc:	eeb0 4a48 	vmov.f32	s8, s16
		inO1Rold2 = inO1Rold; inO1Rold = inOR;     inO1Iold2 = inO1Iold; inO1Iold = inOI;
 8001ac0:	eeb0 2a40 	vmov.f32	s4, s0
  while(k--)
 8001ac4:	4290      	cmp	r0, r2
 8001ac6:	d030      	beq.n	8001b2a <ADC_Stream0_Handler+0x52e>
    outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8001ac8:	eea2 7a05 	vfma.f32	s14, s4, s10
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;  
 8001acc:	ed12 0a01 	vldr	s0, [r2, #-4]
    outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8001ad0:	eee2 7a85 	vfma.f32	s15, s5, s10
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;  
 8001ad4:	ed12 8a02 	vldr	s16, [r2, #-8]
 8001ad8:	ed54 8a01 	vldr	s17, [r4, #-4]
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero), 
 8001adc:	07df      	lsls	r7, r3, #31
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;  
 8001ade:	ed14 da02 	vldr	s26, [r4, #-8]
    outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8001ae2:	ee34 4a08 	vadd.f32	s8, s8, s16
 8001ae6:	ee70 0a8d 	vadd.f32	s1, s1, s26
 8001aea:	ee37 7a00 	vadd.f32	s14, s14, s0
 8001aee:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8001af2:	eea4 7a25 	vfma.f32	s14, s8, s11
 8001af6:	eee0 7aa5 	vfma.f32	s15, s1, s11
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero), 
 8001afa:	f57f aee5 	bpl.w	80018c8 <ADC_Stream0_Handler+0x2cc>
      tmp1R = outR; tmp1I = outI;  // save the even element produced
 8001afe:	eef0 da67 	vmov.f32	s27, s15
 8001b02:	eeb0 ca47 	vmov.f32	s24, s14
 8001b06:	e7cd      	b.n	8001aa4 <ADC_Stream0_Handler+0x4a8>
 8001b08:	eef0 6a4a 	vmov.f32	s13, s20
      tmp2R = outR; tmp2I = outI;  // save the even element produced
 8001b0c:	edcd 4a00 	vstr	s9, [sp]
 8001b10:	eeb0 6a6a 	vmov.f32	s12, s21
 8001b14:	ed8d 4a01 	vstr	s8, [sp, #4]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001b18:	eeb0 aa67 	vmov.f32	s20, s15
 8001b1c:	eef0 aa47 	vmov.f32	s21, s14
		inE2Rold = inER;                           inE2Iold = inEI;  
 8001b20:	eef0 4a6d 	vmov.f32	s9, s27
 8001b24:	eeb0 1a4c 	vmov.f32	s2, s24
 8001b28:	e7bc      	b.n	8001aa4 <ADC_Stream0_Handler+0x4a8>
 8001b2a:	4634      	mov	r4, r6
 8001b2c:	4e89      	ldr	r6, [pc, #548]	; (8001d54 <ADC_Stream0_Handler+0x758>)
 8001b2e:	eeb0 ca4f 	vmov.f32	s24, s30
 8001b32:	edc9 fa00 	vstr	s31, [r9]
 8001b36:	ed86 9a00 	vstr	s18, [r6]
 8001b3a:	eeb0 fa61 	vmov.f32	s30, s3
 8001b3e:	4e86      	ldr	r6, [pc, #536]	; (8001d58 <ADC_Stream0_Handler+0x75c>)
 8001b40:	eef0 1a64 	vmov.f32	s3, s9
 8001b44:	edc8 9a00 	vstr	s19, [r8]
 8001b48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b4c:	ed86 ea00 	vstr	s28, [r6]
  }	

 LED_YELLOW_OFF;
 8001b50:	2200      	movs	r2, #0
 8001b52:	4e82      	ldr	r6, [pc, #520]	; (8001d5c <ADC_Stream0_Handler+0x760>)
 8001b54:	2102      	movs	r1, #2
 8001b56:	edce ea00 	vstr	s29, [lr]
 8001b5a:	ed86 2a00 	vstr	s4, [r6]
 8001b5e:	4e80      	ldr	r6, [pc, #512]	; (8001d60 <ADC_Stream0_Handler+0x764>)
 8001b60:	ed8c fa00 	vstr	s30, [ip]
 8001b64:	ed86 7a00 	vstr	s14, [r6]
 8001b68:	4e7e      	ldr	r6, [pc, #504]	; (8001d64 <ADC_Stream0_Handler+0x768>)
 8001b6a:	487f      	ldr	r0, [pc, #508]	; (8001d68 <ADC_Stream0_Handler+0x76c>)
 8001b6c:	ed86 4a00 	vstr	s8, [r6]
 8001b70:	4e7e      	ldr	r6, [pc, #504]	; (8001d6c <ADC_Stream0_Handler+0x770>)
 8001b72:	edc6 2a00 	vstr	s5, [r6]
 8001b76:	4e7e      	ldr	r6, [pc, #504]	; (8001d70 <ADC_Stream0_Handler+0x774>)
 8001b78:	edc6 7a00 	vstr	s15, [r6]
 8001b7c:	4e7d      	ldr	r6, [pc, #500]	; (8001d74 <ADC_Stream0_Handler+0x778>)
 8001b7e:	eddd 7a02 	vldr	s15, [sp, #8]
 8001b82:	edc6 0a00 	vstr	s1, [r6]
 8001b86:	4e7c      	ldr	r6, [pc, #496]	; (8001d78 <ADC_Stream0_Handler+0x77c>)
 8001b88:	edc6 aa00 	vstr	s21, [r6]
 8001b8c:	4e7b      	ldr	r6, [pc, #492]	; (8001d7c <ADC_Stream0_Handler+0x780>)
 8001b8e:	ed86 6a00 	vstr	s12, [r6]
 8001b92:	4e7b      	ldr	r6, [pc, #492]	; (8001d80 <ADC_Stream0_Handler+0x784>)
 8001b94:	ed86 1a00 	vstr	s2, [r6]
 8001b98:	4e7a      	ldr	r6, [pc, #488]	; (8001d84 <ADC_Stream0_Handler+0x788>)
 8001b9a:	ed86 aa00 	vstr	s20, [r6]
 8001b9e:	4e7a      	ldr	r6, [pc, #488]	; (8001d88 <ADC_Stream0_Handler+0x78c>)
 8001ba0:	edc6 6a00 	vstr	s13, [r6]
 8001ba4:	4e79      	ldr	r6, [pc, #484]	; (8001d8c <ADC_Stream0_Handler+0x790>)
 8001ba6:	edc6 1a00 	vstr	s3, [r6]
 8001baa:	4e79      	ldr	r6, [pc, #484]	; (8001d90 <ADC_Stream0_Handler+0x794>)
 8001bac:	edc6 ca00 	vstr	s25, [r6]
 8001bb0:	4e78      	ldr	r6, [pc, #480]	; (8001d94 <ADC_Stream0_Handler+0x798>)
 8001bb2:	ed86 3a00 	vstr	s6, [r6]
 8001bb6:	4e78      	ldr	r6, [pc, #480]	; (8001d98 <ADC_Stream0_Handler+0x79c>)
 8001bb8:	edc6 ba00 	vstr	s23, [r6]
 8001bbc:	4e77      	ldr	r6, [pc, #476]	; (8001d9c <ADC_Stream0_Handler+0x7a0>)
 8001bbe:	ed86 ca00 	vstr	s24, [r6]
 8001bc2:	4e77      	ldr	r6, [pc, #476]	; (8001da0 <ADC_Stream0_Handler+0x7a4>)
 8001bc4:	edc6 3a00 	vstr	s7, [r6]
 8001bc8:	4e76      	ldr	r6, [pc, #472]	; (8001da4 <ADC_Stream0_Handler+0x7a8>)
 8001bca:	ed86 ba00 	vstr	s22, [r6]
 8001bce:	4e76      	ldr	r6, [pc, #472]	; (8001da8 <ADC_Stream0_Handler+0x7ac>)
 8001bd0:	edc6 7a00 	vstr	s15, [r6]
 8001bd4:	eddd 7a04 	vldr	s15, [sp, #16]
 8001bd8:	4e74      	ldr	r6, [pc, #464]	; (8001dac <ADC_Stream0_Handler+0x7b0>)
 8001bda:	edc6 7a00 	vstr	s15, [r6]
 8001bde:	eddd 7a05 	vldr	s15, [sp, #20]
 8001be2:	4e73      	ldr	r6, [pc, #460]	; (8001db0 <ADC_Stream0_Handler+0x7b4>)
 8001be4:	edc6 7a00 	vstr	s15, [r6]
 8001be8:	eddd 7a03 	vldr	s15, [sp, #12]
 8001bec:	4e71      	ldr	r6, [pc, #452]	; (8001db4 <ADC_Stream0_Handler+0x7b8>)
 8001bee:	edc6 7a00 	vstr	s15, [r6]
 8001bf2:	eddd 7a06 	vldr	s15, [sp, #24]
 8001bf6:	4e70      	ldr	r6, [pc, #448]	; (8001db8 <ADC_Stream0_Handler+0x7bc>)
 8001bf8:	802b      	strh	r3, [r5, #0]
 8001bfa:	edc6 7a00 	vstr	s15, [r6]
 8001bfe:	eddd 7a07 	vldr	s15, [sp, #28]
 8001c02:	4e6e      	ldr	r6, [pc, #440]	; (8001dbc <ADC_Stream0_Handler+0x7c0>)
 8001c04:	4b6e      	ldr	r3, [pc, #440]	; (8001dc0 <ADC_Stream0_Handler+0x7c4>)
 8001c06:	edc6 7a00 	vstr	s15, [r6]
 8001c0a:	eddd 7a08 	vldr	s15, [sp, #32]
 8001c0e:	4e6d      	ldr	r6, [pc, #436]	; (8001dc4 <ADC_Stream0_Handler+0x7c8>)
 8001c10:	f8ab 4000 	strh.w	r4, [fp]
 8001c14:	edc6 7a00 	vstr	s15, [r6]
 8001c18:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8001c1c:	edc3 7a00 	vstr	s15, [r3]
 8001c20:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8001c24:	4b68      	ldr	r3, [pc, #416]	; (8001dc8 <ADC_Stream0_Handler+0x7cc>)
 8001c26:	edc3 7a00 	vstr	s15, [r3]
 8001c2a:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8001c2e:	4b67      	ldr	r3, [pc, #412]	; (8001dcc <ADC_Stream0_Handler+0x7d0>)
 8001c30:	edc3 7a00 	vstr	s15, [r3]
 8001c34:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8001c38:	4b65      	ldr	r3, [pc, #404]	; (8001dd0 <ADC_Stream0_Handler+0x7d4>)
 8001c3a:	edc3 7a00 	vstr	s15, [r3]
 8001c3e:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8001c42:	edca 7a00 	vstr	s15, [sl]

	}
 8001c46:	b015      	add	sp, #84	; 0x54
 8001c48:	ecbd 8b10 	vpop	{d8-d15}
 8001c4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 LED_YELLOW_OFF;
 8001c50:	f004 b90a 	b.w	8005e68 <HAL_GPIO_WritePin>
 8001c54:	eeb0 ba46 	vmov.f32	s22, s12
      tmp3R = outR; tmp3I = outI;  // save the even element produced
 8001c58:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 8001c5c:	eef0 ba66 	vmov.f32	s23, s13
 8001c60:	edcd 0a0a 	vstr	s1, [sp, #40]	; 0x28
 8001c64:	eef0 3a4f 	vmov.f32	s7, s30
 8001c68:	eeb0 3a6c 	vmov.f32	s6, s25
 8001c6c:	eef0 6a4a 	vmov.f32	s13, s20
 8001c70:	eeb0 6a6a 	vmov.f32	s12, s21
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001c74:	eef0 ca64 	vmov.f32	s25, s9
 8001c78:	eeb0 fa44 	vmov.f32	s30, s8
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001c7c:	eeb0 aa67 	vmov.f32	s20, s15
 8001c80:	eef0 aa47 	vmov.f32	s21, s14
		inE2Rold = inER;                           inE2Iold = inEI;  
 8001c84:	eef0 4a6d 	vmov.f32	s9, s27
 8001c88:	eeb0 1a4c 	vmov.f32	s2, s24
 8001c8c:	e70a      	b.n	8001aa4 <ADC_Stream0_Handler+0x4a8>
 8001c8e:	eeb0 ea43 	vmov.f32	s28, s6
		      tmp4R = outR; tmp4I = outI;  // save the even element produced
 8001c92:	edcd ba10 	vstr	s23, [sp, #64]	; 0x40
 8001c96:	eef0 ea63 	vmov.f32	s29, s7
 8001c9a:	ed8d ba11 	vstr	s22, [sp, #68]	; 0x44
 8001c9e:	eef0 3a4f 	vmov.f32	s7, s30
		inE3Rold  = inER;                          inE3Iold  = inEI;  
 8001ca2:	ed9d ba01 	vldr	s22, [sp, #4]
 8001ca6:	eeb0 3a6c 	vmov.f32	s6, s25
 8001caa:	eddd ba00 	vldr	s23, [sp]
 8001cae:	eef0 6a4a 	vmov.f32	s13, s20
 8001cb2:	eeb0 6a6a 	vmov.f32	s12, s21
 8001cb6:	eeb0 9a61 	vmov.f32	s18, s3
 8001cba:	eef0 9a6f 	vmov.f32	s19, s31
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001cbe:	eef0 ca64 	vmov.f32	s25, s9
				inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001cc2:	eef0 fa41 	vmov.f32	s31, s2
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001cc6:	eeb0 fa44 	vmov.f32	s30, s8
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001cca:	eeb0 aa67 	vmov.f32	s20, s15
 8001cce:	eef0 aa47 	vmov.f32	s21, s14
				inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001cd2:	eef0 1a60 	vmov.f32	s3, s1
		inE2Rold = inER;                           inE2Iold = inEI;  
 8001cd6:	eef0 4a6d 	vmov.f32	s9, s27
 8001cda:	eeb0 1a4c 	vmov.f32	s2, s24
 8001cde:	e6e1      	b.n	8001aa4 <ADC_Stream0_Handler+0x4a8>
 8001ce0:	eddd 6a02 	vldr	s13, [sp, #8]
 8001ce4:	eef0 3a4f 	vmov.f32	s7, s30
 8001ce8:	edcd 9a06 	vstr	s19, [sp, #24]
 8001cec:	eeb0 3a6c 	vmov.f32	s6, s25
 8001cf0:	edcd 6a04 	vstr	s13, [sp, #16]
 8001cf4:	eeb0 6a6a 	vmov.f32	s12, s21
 8001cf8:	eef0 6a4a 	vmov.f32	s13, s20
				inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001cfc:	edcd ba03 	vstr	s23, [sp, #12]
 8001d00:	eeb0 9a61 	vmov.f32	s18, s3
 8001d04:	ed8d ba02 	vstr	s22, [sp, #8]
 8001d08:	eef0 9a6f 	vmov.f32	s19, s31
		      tmp5R = outR; tmp5I = outI;  // save the even element produced
 8001d0c:	edcd ea13 	vstr	s29, [sp, #76]	; 0x4c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001d10:	eeb0 fa44 	vmov.f32	s30, s8
		      tmp5R = outR; tmp5I = outI;  // save the even element produced
 8001d14:	ed8d ea12 	vstr	s28, [sp, #72]	; 0x48
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001d18:	eef0 ca64 	vmov.f32	s25, s9
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001d1c:	eeb0 aa67 	vmov.f32	s20, s15
 8001d20:	eef0 aa47 	vmov.f32	s21, s14
				inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001d24:	eef0 1a60 	vmov.f32	s3, s1
 8001d28:	eef0 fa41 	vmov.f32	s31, s2
				inE5Rold  = inER;                          inE5Iold  = inEI;
 8001d2c:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8001d30:	edcd 7a07 	vstr	s15, [sp, #28]
 8001d34:	e6a6      	b.n	8001a84 <ADC_Stream0_Handler+0x488>
	  SDR_ComputeLO(LOfreq-cwpitch);  // prepare next LO buffer
 8001d36:	4b27      	ldr	r3, [pc, #156]	; (8001dd4 <ADC_Stream0_Handler+0x7d8>)
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001d40:	f000 f884 	bl	8001e4c <SDR_ComputeLO>
 8001d44:	e475      	b.n	8001632 <ADC_Stream0_Handler+0x36>
 8001d46:	bf00      	nop
 8001d48:	2000d600 	.word	0x2000d600
 8001d4c:	34000000 	.word	0x34000000
 8001d50:	2000b600 	.word	0x2000b600
 8001d54:	24000464 	.word	0x24000464
 8001d58:	24000418 	.word	0x24000418
 8001d5c:	24000438 	.word	0x24000438
 8001d60:	2400043c 	.word	0x2400043c
 8001d64:	24000404 	.word	0x24000404
 8001d68:	58021000 	.word	0x58021000
 8001d6c:	24000430 	.word	0x24000430
 8001d70:	24000434 	.word	0x24000434
 8001d74:	24000400 	.word	0x24000400
 8001d78:	24000448 	.word	0x24000448
 8001d7c:	2400044c 	.word	0x2400044c
 8001d80:	2400040c 	.word	0x2400040c
 8001d84:	24000440 	.word	0x24000440
 8001d88:	24000444 	.word	0x24000444
 8001d8c:	24000408 	.word	0x24000408
 8001d90:	24000458 	.word	0x24000458
 8001d94:	2400045c 	.word	0x2400045c
 8001d98:	24000414 	.word	0x24000414
 8001d9c:	24000450 	.word	0x24000450
 8001da0:	24000454 	.word	0x24000454
 8001da4:	24000410 	.word	0x24000410
 8001da8:	24000478 	.word	0x24000478
 8001dac:	2400047c 	.word	0x2400047c
 8001db0:	24000424 	.word	0x24000424
 8001db4:	24000470 	.word	0x24000470
 8001db8:	24000474 	.word	0x24000474
 8001dbc:	24000420 	.word	0x24000420
 8001dc0:	2400048c 	.word	0x2400048c
 8001dc4:	24000488 	.word	0x24000488
 8001dc8:	2400042c 	.word	0x2400042c
 8001dcc:	24000480 	.word	0x24000480
 8001dd0:	24000484 	.word	0x24000484
 8001dd4:	24009d14 	.word	0x24009d14
 8001dd8:	eddd 6a09 	vldr	s13, [sp, #36]	; 0x24
 8001ddc:	eef0 3a4f 	vmov.f32	s7, s30
 8001de0:	eeb0 3a6c 	vmov.f32	s6, s25
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001de4:	edcd ea09 	vstr	s29, [sp, #36]	; 0x24
 8001de8:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8001dec:	eeb0 6a6a 	vmov.f32	s12, s21
 8001df0:	eddd 6a08 	vldr	s13, [sp, #32]
 8001df4:	eeb0 9a61 	vmov.f32	s18, s3
 8001df8:	eef0 9a6f 	vmov.f32	s19, s31
 8001dfc:	ed8d ea08 	vstr	s28, [sp, #32]
 8001e00:	edcd 6a0c 	vstr	s13, [sp, #48]	; 0x30
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001e04:	eeb0 fa44 	vmov.f32	s30, s8
 8001e08:	eddd 6a03 	vldr	s13, [sp, #12]
 8001e0c:	eef0 ca64 	vmov.f32	s25, s9
				inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001e10:	edcd ba03 	vstr	s23, [sp, #12]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001e14:	eef0 aa47 	vmov.f32	s21, s14
 8001e18:	edcd 6a06 	vstr	s13, [sp, #24]
				inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001e1c:	eef0 1a60 	vmov.f32	s3, s1
 8001e20:	eddd 6a02 	vldr	s13, [sp, #8]
 8001e24:	eef0 fa41 	vmov.f32	s31, s2
				inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001e28:	ed8d ba02 	vstr	s22, [sp, #8]
 8001e2c:	edcd 6a04 	vstr	s13, [sp, #16]
 8001e30:	eef0 6a4a 	vmov.f32	s13, s20
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001e34:	eeb0 aa67 	vmov.f32	s20, s15
		inE6Rold = inER;                           inE6Iold = inEI;
 8001e38:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 8001e3c:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 8001e40:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
 8001e44:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8001e48:	e770      	b.n	8001d2c <ADC_Stream0_Handler+0x730>
 8001e4a:	bf00      	nop

08001e4c <SDR_ComputeLO>:

#include "Globals.h"

//------------------------------------------------------------------------------
void SDR_ComputeLO(float32_t freq)
{
 8001e4c:	b538      	push	{r3, r4, r5, lr}
	uint16_t        k;
	float           *pBufR=LO_R, *pBufI=LO_I;
  static float    costheta, sintheta, oldfreq = 1.e9f, ym1i=1.f, ym1q=0.f, 
	                ypi, ypq, tmpi, gain=1.f;
	
	if (oldfreq != freq)
 8001e4e:	4b4f      	ldr	r3, [pc, #316]	; (8001f8c <SDR_ComputeLO+0x140>)
 8001e50:	edd3 7a00 	vldr	s15, [r3]
 8001e54:	eef4 7a40 	vcmp.f32	s15, s0
{
 8001e58:	ed2d 8b04 	vpush	{d8-d9}
	if (oldfreq != freq)
 8001e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e60:	d171      	bne.n	8001f46 <SDR_ComputeLO+0xfa>
 8001e62:	4a4b      	ldr	r2, [pc, #300]	; (8001f90 <SDR_ComputeLO+0x144>)
 8001e64:	4b4b      	ldr	r3, [pc, #300]	; (8001f94 <SDR_ComputeLO+0x148>)
 8001e66:	ed92 8a00 	vldr	s16, [r2]
 8001e6a:	ed93 6a00 	vldr	s12, [r3]
// Coupled Quadrature Oscillator with level stabilization	
	while(k)
	{                    
// loop partially unrolled for performance		

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001e6e:	484a      	ldr	r0, [pc, #296]	; (8001f98 <SDR_ComputeLO+0x14c>)
 8001e70:	4c4a      	ldr	r4, [pc, #296]	; (8001f9c <SDR_ComputeLO+0x150>)
 8001e72:	4d4b      	ldr	r5, [pc, #300]	; (8001fa0 <SDR_ComputeLO+0x154>)
 8001e74:	4b4b      	ldr	r3, [pc, #300]	; (8001fa4 <SDR_ComputeLO+0x158>)
 8001e76:	edd0 5a00 	vldr	s11, [r0]
 8001e7a:	edd4 7a00 	vldr	s15, [r4]
 8001e7e:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 8001e82:	ed95 5a00 	vldr	s10, [r5]
 8001e86:	4a48      	ldr	r2, [pc, #288]	; (8001fa8 <SDR_ComputeLO+0x15c>)
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001e88:	ee27 7a88 	vmul.f32	s14, s15, s16
 8001e8c:	3310      	adds	r3, #16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001e8e:	ee66 7a67 	vnmul.f32	s15, s12, s15
 8001e92:	3210      	adds	r2, #16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001e94:	eea5 7a06 	vfma.f32	s14, s10, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001e98:	eee5 7a08 	vfma.f32	s15, s10, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001e9c:	ee27 7a25 	vmul.f32	s14, s14, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001ea0:	ee67 6aa5 	vmul.f32	s13, s15, s11
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001ea4:	ee67 7a08 	vmul.f32	s15, s14, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001ea8:	ed02 7a08 	vstr	s14, [r2, #-32]	; 0xffffffe0
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001eac:	ee26 7a47 	vnmul.f32	s14, s12, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001eb0:	ed43 6a08 	vstr	s13, [r3, #-32]	; 0xffffffe0
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001eb4:	eee6 7a86 	vfma.f32	s15, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001eb8:	eea6 7a88 	vfma.f32	s14, s13, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001ebc:	ee67 7aa5 	vmul.f32	s15, s15, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001ec0:	ee27 7a25 	vmul.f32	s14, s14, s11
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001ec4:	ee67 6a88 	vmul.f32	s13, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001ec8:	ed42 7a07 	vstr	s15, [r2, #-28]	; 0xffffffe4
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001ecc:	ee66 7a67 	vnmul.f32	s15, s12, s15
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001ed0:	ed03 7a07 	vstr	s14, [r3, #-28]	; 0xffffffe4
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001ed4:	eee7 6a06 	vfma.f32	s13, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001ed8:	eee7 7a08 	vfma.f32	s15, s14, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001edc:	ee26 7aa5 	vmul.f32	s14, s13, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001ee0:	ee67 7aa5 	vmul.f32	s15, s15, s11
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001ee4:	ee66 6a47 	vnmul.f32	s13, s12, s14
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001ee8:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001eec:	ee27 7a08 	vmul.f32	s14, s14, s16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001ef0:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001ef4:	eee7 6a88 	vfma.f32	s13, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001ef8:	eea7 7a86 	vfma.f32	s14, s15, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001efc:	ee25 5aa6 	vmul.f32	s10, s11, s13
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001f00:	ee65 7a87 	vmul.f32	s15, s11, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001f04:	ed03 5a05 	vstr	s10, [r3, #-20]	; 0xffffffec
	while(k)
 8001f08:	428b      	cmp	r3, r1
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001f0a:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
	while(k)
 8001f0e:	d1bb      	bne.n	8001e88 <SDR_ComputeLO+0x3c>
    ym1i = tmpi;

    k--;
	}
// compute the gain to be applied to stabilize the level
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8001f10:	ee67 5a07 	vmul.f32	s11, s14, s14
 8001f14:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8001fac <SDR_ComputeLO+0x160>
 8001f18:	edc4 7a00 	vstr	s15, [r4]
 8001f1c:	eddf 4a24 	vldr	s9, [pc, #144]	; 8001fb0 <SDR_ComputeLO+0x164>
 8001f20:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8001f24:	4a23      	ldr	r2, [pc, #140]	; (8001fb4 <SDR_ComputeLO+0x168>)
 8001f26:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <SDR_ComputeLO+0x16c>)
 8001f28:	ed85 5a00 	vstr	s10, [r5]
 8001f2c:	edc2 6a00 	vstr	s13, [r2]
 8001f30:	ed83 7a00 	vstr	s14, [r3]
 8001f34:	ee76 7a65 	vsub.f32	s15, s12, s11
}	
 8001f38:	ecbd 8b04 	vpop	{d8-d9}
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8001f3c:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8001f40:	edc0 7a00 	vstr	s15, [r0]
}	
 8001f44:	bd38      	pop	{r3, r4, r5, pc}
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001f46:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8001fbc <SDR_ComputeLO+0x170>
 8001f4a:	4a1d      	ldr	r2, [pc, #116]	; (8001fc0 <SDR_ComputeLO+0x174>)
 8001f4c:	ee60 7a27 	vmul.f32	s15, s0, s15
	  oldfreq  =  freq;
 8001f50:	ed83 0a00 	vstr	s0, [r3]
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001f54:	ed92 7a00 	vldr	s14, [r2]
 8001f58:	ee87 9a87 	vdiv.f32	s18, s15, s14
 8001f5c:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 8001f60:	eeb0 0b49 	vmov.f64	d0, d9
 8001f64:	f00b f9c4 	bl	800d2f0 <cos>
 8001f68:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <SDR_ComputeLO+0x144>)
    sintheta = -sin(TWOPI * freq / SamplingRate);
 8001f6e:	eeb0 0b49 	vmov.f64	d0, d9
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001f72:	ed83 8a00 	vstr	s16, [r3]
    sintheta = -sin(TWOPI * freq / SamplingRate);
 8001f76:	f00b f9f7 	bl	800d368 <sin>
 8001f7a:	eeb7 6bc0 	vcvt.f32.f64	s12, d0
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <SDR_ComputeLO+0x148>)
 8001f80:	eeb1 6a46 	vneg.f32	s12, s12
 8001f84:	ed83 6a00 	vstr	s12, [r3]
 8001f88:	e771      	b.n	8001e6e <SDR_ComputeLO+0x22>
 8001f8a:	bf00      	nop
 8001f8c:	240000e8 	.word	0x240000e8
 8001f90:	24000494 	.word	0x24000494
 8001f94:	240004a4 	.word	0x240004a4
 8001f98:	240000e4 	.word	0x240000e4
 8001f9c:	240004bc 	.word	0x240004bc
 8001fa0:	240000f4 	.word	0x240000f4
 8001fa4:	24003ae4 	.word	0x24003ae4
 8001fa8:	24004418 	.word	0x24004418
 8001fac:	46000200 	.word	0x46000200
 8001fb0:	39000000 	.word	0x39000000
 8001fb4:	240004c0 	.word	0x240004c0
 8001fb8:	240004c4 	.word	0x240004c4
 8001fbc:	40c90fdb 	.word	0x40c90fdb
 8001fc0:	24004300 	.word	0x24004300

08001fc4 <SDR_2R_toC_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time
  while(blkCnt)
 8001fc4:	089b      	lsrs	r3, r3, #2
 8001fc6:	d02e      	beq.n	8002026 <SDR_2R_toC_f32+0x62>
 8001fc8:	3010      	adds	r0, #16
 8001fca:	3110      	adds	r1, #16
 8001fcc:	3220      	adds	r2, #32
{
 8001fce:	b410      	push	{r4}
  {
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001fd0:	f850 4c10 	ldr.w	r4, [r0, #-16]
  while(blkCnt)
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	f100 0010 	add.w	r0, r0, #16
 8001fda:	f101 0110 	add.w	r1, r1, #16
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001fde:	f842 4c20 	str.w	r4, [r2, #-32]
 8001fe2:	f102 0220 	add.w	r2, r2, #32
 8001fe6:	f851 4c20 	ldr.w	r4, [r1, #-32]
 8001fea:	f842 4c3c 	str.w	r4, [r2, #-60]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001fee:	f850 4c1c 	ldr.w	r4, [r0, #-28]
 8001ff2:	f842 4c38 	str.w	r4, [r2, #-56]
 8001ff6:	f851 4c1c 	ldr.w	r4, [r1, #-28]
 8001ffa:	f842 4c34 	str.w	r4, [r2, #-52]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001ffe:	f850 4c18 	ldr.w	r4, [r0, #-24]
 8002002:	f842 4c30 	str.w	r4, [r2, #-48]
 8002006:	f851 4c18 	ldr.w	r4, [r1, #-24]
 800200a:	f842 4c2c 	str.w	r4, [r2, #-44]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 800200e:	f850 4c14 	ldr.w	r4, [r0, #-20]
 8002012:	f842 4c28 	str.w	r4, [r2, #-40]
 8002016:	f851 4c14 	ldr.w	r4, [r1, #-20]
 800201a:	f842 4c24 	str.w	r4, [r2, #-36]
  while(blkCnt)
 800201e:	d1d7      	bne.n	8001fd0 <SDR_2R_toC_f32+0xc>
    
    blkCnt--;
  }
}
 8002020:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	4770      	bx	lr

08002028 <SDR_downconvert_f32>:
//---------------------------------------------------------------------------------------
// Multiply the real signal vector by the complex NCO vector producing the zeroIF
// complex vector, and at the same time convert to floating point also using
// the smoothed average ADC offset computed by the DMA2_Stream0_IRQHandler routine
void SDR_downconvert_f32(uint16_t* signal, float offset, float* zeroIF_R, float* zeroIF_I)
{
 8002028:	4b35      	ldr	r3, [pc, #212]	; (8002100 <SDR_downconvert_f32+0xd8>)
 800202a:	3110      	adds	r1, #16
 800202c:	3210      	adds	r2, #16
 800202e:	3008      	adds	r0, #8
		 tmp2=((*(pt)  -offset)) / 2048.f;
		 tmp3=((*(pt+3)-offset)) / 2048.f;
		 tmp4=((*(pt+2)-offset)) / 2048.f;
*/

     tmp2=((*(pt+1)-offset)) / 2048.f;
 8002030:	eddf 5a34 	vldr	s11, [pc, #208]	; 8002104 <SDR_downconvert_f32+0xdc>
{
 8002034:	b430      	push	{r4, r5}
 8002036:	f503 6500 	add.w	r5, r3, #2048	; 0x800
 800203a:	4c33      	ldr	r4, [pc, #204]	; (8002108 <SDR_downconvert_f32+0xe0>)
		 tmp1=((*(pt)  -offset)) / 2048.f;
 800203c:	f830 cc08 	ldrh.w	ip, [r0, #-8]
 8002040:	3310      	adds	r3, #16
		 tmp4=((*(pt+3)-offset)) / 2048.f;
		 tmp3=((*(pt+2)-offset)) / 2048.f;

    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8002042:	ed13 5a08 	vldr	s10, [r3, #-32]	; 0xffffffe0
 8002046:	3008      	adds	r0, #8
		 tmp1=((*(pt)  -offset)) / 2048.f;
 8002048:	ee06 ca10 	vmov	s12, ip
     tmp2=((*(pt+1)-offset)) / 2048.f;
 800204c:	f830 cc0e 	ldrh.w	ip, [r0, #-14]
 8002050:	3110      	adds	r1, #16
 8002052:	3410      	adds	r4, #16
		 tmp1=((*(pt)  -offset)) / 2048.f;
 8002054:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
     tmp2=((*(pt+1)-offset)) / 2048.f;
 8002058:	ee06 ca90 	vmov	s13, ip
		 tmp4=((*(pt+3)-offset)) / 2048.f;
 800205c:	f830 cc0a 	ldrh.w	ip, [r0, #-10]
 8002060:	3210      	adds	r2, #16
     tmp2=((*(pt+1)-offset)) / 2048.f;
 8002062:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		 tmp1=((*(pt)  -offset)) / 2048.f;
 8002066:	ee36 6a40 	vsub.f32	s12, s12, s0
		 tmp4=((*(pt+3)-offset)) / 2048.f;
 800206a:	ee07 ca90 	vmov	s15, ip
		 tmp3=((*(pt+2)-offset)) / 2048.f;
 800206e:	f830 cc0c 	ldrh.w	ip, [r0, #-12]
     tmp2=((*(pt+1)-offset)) / 2048.f;
 8002072:	ee76 6ac0 	vsub.f32	s13, s13, s0
		 tmp1=((*(pt)  -offset)) / 2048.f;
 8002076:	ee26 6a25 	vmul.f32	s12, s12, s11
		 tmp3=((*(pt+2)-offset)) / 2048.f;
 800207a:	ee07 ca10 	vmov	s14, ip
		 tmp4=((*(pt+3)-offset)) / 2048.f;
 800207e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     tmp2=((*(pt+1)-offset)) / 2048.f;
 8002082:	ee66 6aa5 	vmul.f32	s13, s13, s11
    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8002086:	ee25 5a06 	vmul.f32	s10, s10, s12
		 tmp3=((*(pt+2)-offset)) / 2048.f;
 800208a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		 tmp4=((*(pt+3)-offset)) / 2048.f;
 800208e:	ee77 7ac0 	vsub.f32	s15, s15, s0
    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8002092:	ed01 5a08 	vstr	s10, [r1, #-32]	; 0xffffffe0
 8002096:	ed14 5a08 	vldr	s10, [r4, #-32]	; 0xffffffe0
		 tmp3=((*(pt+2)-offset)) / 2048.f;
 800209a:	ee37 7a40 	vsub.f32	s14, s14, s0
		 tmp4=((*(pt+3)-offset)) / 2048.f;
 800209e:	ee67 7aa5 	vmul.f32	s15, s15, s11
    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 80020a2:	ee25 6a06 	vmul.f32	s12, s10, s12
		 tmp3=((*(pt+2)-offset)) / 2048.f;
 80020a6:	ee27 7a25 	vmul.f32	s14, s14, s11
    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 80020aa:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		 *zeroIF_R++ = *LOR++ * tmp2;  *zeroIF_I++ = *LOI++ * tmp2;
 80020ae:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 80020b2:	ee26 6a26 	vmul.f32	s12, s12, s13
 80020b6:	ed01 6a07 	vstr	s12, [r1, #-28]	; 0xffffffe4
 80020ba:	ed14 6a07 	vldr	s12, [r4, #-28]	; 0xffffffe4
 80020be:	ee66 6a26 	vmul.f32	s13, s12, s13
 80020c2:	ed42 6a07 	vstr	s13, [r2, #-28]	; 0xffffffe4
		 *zeroIF_R++ = *LOR++ * tmp3;  *zeroIF_I++ = *LOI++ * tmp3;
 80020c6:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 80020ca:	ee66 6a87 	vmul.f32	s13, s13, s14
 80020ce:	ed41 6a06 	vstr	s13, [r1, #-24]	; 0xffffffe8
 80020d2:	ed54 6a06 	vldr	s13, [r4, #-24]	; 0xffffffe8
 80020d6:	ee26 7a87 	vmul.f32	s14, s13, s14
 80020da:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		 *zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 80020de:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
  while(blkCnt)
 80020e2:	42ab      	cmp	r3, r5
		 *zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 80020e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020e8:	ed01 7a05 	vstr	s14, [r1, #-20]	; 0xffffffec
 80020ec:	ed14 7a05 	vldr	s14, [r4, #-20]	; 0xffffffec
 80020f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f4:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
  while(blkCnt)
 80020f8:	d1a0      	bne.n	800203c <SDR_downconvert_f32+0x14>
     pt += 4;
     blkCnt--;
	}	
}
 80020fa:	bc30      	pop	{r4, r5}
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	24003ae4 	.word	0x24003ae4
 8002104:	3a000000 	.word	0x3a000000
 8002108:	24004418 	.word	0x24004418

0800210c <SDR_float_to_DAC_audio>:
//---------------------------------------------------------------------------------------
// Convert back from floating point to short words, applying the volume setting
void SDR_float_to_DAC_audio(float *pSrc, short *pDst, uint16_t blockSize)
{
 800210c:	b470      	push	{r4, r5, r6}
  short *AudioBuffer;

  AudioBuffer = pDst;

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;   // loop unrolling.  Compute 4 outputs at a time
 800210e:	0894      	lsrs	r4, r2, #2
  while(blkCnt--)
 8002110:	2c00      	cmp	r4, #0
 8002112:	d04a      	beq.n	80021aa <SDR_float_to_DAC_audio+0x9e>
 8002114:	1e66      	subs	r6, r4, #1
  {
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002116:	4c30      	ldr	r4, [pc, #192]	; (80021d8 <SDR_float_to_DAC_audio+0xcc>)
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002118:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800211c:	b2b3      	uxth	r3, r6
 800211e:	f100 0620 	add.w	r6, r0, #32
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002122:	edd4 7a00 	vldr	s15, [r4]
 8002126:	3010      	adds	r0, #16
 8002128:	eb06 1603 	add.w	r6, r6, r3, lsl #4
 800212c:	460b      	mov	r3, r1
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800212e:	eeb0 5a47 	vmov.f32	s10, s14
 8002132:	ed10 6a02 	vldr	s12, [r0, #-8]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002136:	eef0 4a47 	vmov.f32	s9, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800213a:	ed50 6a04 	vldr	s13, [r0, #-16]
 800213e:	eef0 5a47 	vmov.f32	s11, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002142:	2500      	movs	r5, #0
 8002144:	eea7 5a86 	vfma.f32	s10, s15, s12
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002148:	ed10 6a01 	vldr	s12, [r0, #-4]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800214c:	462c      	mov	r4, r5
 800214e:	3010      	adds	r0, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002150:	eee7 4a86 	vfma.f32	s9, s15, s12
 8002154:	3308      	adds	r3, #8
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002156:	eee6 5aa7 	vfma.f32	s11, s13, s15
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800215a:	ed50 6a07 	vldr	s13, [r0, #-28]	; 0xffffffe4
  while(blkCnt--)
 800215e:	4286      	cmp	r6, r0
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002160:	eebe 5aea 	vcvt.s32.f32	s10, s10, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002164:	eeb0 6a64 	vmov.f32	s12, s9
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002168:	eef0 4a47 	vmov.f32	s9, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800216c:	ee15 ca10 	vmov	ip, s10
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002170:	eefe 5aea 	vcvt.s32.f32	s11, s11, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002174:	eebe 6aea 	vcvt.s32.f32	s12, s12, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002178:	f36c 050f 	bfi	r5, ip, #0, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800217c:	eee7 4aa6 	vfma.f32	s9, s15, s13
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002180:	ee15 ca90 	vmov	ip, s11
 8002184:	f36c 040f 	bfi	r4, ip, #0, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002188:	ee16 ca10 	vmov	ip, s12
 800218c:	f36c 451f 	bfi	r5, ip, #16, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002190:	eef0 6a64 	vmov.f32	s13, s9
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002194:	f843 5c04 	str.w	r5, [r3, #-4]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002198:	eefe 6aea 	vcvt.s32.f32	s13, s13, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800219c:	ee16 ca90 	vmov	ip, s13
 80021a0:	f36c 441f 	bfi	r4, ip, #16, #16
 80021a4:	f843 4c08 	str.w	r4, [r3, #-8]
  while(blkCnt--)
 80021a8:	d1c1      	bne.n	800212e <SDR_float_to_DAC_audio+0x22>
	}	

  // SCB_Clean because is from RAM to DMA. Invalidate is for DMA to RAM
#ifdef USE_DCACHE
  SCB_CleanDCache_by_Addr((uint32_t *) AudioBuffer, 4 * blockSize);
 80021aa:	0092      	lsls	r2, r2, #2
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80021ac:	f3bf 8f4f 	dsb	sy
    uint32_t op_addr = (uint32_t) addr;
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
 80021b0:	b15a      	cbz	r2, 80021ca <SDR_float_to_DAC_audio+0xbe>
 80021b2:	3a01      	subs	r2, #1
 80021b4:	f101 0320 	add.w	r3, r1, #32
      SCB->DCCMVAC = op_addr;
 80021b8:	4808      	ldr	r0, [pc, #32]	; (80021dc <SDR_float_to_DAC_audio+0xd0>)
 80021ba:	f022 021f 	bic.w	r2, r2, #31
 80021be:	4413      	add	r3, r2
 80021c0:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 80021c4:	3120      	adds	r1, #32
    while (op_size > 0) {
 80021c6:	4299      	cmp	r1, r3
 80021c8:	d1fa      	bne.n	80021c0 <SDR_float_to_DAC_audio+0xb4>
 80021ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80021ce:	f3bf 8f6f 	isb	sy
#endif
return;
}	
 80021d2:	bc70      	pop	{r4, r5, r6}
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	240042d4 	.word	0x240042d4
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <SDR_memcpy_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time.    
  while(blkCnt > 0u)
 80021e0:	0892      	lsrs	r2, r2, #2
 80021e2:	d017      	beq.n	8002214 <SDR_memcpy_f32+0x34>
 80021e4:	3110      	adds	r1, #16
 80021e6:	3010      	adds	r0, #16
  {
    /* Copy and then store the results in the destination buffer */
    in1 = *pSrc++;  *pDst++ = in1;
 80021e8:	f851 3c10 	ldr.w	r3, [r1, #-16]
  while(blkCnt > 0u)
 80021ec:	3a01      	subs	r2, #1
 80021ee:	f101 0110 	add.w	r1, r1, #16
 80021f2:	f100 0010 	add.w	r0, r0, #16
    in1 = *pSrc++;  *pDst++ = in1;
 80021f6:	f840 3c20 	str.w	r3, [r0, #-32]
    in2 = *pSrc++;  *pDst++ = in2;
 80021fa:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 80021fe:	f840 3c1c 	str.w	r3, [r0, #-28]
    in3 = *pSrc++;  *pDst++ = in3;
 8002202:	f851 3c18 	ldr.w	r3, [r1, #-24]
 8002206:	f840 3c18 	str.w	r3, [r0, #-24]
    in4 = *pSrc++;  *pDst++ = in4;
 800220a:	f851 3c14 	ldr.w	r3, [r1, #-20]
 800220e:	f840 3c14 	str.w	r3, [r0, #-20]
  while(blkCnt > 0u)
 8002212:	d1e9      	bne.n	80021e8 <SDR_memcpy_f32+0x8>
		
// Decrement the loop counter
    blkCnt--;
  }
}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop

08002218 <SDR_mirror_LSB>:
{
  uint32_t blkCnt;            /* loop counter */
  float *pbR, *pbI, *peR, *peI;
	
// loop Unrolling */
  blkCnt = blockSize >> 3u;  // divide by 8, as the mirroring stops at half the buffer...
 8002218:	08ca      	lsrs	r2, r1, #3
	blkCnt--;                  // minus 1, as the DC term is skipped

  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 800221a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000

//  Compute 4 outputs at a time.    
	while(blkCnt--)
 800221e:	2a01      	cmp	r2, #1
  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8002220:	440b      	add	r3, r1
	while(blkCnt--)
 8002222:	d037      	beq.n	8002294 <SDR_mirror_LSB+0x7c>
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	1e91      	subs	r1, r2, #2
{
 8002228:	b410      	push	{r4}
 800222a:	f1a3 0220 	sub.w	r2, r3, #32
 800222e:	f1a3 041c 	sub.w	r4, r3, #28
 8002232:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8002236:	4402      	add	r2, r0
 8002238:	4420      	add	r0, r4
	{
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 800223a:	6a14      	ldr	r4, [r2, #32]
	while(blkCnt--)
 800223c:	3901      	subs	r1, #1
 800223e:	3a20      	subs	r2, #32
 8002240:	3820      	subs	r0, #32
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002242:	f843 4c20 	str.w	r4, [r3, #-32]
 8002246:	3320      	adds	r3, #32
 8002248:	edd0 7a10 	vldr	s15, [r0, #64]	; 0x40
 800224c:	eef1 7a67 	vneg.f32	s15, s15
 8002250:	ed43 7a0f 	vstr	s15, [r3, #-60]	; 0xffffffc4
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002254:	6b94      	ldr	r4, [r2, #56]	; 0x38
 8002256:	f843 4c38 	str.w	r4, [r3, #-56]
 800225a:	edd0 7a0e 	vldr	s15, [r0, #56]	; 0x38
 800225e:	eef1 7a67 	vneg.f32	s15, s15
 8002262:	ed43 7a0d 	vstr	s15, [r3, #-52]	; 0xffffffcc
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002266:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8002268:	f843 4c30 	str.w	r4, [r3, #-48]
 800226c:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8002270:	eef1 7a67 	vneg.f32	s15, s15
 8002274:	ed43 7a0b 	vstr	s15, [r3, #-44]	; 0xffffffd4
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002278:	6a94      	ldr	r4, [r2, #40]	; 0x28
 800227a:	f843 4c28 	str.w	r4, [r3, #-40]
	while(blkCnt--)
 800227e:	1c4c      	adds	r4, r1, #1
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002280:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 8002284:	eef1 7a67 	vneg.f32	s15, s15
 8002288:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
	while(blkCnt--)
 800228c:	d1d5      	bne.n	800223a <SDR_mirror_LSB+0x22>
	}
}
 800228e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop

08002298 <SDR_compute_IIR_parms>:
// ------------------------------------------------------
// Compute the parameters for the double IIR filter used for the narrow CW mode
void SDR_compute_IIR_parms(void)
{
 8002298:	b508      	push	{r3, lr}

   r = Qfactor;

   a1 = a2 = b0 = 0.f; 
   r2 = r*r;
   wr = 2.f * cwpitch / rate * myPI;
 800229a:	4a2b      	ldr	r2, [pc, #172]	; (8002348 <SDR_compute_IIR_parms+0xb0>)
	 float rate = SamplingRate/256; //SamplingRate / decimation
 800229c:	4b2b      	ldr	r3, [pc, #172]	; (800234c <SDR_compute_IIR_parms+0xb4>)
   wr = 2.f * cwpitch / rate * myPI;
 800229e:	edd2 7a00 	vldr	s15, [r2]
	 float rate = SamplingRate/256; //SamplingRate / decimation
 80022a2:	ed93 7a00 	vldr	s14, [r3]
 80022a6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8002350 <SDR_compute_IIR_parms+0xb8>
   wr = 2.f * cwpitch / rate * myPI;
 80022aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
   r = Qfactor;
 80022ae:	4b29      	ldr	r3, [pc, #164]	; (8002354 <SDR_compute_IIR_parms+0xbc>)
	 float rate = SamplingRate/256; //SamplingRate / decimation
 80022b0:	ee27 7a26 	vmul.f32	s14, s14, s13
   wr = 2.f * cwpitch / rate * myPI;
 80022b4:	eddf 6a28 	vldr	s13, [pc, #160]	; 8002358 <SDR_compute_IIR_parms+0xc0>
{
 80022b8:	ed2d 8b06 	vpush	{d8-d10}
   wr = 2.f * cwpitch / rate * myPI;
 80022bc:	eec7 8a87 	vdiv.f32	s17, s15, s14
   r = Qfactor;
 80022c0:	edd3 9a00 	vldr	s19, [r3]
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 80022c4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   r2 = r*r;
 80022c8:	ee69 aaa9 	vmul.f32	s21, s19, s19
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 80022cc:	ee39 aaa9 	vadd.f32	s20, s19, s19
 80022d0:	ee3a 9a88 	vadd.f32	s18, s21, s16
										                         // (see the Proakis & Manolakis book)
   a1 = -2.f * r * cosw0;
   a2 = r2;
// b0 is normalized for gain ~ 2dB on all the band
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 80022d4:	ee38 8a69 	vsub.f32	s16, s16, s19
   wr = 2.f * cwpitch / rate * myPI;
 80022d8:	ee68 8aa6 	vmul.f32	s17, s17, s13
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 80022dc:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 80022e0:	f00b f806 	bl	800d2f0 <cos>
 80022e4:	ee8a 6a09 	vdiv.f32	s12, s20, s18
   a1 = -2.f * r * cosw0;
 80022e8:	4b1c      	ldr	r3, [pc, #112]	; (800235c <SDR_compute_IIR_parms+0xc4>)
   a2 = r2;
 80022ea:	4a1d      	ldr	r2, [pc, #116]	; (8002360 <SDR_compute_IIR_parms+0xc8>)
 80022ec:	edc2 aa00 	vstr	s21, [r2]
   a1 = -2.f * r * cosw0;
 80022f0:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 80022f4:	ee78 8aa8 	vadd.f32	s17, s17, s17
 80022f8:	eeb7 aaca 	vcvt.f64.f32	d10, s20
   a1 = -2.f * r * cosw0;
 80022fc:	ee69 7aa7 	vmul.f32	s15, s19, s15
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002300:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8002304:	ee26 6b00 	vmul.f64	d6, d6, d0
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002308:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 800230c:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
   a1 = -2.f * r * cosw0;
 8002310:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002314:	ed83 6a00 	vstr	s12, [r3]
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002318:	f00a ffea 	bl	800d2f0 <cos>
 800231c:	eeb7 6ac9 	vcvt.f64.f32	d6, s18
 8002320:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002364 <SDR_compute_IIR_parms+0xcc>
 8002324:	4b10      	ldr	r3, [pc, #64]	; (8002368 <SDR_compute_IIR_parms+0xd0>)
 8002326:	ee28 7a07 	vmul.f32	s14, s16, s14
 800232a:	eeaa 6b40 	vfms.f64	d6, d10, d0
 800232e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
}
 8002332:	ecbd 8b06 	vpop	{d8-d10}
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002336:	eeb1 5bc6 	vsqrt.f64	d5, d6
 800233a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800233e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8002342:	ed83 7a00 	vstr	s14, [r3]
}
 8002346:	bd08      	pop	{r3, pc}
 8002348:	24009d14 	.word	0x24009d14
 800234c:	24004300 	.word	0x24004300
 8002350:	3b800000 	.word	0x3b800000
 8002354:	24008d04 	.word	0x24008d04
 8002358:	40490fdb 	.word	0x40490fdb
 800235c:	240042d8 	.word	0x240042d8
 8002360:	24008d00 	.word	0x24008d00
 8002364:	3f99999a 	.word	0x3f99999a
 8002368:	2400c228 	.word	0x2400c228

0800236c <SDR_CWPeak>:
// Double IIR resonator with two poles at wr e -wr. Used for the narrow CW mode
void SDR_CWPeak(float *buf, uint32_t blockSize)
{
   static float y1a=0.f, y2a=0.f, y1b=0.f, y2b=0.f;
	 register float x0, y0;
   uint32_t blkCnt = blockSize >> 2u;       /* loop counter */
 800236c:	0889      	lsrs	r1, r1, #2
	
// Compute 4 outputs at a time, loop unrolled for performance     
	 while(blkCnt--)
 800236e:	2900      	cmp	r1, #0
 8002370:	d076      	beq.n	8002460 <SDR_CWPeak+0xf4>
 8002372:	1e4b      	subs	r3, r1, #1
 8002374:	f8df c104 	ldr.w	ip, [pc, #260]	; 800247c <SDR_CWPeak+0x110>
 8002378:	493a      	ldr	r1, [pc, #232]	; (8002464 <SDR_CWPeak+0xf8>)
 800237a:	3010      	adds	r0, #16
 800237c:	4a3a      	ldr	r2, [pc, #232]	; (8002468 <SDR_CWPeak+0xfc>)
 800237e:	eddc 4a00 	vldr	s9, [ip]
 8002382:	edd1 2a00 	vldr	s5, [r1]
 8002386:	edd2 5a00 	vldr	s11, [r2]
{
 800238a:	b4f0      	push	{r4, r5, r6, r7}
 800238c:	4c37      	ldr	r4, [pc, #220]	; (800246c <SDR_CWPeak+0x100>)
 800238e:	4f38      	ldr	r7, [pc, #224]	; (8002470 <SDR_CWPeak+0x104>)
 8002390:	edd4 7a00 	vldr	s15, [r4]
 8002394:	4d37      	ldr	r5, [pc, #220]	; (8002474 <SDR_CWPeak+0x108>)
 8002396:	4e38      	ldr	r6, [pc, #224]	; (8002478 <SDR_CWPeak+0x10c>)
 8002398:	eef1 7a67 	vneg.f32	s15, s15
 800239c:	ed97 7a00 	vldr	s14, [r7]
 80023a0:	edd5 6a00 	vldr	s13, [r5]
 80023a4:	ed96 5a00 	vldr	s10, [r6]
   {  
		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80023a8:	ee62 3ac7 	vnmul.f32	s7, s5, s14
 80023ac:	ed10 7a04 	vldr	s14, [r0, #-16]
	   y2a = y1a;
	   y1a = y0;
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80023b0:	ee22 4ae6 	vnmul.f32	s8, s5, s13
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80023b4:	ed10 6a03 	vldr	s12, [r0, #-12]
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80023b8:	ed50 6a02 	vldr	s13, [r0, #-8]
	 while(blkCnt--)
 80023bc:	3b01      	subs	r3, #1
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80023be:	eee7 3aa4 	vfma.f32	s7, s15, s9
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80023c2:	ed10 2a01 	vldr	s4, [r0, #-4]
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80023c6:	eea7 4a85 	vfma.f32	s8, s15, s10
	 while(blkCnt--)
 80023ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ce:	f100 0010 	add.w	r0, r0, #16
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80023d2:	eee7 3a25 	vfma.f32	s7, s14, s11
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80023d6:	eea3 4aa5 	vfma.f32	s8, s7, s11
	   *buf++ = y0;
 80023da:	ed00 4a08 	vstr	s8, [r0, #-32]	; 0xffffffe0
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80023de:	edd2 5a00 	vldr	s11, [r2]
 80023e2:	edd1 2a00 	vldr	s5, [r1]
 80023e6:	ee25 6a86 	vmul.f32	s12, s11, s12
 80023ea:	edd4 7a00 	vldr	s15, [r4]
 80023ee:	eeb1 3a62 	vneg.f32	s6, s5
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80023f2:	ee25 7aa6 	vmul.f32	s14, s11, s13
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80023f6:	eef0 6a46 	vmov.f32	s13, s12
 80023fa:	eef1 7a67 	vneg.f32	s15, s15
 80023fe:	eea3 7a23 	vfma.f32	s14, s6, s7
 8002402:	eee3 6a24 	vfma.f32	s13, s6, s9
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002406:	ee65 4a82 	vmul.f32	s9, s11, s4
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800240a:	eee7 6aa3 	vfma.f32	s13, s15, s7
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800240e:	ee25 6aa6 	vmul.f32	s12, s11, s13
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002412:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8002416:	eee3 4a26 	vfma.f32	s9, s6, s13
 800241a:	eea7 6a84 	vfma.f32	s12, s15, s8
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800241e:	ee65 6a87 	vmul.f32	s13, s11, s14
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002422:	eee7 4a87 	vfma.f32	s9, s15, s14
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002426:	eea3 6a05 	vfma.f32	s12, s6, s10
 800242a:	eee3 6a04 	vfma.f32	s13, s6, s8
	   y2a = y1a;
	   y1a = y0;
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800242e:	ee25 5aa4 	vmul.f32	s10, s11, s9
	   *buf++ = y0;
 8002432:	ed00 6a07 	vstr	s12, [r0, #-28]	; 0xffffffe4
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002436:	eee7 6a86 	vfma.f32	s13, s15, s12
 800243a:	eea3 5a06 	vfma.f32	s10, s6, s12
	   *buf++ = y0;
 800243e:	ed40 6a06 	vstr	s13, [r0, #-24]	; 0xffffffe8
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002442:	eea7 5aa6 	vfma.f32	s10, s15, s13
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;
 8002446:	ed00 5a05 	vstr	s10, [r0, #-20]	; 0xffffffec
	 while(blkCnt--)
 800244a:	d1ad      	bne.n	80023a8 <SDR_CWPeak+0x3c>
 800244c:	ed87 7a00 	vstr	s14, [r7]
 8002450:	ed86 5a00 	vstr	s10, [r6]
 8002454:	edc5 6a00 	vstr	s13, [r5]
 8002458:	edcc 4a00 	vstr	s9, [ip]
   }
}
 800245c:	bcf0      	pop	{r4, r5, r6, r7}
 800245e:	4770      	bx	lr
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	24008d00 	.word	0x24008d00
 8002468:	2400c228 	.word	0x2400c228
 800246c:	240042d8 	.word	0x240042d8
 8002470:	240004b4 	.word	0x240004b4
 8002474:	240004b8 	.word	0x240004b8
 8002478:	240004b0 	.word	0x240004b0
 800247c:	240004ac 	.word	0x240004ac

08002480 <SDR_demodAM_AGC>:
// ------------------------------------------------------
// AM demodulation with AGC
void SDR_demodAM_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 8002480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod

	  if(pk < audiotmp)
	  {
			pk = audiotmp;
		  hangcnt = Hcount[AM]; 
 8002484:	4b32      	ldr	r3, [pc, #200]	; (8002550 <SDR_demodAM_AGC+0xd0>)
{
 8002486:	b082      	sub	sp, #8
 8002488:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 800256c <SDR_demodAM_AGC+0xec>
 800248c:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
 8002490:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8002570 <SDR_demodAM_AGC+0xf0>
 8002494:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 8002574 <SDR_demodAM_AGC+0xf4>
		  hangcnt = Hcount[AM]; 
 8002498:	881f      	ldrh	r7, [r3, #0]
 800249a:	ed98 7a00 	vldr	s14, [r8]
 800249e:	f8dc 3000 	ldr.w	r3, [ip]
 80024a2:	ed9e 6a00 	vldr	s12, [lr]
 80024a6:	4c2b      	ldr	r4, [pc, #172]	; (8002554 <SDR_demodAM_AGC+0xd4>)
 80024a8:	4a2b      	ldr	r2, [pc, #172]	; (8002558 <SDR_demodAM_AGC+0xd8>)

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 80024aa:	eddf 4a2c 	vldr	s9, [pc, #176]	; 800255c <SDR_demodAM_AGC+0xdc>
	  }

    audiotmp /= max(pk, AgcThreshold);  
		
	  if(hangcnt == 0)
		  pk  *= Decay[AM];
 80024ae:	4e2c      	ldr	r6, [pc, #176]	; (8002560 <SDR_demodAM_AGC+0xe0>)
		
// DC removal filter -----------------------
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80024b0:	ed9f 5a2c 	vldr	s10, [pc, #176]	; 8002564 <SDR_demodAM_AGC+0xe4>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80024b4:	edd0 7a01 	vldr	s15, [r0, #4]
 80024b8:	3008      	adds	r0, #8
 80024ba:	ed50 6a02 	vldr	s13, [r0, #-8]
 80024be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024c2:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80024c6:	edcd 7a01 	vstr	s15, [sp, #4]
	  arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod
 80024ca:	eddd 7a01 	vldr	s15, [sp, #4]
    if (in >= 0.0f)
 80024ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      *pOut = __builtin_sqrtf(in);
 80024d6:	bfa8      	it	ge
 80024d8:	eef1 6ae7 	vsqrtge.f32	s13, s15
    audiotmp /= max(pk, AgcThreshold);  
 80024dc:	edd4 7a00 	vldr	s15, [r4]
      *pOut = 0.0f;
 80024e0:	bfb8      	it	lt
 80024e2:	eef0 6a64 	vmovlt.f32	s13, s9
	  if(pk < audiotmp)
 80024e6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80024ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ee:	d502      	bpl.n	80024f6 <SDR_demodAM_AGC+0x76>
 80024f0:	eeb0 7a66 	vmov.f32	s14, s13
		  hangcnt = Hcount[AM]; 
 80024f4:	463b      	mov	r3, r7
    audiotmp /= max(pk, AgcThreshold);  
 80024f6:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 80024fa:	eec6 5aa7 	vdiv.f32	s11, s13, s15
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80024fe:	eef0 7a65 	vmov.f32	s15, s11
    audiotmp /= max(pk, AgcThreshold);  
 8002502:	edc2 5a00 	vstr	s11, [r2]
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8002506:	eee6 7a05 	vfma.f32	s15, s12, s10
	  if(hangcnt == 0)
 800250a:	b91b      	cbnz	r3, 8002514 <SDR_demodAM_AGC+0x94>
		  pk  *= Decay[AM];
 800250c:	edd6 6a00 	vldr	s13, [r6]
 8002510:	ee27 7a26 	vmul.f32	s14, s14, s13
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8002514:	edcd 7a00 	vstr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 8002518:	4285      	cmp	r5, r0
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 800251a:	eddd 7a00 	vldr	s15, [sp]
 800251e:	ee77 7ac6 	vsub.f32	s15, s15, s12
	  wold = w;
 8002522:	ed9d 6a00 	vldr	s12, [sp]
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8002526:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 800252a:	d1c3      	bne.n	80024b4 <SDR_demodAM_AGC+0x34>
// -----------------------------------------
	}
    PeakAudioValue=pk;
 800252c:	4a0e      	ldr	r2, [pc, #56]	; (8002568 <SDR_demodAM_AGC+0xe8>)
	if(hangcnt > 0)  hangcnt--;
 800252e:	2b00      	cmp	r3, #0
 8002530:	ed88 7a00 	vstr	s14, [r8]
 8002534:	f8cc 3000 	str.w	r3, [ip]
 8002538:	ed8e 6a00 	vstr	s12, [lr]
    PeakAudioValue=pk;
 800253c:	ed82 7a00 	vstr	s14, [r2]
	if(hangcnt > 0)  hangcnt--;
 8002540:	dd02      	ble.n	8002548 <SDR_demodAM_AGC+0xc8>
 8002542:	3b01      	subs	r3, #1
 8002544:	f8cc 3000 	str.w	r3, [ip]
}
 8002548:	b002      	add	sp, #8
 800254a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800254e:	bf00      	nop
 8002550:	24007ec8 	.word	0x24007ec8
 8002554:	24009d10 	.word	0x24009d10
 8002558:	24000914 	.word	0x24000914
 800255c:	00000000 	.word	0x00000000
 8002560:	24002918 	.word	0x24002918
 8002564:	3f75c28f 	.word	0x3f75c28f
 8002568:	24008750 	.word	0x24008750
 800256c:	240000ec 	.word	0x240000ec
 8002570:	24000498 	.word	0x24000498
 8002574:	240004a8 	.word	0x240004a8

08002578 <SDR_demodSSB_CW_AGC>:
	  arm_sqrt_f32(tmp, &sav);  

	  if(pk < sav)
	  {
			pk = sav;
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 8002578:	4a4a      	ldr	r2, [pc, #296]	; (80026a4 <SDR_demodSSB_CW_AGC+0x12c>)
      else
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 800257a:	4b4b      	ldr	r3, [pc, #300]	; (80026a8 <SDR_demodSSB_CW_AGC+0x130>)
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 800257c:	7812      	ldrb	r2, [r2, #0]
 800257e:	f8b3 c006 	ldrh.w	ip, [r3, #6]
 8002582:	2a01      	cmp	r2, #1
{
 8002584:	b4f0      	push	{r4, r5, r6, r7}
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8002586:	885c      	ldrh	r4, [r3, #2]
 8002588:	4e48      	ldr	r6, [pc, #288]	; (80026ac <SDR_demodSSB_CW_AGC+0x134>)
 800258a:	4f49      	ldr	r7, [pc, #292]	; (80026b0 <SDR_demodSSB_CW_AGC+0x138>)
 800258c:	889d      	ldrh	r5, [r3, #4]
 800258e:	bf08      	it	eq
 8002590:	4625      	moveq	r5, r4
 8002592:	6833      	ldr	r3, [r6, #0]
 8002594:	ed97 7a00 	vldr	s14, [r7]
 8002598:	d05b      	beq.n	8002652 <SDR_demodSSB_CW_AGC+0xda>
 800259a:	2a03      	cmp	r2, #3
 800259c:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 80025a0:	4a44      	ldr	r2, [pc, #272]	; (80026b4 <SDR_demodSSB_CW_AGC+0x13c>)
 80025a2:	d032      	beq.n	800260a <SDR_demodSSB_CW_AGC+0x92>
		
	  if(hangcnt == 0)
    {  
      if(CurrentMode == CW) pk  *= Decay[CW];
      else
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 80025a4:	f8df c118 	ldr.w	ip, [pc, #280]	; 80026c0 <SDR_demodSSB_CW_AGC+0x148>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80025a8:	edd0 7a01 	vldr	s15, [r0, #4]
 80025ac:	3008      	adds	r0, #8
 80025ae:	ed10 6a02 	vldr	s12, [r0, #-8]
 80025b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80025b6:	eee6 7a06 	vfma.f32	s15, s12, s12
      *pOut = __builtin_sqrtf(in);
 80025ba:	eef1 6ae7 	vsqrt.f32	s13, s15
	  if(pk < sav)
 80025be:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80025c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c6:	d502      	bpl.n	80025ce <SDR_demodSSB_CW_AGC+0x56>
 80025c8:	eeb0 7a66 	vmov.f32	s14, s13
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80025cc:	462b      	mov	r3, r5
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 80025ce:	edd2 7a00 	vldr	s15, [r2]
 80025d2:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 80025d6:	eec6 5a27 	vdiv.f32	s11, s12, s15
 80025da:	ece1 5a01 	vstmia	r1!, {s11}
	  if(hangcnt == 0)
 80025de:	b91b      	cbnz	r3, 80025e8 <SDR_demodSSB_CW_AGC+0x70>
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 80025e0:	eddc 7a02 	vldr	s15, [ip, #8]
 80025e4:	ee27 7a27 	vmul.f32	s14, s14, s15
	for(k=j=0; k<BSIZE*2; k+=2)
 80025e8:	4284      	cmp	r4, r0
 80025ea:	d1dd      	bne.n	80025a8 <SDR_demodSSB_CW_AGC+0x30>
 80025ec:	4932      	ldr	r1, [pc, #200]	; (80026b8 <SDR_demodSSB_CW_AGC+0x140>)
    }  
	}
	PeakAudioValue=pk;
	if(hangcnt > 0)  hangcnt--;
 80025ee:	2b00      	cmp	r3, #0
	PeakAudioValue=pk;
 80025f0:	4a32      	ldr	r2, [pc, #200]	; (80026bc <SDR_demodSSB_CW_AGC+0x144>)
 80025f2:	ed87 7a00 	vstr	s14, [r7]
 80025f6:	6033      	str	r3, [r6, #0]
 80025f8:	edc1 6a00 	vstr	s13, [r1]
 80025fc:	ed82 7a00 	vstr	s14, [r2]
	if(hangcnt > 0)  hangcnt--;
 8002600:	dd01      	ble.n	8002606 <SDR_demodSSB_CW_AGC+0x8e>
 8002602:	3b01      	subs	r3, #1
 8002604:	6033      	str	r3, [r6, #0]
}
 8002606:	bcf0      	pop	{r4, r5, r6, r7}
 8002608:	4770      	bx	lr
      if(CurrentMode == CW) pk  *= Decay[CW];
 800260a:	4d2d      	ldr	r5, [pc, #180]	; (80026c0 <SDR_demodSSB_CW_AGC+0x148>)
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 800260c:	edd0 7a01 	vldr	s15, [r0, #4]
 8002610:	3008      	adds	r0, #8
 8002612:	ed10 6a02 	vldr	s12, [r0, #-8]
 8002616:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800261a:	eee6 7a06 	vfma.f32	s15, s12, s12
 800261e:	eef1 6ae7 	vsqrt.f32	s13, s15
	  if(pk < sav)
 8002622:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800262a:	d502      	bpl.n	8002632 <SDR_demodSSB_CW_AGC+0xba>
 800262c:	eeb0 7a66 	vmov.f32	s14, s13
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 8002630:	4663      	mov	r3, ip
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 8002632:	edd2 7a00 	vldr	s15, [r2]
 8002636:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 800263a:	eec6 5a27 	vdiv.f32	s11, s12, s15
 800263e:	ece1 5a01 	vstmia	r1!, {s11}
	  if(hangcnt == 0)
 8002642:	b91b      	cbnz	r3, 800264c <SDR_demodSSB_CW_AGC+0xd4>
      if(CurrentMode == CW) pk  *= Decay[CW];
 8002644:	edd5 7a03 	vldr	s15, [r5, #12]
 8002648:	ee27 7a27 	vmul.f32	s14, s14, s15
	for(k=j=0; k<BSIZE*2; k+=2)
 800264c:	4284      	cmp	r4, r0
 800264e:	d1dd      	bne.n	800260c <SDR_demodSSB_CW_AGC+0x94>
 8002650:	e7cc      	b.n	80025ec <SDR_demodSSB_CW_AGC+0x74>
 8002652:	4a18      	ldr	r2, [pc, #96]	; (80026b4 <SDR_demodSSB_CW_AGC+0x13c>)
 8002654:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8002658:	f8df c064 	ldr.w	ip, [pc, #100]	; 80026c0 <SDR_demodSSB_CW_AGC+0x148>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 800265c:	edd0 7a01 	vldr	s15, [r0, #4]
 8002660:	3008      	adds	r0, #8
 8002662:	ed10 6a02 	vldr	s12, [r0, #-8]
 8002666:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800266a:	eee6 7a06 	vfma.f32	s15, s12, s12
 800266e:	eef1 6ae7 	vsqrt.f32	s13, s15
	  if(pk < sav)
 8002672:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267a:	d502      	bpl.n	8002682 <SDR_demodSSB_CW_AGC+0x10a>
 800267c:	eeb0 7a66 	vmov.f32	s14, s13
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8002680:	462b      	mov	r3, r5
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 8002682:	edd2 7a00 	vldr	s15, [r2]
 8002686:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 800268a:	eec6 5a27 	vdiv.f32	s11, s12, s15
 800268e:	ece1 5a01 	vstmia	r1!, {s11}
	  if(hangcnt == 0)
 8002692:	b91b      	cbnz	r3, 800269c <SDR_demodSSB_CW_AGC+0x124>
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8002694:	eddc 7a01 	vldr	s15, [ip, #4]
 8002698:	ee27 7a27 	vmul.f32	s14, s14, s15
	for(k=j=0; k<BSIZE*2; k+=2)
 800269c:	42a0      	cmp	r0, r4
 800269e:	d1dd      	bne.n	800265c <SDR_demodSSB_CW_AGC+0xe4>
 80026a0:	e7a4      	b.n	80025ec <SDR_demodSSB_CW_AGC+0x74>
 80026a2:	bf00      	nop
 80026a4:	2400c23c 	.word	0x2400c23c
 80026a8:	24007ec8 	.word	0x24007ec8
 80026ac:	2400049c 	.word	0x2400049c
 80026b0:	240000f0 	.word	0x240000f0
 80026b4:	24009d10 	.word	0x24009d10
 80026b8:	240004a0 	.word	0x240004a0
 80026bc:	24008750 	.word	0x24008750
 80026c0:	24002918 	.word	0x24002918

080026c4 <HAL_ADC_ConvCpltCallback>:
 * @brief  Conversion complete callback in non blocking mode
 * @param  AdcHandle : ADC handle

 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 80026c4:	b508      	push	{r3, lr}
    uint32_t op_addr = (uint32_t)addr;
 80026c6:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_ADC_ConvCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 80026c8:	f3bf 8f4f 	dsb	sy
      SCB->DCIMVAC = op_addr;
 80026cc:	490a      	ldr	r1, [pc, #40]	; (80026f8 <HAL_ADC_ConvCpltCallback+0x34>)
 80026ce:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 80026d2:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80026d6:	3320      	adds	r3, #32
    while (op_size > 0) {
 80026d8:	4293      	cmp	r3, r2
 80026da:	d1fa      	bne.n	80026d2 <HAL_ADC_ConvCpltCallback+0xe>
 80026dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80026e0:	f3bf 8f6f 	isb	sy
	/* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
#ifdef USE_DCACHE
	SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[BSIZE/2], 4*BSIZE/2);
#endif
	ADC_Stream0_Handler(1);
 80026e4:	2001      	movs	r0, #1
 80026e6:	f7fe ff89 	bl	80015fc <ADC_Stream0_Handler>
	/* Set variable to report DMA transfer status to main program */
	ubADCDualConversionComplete = SET;
 80026ea:	4b04      	ldr	r3, [pc, #16]	; (80026fc <HAL_ADC_ConvCpltCallback+0x38>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]
}
 80026f0:	bd08      	pop	{r3, pc}
 80026f2:	bf00      	nop
 80026f4:	2400ce40 	.word	0x2400ce40
 80026f8:	e000ed00 	.word	0xe000ed00
 80026fc:	240004e9 	.word	0x240004e9

08002700 <HAL_ADC_ConvHalfCpltCallback>:
 * @brief  Conversion DMA half-transfer callback in non blocking mode
 * @param  hadc: ADC handle
 * */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002700:	b508      	push	{r3, lr}
    uint32_t op_addr = (uint32_t)addr;
 8002702:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_ADC_ConvHalfCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 8002704:	f3bf 8f4f 	dsb	sy
      SCB->DCIMVAC = op_addr;
 8002708:	490a      	ldr	r1, [pc, #40]	; (8002734 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 800270a:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 800270e:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8002712:	3320      	adds	r3, #32
    while (op_size > 0) {
 8002714:	4293      	cmp	r3, r2
 8002716:	d1fa      	bne.n	800270e <HAL_ADC_ConvHalfCpltCallback+0xe>
 8002718:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800271c:	f3bf 8f6f 	isb	sy
	/* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
#ifdef USE_DCACHE
	SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[0], 4*BSIZE/2);
#endif
	ADC_Stream0_Handler(0);
 8002720:	2000      	movs	r0, #0
 8002722:	f7fe ff6b 	bl	80015fc <ADC_Stream0_Handler>
	/* Reset variable to report DMA transfer status to main program */
	ubADCDualConversionComplete = RESET;
 8002726:	4b04      	ldr	r3, [pc, #16]	; (8002738 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
}
 800272c:	bd08      	pop	{r3, pc}
 800272e:	bf00      	nop
 8002730:	2400ca40 	.word	0x2400ca40
 8002734:	e000ed00 	.word	0xe000ed00
 8002738:	240004e9 	.word	0x240004e9

0800273c <HAL_DACEx_ConvCpltCallbackCh2>:

void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800273c:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[BSIZE];
 800273e:	4b05      	ldr	r3, [pc, #20]	; (8002754 <HAL_DACEx_ConvCpltCallbackCh2+0x18>)
	LED_RED_ON;
 8002740:	2201      	movs	r2, #1
	ValidAudioHalf = &AudioOut[BSIZE];
 8002742:	4c05      	ldr	r4, [pc, #20]	; (8002758 <HAL_DACEx_ConvCpltCallbackCh2+0x1c>)
	LED_RED_ON;
 8002744:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002748:	4804      	ldr	r0, [pc, #16]	; (800275c <HAL_DACEx_ConvCpltCallbackCh2+0x20>)
	ValidAudioHalf = &AudioOut[BSIZE];
 800274a:	601c      	str	r4, [r3, #0]
}
 800274c:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_ON;
 8002750:	f003 bb8a 	b.w	8005e68 <HAL_GPIO_WritePin>
 8002754:	24004304 	.word	0x24004304
 8002758:	24007120 	.word	0x24007120
 800275c:	58020400 	.word	0x58020400

08002760 <HAL_DACEx_ConvHalfCpltCallbackCh2>:

void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002760:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[0];
 8002762:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_DACEx_ConvHalfCpltCallbackCh2+0x18>)
	LED_RED_OFF;
 8002764:	2200      	movs	r2, #0
	ValidAudioHalf = &AudioOut[0];
 8002766:	4c05      	ldr	r4, [pc, #20]	; (800277c <HAL_DACEx_ConvHalfCpltCallbackCh2+0x1c>)
	LED_RED_OFF;
 8002768:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800276c:	4804      	ldr	r0, [pc, #16]	; (8002780 <HAL_DACEx_ConvHalfCpltCallbackCh2+0x20>)
	ValidAudioHalf = &AudioOut[0];
 800276e:	601c      	str	r4, [r3, #0]
}
 8002770:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_OFF;
 8002774:	f003 bb78 	b.w	8005e68 <HAL_GPIO_WritePin>
 8002778:	24004304 	.word	0x24004304
 800277c:	24006d20 	.word	0x24006d20
 8002780:	58020400 	.word	0x58020400

08002784 <DisplayStatus>:
	static char StringWidth[8];
	static char StringAGC[8];
	static char StringStep[8];


	switch(Fstep)
 8002784:	4b57      	ldr	r3, [pc, #348]	; (80028e4 <DisplayStatus+0x160>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b64      	cmp	r3, #100	; 0x64
{
 800278a:	b570      	push	{r4, r5, r6, lr}
 800278c:	b086      	sub	sp, #24
	switch(Fstep)
 800278e:	f000 809f 	beq.w	80028d0 <DisplayStatus+0x14c>
 8002792:	d969      	bls.n	8002868 <DisplayStatus+0xe4>
 8002794:	f242 7210 	movw	r2, #10000	; 0x2710
 8002798:	4293      	cmp	r3, r2
 800279a:	d07d      	beq.n	8002898 <DisplayStatus+0x114>
 800279c:	4a52      	ldr	r2, [pc, #328]	; (80028e8 <DisplayStatus+0x164>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	f000 808f 	beq.w	80028c2 <DisplayStatus+0x13e>
 80027a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027a8:	d07d      	beq.n	80028a6 <DisplayStatus+0x122>
 80027aa:	4c50      	ldr	r4, [pc, #320]	; (80028ec <DisplayStatus+0x168>)
	case 1000: strcpy(StringStep,"  1K"); break;
	case 10000: strcpy(StringStep," 10K"); break;
	case 100000: strcpy(StringStep,"100K"); break;
	}

	switch(CurrentMode)
 80027ac:	4b50      	ldr	r3, [pc, #320]	; (80028f0 <DisplayStatus+0x16c>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b03      	cmp	r3, #3
 80027b2:	f200 8094 	bhi.w	80028de <DisplayStatus+0x15a>
 80027b6:	e8df f003 	tbb	[pc, r3]
 80027ba:	5155      	.short	0x5155
 80027bc:	0238      	.short	0x0238
	{
	case LSB: strcpy(StringMode,"LSB"); break;
	case USB: strcpy(StringMode,"USB"); break;
	case AM: strcpy(StringMode,"AM"); break;
	case CW: strcpy(StringMode,"CW"); break;
 80027be:	4b4d      	ldr	r3, [pc, #308]	; (80028f4 <DisplayStatus+0x170>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4d4d      	ldr	r5, [pc, #308]	; (80028f8 <DisplayStatus+0x174>)
 80027c4:	0c1a      	lsrs	r2, r3, #16
 80027c6:	802b      	strh	r3, [r5, #0]
 80027c8:	70aa      	strb	r2, [r5, #2]
	}
	switch (CurrentAGC)
 80027ca:	4b4c      	ldr	r3, [pc, #304]	; (80028fc <DisplayStatus+0x178>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d032      	beq.n	8002838 <DisplayStatus+0xb4>
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d059      	beq.n	800288a <DisplayStatus+0x106>
 80027d6:	4a4a      	ldr	r2, [pc, #296]	; (8002900 <DisplayStatus+0x17c>)
	{
	case Fast: strcpy(StringAGC,"Fast"); break;
	case Slow: strcpy(StringAGC,"Slow"); break;
	}
	switch (CurrentBW)
 80027d8:	4b4a      	ldr	r3, [pc, #296]	; (8002904 <DisplayStatus+0x180>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d035      	beq.n	800284c <DisplayStatus+0xc8>
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d04c      	beq.n	800287e <DisplayStatus+0xfa>
 80027e4:	4b48      	ldr	r3, [pc, #288]	; (8002908 <DisplayStatus+0x184>)
	{
	case Narrow: strcpy(StringWidth,"Narrow"); break;
	case Wide: strcpy(StringWidth,"Wide"); break;
	}
	sprintf(UartTXString, "          Freq %.0f Step %s Mode %s BW %s AGG %s Volume %1.1f   \r", LOfreq, StringStep, StringMode, StringWidth, StringAGC, volume);
 80027e6:	4849      	ldr	r0, [pc, #292]	; (800290c <DisplayStatus+0x188>)
 80027e8:	4949      	ldr	r1, [pc, #292]	; (8002910 <DisplayStatus+0x18c>)
 80027ea:	ed90 7a00 	vldr	s14, [r0]
 80027ee:	edd1 6a00 	vldr	s13, [r1]
 80027f2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80027f6:	4947      	ldr	r1, [pc, #284]	; (8002914 <DisplayStatus+0x190>)
 80027f8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80027fc:	4846      	ldr	r0, [pc, #280]	; (8002918 <DisplayStatus+0x194>)
 80027fe:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8002802:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002806:	ec53 2b16 	vmov	r2, r3, d6
 800280a:	e9cd 4500 	strd	r4, r5, [sp]
 800280e:	f009 f9f3 	bl	800bbf8 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *) UartTXString, strlen(UartTXString), 100);
 8002812:	4841      	ldr	r0, [pc, #260]	; (8002918 <DisplayStatus+0x194>)
 8002814:	f7fd fdc4 	bl	80003a0 <strlen>
 8002818:	2364      	movs	r3, #100	; 0x64
 800281a:	b282      	uxth	r2, r0
 800281c:	493e      	ldr	r1, [pc, #248]	; (8002918 <DisplayStatus+0x194>)
 800281e:	483f      	ldr	r0, [pc, #252]	; (800291c <DisplayStatus+0x198>)
}
 8002820:	b006      	add	sp, #24
 8002822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_UART_Transmit(&huart3, (uint8_t *) UartTXString, strlen(UartTXString), 100);
 8002826:	f005 bda5 	b.w	8008374 <HAL_UART_Transmit>
	case USB: strcpy(StringMode,"USB"); break;
 800282a:	4b3d      	ldr	r3, [pc, #244]	; (8002920 <DisplayStatus+0x19c>)
 800282c:	4d32      	ldr	r5, [pc, #200]	; (80028f8 <DisplayStatus+0x174>)
 800282e:	602b      	str	r3, [r5, #0]
	switch (CurrentAGC)
 8002830:	4b32      	ldr	r3, [pc, #200]	; (80028fc <DisplayStatus+0x178>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1cc      	bne.n	80027d2 <DisplayStatus+0x4e>
	case Fast: strcpy(StringAGC,"Fast"); break;
 8002838:	4b3a      	ldr	r3, [pc, #232]	; (8002924 <DisplayStatus+0x1a0>)
 800283a:	4a31      	ldr	r2, [pc, #196]	; (8002900 <DisplayStatus+0x17c>)
 800283c:	e893 0003 	ldmia.w	r3, {r0, r1}
	switch (CurrentBW)
 8002840:	4b30      	ldr	r3, [pc, #192]	; (8002904 <DisplayStatus+0x180>)
	case Fast: strcpy(StringAGC,"Fast"); break;
 8002842:	6010      	str	r0, [r2, #0]
	switch (CurrentBW)
 8002844:	781b      	ldrb	r3, [r3, #0]
	case Fast: strcpy(StringAGC,"Fast"); break;
 8002846:	7111      	strb	r1, [r2, #4]
	switch (CurrentBW)
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1c9      	bne.n	80027e0 <DisplayStatus+0x5c>
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 800284c:	4936      	ldr	r1, [pc, #216]	; (8002928 <DisplayStatus+0x1a4>)
 800284e:	4b2e      	ldr	r3, [pc, #184]	; (8002908 <DisplayStatus+0x184>)
 8002850:	c903      	ldmia	r1, {r0, r1}
 8002852:	0c0e      	lsrs	r6, r1, #16
 8002854:	6018      	str	r0, [r3, #0]
 8002856:	8099      	strh	r1, [r3, #4]
 8002858:	719e      	strb	r6, [r3, #6]
 800285a:	e7c4      	b.n	80027e6 <DisplayStatus+0x62>
	case LSB: strcpy(StringMode,"LSB"); break;
 800285c:	4d26      	ldr	r5, [pc, #152]	; (80028f8 <DisplayStatus+0x174>)
 800285e:	4b33      	ldr	r3, [pc, #204]	; (800292c <DisplayStatus+0x1a8>)
 8002860:	602b      	str	r3, [r5, #0]
 8002862:	e7b2      	b.n	80027ca <DisplayStatus+0x46>
	case AM: strcpy(StringMode,"AM"); break;
 8002864:	4b32      	ldr	r3, [pc, #200]	; (8002930 <DisplayStatus+0x1ac>)
 8002866:	e7ab      	b.n	80027c0 <DisplayStatus+0x3c>
	switch(Fstep)
 8002868:	2b01      	cmp	r3, #1
 800286a:	d023      	beq.n	80028b4 <DisplayStatus+0x130>
 800286c:	2b0a      	cmp	r3, #10
 800286e:	d19c      	bne.n	80027aa <DisplayStatus+0x26>
	case 10: strcpy(StringStep,"  10"); break;
 8002870:	4b30      	ldr	r3, [pc, #192]	; (8002934 <DisplayStatus+0x1b0>)
 8002872:	4c1e      	ldr	r4, [pc, #120]	; (80028ec <DisplayStatus+0x168>)
 8002874:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002878:	6020      	str	r0, [r4, #0]
 800287a:	7121      	strb	r1, [r4, #4]
 800287c:	e796      	b.n	80027ac <DisplayStatus+0x28>
	case Wide: strcpy(StringWidth,"Wide"); break;
 800287e:	492e      	ldr	r1, [pc, #184]	; (8002938 <DisplayStatus+0x1b4>)
 8002880:	4b21      	ldr	r3, [pc, #132]	; (8002908 <DisplayStatus+0x184>)
 8002882:	c903      	ldmia	r1, {r0, r1}
 8002884:	6018      	str	r0, [r3, #0]
 8002886:	7119      	strb	r1, [r3, #4]
 8002888:	e7ad      	b.n	80027e6 <DisplayStatus+0x62>
	case Slow: strcpy(StringAGC,"Slow"); break;
 800288a:	4b2c      	ldr	r3, [pc, #176]	; (800293c <DisplayStatus+0x1b8>)
 800288c:	4a1c      	ldr	r2, [pc, #112]	; (8002900 <DisplayStatus+0x17c>)
 800288e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002892:	6010      	str	r0, [r2, #0]
 8002894:	7111      	strb	r1, [r2, #4]
 8002896:	e79f      	b.n	80027d8 <DisplayStatus+0x54>
	case 10000: strcpy(StringStep," 10K"); break;
 8002898:	4b29      	ldr	r3, [pc, #164]	; (8002940 <DisplayStatus+0x1bc>)
 800289a:	4c14      	ldr	r4, [pc, #80]	; (80028ec <DisplayStatus+0x168>)
 800289c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028a0:	6020      	str	r0, [r4, #0]
 80028a2:	7121      	strb	r1, [r4, #4]
 80028a4:	e782      	b.n	80027ac <DisplayStatus+0x28>
	case 1000: strcpy(StringStep,"  1K"); break;
 80028a6:	4b27      	ldr	r3, [pc, #156]	; (8002944 <DisplayStatus+0x1c0>)
 80028a8:	4c10      	ldr	r4, [pc, #64]	; (80028ec <DisplayStatus+0x168>)
 80028aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028ae:	6020      	str	r0, [r4, #0]
 80028b0:	7121      	strb	r1, [r4, #4]
 80028b2:	e77b      	b.n	80027ac <DisplayStatus+0x28>
	case 1: strcpy(StringStep,"   1"); break;
 80028b4:	4b24      	ldr	r3, [pc, #144]	; (8002948 <DisplayStatus+0x1c4>)
 80028b6:	4c0d      	ldr	r4, [pc, #52]	; (80028ec <DisplayStatus+0x168>)
 80028b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028bc:	6020      	str	r0, [r4, #0]
 80028be:	7121      	strb	r1, [r4, #4]
 80028c0:	e774      	b.n	80027ac <DisplayStatus+0x28>
	case 100000: strcpy(StringStep,"100K"); break;
 80028c2:	4b22      	ldr	r3, [pc, #136]	; (800294c <DisplayStatus+0x1c8>)
 80028c4:	4c09      	ldr	r4, [pc, #36]	; (80028ec <DisplayStatus+0x168>)
 80028c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028ca:	6020      	str	r0, [r4, #0]
 80028cc:	7121      	strb	r1, [r4, #4]
 80028ce:	e76d      	b.n	80027ac <DisplayStatus+0x28>
	case 100: strcpy(StringStep," 100"); break;
 80028d0:	4b1f      	ldr	r3, [pc, #124]	; (8002950 <DisplayStatus+0x1cc>)
 80028d2:	4c06      	ldr	r4, [pc, #24]	; (80028ec <DisplayStatus+0x168>)
 80028d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028d8:	6020      	str	r0, [r4, #0]
 80028da:	7121      	strb	r1, [r4, #4]
 80028dc:	e766      	b.n	80027ac <DisplayStatus+0x28>
 80028de:	4d06      	ldr	r5, [pc, #24]	; (80028f8 <DisplayStatus+0x174>)
 80028e0:	e773      	b.n	80027ca <DisplayStatus+0x46>
 80028e2:	bf00      	nop
 80028e4:	2400c234 	.word	0x2400c234
 80028e8:	000186a0 	.word	0x000186a0
 80028ec:	240004d8 	.word	0x240004d8
 80028f0:	2400c23c 	.word	0x2400c23c
 80028f4:	0801aea4 	.word	0x0801aea4
 80028f8:	240004d0 	.word	0x240004d0
 80028fc:	24000500 	.word	0x24000500
 8002900:	240004c8 	.word	0x240004c8
 8002904:	24000910 	.word	0x24000910
 8002908:	240004e0 	.word	0x240004e0
 800290c:	240042d4 	.word	0x240042d4
 8002910:	24009d1c 	.word	0x24009d1c
 8002914:	0801aec8 	.word	0x0801aec8
 8002918:	24007520 	.word	0x24007520
 800291c:	240029b4 	.word	0x240029b4
 8002920:	00425355 	.word	0x00425355
 8002924:	0801aea8 	.word	0x0801aea8
 8002928:	0801aeb8 	.word	0x0801aeb8
 800292c:	0042534c 	.word	0x0042534c
 8002930:	0801aea0 	.word	0x0801aea0
 8002934:	0801ae78 	.word	0x0801ae78
 8002938:	0801aec0 	.word	0x0801aec0
 800293c:	0801aeb0 	.word	0x0801aeb0
 8002940:	0801ae90 	.word	0x0801ae90
 8002944:	0801ae88 	.word	0x0801ae88
 8002948:	0801ae70 	.word	0x0801ae70
 800294c:	0801ae98 	.word	0x0801ae98
 8002950:	0801ae80 	.word	0x0801ae80

08002954 <HAL_UART_RxCpltCallback>:
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{

	/* Turn LED2 on: Transfer in reception process is correct */
	LED_RED_OFF;
 8002954:	2200      	movs	r2, #0
 8002956:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800295a:	4801      	ldr	r0, [pc, #4]	; (8002960 <HAL_UART_RxCpltCallback+0xc>)
 800295c:	f003 ba84 	b.w	8005e68 <HAL_GPIO_WritePin>
 8002960:	58020400 	.word	0x58020400

08002964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002964:	4e07      	ldr	r6, [pc, #28]	; (8002984 <Error_Handler+0x20>)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	while(1)
	{
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 8002966:	2532      	movs	r5, #50	; 0x32
 8002968:	4c07      	ldr	r4, [pc, #28]	; (8002988 <Error_Handler+0x24>)
{
 800296a:	b508      	push	{r3, lr}
		if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 800296c:	6832      	ldr	r2, [r6, #0]
 800296e:	fba4 1302 	umull	r1, r3, r4, r2
 8002972:	091b      	lsrs	r3, r3, #4
 8002974:	fb05 2313 	mls	r3, r5, r3, r2
 8002978:	b103      	cbz	r3, 800297c <Error_Handler+0x18>
 800297a:	e7fe      	b.n	800297a <Error_Handler+0x16>
			LED_switch();
 800297c:	f7fe fc8c 	bl	8001298 <LED_switch>
 8002980:	e7f4      	b.n	800296c <Error_Handler+0x8>
 8002982:	bf00      	nop
 8002984:	24009d20 	.word	0x24009d20
 8002988:	51eb851f 	.word	0x51eb851f

0800298c <SystemClock_Config_For_OC>:
{
 800298c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002990:	b0cc      	sub	sp, #304	; 0x130
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002992:	224c      	movs	r2, #76	; 0x4c
 8002994:	2100      	movs	r1, #0
 8002996:	a80a      	add	r0, sp, #40	; 0x28
 8002998:	f008 fcea 	bl	800b370 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800299c:	2220      	movs	r2, #32
 800299e:	2100      	movs	r1, #0
 80029a0:	a802      	add	r0, sp, #8
 80029a2:	f008 fce5 	bl	800b370 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029a6:	22bc      	movs	r2, #188	; 0xbc
 80029a8:	2100      	movs	r1, #0
 80029aa:	a81d      	add	r0, sp, #116	; 0x74
 80029ac:	f008 fce0 	bl	800b370 <memset>
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80029b0:	2002      	movs	r0, #2
 80029b2:	f003 faf7 	bl	8005fa4 <HAL_PWREx_ConfigSupply>
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80029b6:	4b40      	ldr	r3, [pc, #256]	; (8002ab8 <SystemClock_Config_For_OC+0x12c>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	4940      	ldr	r1, [pc, #256]	; (8002abc <SystemClock_Config_For_OC+0x130>)
 80029bc:	9201      	str	r2, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80029be:	461a      	mov	r2, r3
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80029c0:	6998      	ldr	r0, [r3, #24]
 80029c2:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 80029c6:	6198      	str	r0, [r3, #24]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029ce:	9301      	str	r3, [sp, #4]
 80029d0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	62cb      	str	r3, [r1, #44]	; 0x2c
 80029d8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	9301      	str	r3, [sp, #4]
 80029e0:	9b01      	ldr	r3, [sp, #4]
	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80029e2:	6993      	ldr	r3, [r2, #24]
 80029e4:	049b      	lsls	r3, r3, #18
 80029e6:	d5fc      	bpl.n	80029e2 <SystemClock_Config_For_OC+0x56>
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80029e8:	4935      	ldr	r1, [pc, #212]	; (8002ac0 <SystemClock_Config_For_OC+0x134>)
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029ea:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80029ec:	2504      	movs	r5, #4
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80029ee:	2200      	movs	r2, #0
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80029f0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029f2:	2601      	movs	r6, #1
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029f4:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	RCC_OscInitStruct.PLL.PLLN = 300;
 80029f8:	f44f 7c96 	mov.w	ip, #300	; 0x12c
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80029fc:	f023 0303 	bic.w	r3, r3, #3
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a00:	a80a      	add	r0, sp, #40	; 0x28
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002a02:	4323      	orrs	r3, r4
 8002a04:	628b      	str	r3, [r1, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLP = 2;
 8002a06:	9417      	str	r4, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002a08:	9419      	str	r4, [sp, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLM = 2;
 8002a0a:	9415      	str	r4, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002a0c:	9518      	str	r5, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002a0e:	921c      	str	r2, [sp, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLN = 300;
 8002a10:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a14:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a18:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002a1c:	e9cd 521a 	strd	r5, r2, [sp, #104]	; 0x68
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a20:	f003 fae6 	bl	8005ff0 <HAL_RCC_OscConfig>
 8002a24:	2800      	cmp	r0, #0
 8002a26:	d144      	bne.n	8002ab2 <SystemClock_Config_For_OC+0x126>
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002a28:	2308      	movs	r3, #8
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a2a:	213f      	movs	r1, #63	; 0x3f
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a2c:	2203      	movs	r2, #3
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002a2e:	f04f 0840 	mov.w	r8, #64	; 0x40
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002a32:	f44f 6980 	mov.w	r9, #1024	; 0x400
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002a36:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a38:	9102      	str	r1, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a3a:	eb0d 0003 	add.w	r0, sp, r3
 8002a3e:	4629      	mov	r1, r5
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002a40:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a42:	9203      	str	r2, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002a44:	e9cd 8806 	strd	r8, r8, [sp, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002a48:	e9cd 9808 	strd	r9, r8, [sp, #32]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a4c:	f003 fe7c 	bl	8006748 <HAL_RCC_ClockConfig>
 8002a50:	4603      	mov	r3, r0
 8002a52:	bb70      	cbnz	r0, 8002ab2 <SystemClock_Config_For_OC+0x126>
	  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 8002a54:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8002ac4 <SystemClock_Config_For_OC+0x138>
	PeriphClkInitStruct.PLL3.PLL3N = 320;
 8002a58:	f44f 7ea0 	mov.w	lr, #320	; 0x140
	PeriphClkInitStruct.PLL2.PLL2N = 240;
 8002a5c:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
	PeriphClkInitStruct.PLL2.PLL2P = 16;
 8002a60:	2110      	movs	r1, #16
	PeriphClkInitStruct.PLL2.PLL2FRACN = 6000;
 8002a62:	f241 7270 	movw	r2, #6000	; 0x1770
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a66:	a81d      	add	r0, sp, #116	; 0x74
	PeriphClkInitStruct.PLL3.PLL3M = 4;
 8002a68:	9526      	str	r5, [sp, #152]	; 0x98
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 8002a6a:	951e      	str	r5, [sp, #120]	; 0x78
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8002a6c:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002a70:	9324      	str	r3, [sp, #144]	; 0x90
	PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a72:	933a      	str	r3, [sp, #232]	; 0xe8
	 PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PLL2;
 8002a74:	f8cd 910c 	str.w	r9, [sp, #268]	; 0x10c
	 PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8002a78:	9745      	str	r7, [sp, #276]	; 0x114
	  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_LPTIM2
 8002a7a:	f8cd a074 	str.w	sl, [sp, #116]	; 0x74
	PeriphClkInitStruct.PLL3.PLL3N = 320;
 8002a7e:	f8cd e09c 	str.w	lr, [sp, #156]	; 0x9c
	PeriphClkInitStruct.PLL2.PLL2FRACN = 6000;
 8002a82:	9225      	str	r2, [sp, #148]	; 0x94
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002a84:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
	PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002a88:	e9cd 4428 	strd	r4, r4, [sp, #160]	; 0xa0
	PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8002a8c:	e9cd 592a 	strd	r5, r9, [sp, #168]	; 0xa8
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002a90:	e9cd 332c 	strd	r3, r3, [sp, #176]	; 0xb0
	PeriphClkInitStruct.PLL2.PLL2P = 16;
 8002a94:	e9cd c11f 	strd	ip, r1, [sp, #124]	; 0x7c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a98:	f004 fa80 	bl	8006f9c <HAL_RCCEx_PeriphCLKConfig>
 8002a9c:	b948      	cbnz	r0, 8002ab2 <SystemClock_Config_For_OC+0x126>
	HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLL2PCLK, RCC_MCODIV_10);
 8002a9e:	4630      	mov	r0, r6
 8002aa0:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
 8002aa4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8002aa8:	f003 fd72 	bl	8006590 <HAL_RCC_MCOConfig>
}
 8002aac:	b04c      	add	sp, #304	; 0x130
 8002aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		Error_Handler();
 8002ab2:	f7ff ff57 	bl	8002964 <Error_Handler>
 8002ab6:	bf00      	nop
 8002ab8:	58024800 	.word	0x58024800
 8002abc:	58000400 	.word	0x58000400
 8002ac0:	58024400 	.word	0x58024400
 8002ac4:	00080042 	.word	0x00080042

08002ac8 <MX_TIM6_Init_Custom_Rate>:
{
 8002ac8:	b510      	push	{r4, lr}
	htim6.Instance = TIM6;
 8002aca:	4810      	ldr	r0, [pc, #64]	; (8002b0c <MX_TIM6_Init_Custom_Rate+0x44>)
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002acc:	2300      	movs	r3, #0
	htim6.Instance = TIM6;
 8002ace:	4c10      	ldr	r4, [pc, #64]	; (8002b10 <MX_TIM6_Init_Custom_Rate+0x48>)
{
 8002ad0:	b084      	sub	sp, #16
	htim6.Init.Period = 7679;
 8002ad2:	f641 51ff 	movw	r1, #7679	; 0x1dff
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ad6:	2280      	movs	r2, #128	; 0x80
	htim6.Instance = TIM6;
 8002ad8:	6020      	str	r0, [r4, #0]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002ada:	4620      	mov	r0, r4
	htim6.Init.Period = 7679;
 8002adc:	60e1      	str	r1, [r4, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ade:	61a2      	str	r2, [r4, #24]
	htim6.Init.Prescaler = 0;
 8002ae0:	6063      	str	r3, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ae2:	9301      	str	r3, [sp, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae4:	60a3      	str	r3, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ae6:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002aea:	f005 fa8d 	bl	8008008 <HAL_TIM_Base_Init>
 8002aee:	b950      	cbnz	r0, 8002b06 <MX_TIM6_Init_Custom_Rate+0x3e>
 8002af0:	4603      	mov	r3, r0
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002af2:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002af4:	a901      	add	r1, sp, #4
 8002af6:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002af8:	9303      	str	r3, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002afa:	9201      	str	r2, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002afc:	f005 fbda 	bl	80082b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b00:	b908      	cbnz	r0, 8002b06 <MX_TIM6_Init_Custom_Rate+0x3e>
}
 8002b02:	b004      	add	sp, #16
 8002b04:	bd10      	pop	{r4, pc}
		Error_Handler();
 8002b06:	f7ff ff2d 	bl	8002964 <Error_Handler>
 8002b0a:	bf00      	nop
 8002b0c:	40001000 	.word	0x40001000
 8002b10:	24008cc0 	.word	0x24008cc0
 8002b14:	00000000 	.word	0x00000000

08002b18 <main>:
{
 8002b18:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002b1c:	b0ab      	sub	sp, #172	; 0xac
  HAL_Init();
 8002b1e:	f000 fee5 	bl	80038ec <HAL_Init>
  __ASM volatile ("dsb 0xF":::"memory");
 8002b22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b26:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002b2a:	48d1      	ldr	r0, [pc, #836]	; (8002e70 <main+0x358>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f8c0 2250 	str.w	r2, [r0, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002b32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b36:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002b3a:	6943      	ldr	r3, [r0, #20]
 8002b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b40:	6143      	str	r3, [r0, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b46:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002b4a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002b4e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002b52:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002b56:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002b5a:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002b5e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002b62:	07b7      	lsls	r7, r6, #30
 8002b64:	015d      	lsls	r5, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002b66:	ea05 040c 	and.w	r4, r5, ip
 8002b6a:	4639      	mov	r1, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002b6c:	4632      	mov	r2, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002b6e:	ea41 0304 	orr.w	r3, r1, r4
      } while (ways-- != 0U);
 8002b72:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002b74:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
 8002b78:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8002b7c:	1c53      	adds	r3, r2, #1
 8002b7e:	d1f6      	bne.n	8002b6e <main+0x56>
 8002b80:	3d20      	subs	r5, #32
    } while(sets-- != 0U);
 8002b82:	f115 0f20 	cmn.w	r5, #32
 8002b86:	d1ee      	bne.n	8002b66 <main+0x4e>
 8002b88:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002b8c:	6943      	ldr	r3, [r0, #20]
 8002b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b92:	6143      	str	r3, [r0, #20]
 8002b94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b98:	f3bf 8f6f 	isb	sy
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b9c:	2700      	movs	r7, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b9e:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 8002e90 <main+0x378>
	SystemClock_Config_For_OC();
 8002ba2:	f7ff fef3 	bl	800298c <SystemClock_Config_For_OC>
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ba6:	2401      	movs	r4, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba8:	9722      	str	r7, [sp, #136]	; 0x88
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002baa:	2502      	movs	r5, #2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bac:	9723      	str	r7, [sp, #140]	; 0x8c
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002bae:	463a      	mov	r2, r7
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb0:	9724      	str	r7, [sp, #144]	; 0x90
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002bb2:	f44f 4181 	mov.w	r1, #16512	; 0x4080
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb6:	9725      	str	r7, [sp, #148]	; 0x94
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002bb8:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bbc:	9721      	str	r7, [sp, #132]	; 0x84
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002bbe:	f04f 090b 	mov.w	r9, #11
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bc2:	f8d8 60e0 	ldr.w	r6, [r8, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002bc6:	48ab      	ldr	r0, [pc, #684]	; (8002e74 <main+0x35c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bc8:	f046 0604 	orr.w	r6, r6, #4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bcc:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 8002e94 <main+0x37c>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bd0:	f8c8 60e0 	str.w	r6, [r8, #224]	; 0xe0
 8002bd4:	f8d8 60e0 	ldr.w	r6, [r8, #224]	; 0xe0
 8002bd8:	f006 0604 	and.w	r6, r6, #4
 8002bdc:	9606      	str	r6, [sp, #24]
 8002bde:	9e06      	ldr	r6, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002be0:	f8d8 60e0 	ldr.w	r6, [r8, #224]	; 0xe0
 8002be4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8002be8:	f8c8 60e0 	str.w	r6, [r8, #224]	; 0xe0
 8002bec:	f8d8 60e0 	ldr.w	r6, [r8, #224]	; 0xe0
 8002bf0:	f006 0680 	and.w	r6, r6, #128	; 0x80
 8002bf4:	9607      	str	r6, [sp, #28]
 8002bf6:	9e07      	ldr	r6, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf8:	f8d8 60e0 	ldr.w	r6, [r8, #224]	; 0xe0
 8002bfc:	4326      	orrs	r6, r4
 8002bfe:	f8c8 60e0 	str.w	r6, [r8, #224]	; 0xe0
 8002c02:	f8d8 60e0 	ldr.w	r6, [r8, #224]	; 0xe0
 8002c06:	4026      	ands	r6, r4
 8002c08:	9608      	str	r6, [sp, #32]
 8002c0a:	9e08      	ldr	r6, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c0c:	f8d8 60e0 	ldr.w	r6, [r8, #224]	; 0xe0
 8002c10:	432e      	orrs	r6, r5
 8002c12:	f8c8 60e0 	str.w	r6, [r8, #224]	; 0xe0
 8002c16:	f8d8 60e0 	ldr.w	r6, [r8, #224]	; 0xe0
 8002c1a:	402e      	ands	r6, r5
 8002c1c:	9609      	str	r6, [sp, #36]	; 0x24
 8002c1e:	9e09      	ldr	r6, [sp, #36]	; 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c20:	f8d8 60e0 	ldr.w	r6, [r8, #224]	; 0xe0
 8002c24:	f046 0610 	orr.w	r6, r6, #16
 8002c28:	f8c8 60e0 	str.w	r6, [r8, #224]	; 0xe0
 8002c2c:	f8d8 60e0 	ldr.w	r6, [r8, #224]	; 0xe0
 8002c30:	f006 0610 	and.w	r6, r6, #16
 8002c34:	960a      	str	r6, [sp, #40]	; 0x28
 8002c36:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c38:	f8d8 60e0 	ldr.w	r6, [r8, #224]	; 0xe0
 8002c3c:	f046 0608 	orr.w	r6, r6, #8
 8002c40:	f8c8 60e0 	str.w	r6, [r8, #224]	; 0xe0
 8002c44:	f8d8 60e0 	ldr.w	r6, [r8, #224]	; 0xe0
 8002c48:	f006 0608 	and.w	r6, r6, #8
 8002c4c:	960b      	str	r6, [sp, #44]	; 0x2c
 8002c4e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c50:	f8d8 60e0 	ldr.w	r6, [r8, #224]	; 0xe0
 8002c54:	f046 0640 	orr.w	r6, r6, #64	; 0x40
 8002c58:	f8c8 60e0 	str.w	r6, [r8, #224]	; 0xe0
 8002c5c:	f8d8 60e0 	ldr.w	r6, [r8, #224]	; 0xe0
 8002c60:	f006 0640 	and.w	r6, r6, #64	; 0x40
 8002c64:	960c      	str	r6, [sp, #48]	; 0x30
 8002c66:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002c68:	f003 f8fe 	bl	8005e68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002c6c:	463a      	mov	r2, r7
 8002c6e:	2140      	movs	r1, #64	; 0x40
 8002c70:	4881      	ldr	r0, [pc, #516]	; (8002e78 <main+0x360>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002c72:	2680      	movs	r6, #128	; 0x80
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002c74:	f003 f8f8 	bl	8005e68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8002c78:	463a      	mov	r2, r7
 8002c7a:	4629      	mov	r1, r5
 8002c7c:	487f      	ldr	r0, [pc, #508]	; (8002e7c <main+0x364>)
 8002c7e:	f003 f8f3 	bl	8005e68 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002c82:	a921      	add	r1, sp, #132	; 0x84
 8002c84:	487e      	ldr	r0, [pc, #504]	; (8002e80 <main+0x368>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c86:	9723      	str	r7, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c88:	e9cd ba21 	strd	fp, sl, [sp, #132]	; 0x84
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002c8c:	f002 ffce 	bl	8005c2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SwInt1_Pin;
 8002c90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 8002c94:	a921      	add	r1, sp, #132	; 0x84
 8002c96:	487a      	ldr	r0, [pc, #488]	; (8002e80 <main+0x368>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c98:	9423      	str	r4, [sp, #140]	; 0x8c
  GPIO_InitStruct.Pin = SwInt1_Pin;
 8002c9a:	e9cd 2a21 	strd	r2, sl, [sp, #132]	; 0x84
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 8002c9e:	f002 ffc5 	bl	8005c2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002ca2:	2232      	movs	r2, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ca4:	a921      	add	r1, sp, #132	; 0x84
 8002ca6:	4876      	ldr	r0, [pc, #472]	; (8002e80 <main+0x368>)
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002ca8:	9221      	str	r2, [sp, #132]	; 0x84
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002caa:	9522      	str	r5, [sp, #136]	; 0x88
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002cac:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb0:	e9cd 7723 	strd	r7, r7, [sp, #140]	; 0x8c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cb4:	f002 ffba 	bl	8005c2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002cb8:	2286      	movs	r2, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cba:	a921      	add	r1, sp, #132	; 0x84
 8002cbc:	4871      	ldr	r0, [pc, #452]	; (8002e84 <main+0x36c>)
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002cbe:	9221      	str	r2, [sp, #132]	; 0x84
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	e9cd 5722 	strd	r5, r7, [sp, #136]	; 0x88
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002cc4:	e9cd 7924 	strd	r7, r9, [sp, #144]	; 0x90
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc8:	f002 ffb0 	bl	8005c2c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ccc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cd0:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cd2:	a921      	add	r1, sp, #132	; 0x84
 8002cd4:	4869      	ldr	r0, [pc, #420]	; (8002e7c <main+0x364>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd6:	9723      	str	r7, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cd8:	e9cd 2321 	strd	r2, r3, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cdc:	f002 ffa6 	bl	8005c2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ce0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ce4:	a921      	add	r1, sp, #132	; 0x84
 8002ce6:	4865      	ldr	r0, [pc, #404]	; (8002e7c <main+0x364>)
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ce8:	9321      	str	r3, [sp, #132]	; 0x84
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	e9cd a722 	strd	sl, r7, [sp, #136]	; 0x88
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cee:	f002 ff9d 	bl	8005c2c <HAL_GPIO_Init>
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002cf2:	a921      	add	r1, sp, #132	; 0x84
 8002cf4:	485f      	ldr	r0, [pc, #380]	; (8002e74 <main+0x35c>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002cf6:	f04f 0a08 	mov.w	sl, #8
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002cfa:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfe:	e9cd b521 	strd	fp, r5, [sp, #132]	; 0x84
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d02:	e9cd 7723 	strd	r7, r7, [sp, #140]	; 0x8c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002d06:	f002 ff91 	bl	8005c2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002d0a:	f44f 4281 	mov.w	r2, #16512	; 0x4080
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d0e:	a921      	add	r1, sp, #132	; 0x84
 8002d10:	4858      	ldr	r0, [pc, #352]	; (8002e74 <main+0x35c>)
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002d12:	9221      	str	r2, [sp, #132]	; 0x84
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8002d14:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d18:	9724      	str	r7, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1a:	e9cd 4722 	strd	r4, r7, [sp, #136]	; 0x88
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d1e:	f002 ff85 	bl	8005c2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002d22:	2240      	movs	r2, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002d24:	a921      	add	r1, sp, #132	; 0x84
 8002d26:	4854      	ldr	r0, [pc, #336]	; (8002e78 <main+0x360>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002d28:	9221      	str	r2, [sp, #132]	; 0x84
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2a:	9724      	str	r7, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	e9cd 4722 	strd	r4, r7, [sp, #136]	; 0x88
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002d30:	f002 ff7c 	bl	8005c2c <HAL_GPIO_Init>
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002d34:	a921      	add	r1, sp, #132	; 0x84
 8002d36:	4850      	ldr	r0, [pc, #320]	; (8002e78 <main+0x360>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002d38:	9621      	str	r6, [sp, #132]	; 0x84
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3a:	e9cd 7722 	strd	r7, r7, [sp, #136]	; 0x88
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002d3e:	f002 ff75 	bl	8005c2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d42:	f44f 7200 	mov.w	r2, #512	; 0x200
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d46:	a921      	add	r1, sp, #132	; 0x84
 8002d48:	484d      	ldr	r0, [pc, #308]	; (8002e80 <main+0x368>)
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d4a:	9221      	str	r2, [sp, #132]	; 0x84
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	e9cd 5722 	strd	r5, r7, [sp, #136]	; 0x88
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002d50:	e9cd 5724 	strd	r5, r7, [sp, #144]	; 0x90
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d54:	f002 ff6a 	bl	8005c2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002d58:	f44f 50e8 	mov.w	r0, #7424	; 0x1d00
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002d5c:	220a      	movs	r2, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5e:	a921      	add	r1, sp, #132	; 0x84
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002d60:	9021      	str	r0, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d62:	4848      	ldr	r0, [pc, #288]	; (8002e84 <main+0x36c>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002d64:	9225      	str	r2, [sp, #148]	; 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d66:	9724      	str	r7, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	e9cd 5722 	strd	r5, r7, [sp, #136]	; 0x88
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d6c:	f002 ff5e 	bl	8005c2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002d70:	f44f 5220 	mov.w	r2, #10240	; 0x2800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d74:	a921      	add	r1, sp, #132	; 0x84
 8002d76:	4840      	ldr	r0, [pc, #256]	; (8002e78 <main+0x360>)
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002d78:	9221      	str	r2, [sp, #132]	; 0x84
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7a:	e9cd 5722 	strd	r5, r7, [sp, #136]	; 0x88
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d7e:	e9cd 7924 	strd	r7, r9, [sp, #144]	; 0x90
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d82:	f002 ff53 	bl	8005c2c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d86:	a921      	add	r1, sp, #132	; 0x84
 8002d88:	483c      	ldr	r0, [pc, #240]	; (8002e7c <main+0x364>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d8a:	e9cd 5421 	strd	r5, r4, [sp, #132]	; 0x84
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8e:	e9cd 7723 	strd	r7, r7, [sp, #140]	; 0x8c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d92:	f002 ff4b 	bl	8005c2c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8002d96:	463a      	mov	r2, r7
 8002d98:	2104      	movs	r1, #4
 8002d9a:	2028      	movs	r0, #40	; 0x28
 8002d9c:	f001 fbfa 	bl	8004594 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002da0:	2028      	movs	r0, #40	; 0x28
 8002da2:	f001 fc2d 	bl	8004600 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002da6:	f8d8 30d8 	ldr.w	r3, [r8, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002daa:	463a      	mov	r2, r7
 8002dac:	4639      	mov	r1, r7
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002dae:	4323      	orrs	r3, r4
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002db0:	4648      	mov	r0, r9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002db2:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
 8002db6:	f8d8 30d8 	ldr.w	r3, [r8, #216]	; 0xd8
 8002dba:	4023      	ands	r3, r4
 8002dbc:	9305      	str	r3, [sp, #20]
 8002dbe:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002dc0:	f001 fbe8 	bl	8004594 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002dc4:	4648      	mov	r0, r9
  hadc1.Instance = ADC1;
 8002dc6:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8002e98 <main+0x380>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002dca:	f001 fc19 	bl	8004600 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 8002dce:	4629      	mov	r1, r5
 8002dd0:	463a      	mov	r2, r7
 8002dd2:	200c      	movs	r0, #12
 8002dd4:	f001 fbde 	bl	8004594 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002dd8:	200c      	movs	r0, #12
 8002dda:	f001 fc11 	bl	8004600 <HAL_NVIC_EnableIRQ>
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002dde:	2504      	movs	r5, #4
  hadc1.Instance = ADC1;
 8002de0:	4929      	ldr	r1, [pc, #164]	; (8002e88 <main+0x370>)
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002de2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8002de6:	2303      	movs	r3, #3
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002de8:	4648      	mov	r0, r9
  ADC_MultiModeTypeDef multimode = {0};
 8002dea:	9710      	str	r7, [sp, #64]	; 0x40
  ADC_ChannelConfTypeDef sConfig = {0};
 8002dec:	971a      	str	r7, [sp, #104]	; 0x68
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8002dee:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002df2:	f8c9 700c 	str.w	r7, [r9, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002df6:	f889 7014 	strb.w	r7, [r9, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002dfa:	f889 4015 	strb.w	r4, [r9, #21]
  hadc1.Init.NbrOfConversion = 1;
 8002dfe:	f8c9 4018 	str.w	r4, [r9, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e02:	f889 701c 	strb.w	r7, [r9, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002e06:	f8c9 7034 	str.w	r7, [r9, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002e0a:	f889 7038 	strb.w	r7, [r9, #56]	; 0x38
  hadc1.Instance = ADC1;
 8002e0e:	f8c9 1000 	str.w	r1, [r9]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002e12:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e16:	f8c9 5010 	str.w	r5, [r9, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e1a:	e9c9 7709 	strd	r7, r7, [r9, #36]	; 0x24
  ADC_MultiModeTypeDef multimode = {0};
 8002e1e:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
  ADC_ChannelConfTypeDef sConfig = {0};
 8002e22:	e9cd 771b 	strd	r7, r7, [sp, #108]	; 0x6c
 8002e26:	e9cd 771d 	strd	r7, r7, [sp, #116]	; 0x74
 8002e2a:	e9cd 771f 	strd	r7, r7, [sp, #124]	; 0x7c
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e2e:	e9c9 ba01 	strd	fp, sl, [r9, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e32:	f001 f94f 	bl	80040d4 <HAL_ADC_Init>
 8002e36:	2800      	cmp	r0, #0
 8002e38:	f040 80ed 	bne.w	8003016 <main+0x4fe>
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8002e3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  multimode.Mode = ADC_DUALMODE_INTERL;
 8002e40:	2207      	movs	r2, #7
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002e42:	a910      	add	r1, sp, #64	; 0x40
 8002e44:	4648      	mov	r0, r9
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8002e46:	9311      	str	r3, [sp, #68]	; 0x44
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 8002e48:	f44f 7380 	mov.w	r3, #256	; 0x100
  multimode.Mode = ADC_DUALMODE_INTERL;
 8002e4c:	9210      	str	r2, [sp, #64]	; 0x40
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 8002e4e:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002e50:	f001 fb2c 	bl	80044ac <HAL_ADCEx_MultiModeConfigChannel>
 8002e54:	4602      	mov	r2, r0
 8002e56:	2800      	cmp	r0, #0
 8002e58:	f040 80dd 	bne.w	8003016 <main+0x4fe>
  sConfig.Channel = ADC_CHANNEL_5;
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <main+0x374>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e5e:	f04f 0806 	mov.w	r8, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002e62:	f240 77ff 	movw	r7, #2047	; 0x7ff
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e66:	a91a      	add	r1, sp, #104	; 0x68
 8002e68:	4648      	mov	r0, r9
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002e6a:	921c      	str	r2, [sp, #112]	; 0x70
 8002e6c:	e016      	b.n	8002e9c <main+0x384>
 8002e6e:	bf00      	nop
 8002e70:	e000ed00 	.word	0xe000ed00
 8002e74:	58020400 	.word	0x58020400
 8002e78:	58021800 	.word	0x58021800
 8002e7c:	58021000 	.word	0x58021000
 8002e80:	58020800 	.word	0x58020800
 8002e84:	58020000 	.word	0x58020000
 8002e88:	40022000 	.word	0x40022000
 8002e8c:	14f00020 	.word	0x14f00020
 8002e90:	58024400 	.word	0x58024400
 8002e94:	11110000 	.word	0x11110000
 8002e98:	24007624 	.word	0x24007624
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002e9c:	971d      	str	r7, [sp, #116]	; 0x74
  sConfig.Offset = 0;
 8002e9e:	e9cd 521e 	strd	r5, r2, [sp, #120]	; 0x78
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ea2:	e9cd 381a 	strd	r3, r8, [sp, #104]	; 0x68
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ea6:	f000 fdc7 	bl	8003a38 <HAL_ADC_ConfigChannel>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	2800      	cmp	r0, #0
 8002eae:	f040 80b2 	bne.w	8003016 <main+0x4fe>
  hadc2.Instance = ADC2;
 8002eb2:	4b84      	ldr	r3, [pc, #528]	; (80030c4 <main+0x5ac>)
 8002eb4:	4984      	ldr	r1, [pc, #528]	; (80030c8 <main+0x5b0>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8002eb6:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002eb8:	4618      	mov	r0, r3
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002eba:	751a      	strb	r2, [r3, #20]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002ebc:	771a      	strb	r2, [r3, #28]
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002ebe:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8002ec0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8002ec4:	f8c3 b004 	str.w	fp, [r3, #4]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ec8:	611d      	str	r5, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002eca:	755c      	strb	r4, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8002ecc:	619c      	str	r4, [r3, #24]
  hadc2.Instance = ADC2;
 8002ece:	6019      	str	r1, [r3, #0]
 8002ed0:	9303      	str	r3, [sp, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002ed2:	e9c3 a202 	strd	sl, r2, [r3, #8]
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002ed6:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 8002eda:	e9cd 2214 	strd	r2, r2, [sp, #80]	; 0x50
 8002ede:	e9cd 2216 	strd	r2, r2, [sp, #88]	; 0x58
 8002ee2:	e9cd 2218 	strd	r2, r2, [sp, #96]	; 0x60
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002ee6:	f001 f8f5 	bl	80040d4 <HAL_ADC_Init>
 8002eea:	4602      	mov	r2, r0
 8002eec:	2800      	cmp	r0, #0
 8002eee:	f040 8092 	bne.w	8003016 <main+0x4fe>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002ef2:	9b03      	ldr	r3, [sp, #12]
 8002ef4:	a913      	add	r1, sp, #76	; 0x4c
 8002ef6:	4618      	mov	r0, r3
  sConfig.Channel = ADC_CHANNEL_5;
 8002ef8:	4b74      	ldr	r3, [pc, #464]	; (80030cc <main+0x5b4>)
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002efa:	e9cd 2715 	strd	r2, r7, [sp, #84]	; 0x54
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002efe:	e9cd 3813 	strd	r3, r8, [sp, #76]	; 0x4c
  sConfig.Offset = 0;
 8002f02:	e9cd 5217 	strd	r5, r2, [sp, #92]	; 0x5c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002f06:	f000 fd97 	bl	8003a38 <HAL_ADC_ConfigChannel>
 8002f0a:	4601      	mov	r1, r0
 8002f0c:	2800      	cmp	r0, #0
 8002f0e:	f040 8082 	bne.w	8003016 <main+0x4fe>
  DAC_ChannelConfTypeDef sConfig = {0};
 8002f12:	2224      	movs	r2, #36	; 0x24
  hdac1.Instance = DAC1;
 8002f14:	4d6e      	ldr	r5, [pc, #440]	; (80030d0 <main+0x5b8>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8002f16:	a821      	add	r0, sp, #132	; 0x84
 8002f18:	f008 fa2a 	bl	800b370 <memset>
  hdac1.Instance = DAC1;
 8002f1c:	4b6d      	ldr	r3, [pc, #436]	; (80030d4 <main+0x5bc>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002f1e:	4628      	mov	r0, r5
  hdac1.Instance = DAC1;
 8002f20:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002f22:	f001 fb93 	bl	800464c <HAL_DAC_Init>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2800      	cmp	r0, #0
 8002f2a:	d174      	bne.n	8003016 <main+0x4fe>
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8002f2c:	2716      	movs	r7, #22
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002f2e:	a921      	add	r1, sp, #132	; 0x84
 8002f30:	4628      	mov	r0, r5
 8002f32:	2210      	movs	r2, #16
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002f34:	9321      	str	r3, [sp, #132]	; 0x84
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002f36:	9323      	str	r3, [sp, #140]	; 0x8c
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8002f38:	9722      	str	r7, [sp, #136]	; 0x88
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002f3a:	e9cd 4324 	strd	r4, r3, [sp, #144]	; 0x90
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002f3e:	f001 fc9d 	bl	800487c <HAL_DAC_ConfigChannel>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2800      	cmp	r0, #0
 8002f46:	d166      	bne.n	8003016 <main+0x4fe>
  htim6.Instance = TIM6;
 8002f48:	4a63      	ldr	r2, [pc, #396]	; (80030d8 <main+0x5c0>)
  htim6.Init.Period = 8191;
 8002f4a:	f641 71ff 	movw	r1, #8191	; 0x1fff
  htim6.Instance = TIM6;
 8002f4e:	4c63      	ldr	r4, [pc, #396]	; (80030dc <main+0x5c4>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f50:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002f52:	4610      	mov	r0, r2
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f54:	6196      	str	r6, [r2, #24]
  htim6.Instance = TIM6;
 8002f56:	6014      	str	r4, [r2, #0]
  htim6.Init.Period = 8191;
 8002f58:	60d1      	str	r1, [r2, #12]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f5a:	e9c2 3301 	strd	r3, r3, [r2, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f5e:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002f62:	f005 f851 	bl	8008008 <HAL_TIM_Base_Init>
 8002f66:	2800      	cmp	r0, #0
 8002f68:	d155      	bne.n	8003016 <main+0x4fe>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f6a:	2300      	movs	r3, #0
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002f6c:	2220      	movs	r2, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002f6e:	a90d      	add	r1, sp, #52	; 0x34
 8002f70:	4859      	ldr	r0, [pc, #356]	; (80030d8 <main+0x5c0>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f72:	930f      	str	r3, [sp, #60]	; 0x3c
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002f74:	920d      	str	r2, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002f76:	f005 f99d 	bl	80082b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2800      	cmp	r0, #0
 8002f7e:	d14a      	bne.n	8003016 <main+0x4fe>
  huart3.Instance = USART3;
 8002f80:	4e57      	ldr	r6, [pc, #348]	; (80030e0 <main+0x5c8>)
  huart3.Init.BaudRate = 115200;
 8002f82:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f86:	220c      	movs	r2, #12
  huart3.Instance = USART3;
 8002f88:	f504 5460 	add.w	r4, r4, #14336	; 0x3800
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f8c:	4630      	mov	r0, r6
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f8e:	6133      	str	r3, [r6, #16]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f90:	62b3      	str	r3, [r6, #40]	; 0x28
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f92:	6172      	str	r2, [r6, #20]
  huart3.Init.BaudRate = 115200;
 8002f94:	e9c6 4100 	strd	r4, r1, [r6]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f98:	e9c6 3302 	strd	r3, r3, [r6, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f9c:	e9c6 3306 	strd	r3, r3, [r6, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fa0:	e9c6 3308 	strd	r3, r3, [r6, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002fa4:	f005 fdb8 	bl	8008b18 <HAL_UART_Init>
 8002fa8:	4601      	mov	r1, r0
 8002faa:	bba0      	cbnz	r0, 8003016 <main+0x4fe>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fac:	4630      	mov	r0, r6
 8002fae:	f007 f805 	bl	8009fbc <HAL_UARTEx_SetTxFifoThreshold>
 8002fb2:	4601      	mov	r1, r0
 8002fb4:	bb78      	cbnz	r0, 8003016 <main+0x4fe>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fb6:	4630      	mov	r0, r6
 8002fb8:	f007 f852 	bl	800a060 <HAL_UARTEx_SetRxFifoThreshold>
 8002fbc:	bb58      	cbnz	r0, 8003016 <main+0x4fe>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002fbe:	4630      	mov	r0, r6
 8002fc0:	f006 ffde 	bl	8009f80 <HAL_UARTEx_DisableFifoMode>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	bb30      	cbnz	r0, 8003016 <main+0x4fe>
  hlptim2.Instance = LPTIM2;
 8002fc8:	4b46      	ldr	r3, [pc, #280]	; (80030e4 <main+0x5cc>)
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002fca:	f64f 74ff 	movw	r4, #65535	; 0xffff
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8002fce:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  hlptim2.Instance = LPTIM2;
 8002fd2:	4d45      	ldr	r5, [pc, #276]	; (80030e8 <main+0x5d0>)
  hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8002fd4:	6058      	str	r0, [r3, #4]
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8002fd6:	4618      	mov	r0, r3
  hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002fd8:	615c      	str	r4, [r3, #20]
  hlptim2.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8002fda:	611a      	str	r2, [r3, #16]
  hlptim2.Instance = LPTIM2;
 8002fdc:	601d      	str	r5, [r3, #0]
  hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8002fde:	6299      	str	r1, [r3, #40]	; 0x28
  hlptim2.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8002fe0:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002fe4:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002fe8:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
  if (HAL_LPTIM_Init(&hlptim2) != HAL_OK)
 8002fec:	f002 ff4e 	bl	8005e8c <HAL_LPTIM_Init>
 8002ff0:	4604      	mov	r4, r0
 8002ff2:	b980      	cbnz	r0, 8003016 <main+0x4fe>
	MX_TIM6_Init_Custom_Rate();
 8002ff4:	f7ff fd68 	bl	8002ac8 <MX_TIM6_Init_Custom_Rate>
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 8002ff8:	4621      	mov	r1, r4
 8002ffa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002ffe:	483b      	ldr	r0, [pc, #236]	; (80030ec <main+0x5d4>)
 8003000:	f001 f980 	bl	8004304 <HAL_ADCEx_Calibration_Start>
 8003004:	b938      	cbnz	r0, 8003016 <main+0x4fe>
	if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 8003006:	4601      	mov	r1, r0
 8003008:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800300c:	482d      	ldr	r0, [pc, #180]	; (80030c4 <main+0x5ac>)
 800300e:	f001 f979 	bl	8004304 <HAL_ADCEx_Calibration_Start>
 8003012:	4604      	mov	r4, r0
 8003014:	b108      	cbz	r0, 800301a <main+0x502>
    Error_Handler();
 8003016:	f7ff fca5 	bl	8002964 <Error_Handler>
	volume= 0.1;
 800301a:	4b35      	ldr	r3, [pc, #212]	; (80030f0 <main+0x5d8>)
	SetFstep(2);
 800301c:	2002      	movs	r0, #2
	volume= 0.1;
 800301e:	f8df a150 	ldr.w	sl, [pc, #336]	; 8003170 <main+0x658>
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8003022:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8003026:	4d33      	ldr	r5, [pc, #204]	; (80030f4 <main+0x5dc>)
	volume= 0.1;
 8003028:	f8ca 3000 	str.w	r3, [sl]
	SetFstep(2);
 800302c:	f7fd feb4 	bl	8000d98 <SetFstep>
	cwpitch = CWPITCH;
 8003030:	4a31      	ldr	r2, [pc, #196]	; (80030f8 <main+0x5e0>)
	AMindex  = LSBindex = 1;
 8003032:	2301      	movs	r3, #1
	cwpitch = CWPITCH;
 8003034:	4931      	ldr	r1, [pc, #196]	; (80030fc <main+0x5e4>)
	bw[AM]   = bw[LSB]  = Wide;
 8003036:	f04f 3c01 	mov.w	ip, #16843009	; 0x1010101
 800303a:	4831      	ldr	r0, [pc, #196]	; (8003100 <main+0x5e8>)
	cwpitch = CWPITCH;
 800303c:	6011      	str	r1, [r2, #0]
	os_time = 0;
 800303e:	4931      	ldr	r1, [pc, #196]	; (8003104 <main+0x5ec>)
	meanavg = 0.f;
 8003040:	4a31      	ldr	r2, [pc, #196]	; (8003108 <main+0x5f0>)
	os_time = 0;
 8003042:	600c      	str	r4, [r1, #0]
	meanavg = 0.f;
 8003044:	2100      	movs	r1, #0
	bw[AM]   = bw[LSB]  = Wide;
 8003046:	f8c0 c000 	str.w	ip, [r0]
	meanavg = 0.f;
 800304a:	6011      	str	r1, [r2, #0]
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 800304c:	4a2f      	ldr	r2, [pc, #188]	; (800310c <main+0x5f4>)
 800304e:	4930      	ldr	r1, [pc, #192]	; (8003110 <main+0x5f8>)
	AGC_decay[Fast] = 0.9995f;
 8003050:	4830      	ldr	r0, [pc, #192]	; (8003114 <main+0x5fc>)
	Qfactor = 0.987f;         // Q factor for the CW peak filter
 8003052:	6011      	str	r1, [r2, #0]
	Muted   = false;
 8003054:	4a30      	ldr	r2, [pc, #192]	; (8003118 <main+0x600>)
	AMindex  = LSBindex = 1;
 8003056:	4931      	ldr	r1, [pc, #196]	; (800311c <main+0x604>)
	Muted   = false;
 8003058:	7014      	strb	r4, [r2, #0]
	AMindex  = LSBindex = 1;
 800305a:	4a31      	ldr	r2, [pc, #196]	; (8003120 <main+0x608>)
 800305c:	800b      	strh	r3, [r1, #0]
 800305e:	8013      	strh	r3, [r2, #0]
	USBindex = CWindex  = 1;
 8003060:	4930      	ldr	r1, [pc, #192]	; (8003124 <main+0x60c>)
 8003062:	4a31      	ldr	r2, [pc, #196]	; (8003128 <main+0x610>)
 8003064:	800b      	strh	r3, [r1, #0]
 8003066:	8013      	strh	r3, [r2, #0]
	agc[AM]  = agc[LSB] = Slow;
 8003068:	4930      	ldr	r1, [pc, #192]	; (800312c <main+0x614>)
 800306a:	4a31      	ldr	r2, [pc, #196]	; (8003130 <main+0x618>)
	AGC_decay[Fast] = 0.9995f;
 800306c:	4b31      	ldr	r3, [pc, #196]	; (8003134 <main+0x61c>)
	agc[AM]  = agc[LSB] = Slow;
 800306e:	6011      	str	r1, [r2, #0]
	AGC_decay[Slow] = 0.99995f;
 8003070:	4a31      	ldr	r2, [pc, #196]	; (8003138 <main+0x620>)
	AGC_decay[Fast] = 0.9995f;
 8003072:	6018      	str	r0, [r3, #0]
	AGC_decay[Slow] = 0.99995f;
 8003074:	605a      	str	r2, [r3, #4]
	Hangcount[Fast] = 2;
 8003076:	4931      	ldr	r1, [pc, #196]	; (800313c <main+0x624>)
 8003078:	4831      	ldr	r0, [pc, #196]	; (8003140 <main+0x628>)
	AgcThreshold    = 1.92e-4f;
 800307a:	4b32      	ldr	r3, [pc, #200]	; (8003144 <main+0x62c>)
 800307c:	4a32      	ldr	r2, [pc, #200]	; (8003148 <main+0x630>)
	Hangcount[Fast] = 2;
 800307e:	6008      	str	r0, [r1, #0]
	AgcThreshold    = 1.92e-4f;
 8003080:	601a      	str	r2, [r3, #0]
	SamplingRate = SamplingRate * 4000000.f / 3999300.f; // Correct Xtal error
 8003082:	4932      	ldr	r1, [pc, #200]	; (800314c <main+0x634>)
 8003084:	4832      	ldr	r0, [pc, #200]	; (8003150 <main+0x638>)
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8003086:	4b33      	ldr	r3, [pc, #204]	; (8003154 <main+0x63c>)
 8003088:	4a33      	ldr	r2, [pc, #204]	; (8003158 <main+0x640>)
	SamplingRate = SamplingRate * 4000000.f / 3999300.f; // Correct Xtal error
 800308a:	6008      	str	r0, [r1, #0]
	AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 800308c:	601a      	str	r2, [r3, #0]
	SDR_compute_IIR_parms();  // compute the IIR parms for the CW peak filter
 800308e:	f7ff f903 	bl	8002298 <SDR_compute_IIR_parms>
	arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8003092:	4b32      	ldr	r3, [pc, #200]	; (800315c <main+0x644>)
 8003094:	2204      	movs	r2, #4
 8003096:	9701      	str	r7, [sp, #4]
 8003098:	2140      	movs	r1, #64	; 0x40
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	4830      	ldr	r0, [pc, #192]	; (8003160 <main+0x648>)
 800309e:	4b31      	ldr	r3, [pc, #196]	; (8003164 <main+0x64c>)
 80030a0:	f007 fbd0 	bl	800a844 <arm_fir_decimate_init_f32>
 80030a4:	7028      	strb	r0, [r5, #0]
	while(arc != ARM_MATH_SUCCESS)
 80030a6:	b100      	cbz	r0, 80030aa <main+0x592>
 80030a8:	e7fe      	b.n	80030a8 <main+0x590>
	arc = arm_fir_decimate_init_f32(&SfirI, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1I, BSIZE*4);
 80030aa:	4b2f      	ldr	r3, [pc, #188]	; (8003168 <main+0x650>)
 80030ac:	2204      	movs	r2, #4
 80030ae:	9701      	str	r7, [sp, #4]
 80030b0:	2140      	movs	r1, #64	; 0x40
 80030b2:	9300      	str	r3, [sp, #0]
 80030b4:	482d      	ldr	r0, [pc, #180]	; (800316c <main+0x654>)
 80030b6:	4b2b      	ldr	r3, [pc, #172]	; (8003164 <main+0x64c>)
 80030b8:	f007 fbc4 	bl	800a844 <arm_fir_decimate_init_f32>
 80030bc:	7028      	strb	r0, [r5, #0]
	while(arc != ARM_MATH_SUCCESS)
 80030be:	2800      	cmp	r0, #0
 80030c0:	d058      	beq.n	8003174 <main+0x65c>
 80030c2:	e7fe      	b.n	80030c2 <main+0x5aa>
 80030c4:	24002a40 	.word	0x24002a40
 80030c8:	40022100 	.word	0x40022100
 80030cc:	14f00020 	.word	0x14f00020
 80030d0:	240029a0 	.word	0x240029a0
 80030d4:	40007400 	.word	0x40007400
 80030d8:	24008cc0 	.word	0x24008cc0
 80030dc:	40001000 	.word	0x40001000
 80030e0:	240029b4 	.word	0x240029b4
 80030e4:	24007690 	.word	0x24007690
 80030e8:	58002400 	.word	0x58002400
 80030ec:	24007624 	.word	0x24007624
 80030f0:	3dcccccd 	.word	0x3dcccccd
 80030f4:	2400c224 	.word	0x2400c224
 80030f8:	24009d14 	.word	0x24009d14
 80030fc:	44228000 	.word	0x44228000
 8003100:	24008d0c 	.word	0x24008d0c
 8003104:	24009d20 	.word	0x24009d20
 8003108:	2400c220 	.word	0x2400c220
 800310c:	24008d04 	.word	0x24008d04
 8003110:	3f7cac08 	.word	0x3f7cac08
 8003114:	3f7fdf3b 	.word	0x3f7fdf3b
 8003118:	24007620 	.word	0x24007620
 800311c:	2400d640 	.word	0x2400d640
 8003120:	2400d642 	.word	0x2400d642
 8003124:	24008d08 	.word	0x24008d08
 8003128:	24007ed4 	.word	0x24007ed4
 800312c:	00010101 	.word	0x00010101
 8003130:	24007688 	.word	0x24007688
 8003134:	2400c22c 	.word	0x2400c22c
 8003138:	3f7ffcb9 	.word	0x3f7ffcb9
 800313c:	24009d18 	.word	0x24009d18
 8003140:	001e0002 	.word	0x001e0002
 8003144:	24009d10 	.word	0x24009d10
 8003148:	3949539c 	.word	0x3949539c
 800314c:	24004300 	.word	0x24004300
 8003150:	4b189d57 	.word	0x4b189d57
 8003154:	24007ed0 	.word	0x24007ed0
 8003158:	47189d57 	.word	0x47189d57
 800315c:	24004c08 	.word	0x24004c08
 8003160:	24000504 	.word	0x24000504
 8003164:	240000f8 	.word	0x240000f8
 8003168:	24009d24 	.word	0x24009d24
 800316c:	24008754 	.word	0x24008754
 8003170:	240042d4 	.word	0x240042d4
	Load_Presets();
 8003174:	f7fd faec 	bl	8000750 <Load_Presets>
	Tune_Preset(1);      // Set the initial tuning to Preset 1
 8003178:	2001      	movs	r0, #1
 800317a:	f7fd fb85 	bl	8000888 <Tune_Preset>
	DisplayStatus();    // Display status, it would not be shown until a user input was given
 800317e:	f7ff fb01 	bl	8002784 <DisplayStatus>
	if (HAL_ADCEx_MultiModeStart_DMA(&hadc1,
 8003182:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003186:	497c      	ldr	r1, [pc, #496]	; (8003378 <main+0x860>)
 8003188:	487c      	ldr	r0, [pc, #496]	; (800337c <main+0x864>)
 800318a:	f001 f90f 	bl	80043ac <HAL_ADCEx_MultiModeStart_DMA>
 800318e:	4604      	mov	r4, r0
 8003190:	2800      	cmp	r0, #0
 8003192:	f47f af40 	bne.w	8003016 <main+0x4fe>
	HAL_TIM_Base_Start(&htim6);
 8003196:	487a      	ldr	r0, [pc, #488]	; (8003380 <main+0x868>)
			if (volume < 0)
 8003198:	f04f 0b00 	mov.w	fp, #0
	HAL_TIM_Base_Start(&htim6);
 800319c:	f004 ffb0 	bl	8008100 <HAL_TIM_Base_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 80031a0:	2110      	movs	r1, #16
 80031a2:	4878      	ldr	r0, [pc, #480]	; (8003384 <main+0x86c>)
 80031a4:	f001 fa68 	bl	8004678 <HAL_DAC_Start>
 80031a8:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 8003398 <main+0x880>
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t*)AudioOut, BSIZE * 2, DAC_ALIGN_12B_R);
 80031ac:	9400      	str	r4, [sp, #0]
 80031ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031b2:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 80033a0 <main+0x888>
 80031b6:	2110      	movs	r1, #16
 80031b8:	4f73      	ldr	r7, [pc, #460]	; (8003388 <main+0x870>)
	result = (HAL_UART_Receive_IT(&huart3, (uint8_t *) UartRXString, 1 )) ;
 80031ba:	4d74      	ldr	r5, [pc, #464]	; (800338c <main+0x874>)
	sprintf((char*)UartTXString, "S %-4.1f\r", SValue);
 80031bc:	4c74      	ldr	r4, [pc, #464]	; (8003390 <main+0x878>)
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t*)AudioOut, BSIZE * 2, DAC_ALIGN_12B_R);
 80031be:	4a75      	ldr	r2, [pc, #468]	; (8003394 <main+0x87c>)
 80031c0:	4870      	ldr	r0, [pc, #448]	; (8003384 <main+0x86c>)
 80031c2:	f001 fa87 	bl	80046d4 <HAL_DAC_Start_DMA>
			volume += 0.1;
 80031c6:	ed9f ab66 	vldr	d10, [pc, #408]	; 8003360 <main+0x848>
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 80031ca:	ed9f 9b67 	vldr	d9, [pc, #412]	; 8003368 <main+0x850>
 80031ce:	ed9f 8b68 	vldr	d8, [pc, #416]	; 8003370 <main+0x858>
	__HAL_UART_SEND_REQ (&huart3, UART_RXDATA_FLUSH_REQUEST);
 80031d2:	6833      	ldr	r3, [r6, #0]
	__HAL_UART_CLEAR_OREFLAG (&huart3);
 80031d4:	f04f 0e08 	mov.w	lr, #8
	result = (HAL_UART_Receive_IT(&huart3, (uint8_t *) UartRXString, 1 )) ;
 80031d8:	2201      	movs	r2, #1
 80031da:	496f      	ldr	r1, [pc, #444]	; (8003398 <main+0x880>)
	__HAL_UART_SEND_REQ (&huart3, UART_RXDATA_FLUSH_REQUEST);
 80031dc:	f8d3 c018 	ldr.w	ip, [r3, #24]
	result = (HAL_UART_Receive_IT(&huart3, (uint8_t *) UartRXString, 1 )) ;
 80031e0:	4628      	mov	r0, r5
	__HAL_UART_SEND_REQ (&huart3, UART_RXDATA_FLUSH_REQUEST);
 80031e2:	ea4c 0c0e 	orr.w	ip, ip, lr
 80031e6:	f8c3 c018 	str.w	ip, [r3, #24]
	__HAL_UART_CLEAR_OREFLAG (&huart3);
 80031ea:	f8c3 e020 	str.w	lr, [r3, #32]
	result = (HAL_UART_Receive_IT(&huart3, (uint8_t *) UartRXString, 1 )) ;
 80031ee:	f005 f97d 	bl	80084ec <HAL_UART_Receive_IT>
 80031f2:	f88d 0084 	strb.w	r0, [sp, #132]	; 0x84
	if (result == HAL_OK)
 80031f6:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 80031fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80031fe:	bba3      	cbnz	r3, 800326a <main+0x752>
		switch (UartRXString[0])
 8003200:	f899 3000 	ldrb.w	r3, [r9]
		UartRXDataReady = RESET;
 8003204:	f888 2000 	strb.w	r2, [r8]
		switch (UartRXString[0])
 8003208:	3b2b      	subs	r3, #43	; 0x2b
 800320a:	2b4c      	cmp	r3, #76	; 0x4c
 800320c:	d82b      	bhi.n	8003266 <main+0x74e>
 800320e:	e8df f003 	tbb	[pc, r3]
 8003212:	2a8e      	.short	0x2a8e
 8003214:	2a2a2a7e 	.word	0x2a2a2a7e
 8003218:	767a9b9e 	.word	0x767a9b9e
 800321c:	666a6e72 	.word	0x666a6e72
 8003220:	2a2a2a2a 	.word	0x2a2a2a2a
 8003224:	2a2a2a2a 	.word	0x2a2a2a2a
 8003228:	2a2a2a2a 	.word	0x2a2a2a2a
 800322c:	2a2a2a2a 	.word	0x2a2a2a2a
 8003230:	2a2a2a2a 	.word	0x2a2a2a2a
 8003234:	2a2a2a2a 	.word	0x2a2a2a2a
 8003238:	2a2a2a2a 	.word	0x2a2a2a2a
 800323c:	2a2a2a2a 	.word	0x2a2a2a2a
 8003240:	2a2a2a2a 	.word	0x2a2a2a2a
 8003244:	2a2a2a2a 	.word	0x2a2a2a2a
 8003248:	2a5e2a62 	.word	0x2a5e2a62
 800324c:	2a2a5a2a 	.word	0x2a2a5a2a
 8003250:	562a2a2a 	.word	0x562a2a2a
 8003254:	2a2a522a 	.word	0x2a2a522a
 8003258:	2a4a2a2a 	.word	0x2a4a2a2a
 800325c:	2a4e      	.short	0x2a4e
 800325e:	27          	.byte	0x27
 800325f:	00          	.byte	0x00
			SetBW((Bwidth)Wide);  break;
 8003260:	2001      	movs	r0, #1
 8003262:	f7fd fa9f 	bl	80007a4 <SetBW>
		DisplayStatus();
 8003266:	f7ff fa8d 	bl	8002784 <DisplayStatus>
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 800326a:	ed97 0a00 	vldr	s0, [r7]
 800326e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8003272:	ee20 0b09 	vmul.f64	d0, d0, d9
 8003276:	f00a f8b3 	bl	800d3e0 <log10>
	sprintf((char*)UartTXString, "S %-4.1f\r", SValue);
 800327a:	4948      	ldr	r1, [pc, #288]	; (800339c <main+0x884>)
 800327c:	4620      	mov	r0, r4
	SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 800327e:	ee20 0b08 	vmul.f64	d0, d0, d8
 8003282:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
	sprintf((char*)UartTXString, "S %-4.1f\r", SValue);
 8003286:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 800328a:	ec53 2b17 	vmov	r2, r3, d7
 800328e:	f008 fcb3 	bl	800bbf8 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *) UartTXString, strlen(UartTXString), 100);
 8003292:	4620      	mov	r0, r4
 8003294:	f7fd f884 	bl	80003a0 <strlen>
 8003298:	2364      	movs	r3, #100	; 0x64
 800329a:	b282      	uxth	r2, r0
 800329c:	4621      	mov	r1, r4
 800329e:	4628      	mov	r0, r5
 80032a0:	f005 f868 	bl	8008374 <HAL_UART_Transmit>
 80032a4:	e795      	b.n	80031d2 <main+0x6ba>
			SetAGC((Agctype)Slow);  break;
 80032a6:	2001      	movs	r0, #1
 80032a8:	f7fd fc32 	bl	8000b10 <SetAGC>
 80032ac:	e7db      	b.n	8003266 <main+0x74e>
			SetMode((Mode)USB); break;
 80032ae:	2002      	movs	r0, #2
 80032b0:	f7fd fc84 	bl	8000bbc <SetMode>
 80032b4:	e7d7      	b.n	8003266 <main+0x74e>
			SetBW((Bwidth)Narrow);  break;
 80032b6:	2000      	movs	r0, #0
 80032b8:	f7fd fa74 	bl	80007a4 <SetBW>
 80032bc:	e7d3      	b.n	8003266 <main+0x74e>
			SetMode((Mode)LSB); break;
 80032be:	2001      	movs	r0, #1
 80032c0:	f7fd fc7c 	bl	8000bbc <SetMode>
 80032c4:	e7cf      	b.n	8003266 <main+0x74e>
			SetAGC((Agctype)Fast);  break;
 80032c6:	2000      	movs	r0, #0
 80032c8:	f7fd fc22 	bl	8000b10 <SetAGC>
 80032cc:	e7cb      	b.n	8003266 <main+0x74e>
			SetMode((Mode)CW); break;
 80032ce:	2003      	movs	r0, #3
 80032d0:	f7fd fc74 	bl	8000bbc <SetMode>
 80032d4:	e7c7      	b.n	8003266 <main+0x74e>
			SetMode((Mode)AM); break;
 80032d6:	2000      	movs	r0, #0
 80032d8:	f7fd fc70 	bl	8000bbc <SetMode>
 80032dc:	e7c3      	b.n	8003266 <main+0x74e>
			SetFstep(0); break;
 80032de:	2000      	movs	r0, #0
 80032e0:	f7fd fd5a 	bl	8000d98 <SetFstep>
 80032e4:	e7bf      	b.n	8003266 <main+0x74e>
			SetFstep(1); break;
 80032e6:	2001      	movs	r0, #1
 80032e8:	f7fd fd56 	bl	8000d98 <SetFstep>
 80032ec:	e7bb      	b.n	8003266 <main+0x74e>
			SetFstep(2);  break;
 80032ee:	2002      	movs	r0, #2
 80032f0:	f7fd fd52 	bl	8000d98 <SetFstep>
 80032f4:	e7b7      	b.n	8003266 <main+0x74e>
			SetFstep(3);  break;
 80032f6:	2003      	movs	r0, #3
 80032f8:	f7fd fd4e 	bl	8000d98 <SetFstep>
 80032fc:	e7b3      	b.n	8003266 <main+0x74e>
			SetFstep(4);  break;
 80032fe:	2004      	movs	r0, #4
 8003300:	f7fd fd4a 	bl	8000d98 <SetFstep>
 8003304:	e7af      	b.n	8003266 <main+0x74e>
			SetFstep(5);  break;
 8003306:	2005      	movs	r0, #5
 8003308:	f7fd fd46 	bl	8000d98 <SetFstep>
 800330c:	e7ab      	b.n	8003266 <main+0x74e>
			volume -= 0.1;
 800330e:	ed9a 7a00 	vldr	s14, [sl]
 8003312:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8003316:	ee37 7b4a 	vsub.f64	d7, d7, d10
 800331a:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
			if (volume < 0)
 800331e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8003322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003326:	d415      	bmi.n	8003354 <main+0x83c>
			volume += 0.1;
 8003328:	ed8a 7a00 	vstr	s14, [sl]
 800332c:	e79b      	b.n	8003266 <main+0x74e>
 800332e:	ed9a 7a00 	vldr	s14, [sl]
			if (volume > 1.0)
 8003332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
			volume += 0.1;
 8003336:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800333a:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800333e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8003342:	fe87 7a66 	vminnm.f32	s14, s14, s13
 8003346:	e7ef      	b.n	8003328 <main+0x810>
			FplusClicked(); break;
 8003348:	f7fd fd3a 	bl	8000dc0 <FplusClicked>
 800334c:	e78b      	b.n	8003266 <main+0x74e>
			FminusClicked(); break;
 800334e:	f7fd fe6d 	bl	800102c <FminusClicked>
 8003352:	e788      	b.n	8003266 <main+0x74e>
				volume = 0;
 8003354:	f8ca b000 	str.w	fp, [sl]
 8003358:	e785      	b.n	8003266 <main+0x74e>
 800335a:	bf00      	nop
 800335c:	f3af 8000 	nop.w
 8003360:	9999999a 	.word	0x9999999a
 8003364:	3fb99999 	.word	0x3fb99999
 8003368:	00000000 	.word	0x00000000
 800336c:	409f4000 	.word	0x409f4000
 8003370:	9916f6a6 	.word	0x9916f6a6
 8003374:	400a93fc 	.word	0x400a93fc
 8003378:	2400ca40 	.word	0x2400ca40
 800337c:	24007624 	.word	0x24007624
 8003380:	24008cc0 	.word	0x24008cc0
 8003384:	240029a0 	.word	0x240029a0
 8003388:	24008750 	.word	0x24008750
 800338c:	240029b4 	.word	0x240029b4
 8003390:	24007520 	.word	0x24007520
 8003394:	24006d20 	.word	0x24006d20
 8003398:	24004308 	.word	0x24004308
 800339c:	0801af0c 	.word	0x0801af0c
 80033a0:	240004e8 	.word	0x240004e8

080033a4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033a4:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <HAL_MspInit+0x2c>)

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 80033a6:	2102      	movs	r1, #2
 80033a8:	2200      	movs	r2, #0
 80033aa:	f06f 0004 	mvn.w	r0, #4
{
 80033ae:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033b0:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
{
 80033b4:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033b6:	430c      	orrs	r4, r1
 80033b8:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
 80033bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033c0:	400b      	ands	r3, r1
 80033c2:	9301      	str	r3, [sp, #4]
 80033c4:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033c6:	b003      	add	sp, #12
 80033c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 80033cc:	f001 b8e2 	b.w	8004594 <HAL_NVIC_SetPriority>
 80033d0:	58024400 	.word	0x58024400

080033d4 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80033d4:	4943      	ldr	r1, [pc, #268]	; (80034e4 <HAL_ADC_MspInit+0x110>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d6:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 80033d8:	6802      	ldr	r2, [r0, #0]
{
 80033da:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 80033dc:	428a      	cmp	r2, r1
{
 80033de:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80033e4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80033e8:	9309      	str	r3, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 80033ea:	d01f      	beq.n	800342c <HAL_ADC_MspInit+0x58>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80033ec:	4b3e      	ldr	r3, [pc, #248]	; (80034e8 <HAL_ADC_MspInit+0x114>)
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d001      	beq.n	80033f6 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80033f2:	b00a      	add	sp, #40	; 0x28
 80033f4:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 80033f6:	4a3d      	ldr	r2, [pc, #244]	; (80034ec <HAL_ADC_MspInit+0x118>)
 80033f8:	6813      	ldr	r3, [r2, #0]
 80033fa:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80033fc:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80033fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003400:	d061      	beq.n	80034c6 <HAL_ADC_MspInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003402:	4b3b      	ldr	r3, [pc, #236]	; (80034f0 <HAL_ADC_MspInit+0x11c>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003404:	2502      	movs	r5, #2
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003406:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003408:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800340a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800340e:	4839      	ldr	r0, [pc, #228]	; (80034f4 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003410:	432a      	orrs	r2, r5
 8003412:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800341a:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800341c:	402b      	ands	r3, r5
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800341e:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003420:	9304      	str	r3, [sp, #16]
 8003422:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003424:	f002 fc02 	bl	8005c2c <HAL_GPIO_Init>
}
 8003428:	b00a      	add	sp, #40	; 0x28
 800342a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 800342c:	4a2f      	ldr	r2, [pc, #188]	; (80034ec <HAL_ADC_MspInit+0x118>)
 800342e:	4605      	mov	r5, r0
 8003430:	6813      	ldr	r3, [r2, #0]
 8003432:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003434:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003436:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003438:	d037      	beq.n	80034aa <HAL_ADC_MspInit+0xd6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800343a:	4b2d      	ldr	r3, [pc, #180]	; (80034f0 <HAL_ADC_MspInit+0x11c>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800343c:	2402      	movs	r4, #2
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800343e:	2603      	movs	r6, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003440:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003442:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003446:	482b      	ldr	r0, [pc, #172]	; (80034f4 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003448:	4322      	orrs	r2, r4
 800344a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800344e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003452:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003454:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003456:	9606      	str	r6, [sp, #24]
    hdma_adc1.Instance = DMA1_Stream0;
 8003458:	4c27      	ldr	r4, [pc, #156]	; (80034f8 <HAL_ADC_MspInit+0x124>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800345a:	9302      	str	r3, [sp, #8]
 800345c:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800345e:	f002 fbe5 	bl	8005c2c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 8003462:	4826      	ldr	r0, [pc, #152]	; (80034fc <HAL_ADC_MspInit+0x128>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003464:	2109      	movs	r1, #9
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003466:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800346a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_adc1.Instance = DMA1_Stream0;
 800346e:	6020      	str	r0, [r4, #0]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003470:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003474:	6061      	str	r1, [r4, #4]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003476:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800347a:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800347c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003480:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003482:	2300      	movs	r3, #0
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003484:	61a0      	str	r0, [r4, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003486:	4620      	mov	r0, r4
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003488:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800348a:	e9c4 1207 	strd	r1, r2, [r4, #28]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800348e:	e9c4 3302 	strd	r3, r3, [r4, #8]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003492:	f001 fb37 	bl	8004b04 <HAL_DMA_Init>
 8003496:	b918      	cbnz	r0, 80034a0 <HAL_ADC_MspInit+0xcc>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003498:	64ec      	str	r4, [r5, #76]	; 0x4c
 800349a:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800349c:	b00a      	add	sp, #40	; 0x28
 800349e:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80034a0:	f7ff fa60 	bl	8002964 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80034a4:	64ec      	str	r4, [r5, #76]	; 0x4c
 80034a6:	63a5      	str	r5, [r4, #56]	; 0x38
 80034a8:	e7f8      	b.n	800349c <HAL_ADC_MspInit+0xc8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80034aa:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <HAL_ADC_MspInit+0x11c>)
 80034ac:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80034b0:	f042 0220 	orr.w	r2, r2, #32
 80034b4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80034b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80034bc:	f003 0320 	and.w	r3, r3, #32
 80034c0:	9301      	str	r3, [sp, #4]
 80034c2:	9b01      	ldr	r3, [sp, #4]
 80034c4:	e7b9      	b.n	800343a <HAL_ADC_MspInit+0x66>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80034c6:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <HAL_ADC_MspInit+0x11c>)
 80034c8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80034cc:	f042 0220 	orr.w	r2, r2, #32
 80034d0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 80034d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	9303      	str	r3, [sp, #12]
 80034de:	9b03      	ldr	r3, [sp, #12]
 80034e0:	e78f      	b.n	8003402 <HAL_ADC_MspInit+0x2e>
 80034e2:	bf00      	nop
 80034e4:	40022000 	.word	0x40022000
 80034e8:	40022100 	.word	0x40022100
 80034ec:	240004ec 	.word	0x240004ec
 80034f0:	58024400 	.word	0x58024400
 80034f4:	58020400 	.word	0x58020400
 80034f8:	240086d8 	.word	0x240086d8
 80034fc:	40020010 	.word	0x40020010

08003500 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8003500:	4b2d      	ldr	r3, [pc, #180]	; (80035b8 <HAL_DAC_MspInit+0xb8>)
 8003502:	6802      	ldr	r2, [r0, #0]
{
 8003504:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hdac->Instance==DAC1)
 8003506:	429a      	cmp	r2, r3
{
 8003508:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800350a:	f04f 0400 	mov.w	r4, #0
 800350e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003512:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8003516:	9407      	str	r4, [sp, #28]
  if(hdac->Instance==DAC1)
 8003518:	d001      	beq.n	800351e <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800351a:	b009      	add	sp, #36	; 0x24
 800351c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 800351e:	4b27      	ldr	r3, [pc, #156]	; (80035bc <HAL_DAC_MspInit+0xbc>)
 8003520:	4606      	mov	r6, r0
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003522:	2020      	movs	r0, #32
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003524:	2503      	movs	r5, #3
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003526:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800352a:	a903      	add	r1, sp, #12
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800352c:	f44f 6780 	mov.w	r7, #1024	; 0x400
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003530:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003534:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003538:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800353c:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8003540:	9201      	str	r2, [sp, #4]
 8003542:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003544:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003548:	f042 0201 	orr.w	r2, r2, #1
 800354c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003554:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003556:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800355a:	4819      	ldr	r0, [pc, #100]	; (80035c0 <HAL_DAC_MspInit+0xc0>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800355c:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800355e:	9302      	str	r3, [sp, #8]
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8003560:	4d18      	ldr	r5, [pc, #96]	; (80035c4 <HAL_DAC_MspInit+0xc4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003562:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003564:	f002 fb62 	bl	8005c2c <HAL_GPIO_Init>
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8003568:	4b17      	ldr	r3, [pc, #92]	; (80035c8 <HAL_DAC_MspInit+0xc8>)
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800356a:	2040      	movs	r0, #64	; 0x40
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 800356c:	f04f 0c44 	mov.w	ip, #68	; 0x44
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003570:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003574:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8003578:	602b      	str	r3, [r5, #0]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 800357a:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800357e:	60ec      	str	r4, [r5, #12]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003580:	e9c5 c001 	strd	ip, r0, [r5, #4]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8003584:	4628      	mov	r0, r5
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003586:	e9c5 4408 	strd	r4, r4, [r5, #32]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800358a:	e9c5 7104 	strd	r7, r1, [r5, #16]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 800358e:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8003592:	f001 fab7 	bl	8004b04 <HAL_DMA_Init>
 8003596:	b958      	cbnz	r0, 80035b0 <HAL_DAC_MspInit+0xb0>
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8003598:	60f5      	str	r5, [r6, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800359a:	2200      	movs	r2, #0
 800359c:	2101      	movs	r1, #1
 800359e:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 80035a0:	63ae      	str	r6, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80035a2:	f000 fff7 	bl	8004594 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80035a6:	2036      	movs	r0, #54	; 0x36
 80035a8:	f001 f82a 	bl	8004600 <HAL_NVIC_EnableIRQ>
}
 80035ac:	b009      	add	sp, #36	; 0x24
 80035ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 80035b0:	f7ff f9d8 	bl	8002964 <Error_Handler>
 80035b4:	e7f0      	b.n	8003598 <HAL_DAC_MspInit+0x98>
 80035b6:	bf00      	nop
 80035b8:	40007400 	.word	0x40007400
 80035bc:	58024400 	.word	0x58024400
 80035c0:	58020000 	.word	0x58020000
 80035c4:	24002928 	.word	0x24002928
 80035c8:	40020028 	.word	0x40020028

080035cc <HAL_LPTIM_MspInit>:
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hlptim->Instance==LPTIM2)
 80035cc:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ce:	2300      	movs	r3, #0
  if(hlptim->Instance==LPTIM2)
 80035d0:	4a17      	ldr	r2, [pc, #92]	; (8003630 <HAL_LPTIM_MspInit+0x64>)
{
 80035d2:	b570      	push	{r4, r5, r6, lr}
  if(hlptim->Instance==LPTIM2)
 80035d4:	4291      	cmp	r1, r2
{
 80035d6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80035dc:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80035e0:	9307      	str	r3, [sp, #28]
  if(hlptim->Instance==LPTIM2)
 80035e2:	d001      	beq.n	80035e8 <HAL_LPTIM_MspInit+0x1c>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 80035e4:	b008      	add	sp, #32
 80035e6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80035e8:	4b12      	ldr	r3, [pc, #72]	; (8003634 <HAL_LPTIM_MspInit+0x68>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ea:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035ec:	f44f 6680 	mov.w	r6, #1024	; 0x400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035f0:	a903      	add	r1, sp, #12
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80035f2:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 80035f6:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035f8:	480f      	ldr	r0, [pc, #60]	; (8003638 <HAL_LPTIM_MspInit+0x6c>)
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80035fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035fe:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003602:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003606:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800360a:	9201      	str	r2, [sp, #4]
 800360c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800360e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003612:	432a      	orrs	r2, r5
 8003614:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800361c:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800361e:	402b      	ands	r3, r5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003620:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM2;
 8003622:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003624:	9302      	str	r3, [sp, #8]
 8003626:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003628:	f002 fb00 	bl	8005c2c <HAL_GPIO_Init>
}
 800362c:	b008      	add	sp, #32
 800362e:	bd70      	pop	{r4, r5, r6, pc}
 8003630:	58002400 	.word	0x58002400
 8003634:	58024400 	.word	0x58024400
 8003638:	58020400 	.word	0x58020400

0800363c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 800363c:	6802      	ldr	r2, [r0, #0]
 800363e:	4b0f      	ldr	r3, [pc, #60]	; (800367c <HAL_TIM_Base_MspInit+0x40>)
 8003640:	429a      	cmp	r2, r3
 8003642:	d000      	beq.n	8003646 <HAL_TIM_Base_MspInit+0xa>
 8003644:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003646:	4b0e      	ldr	r3, [pc, #56]	; (8003680 <HAL_TIM_Base_MspInit+0x44>)
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003648:	2200      	movs	r2, #0
 800364a:	2101      	movs	r1, #1
 800364c:	2036      	movs	r0, #54	; 0x36
{
 800364e:	b510      	push	{r4, lr}
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003650:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
{
 8003654:	b082      	sub	sp, #8
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003656:	f044 0410 	orr.w	r4, r4, #16
 800365a:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 800365e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003662:	f003 0310 	and.w	r3, r3, #16
 8003666:	9301      	str	r3, [sp, #4]
 8003668:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800366a:	f000 ff93 	bl	8004594 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800366e:	2036      	movs	r0, #54	; 0x36
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003670:	b002      	add	sp, #8
 8003672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003676:	f000 bfc3 	b.w	8004600 <HAL_NVIC_EnableIRQ>
 800367a:	bf00      	nop
 800367c:	40001000 	.word	0x40001000
 8003680:	58024400 	.word	0x58024400

08003684 <HAL_UART_MspInit>:
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART3)
 8003684:	6802      	ldr	r2, [r0, #0]
 8003686:	4b1e      	ldr	r3, [pc, #120]	; (8003700 <HAL_UART_MspInit+0x7c>)
{
 8003688:	b570      	push	{r4, r5, r6, lr}
  if(huart->Instance==USART3)
 800368a:	429a      	cmp	r2, r3
{
 800368c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800368e:	f04f 0400 	mov.w	r4, #0
 8003692:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003696:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800369a:	9407      	str	r4, [sp, #28]
  if(huart->Instance==USART3)
 800369c:	d001      	beq.n	80036a2 <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800369e:	b008      	add	sp, #32
 80036a0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 80036a2:	4b18      	ldr	r3, [pc, #96]	; (8003704 <HAL_UART_MspInit+0x80>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80036a4:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a8:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036aa:	2507      	movs	r5, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 80036ac:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036b0:	a903      	add	r1, sp, #12
    __HAL_RCC_USART3_CLK_ENABLE();
 80036b2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80036b6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80036ba:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80036be:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80036c2:	9201      	str	r2, [sp, #4]
 80036c4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80036ca:	f042 0208 	orr.w	r2, r2, #8
 80036ce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80036d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80036d6:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036d8:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036dc:	480a      	ldr	r0, [pc, #40]	; (8003708 <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036de:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036e0:	9302      	str	r3, [sp, #8]
 80036e2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036e4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036e6:	f002 faa1 	bl	8005c2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 80036ea:	4622      	mov	r2, r4
 80036ec:	2101      	movs	r1, #1
 80036ee:	2027      	movs	r0, #39	; 0x27
 80036f0:	f000 ff50 	bl	8004594 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80036f4:	2027      	movs	r0, #39	; 0x27
 80036f6:	f000 ff83 	bl	8004600 <HAL_NVIC_EnableIRQ>
}
 80036fa:	b008      	add	sp, #32
 80036fc:	bd70      	pop	{r4, r5, r6, pc}
 80036fe:	bf00      	nop
 8003700:	40004800 	.word	0x40004800
 8003704:	58024400 	.word	0x58024400
 8003708:	58020c00 	.word	0x58020c00

0800370c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop

08003710 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003710:	e7fe      	b.n	8003710 <HardFault_Handler>
 8003712:	bf00      	nop

08003714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003714:	e7fe      	b.n	8003714 <MemManage_Handler>
 8003716:	bf00      	nop

08003718 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003718:	e7fe      	b.n	8003718 <BusFault_Handler>
 800371a:	bf00      	nop

0800371c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800371c:	e7fe      	b.n	800371c <UsageFault_Handler>
 800371e:	bf00      	nop

08003720 <SVC_Handler>:
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
	EXTI1_IRQHandler();
 8003720:	f000 b8bc 	b.w	800389c <ADC3_IRQHandler>

08003724 <DebugMon_Handler>:
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop

08003728 <PendSV_Handler>:
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop

0800372c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800372c:	f000 b910 	b.w	8003950 <HAL_IncTick>

08003730 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003730:	4801      	ldr	r0, [pc, #4]	; (8003738 <DMA1_Stream0_IRQHandler+0x8>)
 8003732:	f001 bf3f 	b.w	80055b4 <HAL_DMA_IRQHandler>
 8003736:	bf00      	nop
 8003738:	240086d8 	.word	0x240086d8

0800373c <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 800373c:	4801      	ldr	r0, [pc, #4]	; (8003744 <DMA1_Stream1_IRQHandler+0x8>)
 800373e:	f001 bf39 	b.w	80055b4 <HAL_DMA_IRQHandler>
 8003742:	bf00      	nop
 8003744:	24002928 	.word	0x24002928

08003748 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003748:	4801      	ldr	r0, [pc, #4]	; (8003750 <USART3_IRQHandler+0x8>)
 800374a:	f005 b887 	b.w	800885c <HAL_UART_IRQHandler>
 800374e:	bf00      	nop
 8003750:	240029b4 	.word	0x240029b4

08003754 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003754:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003756:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800375a:	f002 fb89 	bl	8005e70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800375e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003762:	f002 fb85 	bl	8005e70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003766:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800376a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800376e:	f002 bb7f 	b.w	8005e70 <HAL_GPIO_EXTI_IRQHandler>
 8003772:	bf00      	nop

08003774 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003774:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8003776:	4804      	ldr	r0, [pc, #16]	; (8003788 <TIM6_DAC_IRQHandler+0x14>)
 8003778:	f001 f84c 	bl	8004814 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800377c:	4803      	ldr	r0, [pc, #12]	; (800378c <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800377e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 8003782:	f004 bcdf 	b.w	8008144 <HAL_TIM_IRQHandler>
 8003786:	bf00      	nop
 8003788:	240029a0 	.word	0x240029a0
 800378c:	24008cc0 	.word	0x24008cc0

08003790 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003790:	4a0c      	ldr	r2, [pc, #48]	; (80037c4 <_sbrk+0x34>)
{
 8003792:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8003794:	6813      	ldr	r3, [r2, #0]
 8003796:	b133      	cbz	r3, 80037a6 <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8003798:	4418      	add	r0, r3
 800379a:	4669      	mov	r1, sp
 800379c:	4288      	cmp	r0, r1
 800379e:	d809      	bhi.n	80037b4 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80037a0:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80037a6:	4908      	ldr	r1, [pc, #32]	; (80037c8 <_sbrk+0x38>)
 80037a8:	460b      	mov	r3, r1
 80037aa:	6011      	str	r1, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80037ac:	4669      	mov	r1, sp
 80037ae:	4418      	add	r0, r3
 80037b0:	4288      	cmp	r0, r1
 80037b2:	d9f5      	bls.n	80037a0 <_sbrk+0x10>
		errno = ENOMEM;
 80037b4:	f007 fdb2 	bl	800b31c <__errno>
 80037b8:	220c      	movs	r2, #12
		return (caddr_t) -1;
 80037ba:	f04f 33ff 	mov.w	r3, #4294967295
		errno = ENOMEM;
 80037be:	6002      	str	r2, [r0, #0]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	bd08      	pop	{r3, pc}
 80037c4:	240004f0 	.word	0x240004f0
 80037c8:	20000000 	.word	0x20000000

080037cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80037cc:	b430      	push	{r4, r5}
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80037ce:	4c19      	ldr	r4, [pc, #100]	; (8003834 <SystemInit+0x68>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80037d0:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 80037d2:	4b19      	ldr	r3, [pc, #100]	; (8003838 <SystemInit+0x6c>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80037d4:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80037d8:	4818      	ldr	r0, [pc, #96]	; (800383c <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80037da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80037de:	4d18      	ldr	r5, [pc, #96]	; (8003840 <SystemInit+0x74>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80037e0:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 80037e4:	681c      	ldr	r4, [r3, #0]
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80037e6:	4917      	ldr	r1, [pc, #92]	; (8003844 <SystemInit+0x78>)
  RCC->CR |= RCC_CR_HSION;
 80037e8:	f044 0401 	orr.w	r4, r4, #1
 80037ec:	601c      	str	r4, [r3, #0]
  RCC->CFGR = 0x00000000;
 80037ee:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80037f0:	681c      	ldr	r4, [r3, #0]
 80037f2:	4020      	ands	r0, r4
 80037f4:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 80037f6:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80037f8:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80037fa:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 80037fc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
 80037fe:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
 8003800:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 8003802:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
 8003804:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 8003806:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
 8003808:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 800380a:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 800380c:	6818      	ldr	r0, [r3, #0]
 800380e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8003812:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8003814:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003816:	682b      	ldr	r3, [r5, #0]
 8003818:	4019      	ands	r1, r3
 800381a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800381e:	d202      	bcs.n	8003826 <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003820:	4b09      	ldr	r3, [pc, #36]	; (8003848 <SystemInit+0x7c>)
 8003822:	2201      	movs	r2, #1
 8003824:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003826:	4b03      	ldr	r3, [pc, #12]	; (8003834 <SystemInit+0x68>)
 8003828:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800382c:	bc30      	pop	{r4, r5}
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800382e:	609a      	str	r2, [r3, #8]
}
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	e000ed00 	.word	0xe000ed00
 8003838:	58024400 	.word	0x58024400
 800383c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003840:	5c001000 	.word	0x5c001000
 8003844:	ffff0000 	.word	0xffff0000
 8003848:	51008108 	.word	0x51008108

0800384c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800384c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003884 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003850:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003852:	e003      	b.n	800385c <LoopCopyDataInit>

08003854 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003854:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003856:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003858:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800385a:	3104      	adds	r1, #4

0800385c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800385c:	480b      	ldr	r0, [pc, #44]	; (800388c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800385e:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003860:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003862:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003864:	d3f6      	bcc.n	8003854 <CopyDataInit>
  ldr  r2, =_sbss
 8003866:	4a0b      	ldr	r2, [pc, #44]	; (8003894 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003868:	e002      	b.n	8003870 <LoopFillZerobss>

0800386a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800386a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800386c:	f842 3b04 	str.w	r3, [r2], #4

08003870 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003870:	4b09      	ldr	r3, [pc, #36]	; (8003898 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003872:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003874:	d3f9      	bcc.n	800386a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003876:	f7ff ffa9 	bl	80037cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800387a:	f007 fd55 	bl	800b328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800387e:	f7ff f94b 	bl	8002b18 <main>
  bx  lr    
 8003882:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003884:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8003888:	0801e220 	.word	0x0801e220
  ldr  r0, =_sdata
 800388c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8003890:	240003dc 	.word	0x240003dc
  ldr  r2, =_sbss
 8003894:	240003e0 	.word	0x240003e0
  ldr  r3, = _ebss
 8003898:	2400d648 	.word	0x2400d648

0800389c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800389c:	e7fe      	b.n	800389c <ADC3_IRQHandler>
	...

080038a0 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80038a0:	4b0f      	ldr	r3, [pc, #60]	; (80038e0 <HAL_InitTick+0x40>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	b90b      	cbnz	r3, 80038aa <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80038a6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80038a8:	4770      	bx	lr
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80038aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038ae:	490d      	ldr	r1, [pc, #52]	; (80038e4 <HAL_InitTick+0x44>)
 80038b0:	fbb2 f3f3 	udiv	r3, r2, r3
{
 80038b4:	b510      	push	{r4, lr}
 80038b6:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80038b8:	6808      	ldr	r0, [r1, #0]
 80038ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80038be:	f000 fead 	bl	800461c <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038c2:	2c0f      	cmp	r4, #15
 80038c4:	d800      	bhi.n	80038c8 <HAL_InitTick+0x28>
 80038c6:	b108      	cbz	r0, 80038cc <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80038c8:	2001      	movs	r0, #1
}
 80038ca:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038cc:	2200      	movs	r2, #0
 80038ce:	4621      	mov	r1, r4
 80038d0:	f04f 30ff 	mov.w	r0, #4294967295
 80038d4:	f000 fe5e 	bl	8004594 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038d8:	4b03      	ldr	r3, [pc, #12]	; (80038e8 <HAL_InitTick+0x48>)
 80038da:	2000      	movs	r0, #0
 80038dc:	601c      	str	r4, [r3, #0]
}
 80038de:	bd10      	pop	{r4, pc}
 80038e0:	24000200 	.word	0x24000200
 80038e4:	240001f8 	.word	0x240001f8
 80038e8:	24000204 	.word	0x24000204

080038ec <HAL_Init>:
{
 80038ec:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038ee:	2003      	movs	r0, #3
{
 80038f0:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038f2:	f000 fe3b 	bl	800456c <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038f6:	4c12      	ldr	r4, [pc, #72]	; (8003940 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80038f8:	f002 fe9a 	bl	8006630 <HAL_RCC_GetSysClockFreq>
 80038fc:	4a11      	ldr	r2, [pc, #68]	; (8003944 <HAL_Init+0x58>)
 80038fe:	4912      	ldr	r1, [pc, #72]	; (8003948 <HAL_Init+0x5c>)
 8003900:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003902:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003904:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 8003908:	4d10      	ldr	r5, [pc, #64]	; (800394c <HAL_Init+0x60>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800390a:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800390e:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003910:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003912:	f003 031f 	and.w	r3, r3, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003916:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800391a:	fa20 f303 	lsr.w	r3, r0, r3
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800391e:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003920:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 8003924:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003926:	6022      	str	r2, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003928:	f7ff ffba 	bl	80038a0 <HAL_InitTick>
 800392c:	b110      	cbz	r0, 8003934 <HAL_Init+0x48>
    return HAL_ERROR;
 800392e:	2001      	movs	r0, #1
}
 8003930:	b003      	add	sp, #12
 8003932:	bd30      	pop	{r4, r5, pc}
 8003934:	9001      	str	r0, [sp, #4]
  HAL_MspInit();
 8003936:	f7ff fd35 	bl	80033a4 <HAL_MspInit>
  return HAL_OK;
 800393a:	9801      	ldr	r0, [sp, #4]
}
 800393c:	b003      	add	sp, #12
 800393e:	bd30      	pop	{r4, r5, pc}
 8003940:	240001fc 	.word	0x240001fc
 8003944:	58024400 	.word	0x58024400
 8003948:	0801af18 	.word	0x0801af18
 800394c:	240001f8 	.word	0x240001f8

08003950 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003950:	4a03      	ldr	r2, [pc, #12]	; (8003960 <HAL_IncTick+0x10>)
 8003952:	4b04      	ldr	r3, [pc, #16]	; (8003964 <HAL_IncTick+0x14>)
 8003954:	6811      	ldr	r1, [r2, #0]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	440b      	add	r3, r1
 800395a:	6013      	str	r3, [r2, #0]
}
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	240042fc 	.word	0x240042fc
 8003964:	24000200 	.word	0x24000200

08003968 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003968:	4b01      	ldr	r3, [pc, #4]	; (8003970 <HAL_GetTick+0x8>)
 800396a:	6818      	ldr	r0, [r3, #0]
}
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	240042fc 	.word	0x240042fc

08003974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003974:	b538      	push	{r3, r4, r5, lr}
 8003976:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003978:	f7ff fff6 	bl	8003968 <HAL_GetTick>
 800397c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800397e:	1c63      	adds	r3, r4, #1
 8003980:	d002      	beq.n	8003988 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003982:	4b04      	ldr	r3, [pc, #16]	; (8003994 <HAL_Delay+0x20>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003988:	f7ff ffee 	bl	8003968 <HAL_GetTick>
 800398c:	1b40      	subs	r0, r0, r5
 800398e:	42a0      	cmp	r0, r4
 8003990:	d3fa      	bcc.n	8003988 <HAL_Delay+0x14>
  {
  }
}
 8003992:	bd38      	pop	{r3, r4, r5, pc}
 8003994:	24000200 	.word	0x24000200

08003998 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8003998:	4b01      	ldr	r3, [pc, #4]	; (80039a0 <HAL_GetREVID+0x8>)
 800399a:	6818      	ldr	r0, [r3, #0]
}
 800399c:	0c00      	lsrs	r0, r0, #16
 800399e:	4770      	bx	lr
 80039a0:	5c001000 	.word	0x5c001000

080039a4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80039a4:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80039a6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80039a8:	f7fe feaa 	bl	8002700 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039ac:	bd08      	pop	{r3, pc}
 80039ae:	bf00      	nop

080039b0 <HAL_ADC_ErrorCallback>:
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop

080039b4 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80039b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039b8:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 80039be:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80039c0:	d11d      	bne.n	80039fe <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80039c2:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039c8:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80039ca:	680a      	ldr	r2, [r1, #0]
 80039cc:	f012 0f08 	tst.w	r2, #8
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80039d0:	68ca      	ldr	r2, [r1, #12]
 80039d2:	d01b      	beq.n	8003a0c <ADC_DMAConvCplt+0x58>
 80039d4:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80039d8:	d10d      	bne.n	80039f6 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80039da:	68ca      	ldr	r2, [r1, #12]
 80039dc:	0494      	lsls	r4, r2, #18
 80039de:	d40a      	bmi.n	80039f6 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039e6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039ea:	04d1      	lsls	r1, r2, #19
 80039ec:	d403      	bmi.n	80039f6 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039f0:	f042 0201 	orr.w	r2, r2, #1
 80039f4:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fe fe64 	bl	80026c4 <HAL_ADC_ConvCpltCallback>
}
 80039fc:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80039fe:	06d2      	lsls	r2, r2, #27
 8003a00:	d407      	bmi.n	8003a12 <ADC_DMAConvCplt+0x5e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0a:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003a0c:	0790      	lsls	r0, r2, #30
 8003a0e:	d1f2      	bne.n	80039f6 <ADC_DMAConvCplt+0x42>
 8003a10:	e7e6      	b.n	80039e0 <ADC_DMAConvCplt+0x2c>
      HAL_ADC_ErrorCallback(hadc);
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff ffcc 	bl	80039b0 <HAL_ADC_ErrorCallback>
}
 8003a18:	bd10      	pop	{r4, pc}
 8003a1a:	bf00      	nop

08003a1c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a1c:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a1e:	6b83      	ldr	r3, [r0, #56]	; 0x38

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a20:	6d5a      	ldr	r2, [r3, #84]	; 0x54

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a22:	4618      	mov	r0, r3
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a28:	655a      	str	r2, [r3, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003a2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a2c:	f042 0204 	orr.w	r2, r2, #4
 8003a30:	659a      	str	r2, [r3, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc);
 8003a32:	f7ff ffbd 	bl	80039b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a36:	bd08      	pop	{r3, pc}

08003a38 <HAL_ADC_ConfigChannel>:
{
 8003a38:	4602      	mov	r2, r0
  __IO uint32_t wait_loop_index = 0;
 8003a3a:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8003a3c:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
{
 8003a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 8003a44:	2b01      	cmp	r3, #1
{
 8003a46:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8003a48:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003a4a:	f000 8134 	beq.w	8003cb6 <HAL_ADC_ConfigChannel+0x27e>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a4e:	6813      	ldr	r3, [r2, #0]
  __HAL_LOCK(hadc);
 8003a50:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a52:	689c      	ldr	r4, [r3, #8]
 8003a54:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
 8003a58:	0767      	lsls	r7, r4, #29
 8003a5a:	d443      	bmi.n	8003ae4 <HAL_ADC_ConfigChannel+0xac>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003a5c:	680c      	ldr	r4, [r1, #0]
 8003a5e:	f3c4 0513 	ubfx	r5, r4, #0, #20
 8003a62:	f3c4 6784 	ubfx	r7, r4, #26, #5
 8003a66:	2d00      	cmp	r5, #0
 8003a68:	f040 80a5 	bne.w	8003bb6 <HAL_ADC_ConfigChannel+0x17e>
 8003a6c:	40b8      	lsls	r0, r7
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a6e:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 8003a70:	f04f 0c1f 	mov.w	ip, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003a74:	69dd      	ldr	r5, [r3, #28]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003a76:	09a6      	lsrs	r6, r4, #6
  MODIFY_REG(*preg,
 8003a78:	ea04 040c 	and.w	r4, r4, ip
 8003a7c:	4328      	orrs	r0, r5
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003a7e:	f103 0530 	add.w	r5, r3, #48	; 0x30
 8003a82:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 8003a86:	fa0c fc04 	lsl.w	ip, ip, r4
 8003a8a:	61d8      	str	r0, [r3, #28]
 8003a8c:	fa07 f404 	lsl.w	r4, r7, r4
 8003a90:	5970      	ldr	r0, [r6, r5]
 8003a92:	ea20 000c 	bic.w	r0, r0, ip
 8003a96:	4320      	orrs	r0, r4
 8003a98:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a9a:	6898      	ldr	r0, [r3, #8]
 8003a9c:	0746      	lsls	r6, r0, #29
 8003a9e:	f100 8088 	bmi.w	8003bb2 <HAL_ADC_ConfigChannel+0x17a>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003aa2:	689d      	ldr	r5, [r3, #8]
 8003aa4:	f015 0508 	ands.w	r5, r5, #8
 8003aa8:	d026      	beq.n	8003af8 <HAL_ADC_ConfigChannel+0xc0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003aaa:	6898      	ldr	r0, [r3, #8]
 8003aac:	07c5      	lsls	r5, r0, #31
 8003aae:	d417      	bmi.n	8003ae0 <HAL_ADC_ConfigChannel+0xa8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003ab0:	68ce      	ldr	r6, [r1, #12]
 8003ab2:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 8003ab4:	f006 0718 	and.w	r7, r6, #24
 8003ab8:	48bc      	ldr	r0, [pc, #752]	; (8003dac <HAL_ADC_ConfigChannel+0x374>)
 8003aba:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
 8003abe:	40f8      	lsrs	r0, r7
 8003ac0:	f3c4 0713 	ubfx	r7, r4, #0, #20
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003ac4:	f8df c30c 	ldr.w	ip, [pc, #780]	; 8003dd4 <HAL_ADC_ConfigChannel+0x39c>
 8003ac8:	4020      	ands	r0, r4
 8003aca:	ea25 0507 	bic.w	r5, r5, r7
 8003ace:	4566      	cmp	r6, ip
 8003ad0:	ea40 0005 	orr.w	r0, r0, r5
 8003ad4:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
 8003ad8:	f000 80a6 	beq.w	8003c28 <HAL_ADC_ConfigChannel+0x1f0>
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003adc:	2c00      	cmp	r4, #0
 8003ade:	db72      	blt.n	8003bc6 <HAL_ADC_ConfigChannel+0x18e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	e003      	b.n	8003aec <HAL_ADC_ConfigChannel+0xb4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ae4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003ae6:	f043 0320 	orr.w	r3, r3, #32
 8003aea:	6553      	str	r3, [r2, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8003aec:	2300      	movs	r3, #0
 8003aee:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
}
 8003af2:	b002      	add	sp, #8
 8003af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003af8:	680c      	ldr	r4, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003afa:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 8003afe:	2007      	movs	r0, #7
 8003b00:	688f      	ldr	r7, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b02:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 8003b06:	f3c4 5404 	ubfx	r4, r4, #20, #5
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b0a:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 8003b0e:	fa00 fe04 	lsl.w	lr, r0, r4
 8003b12:	fa07 f404 	lsl.w	r4, r7, r4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003b16:	4fa6      	ldr	r7, [pc, #664]	; (8003db0 <HAL_ADC_ConfigChannel+0x378>)
 8003b18:	f85c 0006 	ldr.w	r0, [ip, r6]
 8003b1c:	ea20 000e 	bic.w	r0, r0, lr
 8003b20:	4320      	orrs	r0, r4
 8003b22:	f84c 0006 	str.w	r0, [ip, r6]
 8003b26:	6838      	ldr	r0, [r7, #0]
 8003b28:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8003b2c:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8003b30:	f000 80b8 	beq.w	8003ca4 <HAL_ADC_ConfigChannel+0x26c>
 8003b34:	68dc      	ldr	r4, [r3, #12]
 8003b36:	6948      	ldr	r0, [r1, #20]
 8003b38:	f014 0f10 	tst.w	r4, #16
 8003b3c:	68dc      	ldr	r4, [r3, #12]
 8003b3e:	f040 80d9 	bne.w	8003cf4 <HAL_ADC_ConfigChannel+0x2bc>
 8003b42:	f3c4 0482 	ubfx	r4, r4, #2, #3
 8003b46:	0064      	lsls	r4, r4, #1
 8003b48:	fa00 fc04 	lsl.w	ip, r0, r4
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b4c:	f8d1 e010 	ldr.w	lr, [r1, #16]
 8003b50:	6808      	ldr	r0, [r1, #0]
 8003b52:	f1be 0f04 	cmp.w	lr, #4
 8003b56:	f000 80b2 	beq.w	8003cbe <HAL_ADC_ConfigChannel+0x286>
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b5a:	f103 0660 	add.w	r6, r3, #96	; 0x60
  MODIFY_REG(*preg,
 8003b5e:	f000 44f8 	and.w	r4, r0, #2080374784	; 0x7c000000
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003b62:	7e4f      	ldrb	r7, [r1, #25]
 8003b64:	f856 002e 	ldr.w	r0, [r6, lr, lsl #2]
 8003b68:	2f01      	cmp	r7, #1
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003b6a:	7e0f      	ldrb	r7, [r1, #24]
 8003b6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003b70:	bf14      	ite	ne
 8003b72:	f04f 0800 	movne.w	r8, #0
 8003b76:	f04f 4800 	moveq.w	r8, #2147483648	; 0x80000000
 8003b7a:	4320      	orrs	r0, r4
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003b7c:	2f01      	cmp	r7, #1
 8003b7e:	ea40 000c 	orr.w	r0, r0, ip
 8003b82:	f846 002e 	str.w	r0, [r6, lr, lsl #2]
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003b86:	690c      	ldr	r4, [r1, #16]
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003b88:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003b8c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003b90:	ea40 0008 	orr.w	r0, r0, r8
 8003b94:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003b98:	6908      	ldr	r0, [r1, #16]
 8003b9a:	d104      	bne.n	8003ba6 <HAL_ADC_ConfigChannel+0x16e>
 8003b9c:	f000 001f 	and.w	r0, r0, #31
 8003ba0:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8003ba4:	4085      	lsls	r5, r0
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003ba6:	6918      	ldr	r0, [r3, #16]
 8003ba8:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8003bac:	4305      	orrs	r5, r0
 8003bae:	611d      	str	r5, [r3, #16]
 8003bb0:	e77b      	b.n	8003aaa <HAL_ADC_ConfigChannel+0x72>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003bb2:	6898      	ldr	r0, [r3, #8]
 8003bb4:	e779      	b.n	8003aaa <HAL_ADC_ConfigChannel+0x72>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb6:	fa94 f4a4 	rbit	r4, r4
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003bba:	fab4 f484 	clz	r4, r4
 8003bbe:	f004 041f 	and.w	r4, r4, #31
 8003bc2:	40a0      	lsls	r0, r4
 8003bc4:	e753      	b.n	8003a6e <HAL_ADC_ConfigChannel+0x36>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bc6:	497b      	ldr	r1, [pc, #492]	; (8003db4 <HAL_ADC_ConfigChannel+0x37c>)
 8003bc8:	428b      	cmp	r3, r1
 8003bca:	f000 80bd 	beq.w	8003d48 <HAL_ADC_ConfigChannel+0x310>
 8003bce:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8003bd2:	428b      	cmp	r3, r1
 8003bd4:	f000 80b8 	beq.w	8003d48 <HAL_ADC_ConfigChannel+0x310>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bd8:	4e77      	ldr	r6, [pc, #476]	; (8003db8 <HAL_ADC_ConfigChannel+0x380>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003bda:	4d78      	ldr	r5, [pc, #480]	; (8003dbc <HAL_ADC_ConfigChannel+0x384>)
 8003bdc:	68a8      	ldr	r0, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bde:	68b1      	ldr	r1, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003be0:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8003be4:	43c9      	mvns	r1, r1
 8003be6:	f001 0101 	and.w	r1, r1, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bea:	2900      	cmp	r1, #0
 8003bec:	f000 80ba 	beq.w	8003d64 <HAL_ADC_ConfigChannel+0x32c>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003bf0:	4973      	ldr	r1, [pc, #460]	; (8003dc0 <HAL_ADC_ConfigChannel+0x388>)
 8003bf2:	428c      	cmp	r4, r1
 8003bf4:	f000 80f0 	beq.w	8003dd8 <HAL_ADC_ConfigChannel+0x3a0>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003bf8:	4972      	ldr	r1, [pc, #456]	; (8003dc4 <HAL_ADC_ConfigChannel+0x38c>)
 8003bfa:	428c      	cmp	r4, r1
 8003bfc:	f000 810e 	beq.w	8003e1c <HAL_ADC_ConfigChannel+0x3e4>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c00:	4971      	ldr	r1, [pc, #452]	; (8003dc8 <HAL_ADC_ConfigChannel+0x390>)
 8003c02:	428c      	cmp	r4, r1
 8003c04:	f47f af6c 	bne.w	8003ae0 <HAL_ADC_ConfigChannel+0xa8>
            if (ADC_VREFINT_INSTANCE(hadc))
 8003c08:	0241      	lsls	r1, r0, #9
 8003c0a:	f53f af69 	bmi.w	8003ae0 <HAL_ADC_ConfigChannel+0xa8>
 8003c0e:	496a      	ldr	r1, [pc, #424]	; (8003db8 <HAL_ADC_ConfigChannel+0x380>)
 8003c10:	428b      	cmp	r3, r1
 8003c12:	f47f af65 	bne.w	8003ae0 <HAL_ADC_ConfigChannel+0xa8>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003c16:	68a9      	ldr	r1, [r5, #8]
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003c18:	f446 0380 	orr.w	r3, r6, #4194304	; 0x400000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003c22:	430b      	orrs	r3, r1
 8003c24:	60ab      	str	r3, [r5, #8]
 8003c26:	e761      	b.n	8003aec <HAL_ADC_ConfigChannel+0xb4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c28:	2f00      	cmp	r7, #0
 8003c2a:	d069      	beq.n	8003d00 <HAL_ADC_ConfigChannel+0x2c8>
 8003c2c:	fa94 f0a4 	rbit	r0, r4
 8003c30:	fab0 f080 	clz	r0, r0
 8003c34:	3001      	adds	r0, #1
 8003c36:	f000 001f 	and.w	r0, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c3a:	2809      	cmp	r0, #9
 8003c3c:	f200 8098 	bhi.w	8003d70 <HAL_ADC_ConfigChannel+0x338>
 8003c40:	fa94 f0a4 	rbit	r0, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c44:	fab0 f080 	clz	r0, r0
 8003c48:	fa94 f5a4 	rbit	r5, r4
 8003c4c:	2601      	movs	r6, #1
 8003c4e:	fab5 f585 	clz	r5, r5
 8003c52:	3001      	adds	r0, #1
 8003c54:	4435      	add	r5, r6
 8003c56:	0680      	lsls	r0, r0, #26
 8003c58:	f005 051f 	and.w	r5, r5, #31
 8003c5c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003c60:	fa06 f505 	lsl.w	r5, r6, r5
 8003c64:	4328      	orrs	r0, r5
 8003c66:	fa94 f4a4 	rbit	r4, r4
 8003c6a:	fab4 f484 	clz	r4, r4
 8003c6e:	4434      	add	r4, r6
 8003c70:	f004 041f 	and.w	r4, r4, #31
 8003c74:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003c78:	0524      	lsls	r4, r4, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c7a:	4304      	orrs	r4, r0
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003c7c:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 8003c80:	f04f 0c07 	mov.w	ip, #7
 8003c84:	6888      	ldr	r0, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003c86:	0de7      	lsrs	r7, r4, #23
  MODIFY_REG(*preg,
 8003c88:	f3c4 5404 	ubfx	r4, r4, #20, #5
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003c8c:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 8003c90:	fa0c fc04 	lsl.w	ip, ip, r4
 8003c94:	40a0      	lsls	r0, r4
 8003c96:	59bd      	ldr	r5, [r7, r6]
 8003c98:	ea25 040c 	bic.w	r4, r5, ip
 8003c9c:	4304      	orrs	r4, r0
 8003c9e:	51bc      	str	r4, [r7, r6]
 8003ca0:	680c      	ldr	r4, [r1, #0]
 8003ca2:	e71b      	b.n	8003adc <HAL_ADC_ConfigChannel+0xa4>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ca4:	68dc      	ldr	r4, [r3, #12]
 8003ca6:	6948      	ldr	r0, [r1, #20]
 8003ca8:	f3c4 0c82 	ubfx	ip, r4, #2, #3
 8003cac:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003cb0:	fa00 fc0c 	lsl.w	ip, r0, ip
 8003cb4:	e74a      	b.n	8003b4c <HAL_ADC_ConfigChannel+0x114>
  __HAL_LOCK(hadc);
 8003cb6:	2002      	movs	r0, #2
}
 8003cb8:	b002      	add	sp, #8
 8003cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003cbe:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8003cc0:	0680      	lsls	r0, r0, #26
 8003cc2:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003cc6:	4284      	cmp	r4, r0
 8003cc8:	d039      	beq.n	8003d3e <HAL_ADC_ConfigChannel+0x306>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003cca:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8003ccc:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003cd0:	42a0      	cmp	r0, r4
 8003cd2:	d02f      	beq.n	8003d34 <HAL_ADC_ConfigChannel+0x2fc>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003cd4:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8003cd6:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003cda:	42a0      	cmp	r0, r4
 8003cdc:	d025      	beq.n	8003d2a <HAL_ADC_ConfigChannel+0x2f2>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003cde:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8003ce0:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003ce4:	42a0      	cmp	r0, r4
 8003ce6:	f47f aee0 	bne.w	8003aaa <HAL_ADC_ConfigChannel+0x72>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003cea:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003cec:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003cf0:	66d8      	str	r0, [r3, #108]	; 0x6c
 8003cf2:	e6da      	b.n	8003aaa <HAL_ADC_ConfigChannel+0x72>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003cf4:	0864      	lsrs	r4, r4, #1
 8003cf6:	f004 0408 	and.w	r4, r4, #8
 8003cfa:	fa00 fc04 	lsl.w	ip, r0, r4
 8003cfe:	e725      	b.n	8003b4c <HAL_ADC_ConfigChannel+0x114>
 8003d00:	2001      	movs	r0, #1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d02:	0ea4      	lsrs	r4, r4, #26
 8003d04:	4404      	add	r4, r0
 8003d06:	f004 051f 	and.w	r5, r4, #31
 8003d0a:	06a4      	lsls	r4, r4, #26
 8003d0c:	fa00 f605 	lsl.w	r6, r0, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d10:	2d09      	cmp	r5, #9
 8003d12:	f004 40f8 	and.w	r0, r4, #2080374784	; 0x7c000000
 8003d16:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8003d1a:	ea40 0006 	orr.w	r0, r0, r6
 8003d1e:	d9ab      	bls.n	8003c78 <HAL_ADC_ConfigChannel+0x240>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d20:	3c1e      	subs	r4, #30
 8003d22:	0524      	lsls	r4, r4, #20
 8003d24:	f044 7400 	orr.w	r4, r4, #33554432	; 0x2000000
 8003d28:	e7a7      	b.n	8003c7a <HAL_ADC_ConfigChannel+0x242>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003d2a:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8003d2c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003d30:	669c      	str	r4, [r3, #104]	; 0x68
 8003d32:	e7d4      	b.n	8003cde <HAL_ADC_ConfigChannel+0x2a6>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003d34:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8003d36:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003d3a:	665c      	str	r4, [r3, #100]	; 0x64
 8003d3c:	e7ca      	b.n	8003cd4 <HAL_ADC_ConfigChannel+0x29c>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003d3e:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8003d40:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003d44:	661c      	str	r4, [r3, #96]	; 0x60
 8003d46:	e7c0      	b.n	8003cca <HAL_ADC_ConfigChannel+0x292>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003d48:	4920      	ldr	r1, [pc, #128]	; (8003dcc <HAL_ADC_ConfigChannel+0x394>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d4a:	4e21      	ldr	r6, [pc, #132]	; (8003dd0 <HAL_ADC_ConfigChannel+0x398>)
 8003d4c:	4f19      	ldr	r7, [pc, #100]	; (8003db4 <HAL_ADC_ConfigChannel+0x37c>)
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d4e:	460d      	mov	r5, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003d50:	6888      	ldr	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d52:	68bf      	ldr	r7, [r7, #8]
 8003d54:	68b1      	ldr	r1, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003d56:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8003d5a:	4339      	orrs	r1, r7
 8003d5c:	43c9      	mvns	r1, r1
 8003d5e:	f001 0101 	and.w	r1, r1, #1
 8003d62:	e742      	b.n	8003bea <HAL_ADC_ConfigChannel+0x1b2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d64:	6d53      	ldr	r3, [r2, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8003d66:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d68:	f043 0320 	orr.w	r3, r3, #32
 8003d6c:	6553      	str	r3, [r2, #84]	; 0x54
 8003d6e:	e6bd      	b.n	8003aec <HAL_ADC_ConfigChannel+0xb4>
 8003d70:	fa94 f0a4 	rbit	r0, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d74:	fab0 f080 	clz	r0, r0
 8003d78:	fa94 f5a4 	rbit	r5, r4
 8003d7c:	2601      	movs	r6, #1
 8003d7e:	fab5 f585 	clz	r5, r5
 8003d82:	3001      	adds	r0, #1
 8003d84:	4435      	add	r5, r6
 8003d86:	0680      	lsls	r0, r0, #26
 8003d88:	f005 051f 	and.w	r5, r5, #31
 8003d8c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003d90:	fa06 f505 	lsl.w	r5, r6, r5
 8003d94:	4328      	orrs	r0, r5
 8003d96:	fa94 f4a4 	rbit	r4, r4
 8003d9a:	fab4 f484 	clz	r4, r4
 8003d9e:	4434      	add	r4, r6
 8003da0:	f004 041f 	and.w	r4, r4, #31
 8003da4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003da8:	e7ba      	b.n	8003d20 <HAL_ADC_ConfigChannel+0x2e8>
 8003daa:	bf00      	nop
 8003dac:	000fffff 	.word	0x000fffff
 8003db0:	5c001000 	.word	0x5c001000
 8003db4:	40022000 	.word	0x40022000
 8003db8:	58026000 	.word	0x58026000
 8003dbc:	58026300 	.word	0x58026300
 8003dc0:	cb840000 	.word	0xcb840000
 8003dc4:	c7520000 	.word	0xc7520000
 8003dc8:	cfb80000 	.word	0xcfb80000
 8003dcc:	40022300 	.word	0x40022300
 8003dd0:	40022100 	.word	0x40022100
 8003dd4:	47ff0000 	.word	0x47ff0000
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003dd8:	0204      	lsls	r4, r0, #8
 8003dda:	f53f ae81 	bmi.w	8003ae0 <HAL_ADC_ConfigChannel+0xa8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003dde:	4917      	ldr	r1, [pc, #92]	; (8003e3c <HAL_ADC_ConfigChannel+0x404>)
 8003de0:	428b      	cmp	r3, r1
 8003de2:	f47f ae7d 	bne.w	8003ae0 <HAL_ADC_ConfigChannel+0xa8>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003de6:	4b16      	ldr	r3, [pc, #88]	; (8003e40 <HAL_ADC_ConfigChannel+0x408>)
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003de8:	f446 0100 	orr.w	r1, r6, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003dec:	68a8      	ldr	r0, [r5, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f020 70e0 	bic.w	r0, r0, #29360128	; 0x1c00000
 8003df4:	4c13      	ldr	r4, [pc, #76]	; (8003e44 <HAL_ADC_ConfigChannel+0x40c>)
 8003df6:	099b      	lsrs	r3, r3, #6
 8003df8:	4301      	orrs	r1, r0
 8003dfa:	fba4 0303 	umull	r0, r3, r4, r3
 8003dfe:	60a9      	str	r1, [r5, #8]
 8003e00:	099b      	lsrs	r3, r3, #6
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	9301      	str	r3, [sp, #4]
              while(wait_loop_index != 0UL)
 8003e06:	9b01      	ldr	r3, [sp, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f43f ae69 	beq.w	8003ae0 <HAL_ADC_ConfigChannel+0xa8>
                wait_loop_index--;
 8003e0e:	9b01      	ldr	r3, [sp, #4]
 8003e10:	3b01      	subs	r3, #1
 8003e12:	9301      	str	r3, [sp, #4]
              while(wait_loop_index != 0UL)
 8003e14:	9b01      	ldr	r3, [sp, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1f9      	bne.n	8003e0e <HAL_ADC_ConfigChannel+0x3d6>
 8003e1a:	e661      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0xa8>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e1c:	01c0      	lsls	r0, r0, #7
 8003e1e:	f53f ae5f 	bmi.w	8003ae0 <HAL_ADC_ConfigChannel+0xa8>
 8003e22:	4906      	ldr	r1, [pc, #24]	; (8003e3c <HAL_ADC_ConfigChannel+0x404>)
 8003e24:	428b      	cmp	r3, r1
 8003e26:	f47f ae5b 	bne.w	8003ae0 <HAL_ADC_ConfigChannel+0xa8>
 8003e2a:	68a9      	ldr	r1, [r5, #8]
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003e2c:	f046 7380 	orr.w	r3, r6, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e30:	2000      	movs	r0, #0
 8003e32:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003e36:	430b      	orrs	r3, r1
 8003e38:	60ab      	str	r3, [r5, #8]
 8003e3a:	e657      	b.n	8003aec <HAL_ADC_ConfigChannel+0xb4>
 8003e3c:	58026000 	.word	0x58026000
 8003e40:	240001f8 	.word	0x240001f8
 8003e44:	053e2d63 	.word	0x053e2d63

08003e48 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e48:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e4a:	6891      	ldr	r1, [r2, #8]
 8003e4c:	07cb      	lsls	r3, r1, #31
 8003e4e:	d40e      	bmi.n	8003e6e <ADC_Enable+0x26>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003e50:	4926      	ldr	r1, [pc, #152]	; (8003eec <ADC_Enable+0xa4>)
{
 8003e52:	b570      	push	{r4, r5, r6, lr}
 8003e54:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003e56:	6890      	ldr	r0, [r2, #8]
 8003e58:	4208      	tst	r0, r1
 8003e5a:	d00a      	beq.n	8003e72 <ADC_Enable+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e5c:	6d62      	ldr	r2, [r4, #84]	; 0x54
      return HAL_ERROR;
 8003e5e:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e60:	f042 0210 	orr.w	r2, r2, #16
 8003e64:	6562      	str	r2, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e66:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003e68:	4302      	orrs	r2, r0
 8003e6a:	65a2      	str	r2, [r4, #88]	; 0x58
}
 8003e6c:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003e6e:	2000      	movs	r0, #0
}
 8003e70:	4770      	bx	lr
  MODIFY_REG(ADCx->CR,
 8003e72:	6891      	ldr	r1, [r2, #8]
 8003e74:	4b1e      	ldr	r3, [pc, #120]	; (8003ef0 <ADC_Enable+0xa8>)
 8003e76:	400b      	ands	r3, r1
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003e7e:	f7ff fd73 	bl	8003968 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	4a1b      	ldr	r2, [pc, #108]	; (8003ef4 <ADC_Enable+0xac>)
    tickstart = HAL_GetTick();
 8003e86:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d026      	beq.n	8003eda <ADC_Enable+0x92>
 8003e8c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d022      	beq.n	8003eda <ADC_Enable+0x92>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003e94:	4a18      	ldr	r2, [pc, #96]	; (8003ef8 <ADC_Enable+0xb0>)
 8003e96:	6892      	ldr	r2, [r2, #8]
  MODIFY_REG(ADCx->CR,
 8003e98:	4e15      	ldr	r6, [pc, #84]	; (8003ef0 <ADC_Enable+0xa8>)
 8003e9a:	e00a      	b.n	8003eb2 <ADC_Enable+0x6a>
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	4032      	ands	r2, r6
 8003ea0:	f042 0201 	orr.w	r2, r2, #1
 8003ea4:	609a      	str	r2, [r3, #8]
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ea6:	f7ff fd5f 	bl	8003968 <HAL_GetTick>
 8003eaa:	1b40      	subs	r0, r0, r5
 8003eac:	2802      	cmp	r0, #2
 8003eae:	d80b      	bhi.n	8003ec8 <ADC_Enable+0x80>
 8003eb0:	6823      	ldr	r3, [r4, #0]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	07d2      	lsls	r2, r2, #31
 8003eb6:	d417      	bmi.n	8003ee8 <ADC_Enable+0xa0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	07d1      	lsls	r1, r2, #31
 8003ebc:	d5ee      	bpl.n	8003e9c <ADC_Enable+0x54>
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ebe:	f7ff fd53 	bl	8003968 <HAL_GetTick>
 8003ec2:	1b40      	subs	r0, r0, r5
 8003ec4:	2802      	cmp	r0, #2
 8003ec6:	d9f3      	bls.n	8003eb0 <ADC_Enable+0x68>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ec8:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8003eca:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ecc:	f043 0310 	orr.w	r3, r3, #16
 8003ed0:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ed2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ed4:	4303      	orrs	r3, r0
 8003ed6:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8003ed8:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003eda:	4a08      	ldr	r2, [pc, #32]	; (8003efc <ADC_Enable+0xb4>)
 8003edc:	6892      	ldr	r2, [r2, #8]
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ede:	06d0      	lsls	r0, r2, #27
 8003ee0:	d0da      	beq.n	8003e98 <ADC_Enable+0x50>
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ee2:	4a07      	ldr	r2, [pc, #28]	; (8003f00 <ADC_Enable+0xb8>)
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d1d7      	bne.n	8003e98 <ADC_Enable+0x50>
  return HAL_OK;
 8003ee8:	2000      	movs	r0, #0
}
 8003eea:	bd70      	pop	{r4, r5, r6, pc}
 8003eec:	8000003f 	.word	0x8000003f
 8003ef0:	7fffffc0 	.word	0x7fffffc0
 8003ef4:	40022000 	.word	0x40022000
 8003ef8:	58026300 	.word	0x58026300
 8003efc:	40022300 	.word	0x40022300
 8003f00:	40022100 	.word	0x40022100

08003f04 <ADC_Disable>:
{
 8003f04:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003f06:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003f08:	6899      	ldr	r1, [r3, #8]
 8003f0a:	0789      	lsls	r1, r1, #30
 8003f0c:	d502      	bpl.n	8003f14 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f0e:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8003f10:	2000      	movs	r0, #0
}
 8003f12:	bd38      	pop	{r3, r4, r5, pc}
 8003f14:	6899      	ldr	r1, [r3, #8]
 8003f16:	07ca      	lsls	r2, r1, #31
 8003f18:	d523      	bpl.n	8003f62 <ADC_Disable+0x5e>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003f1a:	6899      	ldr	r1, [r3, #8]
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	f001 010d 	and.w	r1, r1, #13
 8003f22:	2901      	cmp	r1, #1
 8003f24:	d008      	beq.n	8003f38 <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f26:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8003f28:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f2a:	f043 0310 	orr.w	r3, r3, #16
 8003f2e:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f32:	4303      	orrs	r3, r0
 8003f34:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8003f36:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8003f38:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003f3a:	2103      	movs	r1, #3
 8003f3c:	4a0a      	ldr	r2, [pc, #40]	; (8003f68 <ADC_Disable+0x64>)
 8003f3e:	4002      	ands	r2, r0
 8003f40:	f042 0202 	orr.w	r2, r2, #2
 8003f44:	609a      	str	r2, [r3, #8]
 8003f46:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8003f48:	f7ff fd0e 	bl	8003968 <HAL_GetTick>
 8003f4c:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f4e:	e004      	b.n	8003f5a <ADC_Disable+0x56>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f50:	f7ff fd0a 	bl	8003968 <HAL_GetTick>
 8003f54:	1b40      	subs	r0, r0, r5
 8003f56:	2802      	cmp	r0, #2
 8003f58:	d8e5      	bhi.n	8003f26 <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	07db      	lsls	r3, r3, #31
 8003f60:	d4f6      	bmi.n	8003f50 <ADC_Disable+0x4c>
  return HAL_OK;
 8003f62:	2000      	movs	r0, #0
}
 8003f64:	bd38      	pop	{r3, r4, r5, pc}
 8003f66:	bf00      	nop
 8003f68:	7fffffc0 	.word	0x7fffffc0

08003f6c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8003f6c:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003f6e:	4a52      	ldr	r2, [pc, #328]	; (80040b8 <ADC_ConfigureBoostMode+0x14c>)
{
 8003f70:	4605      	mov	r5, r0
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003f72:	6803      	ldr	r3, [r0, #0]
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d027      	beq.n	8003fc8 <ADC_ConfigureBoostMode+0x5c>
 8003f78:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d023      	beq.n	8003fc8 <ADC_ConfigureBoostMode+0x5c>
 8003f80:	4b4e      	ldr	r3, [pc, #312]	; (80040bc <ADC_ConfigureBoostMode+0x150>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8003f88:	bf14      	ite	ne
 8003f8a:	2301      	movne	r3, #1
 8003f8c:	2300      	moveq	r3, #0
 8003f8e:	b323      	cbz	r3, 8003fda <ADC_ConfigureBoostMode+0x6e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003f90:	f002 fd04 	bl	800699c <HAL_RCC_GetHCLKFreq>
    switch(hadc->Init.ClockPrescaler)
 8003f94:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8003f96:	4604      	mov	r4, r0
    switch(hadc->Init.ClockPrescaler)
 8003f98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f9c:	d062      	beq.n	8004064 <ADC_ConfigureBoostMode+0xf8>
 8003f9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003fa2:	d072      	beq.n	800408a <ADC_ConfigureBoostMode+0x11e>
 8003fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa8:	d05c      	beq.n	8004064 <ADC_ConfigureBoostMode+0xf8>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003faa:	f7ff fcf5 	bl	8003998 <HAL_GetREVID>
 8003fae:	f241 0303 	movw	r3, #4099	; 0x1003
 8003fb2:	4298      	cmp	r0, r3
 8003fb4:	d832      	bhi.n	800401c <ADC_ConfigureBoostMode+0xb0>
  {
    if(freq > 20000000UL)
 8003fb6:	4a42      	ldr	r2, [pc, #264]	; (80040c0 <ADC_ConfigureBoostMode+0x154>)
 8003fb8:	682b      	ldr	r3, [r5, #0]
 8003fba:	4294      	cmp	r4, r2
 8003fbc:	d928      	bls.n	8004010 <ADC_ConfigureBoostMode+0xa4>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fc4:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003fc6:	bd38      	pop	{r3, r4, r5, pc}
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003fc8:	4b3e      	ldr	r3, [pc, #248]	; (80040c4 <ADC_ConfigureBoostMode+0x158>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8003fd0:	bf14      	ite	ne
 8003fd2:	2301      	movne	r3, #1
 8003fd4:	2300      	moveq	r3, #0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1da      	bne.n	8003f90 <ADC_ConfigureBoostMode+0x24>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003fda:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003fde:	f003 ff05 	bl	8007dec <HAL_RCCEx_GetPeriphCLKFreq>
    switch(hadc->Init.ClockPrescaler)
 8003fe2:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003fe4:	4604      	mov	r4, r0
    switch(hadc->Init.ClockPrescaler)
 8003fe6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003fea:	d049      	beq.n	8004080 <ADC_ConfigureBoostMode+0x114>
 8003fec:	d93e      	bls.n	800406c <ADC_ConfigureBoostMode+0x100>
 8003fee:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003ff2:	d04e      	beq.n	8004092 <ADC_ConfigureBoostMode+0x126>
 8003ff4:	d927      	bls.n	8004046 <ADC_ConfigureBoostMode+0xda>
 8003ff6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003ffa:	d048      	beq.n	800408e <ADC_ConfigureBoostMode+0x122>
 8003ffc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004000:	d1d3      	bne.n	8003faa <ADC_ConfigureBoostMode+0x3e>
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004002:	f7ff fcc9 	bl	8003998 <HAL_GetREVID>
 8004006:	f241 0303 	movw	r3, #4099	; 0x1003
 800400a:	4298      	cmp	r0, r3
 800400c:	d805      	bhi.n	800401a <ADC_ConfigureBoostMode+0xae>
 800400e:	682b      	ldr	r3, [r5, #0]
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004010:	689a      	ldr	r2, [r3, #8]
 8004012:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004016:	609a      	str	r2, [r3, #8]
}
 8004018:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 256UL;
 800401a:	0a24      	lsrs	r4, r4, #8
    freq /= 2U; /* divider by 2 for Rev.V */
 800401c:	0864      	lsrs	r4, r4, #1
    if (freq <= 6250000UL)
 800401e:	4a2a      	ldr	r2, [pc, #168]	; (80040c8 <ADC_ConfigureBoostMode+0x15c>)
 8004020:	682b      	ldr	r3, [r5, #0]
 8004022:	4294      	cmp	r4, r2
 8004024:	d90a      	bls.n	800403c <ADC_ConfigureBoostMode+0xd0>
    else if(freq <= 12500000UL)
 8004026:	4a29      	ldr	r2, [pc, #164]	; (80040cc <ADC_ConfigureBoostMode+0x160>)
 8004028:	4294      	cmp	r4, r2
 800402a:	d914      	bls.n	8004056 <ADC_ConfigureBoostMode+0xea>
    else if(freq <= 25000000UL)
 800402c:	4a28      	ldr	r2, [pc, #160]	; (80040d0 <ADC_ConfigureBoostMode+0x164>)
 800402e:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004030:	689a      	ldr	r2, [r3, #8]
    else if(freq <= 25000000UL)
 8004032:	d932      	bls.n	800409a <ADC_ConfigureBoostMode+0x12e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004034:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004038:	609a      	str	r2, [r3, #8]
}
 800403a:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004042:	609a      	str	r2, [r3, #8]
}
 8004044:	bd38      	pop	{r3, r4, r5, pc}
    switch(hadc->Init.ClockPrescaler)
 8004046:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800404a:	d024      	beq.n	8004096 <ADC_ConfigureBoostMode+0x12a>
 800404c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004050:	d1ab      	bne.n	8003faa <ADC_ConfigureBoostMode+0x3e>
        freq /= 32UL;
 8004052:	0944      	lsrs	r4, r0, #5
        break;
 8004054:	e7a9      	b.n	8003faa <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800405c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004060:	609a      	str	r2, [r3, #8]
}
 8004062:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004064:	0c1b      	lsrs	r3, r3, #16
 8004066:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 800406a:	e79e      	b.n	8003faa <ADC_ConfigureBoostMode+0x3e>
    switch(hadc->Init.ClockPrescaler)
 800406c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004070:	d006      	beq.n	8004080 <ADC_ConfigureBoostMode+0x114>
 8004072:	d818      	bhi.n	80040a6 <ADC_ConfigureBoostMode+0x13a>
 8004074:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004078:	d002      	beq.n	8004080 <ADC_ConfigureBoostMode+0x114>
 800407a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800407e:	d194      	bne.n	8003faa <ADC_ConfigureBoostMode+0x3e>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004080:	0c9b      	lsrs	r3, r3, #18
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8004088:	e78f      	b.n	8003faa <ADC_ConfigureBoostMode+0x3e>
        freq /= 4UL;
 800408a:	0884      	lsrs	r4, r0, #2
        break;
 800408c:	e78d      	b.n	8003faa <ADC_ConfigureBoostMode+0x3e>
        freq /= 128UL;
 800408e:	09c4      	lsrs	r4, r0, #7
        break;
 8004090:	e78b      	b.n	8003faa <ADC_ConfigureBoostMode+0x3e>
        freq /= 64UL;
 8004092:	0984      	lsrs	r4, r0, #6
        break;
 8004094:	e789      	b.n	8003faa <ADC_ConfigureBoostMode+0x3e>
        freq /= 16UL;
 8004096:	0904      	lsrs	r4, r0, #4
      break;
 8004098:	e787      	b.n	8003faa <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800409a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800409e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a2:	609a      	str	r2, [r3, #8]
}
 80040a4:	bd38      	pop	{r3, r4, r5, pc}
    switch(hadc->Init.ClockPrescaler)
 80040a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040aa:	d0e9      	beq.n	8004080 <ADC_ConfigureBoostMode+0x114>
 80040ac:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80040b0:	f47f af7b 	bne.w	8003faa <ADC_ConfigureBoostMode+0x3e>
 80040b4:	e7e4      	b.n	8004080 <ADC_ConfigureBoostMode+0x114>
 80040b6:	bf00      	nop
 80040b8:	40022000 	.word	0x40022000
 80040bc:	58026300 	.word	0x58026300
 80040c0:	01312d00 	.word	0x01312d00
 80040c4:	40022300 	.word	0x40022300
 80040c8:	005f5e10 	.word	0x005f5e10
 80040cc:	00bebc20 	.word	0x00bebc20
 80040d0:	017d7840 	.word	0x017d7840

080040d4 <HAL_ADC_Init>:
{
 80040d4:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 80040d6:	2300      	movs	r3, #0
{
 80040d8:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 80040da:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 80040dc:	2800      	cmp	r0, #0
 80040de:	f000 80aa 	beq.w	8004236 <HAL_ADC_Init+0x162>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80040e2:	6d45      	ldr	r5, [r0, #84]	; 0x54
 80040e4:	4604      	mov	r4, r0
 80040e6:	2d00      	cmp	r5, #0
 80040e8:	f000 809a 	beq.w	8004220 <HAL_ADC_Init+0x14c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80040ec:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80040ee:	6893      	ldr	r3, [r2, #8]
 80040f0:	009d      	lsls	r5, r3, #2
 80040f2:	d503      	bpl.n	80040fc <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80040f4:	6891      	ldr	r1, [r2, #8]
 80040f6:	4b77      	ldr	r3, [pc, #476]	; (80042d4 <HAL_ADC_Init+0x200>)
 80040f8:	400b      	ands	r3, r1
 80040fa:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80040fc:	6893      	ldr	r3, [r2, #8]
 80040fe:	00d8      	lsls	r0, r3, #3
 8004100:	d415      	bmi.n	800412e <HAL_ADC_Init+0x5a>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004102:	4b75      	ldr	r3, [pc, #468]	; (80042d8 <HAL_ADC_Init+0x204>)
  MODIFY_REG(ADCx->CR,
 8004104:	6890      	ldr	r0, [r2, #8]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4d74      	ldr	r5, [pc, #464]	; (80042dc <HAL_ADC_Init+0x208>)
 800410a:	099b      	lsrs	r3, r3, #6
 800410c:	4974      	ldr	r1, [pc, #464]	; (80042e0 <HAL_ADC_Init+0x20c>)
 800410e:	fba5 5303 	umull	r5, r3, r5, r3
 8004112:	4001      	ands	r1, r0
 8004114:	099b      	lsrs	r3, r3, #6
 8004116:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800411a:	6091      	str	r1, [r2, #8]
 800411c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800411e:	9b01      	ldr	r3, [sp, #4]
 8004120:	b12b      	cbz	r3, 800412e <HAL_ADC_Init+0x5a>
      wait_loop_index--;
 8004122:	9b01      	ldr	r3, [sp, #4]
 8004124:	3b01      	subs	r3, #1
 8004126:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004128:	9b01      	ldr	r3, [sp, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1f9      	bne.n	8004122 <HAL_ADC_Init+0x4e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800412e:	6893      	ldr	r3, [r2, #8]
 8004130:	00d9      	lsls	r1, r3, #3
 8004132:	d467      	bmi.n	8004204 <HAL_ADC_Init+0x130>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004134:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8004136:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004138:	f043 0310 	orr.w	r3, r3, #16
 800413c:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800413e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004140:	432b      	orrs	r3, r5
 8004142:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004144:	6893      	ldr	r3, [r2, #8]
 8004146:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800414a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800414c:	d160      	bne.n	8004210 <HAL_ADC_Init+0x13c>
 800414e:	06db      	lsls	r3, r3, #27
 8004150:	d45e      	bmi.n	8004210 <HAL_ADC_Init+0x13c>
    ADC_STATE_CLR_SET(hadc->State,
 8004152:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004154:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004158:	f043 0302 	orr.w	r3, r3, #2
 800415c:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800415e:	6893      	ldr	r3, [r2, #8]
 8004160:	07de      	lsls	r6, r3, #31
 8004162:	d413      	bmi.n	800418c <HAL_ADC_Init+0xb8>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004164:	4b5f      	ldr	r3, [pc, #380]	; (80042e4 <HAL_ADC_Init+0x210>)
 8004166:	429a      	cmp	r2, r3
 8004168:	f000 8092 	beq.w	8004290 <HAL_ADC_Init+0x1bc>
 800416c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004170:	429a      	cmp	r2, r3
 8004172:	f000 808d 	beq.w	8004290 <HAL_ADC_Init+0x1bc>
 8004176:	4b5c      	ldr	r3, [pc, #368]	; (80042e8 <HAL_ADC_Init+0x214>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	07d9      	lsls	r1, r3, #31
 800417c:	d406      	bmi.n	800418c <HAL_ADC_Init+0xb8>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800417e:	4a5b      	ldr	r2, [pc, #364]	; (80042ec <HAL_ADC_Init+0x218>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004180:	6893      	ldr	r3, [r2, #8]
 8004182:	6861      	ldr	r1, [r4, #4]
 8004184:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004188:	430b      	orrs	r3, r1
 800418a:	6093      	str	r3, [r2, #8]
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800418c:	f7ff fc04 	bl	8003998 <HAL_GetREVID>
 8004190:	f241 0303 	movw	r3, #4099	; 0x1003
 8004194:	7d62      	ldrb	r2, [r4, #21]
 8004196:	4298      	cmp	r0, r3
 8004198:	7f21      	ldrb	r1, [r4, #28]
 800419a:	d96c      	bls.n	8004276 <HAL_ADC_Init+0x1a2>
 800419c:	68a3      	ldr	r3, [r4, #8]
 800419e:	0352      	lsls	r2, r2, #13
 80041a0:	040e      	lsls	r6, r1, #16
 80041a2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80041a4:	2b10      	cmp	r3, #16
 80041a6:	f000 808e 	beq.w	80042c6 <HAL_ADC_Init+0x1f2>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80041aa:	431a      	orrs	r2, r3
 80041ac:	4332      	orrs	r2, r6
 80041ae:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80041b0:	2901      	cmp	r1, #1
 80041b2:	d103      	bne.n	80041bc <HAL_ADC_Init+0xe8>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80041b4:	6a23      	ldr	r3, [r4, #32]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041be:	b123      	cbz	r3, 80041ca <HAL_ADC_Init+0xf6>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80041c0:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80041c4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80041c6:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80041c8:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	4948      	ldr	r1, [pc, #288]	; (80042f0 <HAL_ADC_Init+0x21c>)
 80041ce:	68d8      	ldr	r0, [r3, #12]
 80041d0:	4001      	ands	r1, r0
 80041d2:	430a      	orrs	r2, r1
 80041d4:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80041dc:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041de:	d101      	bne.n	80041e4 <HAL_ADC_Init+0x110>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80041e0:	0712      	lsls	r2, r2, #28
 80041e2:	d52c      	bpl.n	800423e <HAL_ADC_Init+0x16a>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80041e4:	68e2      	ldr	r2, [r4, #12]
 80041e6:	2a01      	cmp	r2, #1
 80041e8:	d04a      	beq.n	8004280 <HAL_ADC_Init+0x1ac>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80041ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ec:	f022 020f 	bic.w	r2, r2, #15
 80041f0:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80041f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 80041f4:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80041f6:	f023 0303 	bic.w	r3, r3, #3
 80041fa:	f043 0301 	orr.w	r3, r3, #1
 80041fe:	6563      	str	r3, [r4, #84]	; 0x54
}
 8004200:	b002      	add	sp, #8
 8004202:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004204:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004206:	2500      	movs	r5, #0
 8004208:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800420c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800420e:	d09e      	beq.n	800414e <HAL_ADC_Init+0x7a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004210:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8004212:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004214:	f043 0310 	orr.w	r3, r3, #16
}
 8004218:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800421a:	6563      	str	r3, [r4, #84]	; 0x54
}
 800421c:	b002      	add	sp, #8
 800421e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8004220:	f7ff f8d8 	bl	80033d4 <HAL_ADC_MspInit>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004224:	6822      	ldr	r2, [r4, #0]
    ADC_CLEAR_ERRORCODE(hadc);
 8004226:	65a5      	str	r5, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004228:	6893      	ldr	r3, [r2, #8]
    hadc->Lock = HAL_UNLOCKED;
 800422a:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 800422e:	009d      	lsls	r5, r3, #2
 8004230:	f57f af64 	bpl.w	80040fc <HAL_ADC_Init+0x28>
 8004234:	e75e      	b.n	80040f4 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 8004236:	2501      	movs	r5, #1
}
 8004238:	4628      	mov	r0, r5
 800423a:	b002      	add	sp, #8
 800423c:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800423e:	68d8      	ldr	r0, [r3, #12]
 8004240:	4a2c      	ldr	r2, [pc, #176]	; (80042f4 <HAL_ADC_Init+0x220>)
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004242:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004244:	4002      	ands	r2, r0
 8004246:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004248:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
      if (hadc->Init.OversamplingMode == ENABLE)
 800424c:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004250:	4302      	orrs	r2, r0
      if (hadc->Init.OversamplingMode == ENABLE)
 8004252:	2901      	cmp	r1, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004254:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8004256:	d025      	beq.n	80042a4 <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	f022 0201 	bic.w	r2, r2, #1
 800425e:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004260:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8004262:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004264:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004266:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800426a:	430a      	orrs	r2, r1
 800426c:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 800426e:	f7ff fe7d 	bl	8003f6c <ADC_ConfigureBoostMode>
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	e7b6      	b.n	80041e4 <HAL_ADC_Init+0x110>
 8004276:	0352      	lsls	r2, r2, #13
 8004278:	68a3      	ldr	r3, [r4, #8]
 800427a:	040e      	lsls	r6, r1, #16
 800427c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800427e:	e794      	b.n	80041aa <HAL_ADC_Init+0xd6>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004280:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004282:	69a2      	ldr	r2, [r4, #24]
 8004284:	f021 010f 	bic.w	r1, r1, #15
 8004288:	3a01      	subs	r2, #1
 800428a:	430a      	orrs	r2, r1
 800428c:	631a      	str	r2, [r3, #48]	; 0x30
 800428e:	e7b0      	b.n	80041f2 <HAL_ADC_Init+0x11e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004290:	4a14      	ldr	r2, [pc, #80]	; (80042e4 <HAL_ADC_Init+0x210>)
 8004292:	4b19      	ldr	r3, [pc, #100]	; (80042f8 <HAL_ADC_Init+0x224>)
 8004294:	6892      	ldr	r2, [r2, #8]
 8004296:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004298:	4313      	orrs	r3, r2
 800429a:	07d8      	lsls	r0, r3, #31
 800429c:	f53f af76 	bmi.w	800418c <HAL_ADC_Init+0xb8>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80042a0:	4a16      	ldr	r2, [pc, #88]	; (80042fc <HAL_ADC_Init+0x228>)
 80042a2:	e76d      	b.n	8004180 <HAL_ADC_Init+0xac>
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80042a4:	e9d4 2110 	ldrd	r2, r1, [r4, #64]	; 0x40
 80042a8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80042aa:	430a      	orrs	r2, r1
 80042ac:	4e14      	ldr	r6, [pc, #80]	; (8004300 <HAL_ADC_Init+0x22c>)
 80042ae:	6919      	ldr	r1, [r3, #16]
 80042b0:	f042 0201 	orr.w	r2, r2, #1
 80042b4:	400e      	ands	r6, r1
 80042b6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80042b8:	4302      	orrs	r2, r0
 80042ba:	3901      	subs	r1, #1
 80042bc:	4332      	orrs	r2, r6
 80042be:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80042c2:	611a      	str	r2, [r3, #16]
 80042c4:	e7cc      	b.n	8004260 <HAL_ADC_Init+0x18c>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80042c6:	f040 031c 	orr.w	r3, r0, #28
 80042ca:	4313      	orrs	r3, r2
 80042cc:	ea43 0206 	orr.w	r2, r3, r6
 80042d0:	e76e      	b.n	80041b0 <HAL_ADC_Init+0xdc>
 80042d2:	bf00      	nop
 80042d4:	5fffffc0 	.word	0x5fffffc0
 80042d8:	240001f8 	.word	0x240001f8
 80042dc:	053e2d63 	.word	0x053e2d63
 80042e0:	6fffffc0 	.word	0x6fffffc0
 80042e4:	40022000 	.word	0x40022000
 80042e8:	58026000 	.word	0x58026000
 80042ec:	58026300 	.word	0x58026300
 80042f0:	fff0c003 	.word	0xfff0c003
 80042f4:	ffffbffc 	.word	0xffffbffc
 80042f8:	40022100 	.word	0x40022100
 80042fc:	40022300 	.word	0x40022300
 8004300:	fc00f81e 	.word	0xfc00f81e

08004304 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004304:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004306:	f890 5050 	ldrb.w	r5, [r0, #80]	; 0x50
{
 800430a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 800430c:	2600      	movs	r6, #0
  __HAL_LOCK(hadc);
 800430e:	2d01      	cmp	r5, #1
  __IO uint32_t wait_loop_index = 0UL;
 8004310:	9601      	str	r6, [sp, #4]
  __HAL_LOCK(hadc);
 8004312:	d036      	beq.n	8004382 <HAL_ADCEx_Calibration_Start+0x7e>
 8004314:	2301      	movs	r3, #1
 8004316:	4604      	mov	r4, r0
 8004318:	4615      	mov	r5, r2
 800431a:	460e      	mov	r6, r1
 800431c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004320:	f7ff fdf0 	bl	8003f04 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004324:	bb20      	cbnz	r0, 8004370 <HAL_ADCEx_Calibration_Start+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004326:	6d67      	ldr	r7, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8004328:	f005 4380 	and.w	r3, r5, #1073741824	; 0x40000000
 800432c:	4d1c      	ldr	r5, [pc, #112]	; (80043a0 <HAL_ADCEx_Calibration_Start+0x9c>)
 800432e:	f406 3180 	and.w	r1, r6, #65536	; 0x10000
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance , CalibrationMode, SingleDiff );
 8004332:	6822      	ldr	r2, [r4, #0]
 8004334:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ADC_STATE_CLR_SET(hadc->State,
 8004338:	403d      	ands	r5, r7
 800433a:	4e1a      	ldr	r6, [pc, #104]	; (80043a4 <HAL_ADCEx_Calibration_Start+0xa0>)
 800433c:	430b      	orrs	r3, r1

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800433e:	491a      	ldr	r1, [pc, #104]	; (80043a8 <HAL_ADCEx_Calibration_Start+0xa4>)
    ADC_STATE_CLR_SET(hadc->State,
 8004340:	f045 0502 	orr.w	r5, r5, #2
 8004344:	6565      	str	r5, [r4, #84]	; 0x54
 8004346:	6895      	ldr	r5, [r2, #8]
 8004348:	402e      	ands	r6, r5
 800434a:	4333      	orrs	r3, r6
 800434c:	6093      	str	r3, [r2, #8]
 800434e:	e005      	b.n	800435c <HAL_ADCEx_Calibration_Start+0x58>
      wait_loop_index++;
 8004350:	9b01      	ldr	r3, [sp, #4]
 8004352:	3301      	adds	r3, #1
 8004354:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004356:	9b01      	ldr	r3, [sp, #4]
 8004358:	428b      	cmp	r3, r1
 800435a:	d815      	bhi.n	8004388 <HAL_ADCEx_Calibration_Start+0x84>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800435c:	6893      	ldr	r3, [r2, #8]
 800435e:	2b00      	cmp	r3, #0
 8004360:	dbf6      	blt.n	8004350 <HAL_ADCEx_Calibration_Start+0x4c>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004362:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004364:	f023 0303 	bic.w	r3, r3, #3
 8004368:	f043 0301 	orr.w	r3, r3, #1
 800436c:	6563      	str	r3, [r4, #84]	; 0x54
 800436e:	e003      	b.n	8004378 <HAL_ADCEx_Calibration_Start+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004370:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004372:	f043 0310 	orr.w	r3, r3, #16
 8004376:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004378:	2300      	movs	r3, #0
 800437a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800437e:	b003      	add	sp, #12
 8004380:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 8004382:	2002      	movs	r0, #2
}
 8004384:	b003      	add	sp, #12
 8004386:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ADC_STATE_CLR_SET(hadc->State,
 8004388:	6d63      	ldr	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 800438a:	2200      	movs	r2, #0
        return HAL_ERROR;
 800438c:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 800438e:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8004392:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        ADC_STATE_CLR_SET(hadc->State,
 8004396:	f043 0310 	orr.w	r3, r3, #16
 800439a:	6563      	str	r3, [r4, #84]	; 0x54
}
 800439c:	b003      	add	sp, #12
 800439e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043a0:	ffffeefd 	.word	0xffffeefd
 80043a4:	3ffeffc0 	.word	0x3ffeffc0
 80043a8:	25c3f7ff 	.word	0x25c3f7ff

080043ac <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80043ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80043b0:	6807      	ldr	r7, [r0, #0]
{
 80043b2:	b09a      	sub	sp, #104	; 0x68
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043b4:	68bd      	ldr	r5, [r7, #8]
 80043b6:	f015 0504 	ands.w	r5, r5, #4
 80043ba:	d123      	bne.n	8004404 <HAL_ADCEx_MultiModeStart_DMA+0x58>
    return HAL_BUSY;
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80043bc:	f890 6050 	ldrb.w	r6, [r0, #80]	; 0x50
 80043c0:	4604      	mov	r4, r0
 80043c2:	2e01      	cmp	r6, #1
 80043c4:	d01e      	beq.n	8004404 <HAL_ADCEx_MultiModeStart_DMA+0x58>

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80043c6:	4b30      	ldr	r3, [pc, #192]	; (8004488 <HAL_ADCEx_MultiModeStart_DMA+0xdc>)
    __HAL_LOCK(hadc);
 80043c8:	2601      	movs	r6, #1
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80043ca:	429f      	cmp	r7, r3
    __HAL_LOCK(hadc);
 80043cc:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80043d0:	d009      	beq.n	80043e6 <HAL_ADCEx_MultiModeStart_DMA+0x3a>

    if (tmphadcSlave.Instance == NULL)
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043d2:	6d43      	ldr	r3, [r0, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);

      return HAL_ERROR;
 80043d4:	4630      	mov	r0, r6
      __HAL_UNLOCK(hadc);
 80043d6:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043da:	f043 0320 	orr.w	r3, r3, #32
 80043de:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Return function status */
    return tmp_hal_status;
  }
}
 80043e0:	b01a      	add	sp, #104	; 0x68
 80043e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043e6:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80044a0 <HAL_ADCEx_MultiModeStart_DMA+0xf4>
 80043ea:	4616      	mov	r6, r2
 80043ec:	460d      	mov	r5, r1
 80043ee:	f8cd 8004 	str.w	r8, [sp, #4]
    tmp_hal_status = ADC_Enable(hadc);
 80043f2:	f7ff fd29 	bl	8003e48 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80043f6:	b148      	cbz	r0, 800440c <HAL_ADCEx_MultiModeStart_DMA+0x60>
      __HAL_UNLOCK(hadc);
 80043f8:	2300      	movs	r3, #0
 80043fa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80043fe:	b01a      	add	sp, #104	; 0x68
 8004400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004404:	2002      	movs	r0, #2
}
 8004406:	b01a      	add	sp, #104	; 0x68
 8004408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 800440c:	a801      	add	r0, sp, #4
 800440e:	f7ff fd1b 	bl	8003e48 <ADC_Enable>
 8004412:	4602      	mov	r2, r0
    if (tmp_hal_status == HAL_OK)
 8004414:	2800      	cmp	r0, #0
 8004416:	d1ef      	bne.n	80043f8 <HAL_ADCEx_MultiModeStart_DMA+0x4c>
      ADC_STATE_CLR_SET(hadc->State,
 8004418:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800441a:	4b1c      	ldr	r3, [pc, #112]	; (800448c <HAL_ADCEx_MultiModeStart_DMA+0xe0>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800441c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
      ADC_STATE_CLR_SET(hadc->State,
 800441e:	400b      	ands	r3, r1
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004420:	f8df c080 	ldr.w	ip, [pc, #128]	; 80044a4 <HAL_ADCEx_MultiModeStart_DMA+0xf8>
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004424:	f8df e080 	ldr.w	lr, [pc, #128]	; 80044a8 <HAL_ADCEx_MultiModeStart_DMA+0xfc>
      ADC_STATE_CLR_SET(hadc->State,
 8004428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 800442c:	4918      	ldr	r1, [pc, #96]	; (8004490 <HAL_ADCEx_MultiModeStart_DMA+0xe4>)
      ADC_STATE_CLR_SET(hadc->State,
 800442e:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8004430:	65a2      	str	r2, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004432:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004436:	f8d4 c000 	ldr.w	ip, [r4]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800443a:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800443e:	45bc      	cmp	ip, r7
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8004440:	64c1      	str	r1, [r0, #76]	; 0x4c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004442:	d01e      	beq.n	8004482 <HAL_ADCEx_MultiModeStart_DMA+0xd6>
 8004444:	45c4      	cmp	ip, r8
 8004446:	d01c      	beq.n	8004482 <HAL_ADCEx_MultiModeStart_DMA+0xd6>
 8004448:	4912      	ldr	r1, [pc, #72]	; (8004494 <HAL_ADCEx_MultiModeStart_DMA+0xe8>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800444a:	f04f 0e1c 	mov.w	lr, #28
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 800444e:	462a      	mov	r2, r5
      __HAL_UNLOCK(hadc);
 8004450:	2700      	movs	r7, #0
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8004452:	4633      	mov	r3, r6
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004454:	f8cc e000 	str.w	lr, [ip]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8004458:	310c      	adds	r1, #12
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800445a:	f8dc 5004 	ldr.w	r5, [ip, #4]
      __HAL_UNLOCK(hadc);
 800445e:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004462:	f045 0510 	orr.w	r5, r5, #16
 8004466:	f8cc 5004 	str.w	r5, [ip, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 800446a:	f000 fe17 	bl	800509c <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 800446e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004470:	4b09      	ldr	r3, [pc, #36]	; (8004498 <HAL_ADCEx_MultiModeStart_DMA+0xec>)
 8004472:	6891      	ldr	r1, [r2, #8]
 8004474:	400b      	ands	r3, r1
 8004476:	f043 0304 	orr.w	r3, r3, #4
 800447a:	6093      	str	r3, [r2, #8]
}
 800447c:	b01a      	add	sp, #104	; 0x68
 800447e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004482:	4906      	ldr	r1, [pc, #24]	; (800449c <HAL_ADCEx_MultiModeStart_DMA+0xf0>)
 8004484:	e7e1      	b.n	800444a <HAL_ADCEx_MultiModeStart_DMA+0x9e>
 8004486:	bf00      	nop
 8004488:	40022000 	.word	0x40022000
 800448c:	fffff0fe 	.word	0xfffff0fe
 8004490:	08003a1d 	.word	0x08003a1d
 8004494:	58026300 	.word	0x58026300
 8004498:	7fffffc0 	.word	0x7fffffc0
 800449c:	40022300 	.word	0x40022300
 80044a0:	40022100 	.word	0x40022100
 80044a4:	080039b5 	.word	0x080039b5
 80044a8:	080039a5 	.word	0x080039a5

080044ac <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044ac:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80044b0:	2a01      	cmp	r2, #1
 80044b2:	d04b      	beq.n	800454c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80044b4:	4603      	mov	r3, r0

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80044b6:	4a29      	ldr	r2, [pc, #164]	; (800455c <HAL_ADCEx_MultiModeConfigChannel+0xb0>)
  __HAL_LOCK(hadc);
 80044b8:	2001      	movs	r0, #1
{
 80044ba:	b4f0      	push	{r4, r5, r6, r7}
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80044bc:	681c      	ldr	r4, [r3, #0]
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044be:	680e      	ldr	r6, [r1, #0]
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80044c0:	4294      	cmp	r4, r2
  __HAL_LOCK(hadc);
 80044c2:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80044c6:	d008      	beq.n	80044da <HAL_ADCEx_MultiModeConfigChannel+0x2e>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80044ca:	2100      	movs	r1, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044cc:	f042 0220 	orr.w	r2, r2, #32
    __HAL_UNLOCK(hadc);
 80044d0:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044d4:	655a      	str	r2, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80044d6:	bcf0      	pop	{r4, r5, r6, r7}
 80044d8:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044da:	4d21      	ldr	r5, [pc, #132]	; (8004560 <HAL_ADCEx_MultiModeConfigChannel+0xb4>)
 80044dc:	68aa      	ldr	r2, [r5, #8]
 80044de:	0752      	lsls	r2, r2, #29
 80044e0:	d50a      	bpl.n	80044f8 <HAL_ADCEx_MultiModeConfigChannel+0x4c>
 80044e2:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80044e6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044e8:	f042 0220 	orr.w	r2, r2, #32
 80044ec:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80044f4:	bcf0      	pop	{r4, r5, r6, r7}
 80044f6:	4770      	bx	lr
 80044f8:	68a0      	ldr	r0, [r4, #8]
 80044fa:	f010 0004 	ands.w	r0, r0, #4
 80044fe:	d1f1      	bne.n	80044e4 <HAL_ADCEx_MultiModeConfigChannel+0x38>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004500:	b1c6      	cbz	r6, 8004534 <HAL_ADCEx_MultiModeConfigChannel+0x88>
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004502:	f8df c064 	ldr.w	ip, [pc, #100]	; 8004568 <HAL_ADCEx_MultiModeConfigChannel+0xbc>
 8004506:	684f      	ldr	r7, [r1, #4]
 8004508:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800450c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004510:	433a      	orrs	r2, r7
 8004512:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004516:	68a4      	ldr	r4, [r4, #8]
 8004518:	68aa      	ldr	r2, [r5, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800451a:	4322      	orrs	r2, r4
 800451c:	07d4      	lsls	r4, r2, #31
 800451e:	d413      	bmi.n	8004548 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
        MODIFY_REG(tmpADC_Common->CCR,
 8004520:	688a      	ldr	r2, [r1, #8]
 8004522:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8004526:	490f      	ldr	r1, [pc, #60]	; (8004564 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8004528:	4316      	orrs	r6, r2
 800452a:	4021      	ands	r1, r4
 800452c:	430e      	orrs	r6, r1
 800452e:	f8cc 6008 	str.w	r6, [ip, #8]
 8004532:	e7dc      	b.n	80044ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004534:	490c      	ldr	r1, [pc, #48]	; (8004568 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8004536:	688a      	ldr	r2, [r1, #8]
 8004538:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800453c:	608a      	str	r2, [r1, #8]
 800453e:	68a0      	ldr	r0, [r4, #8]
 8004540:	68aa      	ldr	r2, [r5, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004542:	4302      	orrs	r2, r0
 8004544:	07d0      	lsls	r0, r2, #31
 8004546:	d503      	bpl.n	8004550 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004548:	2000      	movs	r0, #0
 800454a:	e7d0      	b.n	80044ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
  __HAL_LOCK(hadc);
 800454c:	2002      	movs	r0, #2
}
 800454e:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004550:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004552:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004554:	4a03      	ldr	r2, [pc, #12]	; (8004564 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8004556:	4022      	ands	r2, r4
 8004558:	608a      	str	r2, [r1, #8]
 800455a:	e7c8      	b.n	80044ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800455c:	40022000 	.word	0x40022000
 8004560:	40022100 	.word	0x40022100
 8004564:	fffff0e0 	.word	0xfffff0e0
 8004568:	40022300 	.word	0x40022300

0800456c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800456c:	4907      	ldr	r1, [pc, #28]	; (800458c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800456e:	0200      	lsls	r0, r0, #8
 8004570:	4b07      	ldr	r3, [pc, #28]	; (8004590 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004572:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004574:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004578:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800457a:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 800457e:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004580:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004584:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004586:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 8004588:	60c8      	str	r0, [r1, #12]
 800458a:	4770      	bx	lr
 800458c:	e000ed00 	.word	0xe000ed00
 8004590:	05fa0000 	.word	0x05fa0000

08004594 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004594:	4b17      	ldr	r3, [pc, #92]	; (80045f4 <HAL_NVIC_SetPriority+0x60>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800459c:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800459e:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045a2:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045a4:	2d04      	cmp	r5, #4
 80045a6:	bf28      	it	cs
 80045a8:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045aa:	2c06      	cmp	r4, #6
 80045ac:	d918      	bls.n	80045e0 <HAL_NVIC_SetPriority+0x4c>
 80045ae:	3b03      	subs	r3, #3
 80045b0:	f04f 34ff 	mov.w	r4, #4294967295
 80045b4:	409c      	lsls	r4, r3
 80045b6:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045ba:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80045be:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045c0:	fa02 f205 	lsl.w	r2, r2, r5
 80045c4:	ea21 0102 	bic.w	r1, r1, r2
 80045c8:	fa01 f203 	lsl.w	r2, r1, r3
 80045cc:	ea42 0204 	orr.w	r2, r2, r4
 80045d0:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80045d4:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 80045d6:	db06      	blt.n	80045e6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045d8:	4b07      	ldr	r3, [pc, #28]	; (80045f8 <HAL_NVIC_SetPriority+0x64>)
 80045da:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80045dc:	bc30      	pop	{r4, r5}
 80045de:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045e0:	2400      	movs	r4, #0
 80045e2:	4623      	mov	r3, r4
 80045e4:	e7e9      	b.n	80045ba <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045e6:	f000 000f 	and.w	r0, r0, #15
 80045ea:	4b04      	ldr	r3, [pc, #16]	; (80045fc <HAL_NVIC_SetPriority+0x68>)
 80045ec:	541a      	strb	r2, [r3, r0]
 80045ee:	bc30      	pop	{r4, r5}
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	e000ed00 	.word	0xe000ed00
 80045f8:	e000e400 	.word	0xe000e400
 80045fc:	e000ed14 	.word	0xe000ed14

08004600 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004600:	2800      	cmp	r0, #0
 8004602:	db07      	blt.n	8004614 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004604:	f000 011f 	and.w	r1, r0, #31
 8004608:	2301      	movs	r3, #1
 800460a:	0940      	lsrs	r0, r0, #5
 800460c:	4a02      	ldr	r2, [pc, #8]	; (8004618 <HAL_NVIC_EnableIRQ+0x18>)
 800460e:	408b      	lsls	r3, r1
 8004610:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	e000e100 	.word	0xe000e100

0800461c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800461c:	3801      	subs	r0, #1
 800461e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004622:	d20d      	bcs.n	8004640 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004624:	4b07      	ldr	r3, [pc, #28]	; (8004644 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004626:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004628:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800462a:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800462c:	25f0      	movs	r5, #240	; 0xf0
 800462e:	4c06      	ldr	r4, [pc, #24]	; (8004648 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004630:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004632:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004634:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800463a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800463c:	bc30      	pop	{r4, r5}
 800463e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004640:	2001      	movs	r0, #1
 8004642:	4770      	bx	lr
 8004644:	e000e010 	.word	0xe000e010
 8004648:	e000ed00 	.word	0xe000ed00

0800464c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 800464c:	b188      	cbz	r0, 8004672 <HAL_DAC_Init+0x26>
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800464e:	7903      	ldrb	r3, [r0, #4]
{
 8004650:	b510      	push	{r4, lr}
  if (hdac->State == HAL_DAC_STATE_RESET)
 8004652:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004656:	4604      	mov	r4, r0
 8004658:	b13b      	cbz	r3, 800466a <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800465a:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 800465c:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800465e:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8004660:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8004662:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004664:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8004666:	7122      	strb	r2, [r4, #4]
}
 8004668:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800466a:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 800466c:	f7fe ff48 	bl	8003500 <HAL_DAC_MspInit>
 8004670:	e7f3      	b.n	800465a <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8004672:	2001      	movs	r0, #1
}
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop

08004678 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004678:	7942      	ldrb	r2, [r0, #5]
 800467a:	2a01      	cmp	r2, #1
 800467c:	d028      	beq.n	80046d0 <HAL_DAC_Start+0x58>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800467e:	6802      	ldr	r2, [r0, #0]
 8004680:	4603      	mov	r3, r0
{
 8004682:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdac);
 8004684:	2501      	movs	r5, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8004686:	2402      	movs	r4, #2
  __HAL_DAC_ENABLE(hdac, Channel);
 8004688:	f001 0610 	and.w	r6, r1, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 800468c:	7104      	strb	r4, [r0, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 800468e:	fa05 f006 	lsl.w	r0, r5, r6
 8004692:	6817      	ldr	r7, [r2, #0]
  __HAL_LOCK(hdac);
 8004694:	715d      	strb	r5, [r3, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8004696:	4338      	orrs	r0, r7
 8004698:	6010      	str	r0, [r2, #0]

  if (Channel == DAC_CHANNEL_1)
 800469a:	b971      	cbnz	r1, 80046ba <HAL_DAC_Start+0x42>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800469c:	6811      	ldr	r1, [r2, #0]
 800469e:	f001 013e 	and.w	r1, r1, #62	; 0x3e
 80046a2:	42a1      	cmp	r1, r4
 80046a4:	d102      	bne.n	80046ac <HAL_DAC_Start+0x34>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80046a6:	6851      	ldr	r1, [r2, #4]
 80046a8:	4329      	orrs	r1, r5
 80046aa:	6051      	str	r1, [r2, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80046ac:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 80046ae:	2101      	movs	r1, #1

  /* Return function status */
  return HAL_OK;
 80046b0:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 80046b2:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 80046b4:	715a      	strb	r2, [r3, #5]
}
 80046b6:	bcf0      	pop	{r4, r5, r6, r7}
 80046b8:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80046ba:	6811      	ldr	r1, [r2, #0]
 80046bc:	40b4      	lsls	r4, r6
 80046be:	f401 1178 	and.w	r1, r1, #4063232	; 0x3e0000
 80046c2:	42a1      	cmp	r1, r4
 80046c4:	d1f2      	bne.n	80046ac <HAL_DAC_Start+0x34>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80046c6:	6851      	ldr	r1, [r2, #4]
 80046c8:	f041 0102 	orr.w	r1, r1, #2
 80046cc:	6051      	str	r1, [r2, #4]
 80046ce:	e7ed      	b.n	80046ac <HAL_DAC_Start+0x34>
  __HAL_LOCK(hdac);
 80046d0:	2002      	movs	r0, #2
}
 80046d2:	4770      	bx	lr

080046d4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80046d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80046d6:	7944      	ldrb	r4, [r0, #5]
{
 80046d8:	9f06      	ldr	r7, [sp, #24]
  __HAL_LOCK(hdac);
 80046da:	2c01      	cmp	r4, #1
 80046dc:	d05e      	beq.n	800479c <HAL_DAC_Start_DMA+0xc8>
 80046de:	4604      	mov	r4, r0
 80046e0:	460e      	mov	r6, r1
 80046e2:	2001      	movs	r0, #1
 80046e4:	4611      	mov	r1, r2
 80046e6:	6825      	ldr	r5, [r4, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80046e8:	2202      	movs	r2, #2
  __HAL_LOCK(hdac);
 80046ea:	7160      	strb	r0, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 80046ec:	7122      	strb	r2, [r4, #4]

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80046ee:	682a      	ldr	r2, [r5, #0]
  if (Channel == DAC_CHANNEL_1)
 80046f0:	bb4e      	cbnz	r6, 8004746 <HAL_DAC_Start_DMA+0x72>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80046f2:	68a0      	ldr	r0, [r4, #8]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80046f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80046f8:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 80047b8 <HAL_DAC_Start_DMA+0xe4>

    /* Case of use of channel 1 */
    switch (Alignment)
 80046fc:	2f04      	cmp	r7, #4
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80046fe:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 80047bc <HAL_DAC_Start_DMA+0xe8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004702:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004706:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 80047c0 <HAL_DAC_Start_DMA+0xec>
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800470a:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800470e:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004712:	602a      	str	r2, [r5, #0]
    switch (Alignment)
 8004714:	d04d      	beq.n	80047b2 <HAL_DAC_Start_DMA+0xde>
 8004716:	2f08      	cmp	r7, #8
 8004718:	d048      	beq.n	80047ac <HAL_DAC_Start_DMA+0xd8>
 800471a:	2f00      	cmp	r7, #0
 800471c:	d038      	beq.n	8004790 <HAL_DAC_Start_DMA+0xbc>
        break;
    }
  }

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800471e:	2200      	movs	r2, #0
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004720:	682f      	ldr	r7, [r5, #0]
 8004722:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 8004726:	602f      	str	r7, [r5, #0]

   /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004728:	f000 fcb8 	bl	800509c <HAL_DMA_Start_IT>
    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800472c:	2300      	movs	r3, #0
 800472e:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8004730:	bb48      	cbnz	r0, 8004786 <HAL_DAC_Start_DMA+0xb2>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	2101      	movs	r1, #1
 8004736:	f006 0610 	and.w	r6, r6, #16
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	fa01 f606 	lsl.w	r6, r1, r6
 8004740:	4316      	orrs	r6, r2
 8004742:	601e      	str	r6, [r3, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8004744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004746:	68e0      	ldr	r0, [r4, #12]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004748:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800474c:	f8df c074 	ldr.w	ip, [pc, #116]	; 80047c4 <HAL_DAC_Start_DMA+0xf0>
    switch (Alignment)
 8004750:	2f04      	cmp	r7, #4
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004752:	f8df e074 	ldr.w	lr, [pc, #116]	; 80047c8 <HAL_DAC_Start_DMA+0xf4>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004756:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800475a:	f8df c070 	ldr.w	ip, [pc, #112]	; 80047cc <HAL_DAC_Start_DMA+0xf8>
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800475e:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004762:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004766:	602a      	str	r2, [r5, #0]
    switch (Alignment)
 8004768:	d01d      	beq.n	80047a6 <HAL_DAC_Start_DMA+0xd2>
 800476a:	2f08      	cmp	r7, #8
 800476c:	d018      	beq.n	80047a0 <HAL_DAC_Start_DMA+0xcc>
 800476e:	b197      	cbz	r7, 8004796 <HAL_DAC_Start_DMA+0xc2>
  if (Channel == DAC_CHANNEL_1)
 8004770:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004772:	682f      	ldr	r7, [r5, #0]
 8004774:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8004778:	602f      	str	r7, [r5, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800477a:	f000 fc8f 	bl	800509c <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 800477e:	2300      	movs	r3, #0
 8004780:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8004782:	2800      	cmp	r0, #0
 8004784:	d0d5      	beq.n	8004732 <HAL_DAC_Start_DMA+0x5e>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004786:	6923      	ldr	r3, [r4, #16]
 8004788:	f043 0304 	orr.w	r3, r3, #4
 800478c:	6123      	str	r3, [r4, #16]
}
 800478e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004790:	f105 0208 	add.w	r2, r5, #8
        break;
 8004794:	e7c4      	b.n	8004720 <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004796:	f105 0214 	add.w	r2, r5, #20
        break;
 800479a:	e7ea      	b.n	8004772 <HAL_DAC_Start_DMA+0x9e>
  __HAL_LOCK(hdac);
 800479c:	2002      	movs	r0, #2
}
 800479e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80047a0:	f105 021c 	add.w	r2, r5, #28
        break;
 80047a4:	e7e5      	b.n	8004772 <HAL_DAC_Start_DMA+0x9e>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80047a6:	f105 0218 	add.w	r2, r5, #24
        break;
 80047aa:	e7e2      	b.n	8004772 <HAL_DAC_Start_DMA+0x9e>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80047ac:	f105 0210 	add.w	r2, r5, #16
        break;
 80047b0:	e7b6      	b.n	8004720 <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80047b2:	f105 020c 	add.w	r2, r5, #12
        break;
 80047b6:	e7b3      	b.n	8004720 <HAL_DAC_Start_DMA+0x4c>
 80047b8:	080047d5 	.word	0x080047d5
 80047bc:	080047e9 	.word	0x080047e9
 80047c0:	080047f9 	.word	0x080047f9
 80047c4:	080049d1 	.word	0x080049d1
 80047c8:	080049e1 	.word	0x080049e1
 80047cc:	080049f1 	.word	0x080049f1

080047d0 <HAL_DAC_ConvCpltCallbackCh1>:
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop

080047d4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80047d4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047d6:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80047d8:	4620      	mov	r0, r4
 80047da:	f7ff fff9 	bl	80047d0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80047de:	2301      	movs	r3, #1
 80047e0:	7123      	strb	r3, [r4, #4]
}
 80047e2:	bd10      	pop	{r4, pc}

080047e4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop

080047e8 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80047e8:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80047ea:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80047ec:	f7ff fffa 	bl	80047e4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80047f0:	bd08      	pop	{r3, pc}
 80047f2:	bf00      	nop

080047f4 <HAL_DAC_ErrorCallbackCh1>:
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop

080047f8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80047f8:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047fa:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80047fc:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80047fe:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004800:	f043 0304 	orr.w	r3, r3, #4
 8004804:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004806:	f7ff fff5 	bl	80047f4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800480a:	2301      	movs	r3, #1
 800480c:	7123      	strb	r3, [r4, #4]
}
 800480e:	bd10      	pop	{r4, pc}

08004810 <HAL_DAC_DMAUnderrunCallbackCh1>:
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop

08004814 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004814:	6803      	ldr	r3, [r0, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	0491      	lsls	r1, r2, #18
{
 800481a:	b510      	push	{r4, lr}
 800481c:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800481e:	d502      	bpl.n	8004826 <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004822:	0492      	lsls	r2, r2, #18
 8004824:	d418      	bmi.n	8004858 <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	0091      	lsls	r1, r2, #2
 800482a:	d502      	bpl.n	8004832 <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800482c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800482e:	0092      	lsls	r2, r2, #2
 8004830:	d400      	bmi.n	8004834 <HAL_DAC_IRQHandler+0x20>
}
 8004832:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8004834:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004836:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800483a:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 800483c:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800483e:	6922      	ldr	r2, [r4, #16]
 8004840:	f042 0202 	orr.w	r2, r2, #2
 8004844:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004846:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 800484e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004852:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004854:	f000 b8d8 	b.w	8004a08 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8004858:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800485a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 800485e:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004860:	6902      	ldr	r2, [r0, #16]
 8004862:	f042 0201 	orr.w	r2, r2, #1
 8004866:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004868:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004870:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004872:	f7ff ffcd 	bl	8004810 <HAL_DAC_DMAUnderrunCallbackCh1>
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	e7d5      	b.n	8004826 <HAL_DAC_IRQHandler+0x12>
 800487a:	bf00      	nop

0800487c <HAL_DAC_ConfigChannel>:
  __HAL_LOCK(hdac);
 800487c:	7943      	ldrb	r3, [r0, #5]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d057      	beq.n	8004932 <HAL_DAC_ConfigChannel+0xb6>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8004882:	680b      	ldr	r3, [r1, #0]
{
 8004884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004888:	2b04      	cmp	r3, #4
 800488a:	4617      	mov	r7, r2
 800488c:	460e      	mov	r6, r1
  hdac->State = HAL_DAC_STATE_BUSY;
 800488e:	f04f 0202 	mov.w	r2, #2
  __HAL_LOCK(hdac);
 8004892:	f04f 0101 	mov.w	r1, #1
 8004896:	4604      	mov	r4, r0
  hdac->State = HAL_DAC_STATE_BUSY;
 8004898:	7102      	strb	r2, [r0, #4]
  __HAL_LOCK(hdac);
 800489a:	7141      	strb	r1, [r0, #5]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800489c:	d04d      	beq.n	800493a <HAL_DAC_ConfigChannel+0xbe>
 800489e:	f007 0210 	and.w	r2, r7, #16
 80048a2:	6805      	ldr	r5, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80048a4:	6931      	ldr	r1, [r6, #16]
 80048a6:	2901      	cmp	r1, #1
 80048a8:	d039      	beq.n	800491e <HAL_DAC_ConfigChannel+0xa2>
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80048aa:	2107      	movs	r1, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80048ac:	68f0      	ldr	r0, [r6, #12]
  tmpreg1 = hdac->Instance->MCR;
 80048ae:	f8d5 c03c 	ldr.w	ip, [r5, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80048b2:	4091      	lsls	r1, r2
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80048b4:	2801      	cmp	r0, #1
 80048b6:	68b7      	ldr	r7, [r6, #8]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80048b8:	ea2c 0101 	bic.w	r1, ip, r1
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80048bc:	d02d      	beq.n	800491a <HAL_DAC_ConfigChannel+0x9e>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80048be:	2802      	cmp	r0, #2
 80048c0:	d039      	beq.n	8004936 <HAL_DAC_ConfigChannel+0xba>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80048c2:	fab7 f087 	clz	r0, r7
 80048c6:	0940      	lsrs	r0, r0, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80048c8:	433b      	orrs	r3, r7
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80048ca:	f44f 4880 	mov.w	r8, #16384	; 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80048ce:	6876      	ldr	r6, [r6, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80048d0:	f640 77fe 	movw	r7, #4094	; 0xffe
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80048d4:	4303      	orrs	r3, r0
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80048d6:	fa08 f802 	lsl.w	r8, r8, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80048da:	4097      	lsls	r7, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80048dc:	4096      	lsls	r6, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80048de:	4093      	lsls	r3, r2
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80048e0:	20c0      	movs	r0, #192	; 0xc0
  __HAL_UNLOCK(hdac);
 80048e2:	f04f 0c00 	mov.w	ip, #0
  hdac->State = HAL_DAC_STATE_READY;
 80048e6:	f04f 0e01 	mov.w	lr, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80048ea:	430b      	orrs	r3, r1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80048ec:	fa00 f102 	lsl.w	r1, r0, r2
  return HAL_OK;
 80048f0:	4660      	mov	r0, ip
  hdac->Instance->MCR = tmpreg1;
 80048f2:	63eb      	str	r3, [r5, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80048f4:	682b      	ldr	r3, [r5, #0]
 80048f6:	ea23 0308 	bic.w	r3, r3, r8
 80048fa:	602b      	str	r3, [r5, #0]
  tmpreg1 = hdac->Instance->CR;
 80048fc:	682b      	ldr	r3, [r5, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80048fe:	ea23 0307 	bic.w	r3, r3, r7
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004902:	4333      	orrs	r3, r6
  hdac->Instance->CR = tmpreg1;
 8004904:	602b      	str	r3, [r5, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004906:	682a      	ldr	r2, [r5, #0]
 8004908:	ea22 0201 	bic.w	r2, r2, r1
 800490c:	602a      	str	r2, [r5, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800490e:	f884 e004 	strb.w	lr, [r4, #4]
  __HAL_UNLOCK(hdac);
 8004912:	f884 c005 	strb.w	ip, [r4, #5]
}
 8004916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 800491a:	2000      	movs	r0, #0
 800491c:	e7d4      	b.n	80048c8 <HAL_DAC_ConfigChannel+0x4c>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800491e:	271f      	movs	r7, #31
    tmpreg1 = hdac->Instance->CCR;
 8004920:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004922:	6971      	ldr	r1, [r6, #20]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004924:	4097      	lsls	r7, r2
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004926:	4091      	lsls	r1, r2
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004928:	ea20 0007 	bic.w	r0, r0, r7
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800492c:	4301      	orrs	r1, r0
    hdac->Instance->CCR = tmpreg1;
 800492e:	63a9      	str	r1, [r5, #56]	; 0x38
 8004930:	e7bb      	b.n	80048aa <HAL_DAC_ConfigChannel+0x2e>
  __HAL_LOCK(hdac);
 8004932:	2002      	movs	r0, #2
}
 8004934:	4770      	bx	lr
    connectOnChip = DAC_MCR_MODE1_0;
 8004936:	2001      	movs	r0, #1
 8004938:	e7c6      	b.n	80048c8 <HAL_DAC_ConfigChannel+0x4c>
    tickstart = HAL_GetTick();
 800493a:	f7ff f815 	bl	8003968 <HAL_GetTick>
 800493e:	4605      	mov	r5, r0
    if (Channel == DAC_CHANNEL_1)
 8004940:	b9c7      	cbnz	r7, 8004974 <HAL_DAC_ConfigChannel+0xf8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004942:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80049cc <HAL_DAC_ConfigChannel+0x150>
 8004946:	e004      	b.n	8004952 <HAL_DAC_ConfigChannel+0xd6>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004948:	f7ff f80e 	bl	8003968 <HAL_GetTick>
 800494c:	1b40      	subs	r0, r0, r5
 800494e:	2801      	cmp	r0, #1
 8004950:	d833      	bhi.n	80049ba <HAL_DAC_ConfigChannel+0x13e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004952:	6823      	ldr	r3, [r4, #0]
 8004954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004956:	ea13 0f08 	tst.w	r3, r8
 800495a:	d1f5      	bne.n	8004948 <HAL_DAC_ConfigChannel+0xcc>
      HAL_Delay(1);
 800495c:	2001      	movs	r0, #1
 800495e:	f7ff f809 	bl	8003974 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004962:	6825      	ldr	r5, [r4, #0]
 8004964:	69b3      	ldr	r3, [r6, #24]
 8004966:	642b      	str	r3, [r5, #64]	; 0x40
 8004968:	e00e      	b.n	8004988 <HAL_DAC_ConfigChannel+0x10c>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800496a:	f7fe fffd 	bl	8003968 <HAL_GetTick>
 800496e:	1b40      	subs	r0, r0, r5
 8004970:	2801      	cmp	r0, #1
 8004972:	d822      	bhi.n	80049ba <HAL_DAC_ConfigChannel+0x13e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004974:	6823      	ldr	r3, [r4, #0]
 8004976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004978:	2b00      	cmp	r3, #0
 800497a:	dbf6      	blt.n	800496a <HAL_DAC_ConfigChannel+0xee>
      HAL_Delay(1U);
 800497c:	2001      	movs	r0, #1
 800497e:	f7fe fff9 	bl	8003974 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004982:	6825      	ldr	r5, [r4, #0]
 8004984:	69b3      	ldr	r3, [r6, #24]
 8004986:	646b      	str	r3, [r5, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004988:	f007 0210 	and.w	r2, r7, #16
 800498c:	f240 3cff 	movw	ip, #1023	; 0x3ff
 8004990:	6cab      	ldr	r3, [r5, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004992:	21ff      	movs	r1, #255	; 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004994:	69f0      	ldr	r0, [r6, #28]
 8004996:	fa0c fc02 	lsl.w	ip, ip, r2
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800499a:	fa01 f702 	lsl.w	r7, r1, r2
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800499e:	4090      	lsls	r0, r2
 80049a0:	ea23 030c 	bic.w	r3, r3, ip
 80049a4:	4303      	orrs	r3, r0
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80049a6:	6a30      	ldr	r0, [r6, #32]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80049a8:	64ab      	str	r3, [r5, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80049aa:	4090      	lsls	r0, r2
 80049ac:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80049ae:	6833      	ldr	r3, [r6, #0]
 80049b0:	ea21 0107 	bic.w	r1, r1, r7
 80049b4:	4301      	orrs	r1, r0
 80049b6:	64e9      	str	r1, [r5, #76]	; 0x4c
 80049b8:	e774      	b.n	80048a4 <HAL_DAC_ConfigChannel+0x28>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80049ba:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80049bc:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80049be:	f043 0308 	orr.w	r3, r3, #8
          return HAL_TIMEOUT;
 80049c2:	4610      	mov	r0, r2
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80049c4:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80049c6:	7122      	strb	r2, [r4, #4]
          return HAL_TIMEOUT;
 80049c8:	e7a5      	b.n	8004916 <HAL_DAC_ConfigChannel+0x9a>
 80049ca:	bf00      	nop
 80049cc:	20008000 	.word	0x20008000

080049d0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80049d0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049d2:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80049d4:	4620      	mov	r0, r4
 80049d6:	f7fd feb1 	bl	800273c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80049da:	2301      	movs	r3, #1
 80049dc:	7123      	strb	r3, [r4, #4]
}
 80049de:	bd10      	pop	{r4, pc}

080049e0 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80049e0:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80049e2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80049e4:	f7fd febc 	bl	8002760 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80049e8:	bd08      	pop	{r3, pc}
 80049ea:	bf00      	nop

080049ec <HAL_DACEx_ErrorCallbackCh2>:
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop

080049f0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80049f0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049f2:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80049f4:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80049f6:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80049f8:	f043 0304 	orr.w	r3, r3, #4
 80049fc:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80049fe:	f7ff fff5 	bl	80049ec <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004a02:	2301      	movs	r3, #1
 8004a04:	7123      	strb	r3, [r4, #4]
}
 8004a06:	bd10      	pop	{r4, pc}

08004a08 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop

08004a0c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a0c:	6802      	ldr	r2, [r0, #0]
{
 8004a0e:	4601      	mov	r1, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a10:	4b34      	ldr	r3, [pc, #208]	; (8004ae4 <DMA_CalcBaseAndBitshift+0xd8>)
 8004a12:	4835      	ldr	r0, [pc, #212]	; (8004ae8 <DMA_CalcBaseAndBitshift+0xdc>)
{
 8004a14:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a16:	4c35      	ldr	r4, [pc, #212]	; (8004aec <DMA_CalcBaseAndBitshift+0xe0>)
 8004a18:	4d35      	ldr	r5, [pc, #212]	; (8004af0 <DMA_CalcBaseAndBitshift+0xe4>)
 8004a1a:	42a2      	cmp	r2, r4
 8004a1c:	bf18      	it	ne
 8004a1e:	429a      	cmpne	r2, r3
 8004a20:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8004a24:	bf0c      	ite	eq
 8004a26:	2301      	moveq	r3, #1
 8004a28:	2300      	movne	r3, #0
 8004a2a:	4282      	cmp	r2, r0
 8004a2c:	bf08      	it	eq
 8004a2e:	f043 0301 	orreq.w	r3, r3, #1
 8004a32:	3048      	adds	r0, #72	; 0x48
 8004a34:	42aa      	cmp	r2, r5
 8004a36:	bf08      	it	eq
 8004a38:	f043 0301 	orreq.w	r3, r3, #1
 8004a3c:	3548      	adds	r5, #72	; 0x48
 8004a3e:	42a2      	cmp	r2, r4
 8004a40:	bf08      	it	eq
 8004a42:	f043 0301 	orreq.w	r3, r3, #1
 8004a46:	3448      	adds	r4, #72	; 0x48
 8004a48:	4282      	cmp	r2, r0
 8004a4a:	bf08      	it	eq
 8004a4c:	f043 0301 	orreq.w	r3, r3, #1
 8004a50:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8004a54:	42aa      	cmp	r2, r5
 8004a56:	bf08      	it	eq
 8004a58:	f043 0301 	orreq.w	r3, r3, #1
 8004a5c:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8004a60:	42a2      	cmp	r2, r4
 8004a62:	bf08      	it	eq
 8004a64:	f043 0301 	orreq.w	r3, r3, #1
 8004a68:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8004a6c:	4282      	cmp	r2, r0
 8004a6e:	bf08      	it	eq
 8004a70:	f043 0301 	orreq.w	r3, r3, #1
 8004a74:	3048      	adds	r0, #72	; 0x48
 8004a76:	42aa      	cmp	r2, r5
 8004a78:	bf08      	it	eq
 8004a7a:	f043 0301 	orreq.w	r3, r3, #1
 8004a7e:	3548      	adds	r5, #72	; 0x48
 8004a80:	42a2      	cmp	r2, r4
 8004a82:	bf08      	it	eq
 8004a84:	f043 0301 	orreq.w	r3, r3, #1
 8004a88:	3448      	adds	r4, #72	; 0x48
 8004a8a:	4282      	cmp	r2, r0
 8004a8c:	bf08      	it	eq
 8004a8e:	f043 0301 	orreq.w	r3, r3, #1
 8004a92:	3048      	adds	r0, #72	; 0x48
 8004a94:	42aa      	cmp	r2, r5
 8004a96:	bf08      	it	eq
 8004a98:	f043 0301 	orreq.w	r3, r3, #1
 8004a9c:	42a2      	cmp	r2, r4
 8004a9e:	bf08      	it	eq
 8004aa0:	f043 0301 	orreq.w	r3, r3, #1
 8004aa4:	4282      	cmp	r2, r0
 8004aa6:	bf08      	it	eq
 8004aa8:	f043 0301 	orreq.w	r3, r3, #1
 8004aac:	b913      	cbnz	r3, 8004ab4 <DMA_CalcBaseAndBitshift+0xa8>
 8004aae:	4b11      	ldr	r3, [pc, #68]	; (8004af4 <DMA_CalcBaseAndBitshift+0xe8>)
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d112      	bne.n	8004ada <DMA_CalcBaseAndBitshift+0xce>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ab4:	b2d3      	uxtb	r3, r2
 8004ab6:	4d10      	ldr	r5, [pc, #64]	; (8004af8 <DMA_CalcBaseAndBitshift+0xec>)
 8004ab8:	4810      	ldr	r0, [pc, #64]	; (8004afc <DMA_CalcBaseAndBitshift+0xf0>)
 8004aba:	3b10      	subs	r3, #16

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004abc:	4c10      	ldr	r4, [pc, #64]	; (8004b00 <DMA_CalcBaseAndBitshift+0xf4>)
 8004abe:	4010      	ands	r0, r2
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ac0:	fba5 5303 	umull	r5, r3, r5, r3
 8004ac4:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004ac6:	f003 0207 	and.w	r2, r3, #7

    if (stream_number > 3U)
 8004aca:	2b03      	cmp	r3, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004acc:	5ca2      	ldrb	r2, [r4, r2]
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004ace:	bf88      	it	hi
 8004ad0:	3004      	addhi	r0, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004ad2:	65ca      	str	r2, [r1, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004ad4:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8004ad6:	bc30      	pop	{r4, r5}
 8004ad8:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004ada:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 8004ade:	6588      	str	r0, [r1, #88]	; 0x58
 8004ae0:	e7f9      	b.n	8004ad6 <DMA_CalcBaseAndBitshift+0xca>
 8004ae2:	bf00      	nop
 8004ae4:	40020010 	.word	0x40020010
 8004ae8:	40020040 	.word	0x40020040
 8004aec:	40020028 	.word	0x40020028
 8004af0:	40020058 	.word	0x40020058
 8004af4:	400204b8 	.word	0x400204b8
 8004af8:	aaaaaaab 	.word	0xaaaaaaab
 8004afc:	fffffc00 	.word	0xfffffc00
 8004b00:	0801af28 	.word	0x0801af28

08004b04 <HAL_DMA_Init>:
{
 8004b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b08:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004b0a:	f7fe ff2d 	bl	8003968 <HAL_GetTick>
  if(hdma == NULL)
 8004b0e:	2c00      	cmp	r4, #0
 8004b10:	f000 8182 	beq.w	8004e18 <HAL_DMA_Init+0x314>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b14:	6823      	ldr	r3, [r4, #0]
 8004b16:	4605      	mov	r5, r0
 8004b18:	4a2b      	ldr	r2, [pc, #172]	; (8004bc8 <HAL_DMA_Init+0xc4>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d049      	beq.n	8004bb2 <HAL_DMA_Init+0xae>
 8004b1e:	3218      	adds	r2, #24
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d046      	beq.n	8004bb2 <HAL_DMA_Init+0xae>
 8004b24:	3230      	adds	r2, #48	; 0x30
 8004b26:	4829      	ldr	r0, [pc, #164]	; (8004bcc <HAL_DMA_Init+0xc8>)
 8004b28:	4929      	ldr	r1, [pc, #164]	; (8004bd0 <HAL_DMA_Init+0xcc>)
 8004b2a:	4283      	cmp	r3, r0
 8004b2c:	bf18      	it	ne
 8004b2e:	4293      	cmpne	r3, r2
 8004b30:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8004b34:	bf0c      	ite	eq
 8004b36:	2201      	moveq	r2, #1
 8004b38:	2200      	movne	r2, #0
 8004b3a:	428b      	cmp	r3, r1
 8004b3c:	bf08      	it	eq
 8004b3e:	f042 0201 	orreq.w	r2, r2, #1
 8004b42:	3130      	adds	r1, #48	; 0x30
 8004b44:	4283      	cmp	r3, r0
 8004b46:	bf08      	it	eq
 8004b48:	f042 0201 	orreq.w	r2, r2, #1
 8004b4c:	3030      	adds	r0, #48	; 0x30
 8004b4e:	428b      	cmp	r3, r1
 8004b50:	bf08      	it	eq
 8004b52:	f042 0201 	orreq.w	r2, r2, #1
 8004b56:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8004b5a:	4283      	cmp	r3, r0
 8004b5c:	bf08      	it	eq
 8004b5e:	f042 0201 	orreq.w	r2, r2, #1
 8004b62:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8004b66:	428b      	cmp	r3, r1
 8004b68:	bf08      	it	eq
 8004b6a:	f042 0201 	orreq.w	r2, r2, #1
 8004b6e:	3130      	adds	r1, #48	; 0x30
 8004b70:	4283      	cmp	r3, r0
 8004b72:	bf08      	it	eq
 8004b74:	f042 0201 	orreq.w	r2, r2, #1
 8004b78:	3030      	adds	r0, #48	; 0x30
 8004b7a:	428b      	cmp	r3, r1
 8004b7c:	bf08      	it	eq
 8004b7e:	f042 0201 	orreq.w	r2, r2, #1
 8004b82:	3130      	adds	r1, #48	; 0x30
 8004b84:	4283      	cmp	r3, r0
 8004b86:	bf08      	it	eq
 8004b88:	f042 0201 	orreq.w	r2, r2, #1
 8004b8c:	3030      	adds	r0, #48	; 0x30
 8004b8e:	428b      	cmp	r3, r1
 8004b90:	bf08      	it	eq
 8004b92:	f042 0201 	orreq.w	r2, r2, #1
 8004b96:	3130      	adds	r1, #48	; 0x30
 8004b98:	4283      	cmp	r3, r0
 8004b9a:	bf08      	it	eq
 8004b9c:	f042 0201 	orreq.w	r2, r2, #1
 8004ba0:	428b      	cmp	r3, r1
 8004ba2:	bf08      	it	eq
 8004ba4:	f042 0201 	orreq.w	r2, r2, #1
 8004ba8:	b91a      	cbnz	r2, 8004bb2 <HAL_DMA_Init+0xae>
 8004baa:	4a0a      	ldr	r2, [pc, #40]	; (8004bd4 <HAL_DMA_Init+0xd0>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	f040 81bf 	bne.w	8004f30 <HAL_DMA_Init+0x42c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bb2:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8004bb4:	2100      	movs	r1, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bb6:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8004bba:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(hdma);
 8004bbc:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8004bc0:	f022 0201 	bic.w	r2, r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	e00e      	b.n	8004be6 <HAL_DMA_Init+0xe2>
 8004bc8:	40020010 	.word	0x40020010
 8004bcc:	40020040 	.word	0x40020040
 8004bd0:	40020070 	.word	0x40020070
 8004bd4:	400204b8 	.word	0x400204b8
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bd8:	f7fe fec6 	bl	8003968 <HAL_GetTick>
 8004bdc:	1b40      	subs	r0, r0, r5
 8004bde:	2805      	cmp	r0, #5
 8004be0:	f200 8112 	bhi.w	8004e08 <HAL_DMA_Init+0x304>
 8004be4:	6823      	ldr	r3, [r4, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	07d6      	lsls	r6, r2, #31
 8004bea:	d4f5      	bmi.n	8004bd8 <HAL_DMA_Init+0xd4>
    registerValue |=  hdma->Init.Direction           |
 8004bec:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bf0:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 8004bf2:	430a      	orrs	r2, r1
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004bf4:	681f      	ldr	r7, [r3, #0]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bf6:	e9d4 6105 	ldrd	r6, r1, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bfa:	4302      	orrs	r2, r0
 8004bfc:	4332      	orrs	r2, r6
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004bfe:	4eb5      	ldr	r6, [pc, #724]	; (8004ed4 <HAL_DMA_Init+0x3d0>)
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c00:	e9d4 5007 	ldrd	r5, r0, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c04:	430a      	orrs	r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c06:	403e      	ands	r6, r7
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c08:	432a      	orrs	r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c0a:	6a65      	ldr	r5, [r4, #36]	; 0x24
            hdma->Init.Mode                | hdma->Init.Priority;
 8004c0c:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c0e:	2d04      	cmp	r5, #4
    registerValue |=  hdma->Init.Direction           |
 8004c10:	ea42 0206 	orr.w	r2, r2, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c14:	f000 8103 	beq.w	8004e1e <HAL_DMA_Init+0x31a>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004c18:	4eaf      	ldr	r6, [pc, #700]	; (8004ed8 <HAL_DMA_Init+0x3d4>)
 8004c1a:	48b0      	ldr	r0, [pc, #704]	; (8004edc <HAL_DMA_Init+0x3d8>)
 8004c1c:	6836      	ldr	r6, [r6, #0]
 8004c1e:	4030      	ands	r0, r6
 8004c20:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8004c24:	f080 8108 	bcs.w	8004e38 <HAL_DMA_Init+0x334>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004c28:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004c2a:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c2c:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8004c30:	432a      	orrs	r2, r5
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004c32:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c34:	4620      	mov	r0, r4
 8004c36:	f7ff fee9 	bl	8004a0c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c3a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004c3c:	233f      	movs	r3, #63	; 0x3f
 8004c3e:	f002 021f 	and.w	r2, r2, #31
 8004c42:	4093      	lsls	r3, r2
 8004c44:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c46:	6822      	ldr	r2, [r4, #0]
 8004c48:	4ba5      	ldr	r3, [pc, #660]	; (8004ee0 <HAL_DMA_Init+0x3dc>)
 8004c4a:	48a6      	ldr	r0, [pc, #664]	; (8004ee4 <HAL_DMA_Init+0x3e0>)
 8004c4c:	49a6      	ldr	r1, [pc, #664]	; (8004ee8 <HAL_DMA_Init+0x3e4>)
 8004c4e:	4282      	cmp	r2, r0
 8004c50:	bf18      	it	ne
 8004c52:	429a      	cmpne	r2, r3
 8004c54:	4ea5      	ldr	r6, [pc, #660]	; (8004eec <HAL_DMA_Init+0x3e8>)
 8004c56:	4da6      	ldr	r5, [pc, #664]	; (8004ef0 <HAL_DMA_Init+0x3ec>)
 8004c58:	f100 0060 	add.w	r0, r0, #96	; 0x60
 8004c5c:	bf0c      	ite	eq
 8004c5e:	2301      	moveq	r3, #1
 8004c60:	2300      	movne	r3, #0
 8004c62:	f8df c2b8 	ldr.w	ip, [pc, #696]	; 8004f1c <HAL_DMA_Init+0x418>
 8004c66:	428a      	cmp	r2, r1
 8004c68:	bf08      	it	eq
 8004c6a:	f043 0301 	orreq.w	r3, r3, #1
 8004c6e:	3160      	adds	r1, #96	; 0x60
 8004c70:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 8004f20 <HAL_DMA_Init+0x41c>
 8004c74:	42b2      	cmp	r2, r6
 8004c76:	bf08      	it	eq
 8004c78:	f043 0301 	orreq.w	r3, r3, #1
 8004c7c:	f8df e2a4 	ldr.w	lr, [pc, #676]	; 8004f24 <HAL_DMA_Init+0x420>
 8004c80:	4f9c      	ldr	r7, [pc, #624]	; (8004ef4 <HAL_DMA_Init+0x3f0>)
 8004c82:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004c86:	42aa      	cmp	r2, r5
 8004c88:	bf08      	it	eq
 8004c8a:	f043 0301 	orreq.w	r3, r3, #1
 8004c8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004c92:	f8df a284 	ldr.w	sl, [pc, #644]	; 8004f18 <HAL_DMA_Init+0x414>
 8004c96:	4282      	cmp	r2, r0
 8004c98:	bf08      	it	eq
 8004c9a:	f043 0301 	orreq.w	r3, r3, #1
 8004c9e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004ca2:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8004f28 <HAL_DMA_Init+0x424>
 8004ca6:	428a      	cmp	r2, r1
 8004ca8:	bf08      	it	eq
 8004caa:	f043 0301 	orreq.w	r3, r3, #1
 8004cae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004cb2:	4562      	cmp	r2, ip
 8004cb4:	bf08      	it	eq
 8004cb6:	f043 0301 	orreq.w	r3, r3, #1
 8004cba:	f8df c254 	ldr.w	ip, [pc, #596]	; 8004f10 <HAL_DMA_Init+0x40c>
 8004cbe:	4542      	cmp	r2, r8
 8004cc0:	bf08      	it	eq
 8004cc2:	f043 0301 	orreq.w	r3, r3, #1
 8004cc6:	eba2 0c0c 	sub.w	ip, r2, ip
 8004cca:	f8df 8248 	ldr.w	r8, [pc, #584]	; 8004f14 <HAL_DMA_Init+0x410>
 8004cce:	4572      	cmp	r2, lr
 8004cd0:	bf08      	it	eq
 8004cd2:	f043 0301 	orreq.w	r3, r3, #1
 8004cd6:	fabc fc8c 	clz	ip, ip
 8004cda:	eba2 0808 	sub.w	r8, r2, r8
 8004cde:	f8df e24c 	ldr.w	lr, [pc, #588]	; 8004f2c <HAL_DMA_Init+0x428>
 8004ce2:	42ba      	cmp	r2, r7
 8004ce4:	bf08      	it	eq
 8004ce6:	f043 0301 	orreq.w	r3, r3, #1
 8004cea:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8004cee:	eba2 070a 	sub.w	r7, r2, sl
 8004cf2:	fab8 f888 	clz	r8, r8
 8004cf6:	42b2      	cmp	r2, r6
 8004cf8:	bf08      	it	eq
 8004cfa:	f043 0301 	orreq.w	r3, r3, #1
 8004cfe:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 8004d02:	eba2 060e 	sub.w	r6, r2, lr
 8004d06:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8004d0a:	42aa      	cmp	r2, r5
 8004d0c:	bf08      	it	eq
 8004d0e:	f043 0301 	orreq.w	r3, r3, #1
 8004d12:	fab7 f787 	clz	r7, r7
 8004d16:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8004d1a:	eba2 050a 	sub.w	r5, r2, sl
 8004d1e:	4282      	cmp	r2, r0
 8004d20:	bf08      	it	eq
 8004d22:	f043 0301 	orreq.w	r3, r3, #1
 8004d26:	097f      	lsrs	r7, r7, #5
 8004d28:	fab6 f686 	clz	r6, r6
 8004d2c:	eba2 000e 	sub.w	r0, r2, lr
 8004d30:	428a      	cmp	r2, r1
 8004d32:	bf08      	it	eq
 8004d34:	f043 0301 	orreq.w	r3, r3, #1
 8004d38:	fab5 f585 	clz	r5, r5
 8004d3c:	0976      	lsrs	r6, r6, #5
 8004d3e:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 8004d42:	454a      	cmp	r2, r9
 8004d44:	bf08      	it	eq
 8004d46:	f043 0301 	orreq.w	r3, r3, #1
 8004d4a:	096d      	lsrs	r5, r5, #5
 8004d4c:	fab0 f080 	clz	r0, r0
 8004d50:	eba2 010a 	sub.w	r1, r2, sl
 8004d54:	ea4c 0303 	orr.w	r3, ip, r3
 8004d58:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8004d5c:	0940      	lsrs	r0, r0, #5
 8004d5e:	fab1 f181 	clz	r1, r1
 8004d62:	ea48 0303 	orr.w	r3, r8, r3
 8004d66:	eba2 0e0e 	sub.w	lr, r2, lr
 8004d6a:	0949      	lsrs	r1, r1, #5
 8004d6c:	433b      	orrs	r3, r7
 8004d6e:	fabe fe8e 	clz	lr, lr
 8004d72:	4333      	orrs	r3, r6
 8004d74:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8004d78:	432b      	orrs	r3, r5
 8004d7a:	4303      	orrs	r3, r0
 8004d7c:	430b      	orrs	r3, r1
 8004d7e:	d102      	bne.n	8004d86 <HAL_DMA_Init+0x282>
 8004d80:	f1be 0f00 	cmp.w	lr, #0
 8004d84:	d039      	beq.n	8004dfa <HAL_DMA_Init+0x2f6>
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d86:	ea4c 0c08 	orr.w	ip, ip, r8
 8004d8a:	b2d3      	uxtb	r3, r2
 8004d8c:	ea47 070c 	orr.w	r7, r7, ip
 8004d90:	433e      	orrs	r6, r7
 8004d92:	4335      	orrs	r5, r6
 8004d94:	4328      	orrs	r0, r5
 8004d96:	4301      	orrs	r1, r0
 8004d98:	ea5e 0101 	orrs.w	r1, lr, r1
 8004d9c:	f000 8127 	beq.w	8004fee <HAL_DMA_Init+0x4ea>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004da0:	4d55      	ldr	r5, [pc, #340]	; (8004ef8 <HAL_DMA_Init+0x3f4>)
 8004da2:	3b08      	subs	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004da4:	4a55      	ldr	r2, [pc, #340]	; (8004efc <HAL_DMA_Init+0x3f8>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004da6:	2001      	movs	r0, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004da8:	fba5 5303 	umull	r5, r3, r5, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004dac:	4d54      	ldr	r5, [pc, #336]	; (8004f00 <HAL_DMA_Init+0x3fc>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004dae:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004db0:	6665      	str	r5, [r4, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004db2:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004db4:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004db8:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004dba:	fa00 f303 	lsl.w	r3, r0, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004dbe:	6622      	str	r2, [r4, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004dc0:	66a3      	str	r3, [r4, #104]	; 0x68
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004dc2:	68a0      	ldr	r0, [r4, #8]
 8004dc4:	2880      	cmp	r0, #128	; 0x80
 8004dc6:	d069      	beq.n	8004e9c <HAL_DMA_Init+0x398>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004dc8:	6860      	ldr	r0, [r4, #4]
 8004dca:	b2c6      	uxtb	r6, r0
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004dcc:	3801      	subs	r0, #1
 8004dce:	2807      	cmp	r0, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004dd0:	6016      	str	r6, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004dd2:	606b      	str	r3, [r5, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004dd4:	d866      	bhi.n	8004ea4 <HAL_DMA_Init+0x3a0>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004dd6:	1e70      	subs	r0, r6, #1
 8004dd8:	2807      	cmp	r0, #7
 8004dda:	d868      	bhi.n	8004eae <HAL_DMA_Init+0x3aa>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ddc:	2900      	cmp	r1, #0
 8004dde:	f000 8133 	beq.w	8005048 <HAL_DMA_Init+0x544>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004de2:	4b48      	ldr	r3, [pc, #288]	; (8004f04 <HAL_DMA_Init+0x400>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004de4:	4948      	ldr	r1, [pc, #288]	; (8004f08 <HAL_DMA_Init+0x404>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004de6:	4433      	add	r3, r6
 8004de8:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004dea:	2201      	movs	r2, #1
 8004dec:	4082      	lsls	r2, r0
 8004dee:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 8004df2:	6762      	str	r2, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004df4:	2000      	movs	r0, #0
 8004df6:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004df8:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dfa:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8004dfc:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dfe:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004e00:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8004e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e08:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8004e0a:	2303      	movs	r3, #3
        return HAL_ERROR;
 8004e0c:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e0e:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8004e10:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8004e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 8004e18:	2001      	movs	r0, #1
}
 8004e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004e1e:	482e      	ldr	r0, [pc, #184]	; (8004ed8 <HAL_DMA_Init+0x3d4>)
 8004e20:	4e2e      	ldr	r6, [pc, #184]	; (8004edc <HAL_DMA_Init+0x3d8>)
 8004e22:	6807      	ldr	r7, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e24:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004e26:	403e      	ands	r6, r7
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e28:	6b27      	ldr	r7, [r4, #48]	; 0x30
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004e2a:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e2e:	ea40 0707 	orr.w	r7, r0, r7
 8004e32:	ea42 0207 	orr.w	r2, r2, r7
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004e36:	d346      	bcc.n	8004ec6 <HAL_DMA_Init+0x3c2>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004e38:	6866      	ldr	r6, [r4, #4]
 8004e3a:	f1a6 0729 	sub.w	r7, r6, #41	; 0x29
 8004e3e:	2f1f      	cmp	r7, #31
 8004e40:	d925      	bls.n	8004e8e <HAL_DMA_Init+0x38a>
 8004e42:	3e4f      	subs	r6, #79	; 0x4f
 8004e44:	2e03      	cmp	r6, #3
 8004e46:	d926      	bls.n	8004e96 <HAL_DMA_Init+0x392>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004e48:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e4a:	2d04      	cmp	r5, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004e4c:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e4e:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8004e52:	ea42 0205 	orr.w	r2, r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e56:	f47f aeec 	bne.w	8004c32 <HAL_DMA_Init+0x12e>
 8004e5a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8004e5c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004e5e:	432a      	orrs	r2, r5
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e60:	2800      	cmp	r0, #0
 8004e62:	f43f aee6 	beq.w	8004c32 <HAL_DMA_Init+0x12e>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e66:	b331      	cbz	r1, 8004eb6 <HAL_DMA_Init+0x3b2>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e68:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004e6c:	f000 80dd 	beq.w	800502a <HAL_DMA_Init+0x526>
    switch (hdma->Init.FIFOThreshold)
 8004e70:	2d02      	cmp	r5, #2
 8004e72:	d905      	bls.n	8004e80 <HAL_DMA_Init+0x37c>
 8004e74:	2d03      	cmp	r5, #3
 8004e76:	f47f aedc 	bne.w	8004c32 <HAL_DMA_Init+0x12e>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e7a:	01c1      	lsls	r1, r0, #7
 8004e7c:	f57f aed9 	bpl.w	8004c32 <HAL_DMA_Init+0x12e>
          hdma->State = HAL_DMA_STATE_READY;
 8004e80:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e82:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8004e84:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e86:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8004e88:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          return HAL_ERROR;
 8004e8c:	e7c2      	b.n	8004e14 <HAL_DMA_Init+0x310>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004e8e:	481f      	ldr	r0, [pc, #124]	; (8004f0c <HAL_DMA_Init+0x408>)
 8004e90:	40f8      	lsrs	r0, r7
 8004e92:	07c0      	lsls	r0, r0, #31
 8004e94:	d5d5      	bpl.n	8004e42 <HAL_DMA_Init+0x33e>
        registerValue |= DMA_SxCR_TRBUFF;
 8004e96:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004e9a:	e7d5      	b.n	8004e48 <HAL_DMA_Init+0x344>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	6061      	str	r1, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ea0:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ea2:	606b      	str	r3, [r5, #4]
      hdma->DMAmuxRequestGen = 0U;
 8004ea4:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8004ea6:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004eaa:	6763      	str	r3, [r4, #116]	; 0x74
 8004eac:	e7a5      	b.n	8004dfa <HAL_DMA_Init+0x2f6>
 8004eae:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
 8004eb2:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8004eb4:	e79e      	b.n	8004df4 <HAL_DMA_Init+0x2f0>
    switch (hdma->Init.FIFOThreshold)
 8004eb6:	2d01      	cmp	r5, #1
 8004eb8:	f000 80b2 	beq.w	8005020 <HAL_DMA_Init+0x51c>
 8004ebc:	d3dd      	bcc.n	8004e7a <HAL_DMA_Init+0x376>
 8004ebe:	2d02      	cmp	r5, #2
 8004ec0:	f47f aeb7 	bne.w	8004c32 <HAL_DMA_Init+0x12e>
 8004ec4:	e7d9      	b.n	8004e7a <HAL_DMA_Init+0x376>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004ec6:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004ec8:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004eca:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8004ece:	f042 0204 	orr.w	r2, r2, #4
 8004ed2:	e7c3      	b.n	8004e5c <HAL_DMA_Init+0x358>
 8004ed4:	fe10803f 	.word	0xfe10803f
 8004ed8:	5c001000 	.word	0x5c001000
 8004edc:	ffff0000 	.word	0xffff0000
 8004ee0:	40020010 	.word	0x40020010
 8004ee4:	40020028 	.word	0x40020028
 8004ee8:	40020040 	.word	0x40020040
 8004eec:	40020058 	.word	0x40020058
 8004ef0:	40020070 	.word	0x40020070
 8004ef4:	40020440 	.word	0x40020440
 8004ef8:	cccccccd 	.word	0xcccccccd
 8004efc:	16009600 	.word	0x16009600
 8004f00:	58025880 	.word	0x58025880
 8004f04:	1600963f 	.word	0x1600963f
 8004f08:	58025940 	.word	0x58025940
 8004f0c:	c3c0003f 	.word	0xc3c0003f
 8004f10:	58025408 	.word	0x58025408
 8004f14:	5802541c 	.word	0x5802541c
 8004f18:	58025430 	.word	0x58025430
 8004f1c:	400200b8 	.word	0x400200b8
 8004f20:	40020410 	.word	0x40020410
 8004f24:	40020428 	.word	0x40020428
 8004f28:	400204b8 	.word	0x400204b8
 8004f2c:	58025444 	.word	0x58025444
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004f30:	4a4c      	ldr	r2, [pc, #304]	; (8005064 <HAL_DMA_Init+0x560>)
 8004f32:	494d      	ldr	r1, [pc, #308]	; (8005068 <HAL_DMA_Init+0x564>)
 8004f34:	484d      	ldr	r0, [pc, #308]	; (800506c <HAL_DMA_Init+0x568>)
 8004f36:	428b      	cmp	r3, r1
 8004f38:	bf18      	it	ne
 8004f3a:	4293      	cmpne	r3, r2
 8004f3c:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8004f40:	4d4b      	ldr	r5, [pc, #300]	; (8005070 <HAL_DMA_Init+0x56c>)
 8004f42:	bf0c      	ite	eq
 8004f44:	2201      	moveq	r2, #1
 8004f46:	2200      	movne	r2, #0
 8004f48:	4283      	cmp	r3, r0
 8004f4a:	bf08      	it	eq
 8004f4c:	f042 0201 	orreq.w	r2, r2, #1
 8004f50:	303c      	adds	r0, #60	; 0x3c
 8004f52:	428b      	cmp	r3, r1
 8004f54:	bf08      	it	eq
 8004f56:	f042 0201 	orreq.w	r2, r2, #1
 8004f5a:	313c      	adds	r1, #60	; 0x3c
 8004f5c:	42ab      	cmp	r3, r5
 8004f5e:	bf08      	it	eq
 8004f60:	f042 0201 	orreq.w	r2, r2, #1
 8004f64:	4283      	cmp	r3, r0
 8004f66:	bf08      	it	eq
 8004f68:	f042 0201 	orreq.w	r2, r2, #1
 8004f6c:	428b      	cmp	r3, r1
 8004f6e:	bf08      	it	eq
 8004f70:	f042 0201 	orreq.w	r2, r2, #1
 8004f74:	b912      	cbnz	r2, 8004f7c <HAL_DMA_Init+0x478>
 8004f76:	4a3f      	ldr	r2, [pc, #252]	; (8005074 <HAL_DMA_Init+0x570>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d16c      	bne.n	8005056 <HAL_DMA_Init+0x552>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f7c:	2002      	movs	r0, #2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f7e:	68a2      	ldr	r2, [r4, #8]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004f80:	493d      	ldr	r1, [pc, #244]	; (8005078 <HAL_DMA_Init+0x574>)
    __HAL_UNLOCK(hdma);
 8004f82:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f84:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f88:	2a40      	cmp	r2, #64	; 0x40
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004f8a:	6818      	ldr	r0, [r3, #0]
    __HAL_UNLOCK(hdma);
 8004f8c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004f90:	ea01 0100 	and.w	r1, r1, r0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f94:	d05d      	beq.n	8005052 <HAL_DMA_Init+0x54e>
 8004f96:	2a80      	cmp	r2, #128	; 0x80
 8004f98:	bf14      	ite	ne
 8004f9a:	462f      	movne	r7, r5
 8004f9c:	f44f 4780 	moveq.w	r7, #16384	; 0x4000
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004fa0:	6922      	ldr	r2, [r4, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004fa2:	4620      	mov	r0, r4
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004fa4:	68e6      	ldr	r6, [r4, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004fa6:	08d2      	lsrs	r2, r2, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004fa8:	6965      	ldr	r5, [r4, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004faa:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 8005098 <HAL_DMA_Init+0x594>
 8004fae:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004fb2:	69a6      	ldr	r6, [r4, #24]
 8004fb4:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004fb8:	69e5      	ldr	r5, [r4, #28]
 8004fba:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004fbe:	4e2f      	ldr	r6, [pc, #188]	; (800507c <HAL_DMA_Init+0x578>)
 8004fc0:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
 8004fc4:	441e      	add	r6, r3
 8004fc6:	6a25      	ldr	r5, [r4, #32]
 8004fc8:	ea42 1215 	orr.w	r2, r2, r5, lsr #4
 8004fcc:	fbac 5606 	umull	r5, r6, ip, r6
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	0931      	lsrs	r1, r6, #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004fd4:	433a      	orrs	r2, r7
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004fd6:	0089      	lsls	r1, r1, #2
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004fd8:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004fda:	65e1      	str	r1, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004fdc:	f7ff fd16 	bl	8004a0c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004fe0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	f002 021f 	and.w	r2, r2, #31
 8004fe8:	4093      	lsls	r3, r2
 8004fea:	6043      	str	r3, [r0, #4]
 8004fec:	e62b      	b.n	8004c46 <HAL_DMA_Init+0x142>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004fee:	f1a3 0010 	sub.w	r0, r3, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004ff2:	4b23      	ldr	r3, [pc, #140]	; (8005080 <HAL_DMA_Init+0x57c>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ff4:	4d23      	ldr	r5, [pc, #140]	; (8005084 <HAL_DMA_Init+0x580>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004ff6:	4413      	add	r3, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ff8:	fba5 5000 	umull	r5, r0, r5, r0
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004ffc:	2ba8      	cmp	r3, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ffe:	ea4f 1010 	mov.w	r0, r0, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005002:	d800      	bhi.n	8005006 <HAL_DMA_Init+0x502>
      stream_number += 8U;
 8005004:	3008      	adds	r0, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005006:	4a20      	ldr	r2, [pc, #128]	; (8005088 <HAL_DMA_Init+0x584>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005008:	f000 051f 	and.w	r5, r0, #31
 800500c:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800500e:	4402      	add	r2, r0
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005010:	481e      	ldr	r0, [pc, #120]	; (800508c <HAL_DMA_Init+0x588>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005012:	40ab      	lsls	r3, r5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005014:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005016:	4605      	mov	r5, r0
 8005018:	66a3      	str	r3, [r4, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800501a:	e9c4 2018 	strd	r2, r0, [r4, #96]	; 0x60
 800501e:	e6d0      	b.n	8004dc2 <HAL_DMA_Init+0x2be>
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005020:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8005024:	f47f ae05 	bne.w	8004c32 <HAL_DMA_Init+0x12e>
 8005028:	e72a      	b.n	8004e80 <HAL_DMA_Init+0x37c>
    switch (hdma->Init.FIFOThreshold)
 800502a:	2d03      	cmp	r5, #3
 800502c:	f63f ae01 	bhi.w	8004c32 <HAL_DMA_Init+0x12e>
 8005030:	a101      	add	r1, pc, #4	; (adr r1, 8005038 <HAL_DMA_Init+0x534>)
 8005032:	f851 f025 	ldr.w	pc, [r1, r5, lsl #2]
 8005036:	bf00      	nop
 8005038:	08004e81 	.word	0x08004e81
 800503c:	08004e7b 	.word	0x08004e7b
 8005040:	08004e81 	.word	0x08004e81
 8005044:	08005021 	.word	0x08005021
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005048:	4b11      	ldr	r3, [pc, #68]	; (8005090 <HAL_DMA_Init+0x58c>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800504a:	4912      	ldr	r1, [pc, #72]	; (8005094 <HAL_DMA_Init+0x590>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800504c:	4433      	add	r3, r6
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	e6cb      	b.n	8004dea <HAL_DMA_Init+0x2e6>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005052:	2710      	movs	r7, #16
 8005054:	e7a4      	b.n	8004fa0 <HAL_DMA_Init+0x49c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005056:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005058:	2303      	movs	r3, #3
    return HAL_ERROR;
 800505a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800505c:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800505e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8005062:	e6d7      	b.n	8004e14 <HAL_DMA_Init+0x310>
 8005064:	58025408 	.word	0x58025408
 8005068:	5802541c 	.word	0x5802541c
 800506c:	58025430 	.word	0x58025430
 8005070:	58025458 	.word	0x58025458
 8005074:	58025494 	.word	0x58025494
 8005078:	fffe000f 	.word	0xfffe000f
 800507c:	a7fdabf8 	.word	0xa7fdabf8
 8005080:	bffdfbf0 	.word	0xbffdfbf0
 8005084:	aaaaaaab 	.word	0xaaaaaaab
 8005088:	10008200 	.word	0x10008200
 800508c:	40020880 	.word	0x40020880
 8005090:	1000823f 	.word	0x1000823f
 8005094:	40020940 	.word	0x40020940
 8005098:	cccccccd 	.word	0xcccccccd

0800509c <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 800509c:	2800      	cmp	r0, #0
 800509e:	f000 8104 	beq.w	80052aa <HAL_DMA_Start_IT+0x20e>
{
 80050a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050a6:	4605      	mov	r5, r0
  __HAL_LOCK(hdma);
 80050a8:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80050ac:	2801      	cmp	r0, #1
 80050ae:	f000 8138 	beq.w	8005322 <HAL_DMA_Start_IT+0x286>
 80050b2:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80050b4:	f895 4035 	ldrb.w	r4, [r5, #53]	; 0x35
 80050b8:	4284      	cmp	r4, r0
  __HAL_LOCK(hdma);
 80050ba:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80050be:	d007      	beq.n	80050d0 <HAL_DMA_Start_IT+0x34>
    __HAL_UNLOCK(hdma);
 80050c0:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80050c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 80050c6:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80050ca:	656b      	str	r3, [r5, #84]	; 0x54
}
 80050cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_DMA_DISABLE(hdma);
 80050d0:	682c      	ldr	r4, [r5, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 80050d2:	f04f 0e02 	mov.w	lr, #2
    __HAL_DMA_DISABLE(hdma);
 80050d6:	489b      	ldr	r0, [pc, #620]	; (8005344 <HAL_DMA_Start_IT+0x2a8>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050d8:	f04f 0c00 	mov.w	ip, #0
    __HAL_DMA_DISABLE(hdma);
 80050dc:	4f9a      	ldr	r7, [pc, #616]	; (8005348 <HAL_DMA_Start_IT+0x2ac>)
 80050de:	4e9b      	ldr	r6, [pc, #620]	; (800534c <HAL_DMA_Start_IT+0x2b0>)
 80050e0:	42bc      	cmp	r4, r7
 80050e2:	bf18      	it	ne
 80050e4:	4284      	cmpne	r4, r0
 80050e6:	f107 0748 	add.w	r7, r7, #72	; 0x48
    hdma->State = HAL_DMA_STATE_BUSY;
 80050ea:	f885 e035 	strb.w	lr, [r5, #53]	; 0x35
 80050ee:	bf0c      	ite	eq
 80050f0:	2001      	moveq	r0, #1
 80050f2:	2000      	movne	r0, #0
    __HAL_DMA_DISABLE(hdma);
 80050f4:	f8df e264 	ldr.w	lr, [pc, #612]	; 800535c <HAL_DMA_Start_IT+0x2c0>
 80050f8:	42b4      	cmp	r4, r6
 80050fa:	bf08      	it	eq
 80050fc:	f040 0001 	orreq.w	r0, r0, #1
 8005100:	3630      	adds	r6, #48	; 0x30
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005102:	f8c5 c054 	str.w	ip, [r5, #84]	; 0x54
 8005106:	42bc      	cmp	r4, r7
 8005108:	bf08      	it	eq
 800510a:	f040 0001 	orreq.w	r0, r0, #1
    __HAL_DMA_DISABLE(hdma);
 800510e:	f507 7762 	add.w	r7, r7, #904	; 0x388
 8005112:	f8df c24c 	ldr.w	ip, [pc, #588]	; 8005360 <HAL_DMA_Start_IT+0x2c4>
 8005116:	42b4      	cmp	r4, r6
 8005118:	bf08      	it	eq
 800511a:	f040 0001 	orreq.w	r0, r0, #1
 800511e:	f506 7662 	add.w	r6, r6, #904	; 0x388
 8005122:	4574      	cmp	r4, lr
 8005124:	bf08      	it	eq
 8005126:	f040 0001 	orreq.w	r0, r0, #1
 800512a:	f50e 7e68 	add.w	lr, lr, #928	; 0x3a0
 800512e:	42bc      	cmp	r4, r7
 8005130:	bf08      	it	eq
 8005132:	f040 0001 	orreq.w	r0, r0, #1
 8005136:	3760      	adds	r7, #96	; 0x60
 8005138:	42b4      	cmp	r4, r6
 800513a:	bf08      	it	eq
 800513c:	f040 0001 	orreq.w	r0, r0, #1
 8005140:	3660      	adds	r6, #96	; 0x60
 8005142:	4564      	cmp	r4, ip
 8005144:	bf08      	it	eq
 8005146:	f040 0001 	orreq.w	r0, r0, #1
 800514a:	f10c 0c60 	add.w	ip, ip, #96	; 0x60
 800514e:	4574      	cmp	r4, lr
 8005150:	bf08      	it	eq
 8005152:	f040 0001 	orreq.w	r0, r0, #1
 8005156:	f10e 0e60 	add.w	lr, lr, #96	; 0x60
 800515a:	42bc      	cmp	r4, r7
 800515c:	bf08      	it	eq
 800515e:	f040 0001 	orreq.w	r0, r0, #1
 8005162:	f5a7 678c 	sub.w	r7, r7, #1120	; 0x460
 8005166:	42b4      	cmp	r4, r6
 8005168:	bf08      	it	eq
 800516a:	f040 0001 	orreq.w	r0, r0, #1
 800516e:	f5a6 668c 	sub.w	r6, r6, #1120	; 0x460
 8005172:	4564      	cmp	r4, ip
 8005174:	bf08      	it	eq
 8005176:	f040 0001 	orreq.w	r0, r0, #1
 800517a:	f8d5 c058 	ldr.w	ip, [r5, #88]	; 0x58
 800517e:	4574      	cmp	r4, lr
 8005180:	bf14      	ite	ne
 8005182:	4682      	movne	sl, r0
 8005184:	f040 0a01 	orreq.w	sl, r0, #1
 8005188:	42b4      	cmp	r4, r6
 800518a:	bf18      	it	ne
 800518c:	42bc      	cmpne	r4, r7
 800518e:	6827      	ldr	r7, [r4, #0]
 8005190:	bf0c      	ite	eq
 8005192:	2601      	moveq	r6, #1
 8005194:	2600      	movne	r6, #0
 8005196:	f027 0701 	bic.w	r7, r7, #1
 800519a:	6027      	str	r7, [r4, #0]
 800519c:	d003      	beq.n	80051a6 <HAL_DMA_Start_IT+0x10a>
 800519e:	f1ba 0f00 	cmp.w	sl, #0
 80051a2:	f000 8084 	beq.w	80052ae <HAL_DMA_Start_IT+0x212>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051a6:	2e00      	cmp	r6, #0
 80051a8:	f000 8081 	beq.w	80052ae <HAL_DMA_Start_IT+0x212>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051ac:	6e6f      	ldr	r7, [r5, #100]	; 0x64
 80051ae:	e9d5 0e1a 	ldrd	r0, lr, [r5, #104]	; 0x68
 80051b2:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80051b4:	f1be 0f00 	cmp.w	lr, #0
 80051b8:	d007      	beq.n	80051ca <HAL_DMA_Start_IT+0x12e>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051ba:	e9d5 701c 	ldrd	r7, r0, [r5, #112]	; 0x70
 80051be:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051c0:	b91e      	cbnz	r6, 80051ca <HAL_DMA_Start_IT+0x12e>
 80051c2:	f1ba 0f00 	cmp.w	sl, #0
 80051c6:	f000 80cd 	beq.w	8005364 <HAL_DMA_Start_IT+0x2c8>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80051ca:	6def      	ldr	r7, [r5, #92]	; 0x5c
 80051cc:	f04f 093f 	mov.w	r9, #63	; 0x3f
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051d0:	f8d5 8008 	ldr.w	r8, [r5, #8]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80051d4:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051d8:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80051dc:	fa09 f707 	lsl.w	r7, r9, r7
 80051e0:	f8cc 7008 	str.w	r7, [ip, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80051e4:	6827      	ldr	r7, [r4, #0]
 80051e6:	f427 2780 	bic.w	r7, r7, #262144	; 0x40000
 80051ea:	6027      	str	r7, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80051ec:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051ee:	f000 80a5 	beq.w	800533c <HAL_DMA_Start_IT+0x2a0>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80051f2:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80051f4:	60e2      	str	r2, [r4, #12]
 80051f6:	6c2f      	ldr	r7, [r5, #64]	; 0x40
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80051f8:	2e00      	cmp	r6, #0
 80051fa:	f040 8095 	bne.w	8005328 <HAL_DMA_Start_IT+0x28c>
 80051fe:	f1ba 0f00 	cmp.w	sl, #0
 8005202:	f000 80ee 	beq.w	80053e2 <HAL_DMA_Start_IT+0x346>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	f023 031e 	bic.w	r3, r3, #30
 800520c:	f043 0316 	orr.w	r3, r3, #22
 8005210:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8005212:	b12f      	cbz	r7, 8005220 <HAL_DMA_Start_IT+0x184>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	f043 0308 	orr.w	r3, r3, #8
 800521a:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800521c:	2e00      	cmp	r6, #0
 800521e:	d12c      	bne.n	800527a <HAL_DMA_Start_IT+0x1de>
 8005220:	4b4b      	ldr	r3, [pc, #300]	; (8005350 <HAL_DMA_Start_IT+0x2b4>)
 8005222:	4a4c      	ldr	r2, [pc, #304]	; (8005354 <HAL_DMA_Start_IT+0x2b8>)
 8005224:	494c      	ldr	r1, [pc, #304]	; (8005358 <HAL_DMA_Start_IT+0x2bc>)
 8005226:	4294      	cmp	r4, r2
 8005228:	bf18      	it	ne
 800522a:	429c      	cmpne	r4, r3
 800522c:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8005230:	bf0c      	ite	eq
 8005232:	2301      	moveq	r3, #1
 8005234:	2300      	movne	r3, #0
 8005236:	428c      	cmp	r4, r1
 8005238:	bf08      	it	eq
 800523a:	f043 0301 	orreq.w	r3, r3, #1
 800523e:	3128      	adds	r1, #40	; 0x28
 8005240:	4294      	cmp	r4, r2
 8005242:	bf08      	it	eq
 8005244:	f043 0301 	orreq.w	r3, r3, #1
 8005248:	3228      	adds	r2, #40	; 0x28
 800524a:	428c      	cmp	r4, r1
 800524c:	bf08      	it	eq
 800524e:	f043 0301 	orreq.w	r3, r3, #1
 8005252:	3128      	adds	r1, #40	; 0x28
 8005254:	4294      	cmp	r4, r2
 8005256:	bf08      	it	eq
 8005258:	f043 0301 	orreq.w	r3, r3, #1
 800525c:	3228      	adds	r2, #40	; 0x28
 800525e:	428c      	cmp	r4, r1
 8005260:	bf08      	it	eq
 8005262:	f043 0301 	orreq.w	r3, r3, #1
 8005266:	4294      	cmp	r4, r2
 8005268:	bf08      	it	eq
 800526a:	f043 0301 	orreq.w	r3, r3, #1
 800526e:	b913      	cbnz	r3, 8005276 <HAL_DMA_Start_IT+0x1da>
 8005270:	f1ba 0f00 	cmp.w	sl, #0
 8005274:	d012      	beq.n	800529c <HAL_DMA_Start_IT+0x200>
 8005276:	f8d5 e06c 	ldr.w	lr, [r5, #108]	; 0x6c
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800527a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	03d2      	lsls	r2, r2, #15
 8005280:	d503      	bpl.n	800528a <HAL_DMA_Start_IT+0x1ee>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005288:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800528a:	f1be 0f00 	cmp.w	lr, #0
 800528e:	d005      	beq.n	800529c <HAL_DMA_Start_IT+0x200>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005290:	f8de 3000 	ldr.w	r3, [lr]
 8005294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005298:	f8ce 3000 	str.w	r3, [lr]
    __HAL_DMA_ENABLE(hdma);
 800529c:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800529e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80052a0:	f043 0301 	orr.w	r3, r3, #1
 80052a4:	6023      	str	r3, [r4, #0]
}
 80052a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 80052aa:	2001      	movs	r0, #1
}
 80052ac:	4770      	bx	lr
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80052ae:	4f28      	ldr	r7, [pc, #160]	; (8005350 <HAL_DMA_Start_IT+0x2b4>)
 80052b0:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 8005354 <HAL_DMA_Start_IT+0x2b8>
 80052b4:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8005358 <HAL_DMA_Start_IT+0x2bc>
 80052b8:	4574      	cmp	r4, lr
 80052ba:	bf18      	it	ne
 80052bc:	42bc      	cmpne	r4, r7
 80052be:	f10e 0e3c 	add.w	lr, lr, #60	; 0x3c
 80052c2:	bf0c      	ite	eq
 80052c4:	2701      	moveq	r7, #1
 80052c6:	2700      	movne	r7, #0
 80052c8:	4544      	cmp	r4, r8
 80052ca:	bf08      	it	eq
 80052cc:	f047 0701 	orreq.w	r7, r7, #1
 80052d0:	f108 0828 	add.w	r8, r8, #40	; 0x28
 80052d4:	4574      	cmp	r4, lr
 80052d6:	bf08      	it	eq
 80052d8:	f047 0701 	orreq.w	r7, r7, #1
 80052dc:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 80052e0:	4544      	cmp	r4, r8
 80052e2:	bf08      	it	eq
 80052e4:	f047 0701 	orreq.w	r7, r7, #1
 80052e8:	f108 0828 	add.w	r8, r8, #40	; 0x28
 80052ec:	4574      	cmp	r4, lr
 80052ee:	bf08      	it	eq
 80052f0:	f047 0701 	orreq.w	r7, r7, #1
 80052f4:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 80052f8:	4544      	cmp	r4, r8
 80052fa:	bf08      	it	eq
 80052fc:	f047 0701 	orreq.w	r7, r7, #1
 8005300:	4574      	cmp	r4, lr
 8005302:	bf08      	it	eq
 8005304:	f047 0701 	orreq.w	r7, r7, #1
 8005308:	b917      	cbnz	r7, 8005310 <HAL_DMA_Start_IT+0x274>
 800530a:	f1ba 0f00 	cmp.w	sl, #0
 800530e:	d029      	beq.n	8005364 <HAL_DMA_Start_IT+0x2c8>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005310:	6e6f      	ldr	r7, [r5, #100]	; 0x64
 8005312:	e9d5 0e1a 	ldrd	r0, lr, [r5, #104]	; 0x68
 8005316:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8005318:	f1be 0f00 	cmp.w	lr, #0
 800531c:	f47f af4d 	bne.w	80051ba <HAL_DMA_Start_IT+0x11e>
 8005320:	e74f      	b.n	80051c2 <HAL_DMA_Start_IT+0x126>
  __HAL_LOCK(hdma);
 8005322:	2002      	movs	r0, #2
}
 8005324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	f023 031e 	bic.w	r3, r3, #30
 800532e:	f043 0316 	orr.w	r3, r3, #22
 8005332:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8005334:	2f00      	cmp	r7, #0
 8005336:	f47f af6d 	bne.w	8005214 <HAL_DMA_Start_IT+0x178>
 800533a:	e79e      	b.n	800527a <HAL_DMA_Start_IT+0x1de>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800533c:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800533e:	60e1      	str	r1, [r4, #12]
 8005340:	e759      	b.n	80051f6 <HAL_DMA_Start_IT+0x15a>
 8005342:	bf00      	nop
 8005344:	40020058 	.word	0x40020058
 8005348:	40020040 	.word	0x40020040
 800534c:	40020070 	.word	0x40020070
 8005350:	5802541c 	.word	0x5802541c
 8005354:	58025408 	.word	0x58025408
 8005358:	58025430 	.word	0x58025430
 800535c:	400200b8 	.word	0x400200b8
 8005360:	40020440 	.word	0x40020440
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005364:	4f28      	ldr	r7, [pc, #160]	; (8005408 <HAL_DMA_Start_IT+0x36c>)
 8005366:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8005410 <HAL_DMA_Start_IT+0x374>
 800536a:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 8005414 <HAL_DMA_Start_IT+0x378>
 800536e:	4544      	cmp	r4, r8
 8005370:	bf18      	it	ne
 8005372:	42bc      	cmpne	r4, r7
 8005374:	f108 0828 	add.w	r8, r8, #40	; 0x28
 8005378:	bf0c      	ite	eq
 800537a:	2701      	moveq	r7, #1
 800537c:	2700      	movne	r7, #0
 800537e:	4574      	cmp	r4, lr
 8005380:	bf08      	it	eq
 8005382:	f047 0701 	orreq.w	r7, r7, #1
 8005386:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 800538a:	4544      	cmp	r4, r8
 800538c:	bf08      	it	eq
 800538e:	f047 0701 	orreq.w	r7, r7, #1
 8005392:	f108 0828 	add.w	r8, r8, #40	; 0x28
 8005396:	4574      	cmp	r4, lr
 8005398:	bf08      	it	eq
 800539a:	f047 0701 	orreq.w	r7, r7, #1
 800539e:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 80053a2:	4544      	cmp	r4, r8
 80053a4:	bf08      	it	eq
 80053a6:	f047 0701 	orreq.w	r7, r7, #1
 80053aa:	4574      	cmp	r4, lr
 80053ac:	bf08      	it	eq
 80053ae:	f047 0701 	orreq.w	r7, r7, #1
 80053b2:	b927      	cbnz	r7, 80053be <HAL_DMA_Start_IT+0x322>
 80053b4:	4f15      	ldr	r7, [pc, #84]	; (800540c <HAL_DMA_Start_IT+0x370>)
 80053b6:	42bc      	cmp	r4, r7
 80053b8:	bf18      	it	ne
 80053ba:	6c2f      	ldrne	r7, [r5, #64]	; 0x40
 80053bc:	d111      	bne.n	80053e2 <HAL_DMA_Start_IT+0x346>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80053be:	6def      	ldr	r7, [r5, #92]	; 0x5c
 80053c0:	f04f 0e01 	mov.w	lr, #1
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053c4:	f8d5 8008 	ldr.w	r8, [r5, #8]
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80053c8:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053cc:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80053d0:	fa0e f707 	lsl.w	r7, lr, r7
 80053d4:	f8cc 7004 	str.w	r7, [ip, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80053d8:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80053da:	d010      	beq.n	80053fe <HAL_DMA_Start_IT+0x362>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80053dc:	60a1      	str	r1, [r4, #8]
 80053de:	6c2f      	ldr	r7, [r5, #64]	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80053e0:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80053e2:	6823      	ldr	r3, [r4, #0]
 80053e4:	f023 030e 	bic.w	r3, r3, #14
 80053e8:	f043 030a 	orr.w	r3, r3, #10
 80053ec:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80053ee:	2f00      	cmp	r7, #0
 80053f0:	f43f af16 	beq.w	8005220 <HAL_DMA_Start_IT+0x184>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	f043 0304 	orr.w	r3, r3, #4
 80053fa:	6023      	str	r3, [r4, #0]
 80053fc:	e710      	b.n	8005220 <HAL_DMA_Start_IT+0x184>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80053fe:	60a2      	str	r2, [r4, #8]
 8005400:	6c2f      	ldr	r7, [r5, #64]	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005402:	60e1      	str	r1, [r4, #12]
 8005404:	e7ed      	b.n	80053e2 <HAL_DMA_Start_IT+0x346>
 8005406:	bf00      	nop
 8005408:	58025408 	.word	0x58025408
 800540c:	58025494 	.word	0x58025494
 8005410:	5802541c 	.word	0x5802541c
 8005414:	58025430 	.word	0x58025430

08005418 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8005418:	2800      	cmp	r0, #0
 800541a:	d060      	beq.n	80054de <HAL_DMA_Abort_IT+0xc6>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800541c:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8005420:	2a02      	cmp	r2, #2
{
 8005422:	b538      	push	{r3, r4, r5, lr}
 8005424:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005426:	d003      	beq.n	8005430 <HAL_DMA_Abort_IT+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005428:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 800542a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800542c:	655a      	str	r2, [r3, #84]	; 0x54
}
 800542e:	bd38      	pop	{r3, r4, r5, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005430:	6801      	ldr	r1, [r0, #0]
 8005432:	4a57      	ldr	r2, [pc, #348]	; (8005590 <HAL_DMA_Abort_IT+0x178>)
 8005434:	4291      	cmp	r1, r2
 8005436:	d049      	beq.n	80054cc <HAL_DMA_Abort_IT+0xb4>
 8005438:	3218      	adds	r2, #24
 800543a:	4291      	cmp	r1, r2
 800543c:	d046      	beq.n	80054cc <HAL_DMA_Abort_IT+0xb4>
 800543e:	3230      	adds	r2, #48	; 0x30
 8005440:	4854      	ldr	r0, [pc, #336]	; (8005594 <HAL_DMA_Abort_IT+0x17c>)
 8005442:	4c55      	ldr	r4, [pc, #340]	; (8005598 <HAL_DMA_Abort_IT+0x180>)
 8005444:	4281      	cmp	r1, r0
 8005446:	bf18      	it	ne
 8005448:	4291      	cmpne	r1, r2
 800544a:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800544e:	4d53      	ldr	r5, [pc, #332]	; (800559c <HAL_DMA_Abort_IT+0x184>)
 8005450:	bf0c      	ite	eq
 8005452:	2201      	moveq	r2, #1
 8005454:	2200      	movne	r2, #0
 8005456:	42a1      	cmp	r1, r4
 8005458:	bf08      	it	eq
 800545a:	f042 0201 	orreq.w	r2, r2, #1
 800545e:	3448      	adds	r4, #72	; 0x48
 8005460:	4281      	cmp	r1, r0
 8005462:	bf08      	it	eq
 8005464:	f042 0201 	orreq.w	r2, r2, #1
 8005468:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800546c:	42a9      	cmp	r1, r5
 800546e:	bf08      	it	eq
 8005470:	f042 0201 	orreq.w	r2, r2, #1
 8005474:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8005478:	42a1      	cmp	r1, r4
 800547a:	bf08      	it	eq
 800547c:	f042 0201 	orreq.w	r2, r2, #1
 8005480:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8005484:	4281      	cmp	r1, r0
 8005486:	bf08      	it	eq
 8005488:	f042 0201 	orreq.w	r2, r2, #1
 800548c:	3048      	adds	r0, #72	; 0x48
 800548e:	42a9      	cmp	r1, r5
 8005490:	bf08      	it	eq
 8005492:	f042 0201 	orreq.w	r2, r2, #1
 8005496:	3548      	adds	r5, #72	; 0x48
 8005498:	42a1      	cmp	r1, r4
 800549a:	bf08      	it	eq
 800549c:	f042 0201 	orreq.w	r2, r2, #1
 80054a0:	3448      	adds	r4, #72	; 0x48
 80054a2:	4281      	cmp	r1, r0
 80054a4:	bf08      	it	eq
 80054a6:	f042 0201 	orreq.w	r2, r2, #1
 80054aa:	3048      	adds	r0, #72	; 0x48
 80054ac:	42a9      	cmp	r1, r5
 80054ae:	bf08      	it	eq
 80054b0:	f042 0201 	orreq.w	r2, r2, #1
 80054b4:	42a1      	cmp	r1, r4
 80054b6:	bf08      	it	eq
 80054b8:	f042 0201 	orreq.w	r2, r2, #1
 80054bc:	4281      	cmp	r1, r0
 80054be:	bf08      	it	eq
 80054c0:	f042 0201 	orreq.w	r2, r2, #1
 80054c4:	b912      	cbnz	r2, 80054cc <HAL_DMA_Abort_IT+0xb4>
 80054c6:	4a36      	ldr	r2, [pc, #216]	; (80055a0 <HAL_DMA_Abort_IT+0x188>)
 80054c8:	4291      	cmp	r1, r2
 80054ca:	d10a      	bne.n	80054e2 <HAL_DMA_Abort_IT+0xca>
      hdma->State = HAL_DMA_STATE_ABORT;
 80054cc:	2204      	movs	r2, #4
  return HAL_OK;
 80054ce:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 80054d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80054d4:	680b      	ldr	r3, [r1, #0]
 80054d6:	f023 0301 	bic.w	r3, r3, #1
 80054da:	600b      	str	r3, [r1, #0]
}
 80054dc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80054de:	2001      	movs	r0, #1
}
 80054e0:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054e2:	f104 54c0 	add.w	r4, r4, #402653184	; 0x18000000
 80054e6:	4a2f      	ldr	r2, [pc, #188]	; (80055a4 <HAL_DMA_Abort_IT+0x18c>)
 80054e8:	482f      	ldr	r0, [pc, #188]	; (80055a8 <HAL_DMA_Abort_IT+0x190>)
 80054ea:	f504 449f 	add.w	r4, r4, #20352	; 0x4f80
 80054ee:	4d2f      	ldr	r5, [pc, #188]	; (80055ac <HAL_DMA_Abort_IT+0x194>)
 80054f0:	42a1      	cmp	r1, r4
 80054f2:	bf18      	it	ne
 80054f4:	4291      	cmpne	r1, r2
 80054f6:	f104 0450 	add.w	r4, r4, #80	; 0x50
 80054fa:	bf0c      	ite	eq
 80054fc:	2201      	moveq	r2, #1
 80054fe:	2200      	movne	r2, #0
 8005500:	4281      	cmp	r1, r0
 8005502:	bf08      	it	eq
 8005504:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005508:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800550a:	42a9      	cmp	r1, r5
 800550c:	bf08      	it	eq
 800550e:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005512:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005516:	3528      	adds	r5, #40	; 0x28
 8005518:	42a1      	cmp	r1, r4
 800551a:	bf08      	it	eq
 800551c:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005520:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005522:	3428      	adds	r4, #40	; 0x28
      __HAL_DMA_DISABLE(hdma);
 8005524:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005526:	42a9      	cmp	r1, r5
 8005528:	bf08      	it	eq
 800552a:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800552e:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005532:	42a1      	cmp	r1, r4
 8005534:	bf08      	it	eq
 8005536:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800553a:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800553c:	b912      	cbnz	r2, 8005544 <HAL_DMA_Abort_IT+0x12c>
 800553e:	4a1c      	ldr	r2, [pc, #112]	; (80055b0 <HAL_DMA_Abort_IT+0x198>)
 8005540:	4291      	cmp	r1, r2
 8005542:	d117      	bne.n	8005574 <HAL_DMA_Abort_IT+0x15c>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005544:	6e1c      	ldr	r4, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005546:	2101      	movs	r1, #1
 8005548:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800554a:	6822      	ldr	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800554c:	f000 001f 	and.w	r0, r0, #31
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005550:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005552:	f422 7280 	bic.w	r2, r2, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005556:	4081      	lsls	r1, r0
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005558:	6e58      	ldr	r0, [r3, #100]	; 0x64
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800555a:	6022      	str	r2, [r4, #0]
        if(hdma->DMAmuxRequestGen != 0U)
 800555c:	e9d3 421a 	ldrd	r4, r2, [r3, #104]	; 0x68
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005560:	6069      	str	r1, [r5, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005562:	6044      	str	r4, [r0, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8005564:	b132      	cbz	r2, 8005574 <HAL_DMA_Abort_IT+0x15c>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005566:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005568:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800556a:	6f5c      	ldr	r4, [r3, #116]	; 0x74
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800556c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005570:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005572:	6044      	str	r4, [r0, #4]
      __HAL_UNLOCK(hdma);
 8005574:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 8005576:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 8005578:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 800557a:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800557e:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8005582:	b11a      	cbz	r2, 800558c <HAL_DMA_Abort_IT+0x174>
 8005584:	4618      	mov	r0, r3
        hdma->XferAbortCallback(hdma);
 8005586:	4790      	blx	r2
  return HAL_OK;
 8005588:	4620      	mov	r0, r4
}
 800558a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800558c:	4610      	mov	r0, r2
}
 800558e:	bd38      	pop	{r3, r4, r5, pc}
 8005590:	40020010 	.word	0x40020010
 8005594:	40020040 	.word	0x40020040
 8005598:	40020070 	.word	0x40020070
 800559c:	400200a0 	.word	0x400200a0
 80055a0:	400204b8 	.word	0x400204b8
 80055a4:	5802541c 	.word	0x5802541c
 80055a8:	58025430 	.word	0x58025430
 80055ac:	58025444 	.word	0x58025444
 80055b0:	58025494 	.word	0x58025494

080055b4 <HAL_DMA_IRQHandler>:
{
 80055b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t timeout = SystemCoreClock / 9600U;
 80055b8:	49a4      	ldr	r1, [pc, #656]	; (800584c <HAL_DMA_IRQHandler+0x298>)
{
 80055ba:	b085      	sub	sp, #20
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80055bc:	4ea4      	ldr	r6, [pc, #656]	; (8005850 <HAL_DMA_IRQHandler+0x29c>)
  __IO uint32_t count = 0U;
 80055be:	2400      	movs	r4, #0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80055c0:	6803      	ldr	r3, [r0, #0]
 80055c2:	4aa4      	ldr	r2, [pc, #656]	; (8005854 <HAL_DMA_IRQHandler+0x2a0>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055c4:	f8d0 8058 	ldr.w	r8, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80055c8:	6809      	ldr	r1, [r1, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80055ca:	4293      	cmp	r3, r2
 80055cc:	bf18      	it	ne
 80055ce:	42b3      	cmpne	r3, r6
  __IO uint32_t count = 0U;
 80055d0:	9403      	str	r4, [sp, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80055d2:	9101      	str	r1, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80055d4:	bf08      	it	eq
 80055d6:	2601      	moveq	r6, #1
  tmpisr_dma  = regs_dma->ISR;
 80055d8:	f8d8 5000 	ldr.w	r5, [r8]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80055dc:	bf18      	it	ne
 80055de:	2600      	movne	r6, #0
  tmpisr_bdma = regs_bdma->ISR;
 80055e0:	f8d8 1000 	ldr.w	r1, [r8]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80055e4:	d046      	beq.n	8005674 <HAL_DMA_IRQHandler+0xc0>
 80055e6:	3218      	adds	r2, #24
 80055e8:	4f9b      	ldr	r7, [pc, #620]	; (8005858 <HAL_DMA_IRQHandler+0x2a4>)
 80055ea:	4c9c      	ldr	r4, [pc, #624]	; (800585c <HAL_DMA_IRQHandler+0x2a8>)
 80055ec:	42bb      	cmp	r3, r7
 80055ee:	bf18      	it	ne
 80055f0:	4293      	cmpne	r3, r2
 80055f2:	f107 0730 	add.w	r7, r7, #48	; 0x30
 80055f6:	bf0c      	ite	eq
 80055f8:	2201      	moveq	r2, #1
 80055fa:	2200      	movne	r2, #0
 80055fc:	42a3      	cmp	r3, r4
 80055fe:	bf08      	it	eq
 8005600:	f042 0201 	orreq.w	r2, r2, #1
 8005604:	3430      	adds	r4, #48	; 0x30
 8005606:	42bb      	cmp	r3, r7
 8005608:	bf08      	it	eq
 800560a:	f042 0201 	orreq.w	r2, r2, #1
 800560e:	3730      	adds	r7, #48	; 0x30
 8005610:	42a3      	cmp	r3, r4
 8005612:	bf08      	it	eq
 8005614:	f042 0201 	orreq.w	r2, r2, #1
 8005618:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800561c:	42bb      	cmp	r3, r7
 800561e:	bf08      	it	eq
 8005620:	f042 0201 	orreq.w	r2, r2, #1
 8005624:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8005628:	42a3      	cmp	r3, r4
 800562a:	bf08      	it	eq
 800562c:	f042 0201 	orreq.w	r2, r2, #1
 8005630:	3430      	adds	r4, #48	; 0x30
 8005632:	42bb      	cmp	r3, r7
 8005634:	bf08      	it	eq
 8005636:	f042 0201 	orreq.w	r2, r2, #1
 800563a:	3730      	adds	r7, #48	; 0x30
 800563c:	42a3      	cmp	r3, r4
 800563e:	bf08      	it	eq
 8005640:	f042 0201 	orreq.w	r2, r2, #1
 8005644:	3430      	adds	r4, #48	; 0x30
 8005646:	42bb      	cmp	r3, r7
 8005648:	bf08      	it	eq
 800564a:	f042 0201 	orreq.w	r2, r2, #1
 800564e:	3730      	adds	r7, #48	; 0x30
 8005650:	42a3      	cmp	r3, r4
 8005652:	bf08      	it	eq
 8005654:	f042 0201 	orreq.w	r2, r2, #1
 8005658:	3430      	adds	r4, #48	; 0x30
 800565a:	42bb      	cmp	r3, r7
 800565c:	bf08      	it	eq
 800565e:	f042 0201 	orreq.w	r2, r2, #1
 8005662:	42a3      	cmp	r3, r4
 8005664:	bf08      	it	eq
 8005666:	f042 0201 	orreq.w	r2, r2, #1
 800566a:	b91a      	cbnz	r2, 8005674 <HAL_DMA_IRQHandler+0xc0>
 800566c:	4a7c      	ldr	r2, [pc, #496]	; (8005860 <HAL_DMA_IRQHandler+0x2ac>)
 800566e:	4293      	cmp	r3, r2
 8005670:	f040 81ef 	bne.w	8005a52 <HAL_DMA_IRQHandler+0x49e>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005674:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8005676:	2208      	movs	r2, #8
 8005678:	f001 071f 	and.w	r7, r1, #31
 800567c:	40ba      	lsls	r2, r7
 800567e:	422a      	tst	r2, r5
 8005680:	f040 81d8 	bne.w	8005a34 <HAL_DMA_IRQHandler+0x480>
 8005684:	4604      	mov	r4, r0
 8005686:	f04f 0c04 	mov.w	ip, #4
 800568a:	2010      	movs	r0, #16
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800568c:	fa25 f207 	lsr.w	r2, r5, r7
 8005690:	fa0c fc07 	lsl.w	ip, ip, r7
 8005694:	40b8      	lsls	r0, r7
 8005696:	07d2      	lsls	r2, r2, #31
 8005698:	ea05 090c 	and.w	r9, r5, ip
 800569c:	ea05 0e00 	and.w	lr, r5, r0
 80056a0:	d560      	bpl.n	8005764 <HAL_DMA_IRQHandler+0x1b0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80056a2:	4a70      	ldr	r2, [pc, #448]	; (8005864 <HAL_DMA_IRQHandler+0x2b0>)
 80056a4:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 8005858 <HAL_DMA_IRQHandler+0x2a4>
 80056a8:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 800585c <HAL_DMA_IRQHandler+0x2a8>
 80056ac:	4293      	cmp	r3, r2
 80056ae:	bf18      	it	ne
 80056b0:	455b      	cmpne	r3, fp
 80056b2:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 80056b6:	bf0c      	ite	eq
 80056b8:	2201      	moveq	r2, #1
 80056ba:	2200      	movne	r2, #0
 80056bc:	4553      	cmp	r3, sl
 80056be:	bf08      	it	eq
 80056c0:	f042 0201 	orreq.w	r2, r2, #1
 80056c4:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 80056c8:	455b      	cmp	r3, fp
 80056ca:	bf08      	it	eq
 80056cc:	f042 0201 	orreq.w	r2, r2, #1
 80056d0:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 80056d4:	4553      	cmp	r3, sl
 80056d6:	bf08      	it	eq
 80056d8:	f042 0201 	orreq.w	r2, r2, #1
 80056dc:	f50a 7a5c 	add.w	sl, sl, #880	; 0x370
 80056e0:	455b      	cmp	r3, fp
 80056e2:	bf08      	it	eq
 80056e4:	f042 0201 	orreq.w	r2, r2, #1
 80056e8:	f50b 7b5c 	add.w	fp, fp, #880	; 0x370
 80056ec:	4553      	cmp	r3, sl
 80056ee:	bf08      	it	eq
 80056f0:	f042 0201 	orreq.w	r2, r2, #1
 80056f4:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 80056f8:	455b      	cmp	r3, fp
 80056fa:	bf08      	it	eq
 80056fc:	f042 0201 	orreq.w	r2, r2, #1
 8005700:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 8005704:	4553      	cmp	r3, sl
 8005706:	bf08      	it	eq
 8005708:	f042 0201 	orreq.w	r2, r2, #1
 800570c:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 8005710:	455b      	cmp	r3, fp
 8005712:	bf08      	it	eq
 8005714:	f042 0201 	orreq.w	r2, r2, #1
 8005718:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 800571c:	4553      	cmp	r3, sl
 800571e:	bf08      	it	eq
 8005720:	f042 0201 	orreq.w	r2, r2, #1
 8005724:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 8005728:	455b      	cmp	r3, fp
 800572a:	bf08      	it	eq
 800572c:	f042 0201 	orreq.w	r2, r2, #1
 8005730:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 8005734:	4553      	cmp	r3, sl
 8005736:	bf08      	it	eq
 8005738:	f042 0201 	orreq.w	r2, r2, #1
 800573c:	455b      	cmp	r3, fp
 800573e:	bf08      	it	eq
 8005740:	f042 0201 	orreq.w	r2, r2, #1
 8005744:	b912      	cbnz	r2, 800574c <HAL_DMA_IRQHandler+0x198>
 8005746:	2e00      	cmp	r6, #0
 8005748:	f000 8245 	beq.w	8005bd6 <HAL_DMA_IRQHandler+0x622>
 800574c:	695a      	ldr	r2, [r3, #20]
 800574e:	0612      	lsls	r2, r2, #24
 8005750:	d508      	bpl.n	8005764 <HAL_DMA_IRQHandler+0x1b0>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005752:	2201      	movs	r2, #1
 8005754:	fa02 f707 	lsl.w	r7, r2, r7
 8005758:	f8c8 7008 	str.w	r7, [r8, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800575c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800575e:	f042 0202 	orr.w	r2, r2, #2
 8005762:	6562      	str	r2, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005764:	f1b9 0f00 	cmp.w	r9, #0
 8005768:	d055      	beq.n	8005816 <HAL_DMA_IRQHandler+0x262>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800576a:	2e00      	cmp	r6, #0
 800576c:	d14a      	bne.n	8005804 <HAL_DMA_IRQHandler+0x250>
 800576e:	4a3d      	ldr	r2, [pc, #244]	; (8005864 <HAL_DMA_IRQHandler+0x2b0>)
 8005770:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8005858 <HAL_DMA_IRQHandler+0x2a4>
 8005774:	4f39      	ldr	r7, [pc, #228]	; (800585c <HAL_DMA_IRQHandler+0x2a8>)
 8005776:	454b      	cmp	r3, r9
 8005778:	bf18      	it	ne
 800577a:	4293      	cmpne	r3, r2
 800577c:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8005780:	bf0c      	ite	eq
 8005782:	2201      	moveq	r2, #1
 8005784:	2200      	movne	r2, #0
 8005786:	42bb      	cmp	r3, r7
 8005788:	bf08      	it	eq
 800578a:	f042 0201 	orreq.w	r2, r2, #1
 800578e:	3730      	adds	r7, #48	; 0x30
 8005790:	454b      	cmp	r3, r9
 8005792:	bf08      	it	eq
 8005794:	f042 0201 	orreq.w	r2, r2, #1
 8005798:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800579c:	42bb      	cmp	r3, r7
 800579e:	bf08      	it	eq
 80057a0:	f042 0201 	orreq.w	r2, r2, #1
 80057a4:	f507 775c 	add.w	r7, r7, #880	; 0x370
 80057a8:	454b      	cmp	r3, r9
 80057aa:	bf08      	it	eq
 80057ac:	f042 0201 	orreq.w	r2, r2, #1
 80057b0:	f509 795c 	add.w	r9, r9, #880	; 0x370
 80057b4:	42bb      	cmp	r3, r7
 80057b6:	bf08      	it	eq
 80057b8:	f042 0201 	orreq.w	r2, r2, #1
 80057bc:	3730      	adds	r7, #48	; 0x30
 80057be:	454b      	cmp	r3, r9
 80057c0:	bf08      	it	eq
 80057c2:	f042 0201 	orreq.w	r2, r2, #1
 80057c6:	f109 0930 	add.w	r9, r9, #48	; 0x30
 80057ca:	42bb      	cmp	r3, r7
 80057cc:	bf08      	it	eq
 80057ce:	f042 0201 	orreq.w	r2, r2, #1
 80057d2:	3730      	adds	r7, #48	; 0x30
 80057d4:	454b      	cmp	r3, r9
 80057d6:	bf08      	it	eq
 80057d8:	f042 0201 	orreq.w	r2, r2, #1
 80057dc:	f109 0930 	add.w	r9, r9, #48	; 0x30
 80057e0:	42bb      	cmp	r3, r7
 80057e2:	bf08      	it	eq
 80057e4:	f042 0201 	orreq.w	r2, r2, #1
 80057e8:	3730      	adds	r7, #48	; 0x30
 80057ea:	454b      	cmp	r3, r9
 80057ec:	bf08      	it	eq
 80057ee:	f042 0201 	orreq.w	r2, r2, #1
 80057f2:	42bb      	cmp	r3, r7
 80057f4:	bf08      	it	eq
 80057f6:	f042 0201 	orreq.w	r2, r2, #1
 80057fa:	b91a      	cbnz	r2, 8005804 <HAL_DMA_IRQHandler+0x250>
 80057fc:	4a18      	ldr	r2, [pc, #96]	; (8005860 <HAL_DMA_IRQHandler+0x2ac>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	f040 81b4 	bne.w	8005b6c <HAL_DMA_IRQHandler+0x5b8>
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	0792      	lsls	r2, r2, #30
 8005808:	d505      	bpl.n	8005816 <HAL_DMA_IRQHandler+0x262>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800580a:	f8c8 c008 	str.w	ip, [r8, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800580e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005810:	f042 0204 	orr.w	r2, r2, #4
 8005814:	6562      	str	r2, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005816:	f1be 0f00 	cmp.w	lr, #0
 800581a:	d06d      	beq.n	80058f8 <HAL_DMA_IRQHandler+0x344>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800581c:	2e00      	cmp	r6, #0
 800581e:	d155      	bne.n	80058cc <HAL_DMA_IRQHandler+0x318>
 8005820:	4a10      	ldr	r2, [pc, #64]	; (8005864 <HAL_DMA_IRQHandler+0x2b0>)
 8005822:	4f0d      	ldr	r7, [pc, #52]	; (8005858 <HAL_DMA_IRQHandler+0x2a4>)
 8005824:	4e0d      	ldr	r6, [pc, #52]	; (800585c <HAL_DMA_IRQHandler+0x2a8>)
 8005826:	42bb      	cmp	r3, r7
 8005828:	bf18      	it	ne
 800582a:	4293      	cmpne	r3, r2
 800582c:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8005830:	bf0c      	ite	eq
 8005832:	2201      	moveq	r2, #1
 8005834:	2200      	movne	r2, #0
 8005836:	42b3      	cmp	r3, r6
 8005838:	bf08      	it	eq
 800583a:	f042 0201 	orreq.w	r2, r2, #1
 800583e:	3630      	adds	r6, #48	; 0x30
 8005840:	42bb      	cmp	r3, r7
 8005842:	bf08      	it	eq
 8005844:	f042 0201 	orreq.w	r2, r2, #1
 8005848:	3730      	adds	r7, #48	; 0x30
 800584a:	e00d      	b.n	8005868 <HAL_DMA_IRQHandler+0x2b4>
 800584c:	240001f8 	.word	0x240001f8
 8005850:	40020010 	.word	0x40020010
 8005854:	40020028 	.word	0x40020028
 8005858:	40020058 	.word	0x40020058
 800585c:	40020070 	.word	0x40020070
 8005860:	400204b8 	.word	0x400204b8
 8005864:	40020040 	.word	0x40020040
 8005868:	42b3      	cmp	r3, r6
 800586a:	bf08      	it	eq
 800586c:	f042 0201 	orreq.w	r2, r2, #1
 8005870:	f506 765c 	add.w	r6, r6, #880	; 0x370
 8005874:	42bb      	cmp	r3, r7
 8005876:	bf08      	it	eq
 8005878:	f042 0201 	orreq.w	r2, r2, #1
 800587c:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8005880:	42b3      	cmp	r3, r6
 8005882:	bf08      	it	eq
 8005884:	f042 0201 	orreq.w	r2, r2, #1
 8005888:	3630      	adds	r6, #48	; 0x30
 800588a:	42bb      	cmp	r3, r7
 800588c:	bf08      	it	eq
 800588e:	f042 0201 	orreq.w	r2, r2, #1
 8005892:	3730      	adds	r7, #48	; 0x30
 8005894:	42b3      	cmp	r3, r6
 8005896:	bf08      	it	eq
 8005898:	f042 0201 	orreq.w	r2, r2, #1
 800589c:	3630      	adds	r6, #48	; 0x30
 800589e:	42bb      	cmp	r3, r7
 80058a0:	bf08      	it	eq
 80058a2:	f042 0201 	orreq.w	r2, r2, #1
 80058a6:	3730      	adds	r7, #48	; 0x30
 80058a8:	42b3      	cmp	r3, r6
 80058aa:	bf08      	it	eq
 80058ac:	f042 0201 	orreq.w	r2, r2, #1
 80058b0:	3630      	adds	r6, #48	; 0x30
 80058b2:	42bb      	cmp	r3, r7
 80058b4:	bf08      	it	eq
 80058b6:	f042 0201 	orreq.w	r2, r2, #1
 80058ba:	42b3      	cmp	r3, r6
 80058bc:	bf08      	it	eq
 80058be:	f042 0201 	orreq.w	r2, r2, #1
 80058c2:	b91a      	cbnz	r2, 80058cc <HAL_DMA_IRQHandler+0x318>
 80058c4:	4aa0      	ldr	r2, [pc, #640]	; (8005b48 <HAL_DMA_IRQHandler+0x594>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	f040 813a 	bne.w	8005b40 <HAL_DMA_IRQHandler+0x58c>
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80058d2:	b18a      	cbz	r2, 80058f8 <HAL_DMA_IRQHandler+0x344>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058d4:	f8c8 0008 	str.w	r0, [r8, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	0357      	lsls	r7, r2, #13
 80058dc:	f100 80f7 	bmi.w	8005ace <HAL_DMA_IRQHandler+0x51a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	05d0      	lsls	r0, r2, #23
 80058e4:	d403      	bmi.n	80058ee <HAL_DMA_IRQHandler+0x33a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	f022 0208 	bic.w	r2, r2, #8
 80058ec:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80058ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058f0:	b113      	cbz	r3, 80058f8 <HAL_DMA_IRQHandler+0x344>
            hdma->XferHalfCpltCallback(hdma);
 80058f2:	4620      	mov	r0, r4
 80058f4:	4798      	blx	r3
 80058f6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058f8:	f001 011f 	and.w	r1, r1, #31
 80058fc:	2220      	movs	r2, #32
 80058fe:	408a      	lsls	r2, r1
 8005900:	422a      	tst	r2, r5
 8005902:	d069      	beq.n	80059d8 <HAL_DMA_IRQHandler+0x424>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005904:	6820      	ldr	r0, [r4, #0]
 8005906:	4b91      	ldr	r3, [pc, #580]	; (8005b4c <HAL_DMA_IRQHandler+0x598>)
 8005908:	4e91      	ldr	r6, [pc, #580]	; (8005b50 <HAL_DMA_IRQHandler+0x59c>)
 800590a:	4d92      	ldr	r5, [pc, #584]	; (8005b54 <HAL_DMA_IRQHandler+0x5a0>)
 800590c:	42b0      	cmp	r0, r6
 800590e:	bf18      	it	ne
 8005910:	4298      	cmpne	r0, r3
 8005912:	f106 0630 	add.w	r6, r6, #48	; 0x30
 8005916:	bf0c      	ite	eq
 8005918:	2301      	moveq	r3, #1
 800591a:	2300      	movne	r3, #0
 800591c:	42a8      	cmp	r0, r5
 800591e:	bf08      	it	eq
 8005920:	f043 0301 	orreq.w	r3, r3, #1
 8005924:	3530      	adds	r5, #48	; 0x30
 8005926:	42b0      	cmp	r0, r6
 8005928:	bf08      	it	eq
 800592a:	f043 0301 	orreq.w	r3, r3, #1
 800592e:	3630      	adds	r6, #48	; 0x30
 8005930:	42a8      	cmp	r0, r5
 8005932:	bf08      	it	eq
 8005934:	f043 0301 	orreq.w	r3, r3, #1
 8005938:	3530      	adds	r5, #48	; 0x30
 800593a:	42b0      	cmp	r0, r6
 800593c:	bf08      	it	eq
 800593e:	f043 0301 	orreq.w	r3, r3, #1
 8005942:	3630      	adds	r6, #48	; 0x30
 8005944:	42a8      	cmp	r0, r5
 8005946:	bf08      	it	eq
 8005948:	f043 0301 	orreq.w	r3, r3, #1
 800594c:	f505 755c 	add.w	r5, r5, #880	; 0x370
 8005950:	42b0      	cmp	r0, r6
 8005952:	bf08      	it	eq
 8005954:	f043 0301 	orreq.w	r3, r3, #1
 8005958:	f506 765c 	add.w	r6, r6, #880	; 0x370
 800595c:	42a8      	cmp	r0, r5
 800595e:	bf08      	it	eq
 8005960:	f043 0301 	orreq.w	r3, r3, #1
 8005964:	3530      	adds	r5, #48	; 0x30
 8005966:	42b0      	cmp	r0, r6
 8005968:	bf08      	it	eq
 800596a:	f043 0301 	orreq.w	r3, r3, #1
 800596e:	3630      	adds	r6, #48	; 0x30
 8005970:	42a8      	cmp	r0, r5
 8005972:	bf08      	it	eq
 8005974:	f043 0301 	orreq.w	r3, r3, #1
 8005978:	3530      	adds	r5, #48	; 0x30
 800597a:	42b0      	cmp	r0, r6
 800597c:	bf08      	it	eq
 800597e:	f043 0301 	orreq.w	r3, r3, #1
 8005982:	3630      	adds	r6, #48	; 0x30
 8005984:	42a8      	cmp	r0, r5
 8005986:	bf08      	it	eq
 8005988:	f043 0301 	orreq.w	r3, r3, #1
 800598c:	3530      	adds	r5, #48	; 0x30
 800598e:	42b0      	cmp	r0, r6
 8005990:	bf08      	it	eq
 8005992:	f043 0301 	orreq.w	r3, r3, #1
 8005996:	42a8      	cmp	r0, r5
 8005998:	bf08      	it	eq
 800599a:	f043 0301 	orreq.w	r3, r3, #1
 800599e:	b91b      	cbnz	r3, 80059a8 <HAL_DMA_IRQHandler+0x3f4>
 80059a0:	4b69      	ldr	r3, [pc, #420]	; (8005b48 <HAL_DMA_IRQHandler+0x594>)
 80059a2:	4298      	cmp	r0, r3
 80059a4:	f040 8121 	bne.w	8005bea <HAL_DMA_IRQHandler+0x636>
 80059a8:	6803      	ldr	r3, [r0, #0]
 80059aa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80059ae:	b19b      	cbz	r3, 80059d8 <HAL_DMA_IRQHandler+0x424>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059b0:	f8c8 2008 	str.w	r2, [r8, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80059b4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80059b8:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059ba:	6803      	ldr	r3, [r0, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80059bc:	f000 8090 	beq.w	8005ae0 <HAL_DMA_IRQHandler+0x52c>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80059c0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80059c4:	6803      	ldr	r3, [r0, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80059c6:	f000 80a8 	beq.w	8005b1a <HAL_DMA_IRQHandler+0x566>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80059ca:	0319      	lsls	r1, r3, #12
 80059cc:	f140 80b3 	bpl.w	8005b36 <HAL_DMA_IRQHandler+0x582>
          if(hdma->XferCpltCallback != NULL)
 80059d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80059d2:	b10b      	cbz	r3, 80059d8 <HAL_DMA_IRQHandler+0x424>
            hdma->XferCpltCallback(hdma);
 80059d4:	4620      	mov	r0, r4
 80059d6:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80059d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d074      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0x514>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80059de:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80059e0:	07da      	lsls	r2, r3, #31
 80059e2:	d51f      	bpl.n	8005a24 <HAL_DMA_IRQHandler+0x470>
        __HAL_DMA_DISABLE(hdma);
 80059e4:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 80059e6:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
 80059e8:	495b      	ldr	r1, [pc, #364]	; (8005b58 <HAL_DMA_IRQHandler+0x5a4>)
        hdma->State = HAL_DMA_STATE_ABORT;
 80059ea:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 80059ee:	6813      	ldr	r3, [r2, #0]
 80059f0:	f023 0301 	bic.w	r3, r3, #1
 80059f4:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80059f6:	9b01      	ldr	r3, [sp, #4]
 80059f8:	fba1 3103 	umull	r3, r1, r1, r3
 80059fc:	0a89      	lsrs	r1, r1, #10
 80059fe:	e002      	b.n	8005a06 <HAL_DMA_IRQHandler+0x452>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005a00:	6813      	ldr	r3, [r2, #0]
 8005a02:	07db      	lsls	r3, r3, #31
 8005a04:	d504      	bpl.n	8005a10 <HAL_DMA_IRQHandler+0x45c>
          if (++count > timeout)
 8005a06:	9b03      	ldr	r3, [sp, #12]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	428b      	cmp	r3, r1
 8005a0c:	9303      	str	r3, [sp, #12]
 8005a0e:	d9f7      	bls.n	8005a00 <HAL_DMA_IRQHandler+0x44c>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005a10:	6813      	ldr	r3, [r2, #0]
        __HAL_UNLOCK(hdma);
 8005a12:	2200      	movs	r2, #0
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005a14:	07df      	lsls	r7, r3, #31
        __HAL_UNLOCK(hdma);
 8005a16:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_ERROR;
 8005a1a:	bf4c      	ite	mi
 8005a1c:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8005a1e:	2301      	movpl	r3, #1
 8005a20:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 8005a24:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d04e      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0x514>
        hdma->XferErrorCallback(hdma);
 8005a2a:	4620      	mov	r0, r4
}
 8005a2c:	b005      	add	sp, #20
 8005a2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        hdma->XferErrorCallback(hdma);
 8005a32:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005a34:	681c      	ldr	r4, [r3, #0]
 8005a36:	0764      	lsls	r4, r4, #29
 8005a38:	f57f ae24 	bpl.w	8005684 <HAL_DMA_IRQHandler+0xd0>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005a3c:	681c      	ldr	r4, [r3, #0]
 8005a3e:	f024 0404 	bic.w	r4, r4, #4
 8005a42:	601c      	str	r4, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a44:	f8c8 2008 	str.w	r2, [r8, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005a48:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8005a4a:	f042 0201 	orr.w	r2, r2, #1
 8005a4e:	6542      	str	r2, [r0, #84]	; 0x54
 8005a50:	e618      	b.n	8005684 <HAL_DMA_IRQHandler+0xd0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005a52:	4a42      	ldr	r2, [pc, #264]	; (8005b5c <HAL_DMA_IRQHandler+0x5a8>)
 8005a54:	4d42      	ldr	r5, [pc, #264]	; (8005b60 <HAL_DMA_IRQHandler+0x5ac>)
 8005a56:	4c43      	ldr	r4, [pc, #268]	; (8005b64 <HAL_DMA_IRQHandler+0x5b0>)
 8005a58:	42ab      	cmp	r3, r5
 8005a5a:	bf18      	it	ne
 8005a5c:	4293      	cmpne	r3, r2
 8005a5e:	f105 0528 	add.w	r5, r5, #40	; 0x28
 8005a62:	bf0c      	ite	eq
 8005a64:	2201      	moveq	r2, #1
 8005a66:	2200      	movne	r2, #0
 8005a68:	42a3      	cmp	r3, r4
 8005a6a:	bf08      	it	eq
 8005a6c:	f042 0201 	orreq.w	r2, r2, #1
 8005a70:	3428      	adds	r4, #40	; 0x28
 8005a72:	42ab      	cmp	r3, r5
 8005a74:	bf08      	it	eq
 8005a76:	f042 0201 	orreq.w	r2, r2, #1
 8005a7a:	3528      	adds	r5, #40	; 0x28
 8005a7c:	42a3      	cmp	r3, r4
 8005a7e:	bf08      	it	eq
 8005a80:	f042 0201 	orreq.w	r2, r2, #1
 8005a84:	3428      	adds	r4, #40	; 0x28
 8005a86:	42ab      	cmp	r3, r5
 8005a88:	bf08      	it	eq
 8005a8a:	f042 0201 	orreq.w	r2, r2, #1
 8005a8e:	42a3      	cmp	r3, r4
 8005a90:	bf08      	it	eq
 8005a92:	f042 0201 	orreq.w	r2, r2, #1
 8005a96:	b912      	cbnz	r2, 8005a9e <HAL_DMA_IRQHandler+0x4ea>
 8005a98:	4a33      	ldr	r2, [pc, #204]	; (8005b68 <HAL_DMA_IRQHandler+0x5b4>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d114      	bne.n	8005ac8 <HAL_DMA_IRQHandler+0x514>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005a9e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8005aa0:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005aa2:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005aa4:	f004 041f 	and.w	r4, r4, #31
 8005aa8:	40a5      	lsls	r5, r4
 8005aaa:	420d      	tst	r5, r1
 8005aac:	d068      	beq.n	8005b80 <HAL_DMA_IRQHandler+0x5cc>
 8005aae:	0756      	lsls	r6, r2, #29
 8005ab0:	d566      	bpl.n	8005b80 <HAL_DMA_IRQHandler+0x5cc>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ab2:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005ab4:	f8c8 5004 	str.w	r5, [r8, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ab8:	f140 80ac 	bpl.w	8005c14 <HAL_DMA_IRQHandler+0x660>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005abc:	03d3      	lsls	r3, r2, #15
 8005abe:	f100 80af 	bmi.w	8005c20 <HAL_DMA_IRQHandler+0x66c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ac2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1b1      	bne.n	8005a2c <HAL_DMA_IRQHandler+0x478>
}
 8005ac8:	b005      	add	sp, #20
 8005aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	031e      	lsls	r6, r3, #12
 8005ad2:	f57f af0c 	bpl.w	80058ee <HAL_DMA_IRQHandler+0x33a>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005ad6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f47f af0a 	bne.w	80058f2 <HAL_DMA_IRQHandler+0x33e>
 8005ade:	e70b      	b.n	80058f8 <HAL_DMA_IRQHandler+0x344>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ae0:	f023 0316 	bic.w	r3, r3, #22
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ae4:	6c22      	ldr	r2, [r4, #64]	; 0x40
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ae6:	6003      	str	r3, [r0, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005ae8:	6943      	ldr	r3, [r0, #20]
 8005aea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aee:	6143      	str	r3, [r0, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005af0:	2a00      	cmp	r2, #0
 8005af2:	d041      	beq.n	8005b78 <HAL_DMA_IRQHandler+0x5c4>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005af4:	6803      	ldr	r3, [r0, #0]
 8005af6:	f023 0308 	bic.w	r3, r3, #8
 8005afa:	6003      	str	r3, [r0, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005afc:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 8005afe:	2000      	movs	r0, #0
          hdma->State = HAL_DMA_STATE_READY;
 8005b00:	2201      	movs	r2, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b02:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 8005b06:	6d23      	ldr	r3, [r4, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b08:	f8c8 1008 	str.w	r1, [r8, #8]
          __HAL_UNLOCK(hdma);
 8005b0c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8005b10:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d188      	bne.n	8005a2a <HAL_DMA_IRQHandler+0x476>
 8005b18:	e7d6      	b.n	8005ac8 <HAL_DMA_IRQHandler+0x514>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b1a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8005b1e:	f47f af57 	bne.w	80059d0 <HAL_DMA_IRQHandler+0x41c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005b22:	6802      	ldr	r2, [r0, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8005b24:	2101      	movs	r1, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005b26:	f022 0210 	bic.w	r2, r2, #16
 8005b2a:	6002      	str	r2, [r0, #0]
            __HAL_UNLOCK(hdma);
 8005b2c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8005b30:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
 8005b34:	e74c      	b.n	80059d0 <HAL_DMA_IRQHandler+0x41c>
            if(hdma->XferM1CpltCallback != NULL)
 8005b36:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f47f af4b 	bne.w	80059d4 <HAL_DMA_IRQHandler+0x420>
 8005b3e:	e74b      	b.n	80059d8 <HAL_DMA_IRQHandler+0x424>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8005b46:	e6c4      	b.n	80058d2 <HAL_DMA_IRQHandler+0x31e>
 8005b48:	400204b8 	.word	0x400204b8
 8005b4c:	40020010 	.word	0x40020010
 8005b50:	40020028 	.word	0x40020028
 8005b54:	40020040 	.word	0x40020040
 8005b58:	1b4e81b5 	.word	0x1b4e81b5
 8005b5c:	58025408 	.word	0x58025408
 8005b60:	5802541c 	.word	0x5802541c
 8005b64:	58025430 	.word	0x58025430
 8005b68:	58025494 	.word	0x58025494
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005b6c:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b6e:	f1be 0f00 	cmp.w	lr, #0
 8005b72:	f43f aec1 	beq.w	80058f8 <HAL_DMA_IRQHandler+0x344>
 8005b76:	e653      	b.n	8005820 <HAL_DMA_IRQHandler+0x26c>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b78:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1ba      	bne.n	8005af4 <HAL_DMA_IRQHandler+0x540>
 8005b7e:	e7bd      	b.n	8005afc <HAL_DMA_IRQHandler+0x548>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005b80:	2502      	movs	r5, #2
 8005b82:	40a5      	lsls	r5, r4
 8005b84:	420d      	tst	r5, r1
 8005b86:	d00c      	beq.n	8005ba2 <HAL_DMA_IRQHandler+0x5ee>
 8005b88:	0796      	lsls	r6, r2, #30
 8005b8a:	d50a      	bpl.n	8005ba2 <HAL_DMA_IRQHandler+0x5ee>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b8c:	0414      	lsls	r4, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005b8e:	f8c8 5004 	str.w	r5, [r8, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005b92:	d52e      	bpl.n	8005bf2 <HAL_DMA_IRQHandler+0x63e>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005b94:	03d1      	lsls	r1, r2, #15
 8005b96:	d438      	bmi.n	8005c0a <HAL_DMA_IRQHandler+0x656>
          if(hdma->XferM1CpltCallback != NULL)
 8005b98:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f47f af46 	bne.w	8005a2c <HAL_DMA_IRQHandler+0x478>
 8005ba0:	e792      	b.n	8005ac8 <HAL_DMA_IRQHandler+0x514>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005ba2:	2508      	movs	r5, #8
 8005ba4:	40a5      	lsls	r5, r4
 8005ba6:	420d      	tst	r5, r1
 8005ba8:	d08e      	beq.n	8005ac8 <HAL_DMA_IRQHandler+0x514>
 8005baa:	0712      	lsls	r2, r2, #28
 8005bac:	d58c      	bpl.n	8005ac8 <HAL_DMA_IRQHandler+0x514>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bae:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005bb0:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8005bb2:	2500      	movs	r5, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bb4:	f021 010e 	bic.w	r1, r1, #14
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005bb8:	fa02 f404 	lsl.w	r4, r2, r4
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bbc:	6019      	str	r1, [r3, #0]
      if (hdma->XferErrorCallback != NULL)
 8005bbe:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005bc0:	f8c8 4004 	str.w	r4, [r8, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005bc4:	6542      	str	r2, [r0, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8005bc6:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005bca:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f47f af2c 	bne.w	8005a2c <HAL_DMA_IRQHandler+0x478>
 8005bd4:	e778      	b.n	8005ac8 <HAL_DMA_IRQHandler+0x514>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005bd6:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005bd8:	f1b9 0f00 	cmp.w	r9, #0
 8005bdc:	f47f adc7 	bne.w	800576e <HAL_DMA_IRQHandler+0x1ba>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005be0:	f1be 0f00 	cmp.w	lr, #0
 8005be4:	f43f ae88 	beq.w	80058f8 <HAL_DMA_IRQHandler+0x344>
 8005be8:	e618      	b.n	800581c <HAL_DMA_IRQHandler+0x268>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005bea:	6803      	ldr	r3, [r0, #0]
 8005bec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005bf0:	e6dd      	b.n	80059ae <HAL_DMA_IRQHandler+0x3fa>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005bf2:	f012 0220 	ands.w	r2, r2, #32
 8005bf6:	d108      	bne.n	8005c0a <HAL_DMA_IRQHandler+0x656>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005bf8:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005bfa:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005bfc:	f021 010a 	bic.w	r1, r1, #10
 8005c00:	6019      	str	r1, [r3, #0]
          __HAL_UNLOCK(hdma);
 8005c02:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8005c06:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8005c0a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f47f af0d 	bne.w	8005a2c <HAL_DMA_IRQHandler+0x478>
 8005c12:	e759      	b.n	8005ac8 <HAL_DMA_IRQHandler+0x514>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005c14:	0697      	lsls	r7, r2, #26
 8005c16:	d403      	bmi.n	8005c20 <HAL_DMA_IRQHandler+0x66c>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	f022 0204 	bic.w	r2, r2, #4
 8005c1e:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8005c20:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f47f af02 	bne.w	8005a2c <HAL_DMA_IRQHandler+0x478>
 8005c28:	e74e      	b.n	8005ac8 <HAL_DMA_IRQHandler+0x514>
 8005c2a:	bf00      	nop

08005c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c30:	468e      	mov	lr, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c32:	6809      	ldr	r1, [r1, #0]
{
 8005c34:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c36:	2900      	cmp	r1, #0
 8005c38:	f000 80cd 	beq.w	8005dd6 <HAL_GPIO_Init+0x1aa>
  uint32_t position = 0x00U;
 8005c3c:	2600      	movs	r6, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005c3e:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8005e54 <HAL_GPIO_Init+0x228>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c42:	2301      	movs	r3, #1
 8005c44:	40b3      	lsls	r3, r6
    if (iocurrent != 0x00U)
 8005c46:	ea13 0501 	ands.w	r5, r3, r1
 8005c4a:	f000 80bf 	beq.w	8005dcc <HAL_GPIO_Init+0x1a0>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005c4e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8005c52:	0077      	lsls	r7, r6, #1
 8005c54:	f04f 0c03 	mov.w	ip, #3
 8005c58:	f022 0910 	bic.w	r9, r2, #16
 8005c5c:	fa0c fc07 	lsl.w	ip, ip, r7
 8005c60:	f109 34ff 	add.w	r4, r9, #4294967295
 8005c64:	ea6f 0c0c 	mvn.w	ip, ip
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c68:	2c01      	cmp	r4, #1
 8005c6a:	d812      	bhi.n	8005c92 <HAL_GPIO_Init+0x66>
        temp = GPIOx->OSPEEDR;
 8005c6c:	6884      	ldr	r4, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005c6e:	f3c2 1a00 	ubfx	sl, r2, #4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c72:	ea04 0b0c 	and.w	fp, r4, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c76:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005c7a:	fa0a fa06 	lsl.w	sl, sl, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c7e:	40bc      	lsls	r4, r7
 8005c80:	ea44 040b 	orr.w	r4, r4, fp
        GPIOx->OSPEEDR = temp;
 8005c84:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8005c86:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c88:	ea24 0303 	bic.w	r3, r4, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005c8c:	ea4a 0303 	orr.w	r3, sl, r3
        GPIOx->OTYPER = temp;
 8005c90:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8005c92:	68c3      	ldr	r3, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005c94:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c98:	f8de 4008 	ldr.w	r4, [lr, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c9c:	ea03 030c 	and.w	r3, r3, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ca0:	fa04 f407 	lsl.w	r4, r4, r7
 8005ca4:	ea44 0403 	orr.w	r4, r4, r3
      GPIOx->PUPDR = temp;
 8005ca8:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005caa:	d115      	bne.n	8005cd8 <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3U];
 8005cac:	08f3      	lsrs	r3, r6, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005cae:	f006 0907 	and.w	r9, r6, #7
 8005cb2:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005cb6:	f8de 4010 	ldr.w	r4, [lr, #16]
 8005cba:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005cbe:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8005cc2:	f8d3 a020 	ldr.w	sl, [r3, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005cc6:	fa0b fb09 	lsl.w	fp, fp, r9
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005cca:	fa04 f409 	lsl.w	r4, r4, r9
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005cce:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005cd2:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 8005cd6:	621c      	str	r4, [r3, #32]
      temp = GPIOx->MODER;
 8005cd8:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005cda:	f002 0303 	and.w	r3, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005cde:	ea04 0c0c 	and.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ce2:	40bb      	lsls	r3, r7
 8005ce4:	ea43 030c 	orr.w	r3, r3, ip
      GPIOx->MODER = temp;
 8005ce8:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005cea:	00d3      	lsls	r3, r2, #3
 8005cec:	d56e      	bpl.n	8005dcc <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cee:	4b53      	ldr	r3, [pc, #332]	; (8005e3c <HAL_GPIO_Init+0x210>)
 8005cf0:	f026 0903 	bic.w	r9, r6, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005cf4:	240f      	movs	r4, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cf6:	f8d3 70f4 	ldr.w	r7, [r3, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005cfa:	f006 0303 	and.w	r3, r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cfe:	f047 0c02 	orr.w	ip, r7, #2
 8005d02:	4f4f      	ldr	r7, [pc, #316]	; (8005e40 <HAL_GPIO_Init+0x214>)
 8005d04:	444f      	add	r7, r9
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d06:	ea4f 0983 	mov.w	r9, r3, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d0a:	4b4c      	ldr	r3, [pc, #304]	; (8005e3c <HAL_GPIO_Init+0x210>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d0c:	fa04 f409 	lsl.w	r4, r4, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d10:	f8c3 c0f4 	str.w	ip, [r3, #244]	; 0xf4
 8005d14:	f8d3 c0f4 	ldr.w	ip, [r3, #244]	; 0xf4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d18:	f5a3 4388 	sub.w	r3, r3, #17408	; 0x4400
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d1c:	f00c 0c02 	and.w	ip, ip, #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d20:	4298      	cmp	r0, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d22:	f8cd c004 	str.w	ip, [sp, #4]
 8005d26:	f8dd c004 	ldr.w	ip, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005d2a:	f8d7 c008 	ldr.w	ip, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d2e:	ea2c 0404 	bic.w	r4, ip, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d32:	d026      	beq.n	8005d82 <HAL_GPIO_Init+0x156>
 8005d34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d38:	4298      	cmp	r0, r3
 8005d3a:	d055      	beq.n	8005de8 <HAL_GPIO_Init+0x1bc>
 8005d3c:	4b41      	ldr	r3, [pc, #260]	; (8005e44 <HAL_GPIO_Init+0x218>)
 8005d3e:	4298      	cmp	r0, r3
 8005d40:	d04c      	beq.n	8005ddc <HAL_GPIO_Init+0x1b0>
 8005d42:	4b41      	ldr	r3, [pc, #260]	; (8005e48 <HAL_GPIO_Init+0x21c>)
 8005d44:	4298      	cmp	r0, r3
 8005d46:	d05b      	beq.n	8005e00 <HAL_GPIO_Init+0x1d4>
 8005d48:	4b40      	ldr	r3, [pc, #256]	; (8005e4c <HAL_GPIO_Init+0x220>)
 8005d4a:	4298      	cmp	r0, r3
 8005d4c:	d05e      	beq.n	8005e0c <HAL_GPIO_Init+0x1e0>
 8005d4e:	4b40      	ldr	r3, [pc, #256]	; (8005e50 <HAL_GPIO_Init+0x224>)
 8005d50:	4298      	cmp	r0, r3
 8005d52:	d04f      	beq.n	8005df4 <HAL_GPIO_Init+0x1c8>
 8005d54:	f8df c100 	ldr.w	ip, [pc, #256]	; 8005e58 <HAL_GPIO_Init+0x22c>
 8005d58:	4560      	cmp	r0, ip
 8005d5a:	d05d      	beq.n	8005e18 <HAL_GPIO_Init+0x1ec>
 8005d5c:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8005e5c <HAL_GPIO_Init+0x230>
 8005d60:	4560      	cmp	r0, ip
 8005d62:	d05f      	beq.n	8005e24 <HAL_GPIO_Init+0x1f8>
 8005d64:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8005e60 <HAL_GPIO_Init+0x234>
 8005d68:	4560      	cmp	r0, ip
 8005d6a:	d061      	beq.n	8005e30 <HAL_GPIO_Init+0x204>
 8005d6c:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8005e64 <HAL_GPIO_Init+0x238>
 8005d70:	4560      	cmp	r0, ip
 8005d72:	bf0c      	ite	eq
 8005d74:	f04f 0c09 	moveq.w	ip, #9
 8005d78:	f04f 0c0a 	movne.w	ip, #10
 8005d7c:	fa0c f309 	lsl.w	r3, ip, r9
 8005d80:	431c      	orrs	r4, r3
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d82:	60bc      	str	r4, [r7, #8]
        temp &= ~(iocurrent);
 8005d84:	43ec      	mvns	r4, r5
        temp = EXTI_CurrentCPU->IMR1;
 8005d86:	f8d8 3000 	ldr.w	r3, [r8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005d8a:	03d7      	lsls	r7, r2, #15
        {
          temp |= iocurrent;
 8005d8c:	bf4c      	ite	mi
 8005d8e:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 8005d90:	4023      	andpl	r3, r4
        }
        EXTI_CurrentCPU->IMR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005d92:	0397      	lsls	r7, r2, #14
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d94:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->IMR1 = temp;
 8005d98:	f8c8 3000 	str.w	r3, [r8]
        temp = EXTI_CurrentCPU->EMR1;
 8005d9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
          temp |= iocurrent;
 8005da0:	bf4c      	ite	mi
 8005da2:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 8005da4:	4023      	andpl	r3, r4
        EXTI_CurrentCPU->EMR1 = temp;
 8005da6:	f8c8 3004 	str.w	r3, [r8, #4]
        temp = EXTI->RTSR1;
 8005daa:	683b      	ldr	r3, [r7, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005dac:	02d7      	lsls	r7, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8005dae:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
          temp |= iocurrent;
 8005db2:	bf4c      	ite	mi
 8005db4:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 8005db6:	4023      	andpl	r3, r4

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005db8:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 8005dba:	603b      	str	r3, [r7, #0]
        temp = EXTI->FTSR1;
 8005dbc:	687b      	ldr	r3, [r7, #4]
        temp &= ~(iocurrent);
 8005dbe:	bf54      	ite	pl
 8005dc0:	ea04 0503 	andpl.w	r5, r4, r3
        {
          temp |= iocurrent;
 8005dc4:	431d      	orrmi	r5, r3
        }
        EXTI->FTSR1 = temp;
 8005dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dca:	605d      	str	r5, [r3, #4]
      }
    }

    position++;
 8005dcc:	3601      	adds	r6, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005dce:	fa31 f306 	lsrs.w	r3, r1, r6
 8005dd2:	f47f af36 	bne.w	8005c42 <HAL_GPIO_Init+0x16>
  }
}
 8005dd6:	b003      	add	sp, #12
 8005dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ddc:	f04f 0c02 	mov.w	ip, #2
 8005de0:	fa0c f309 	lsl.w	r3, ip, r9
 8005de4:	431c      	orrs	r4, r3
 8005de6:	e7cc      	b.n	8005d82 <HAL_GPIO_Init+0x156>
 8005de8:	f04f 0c01 	mov.w	ip, #1
 8005dec:	fa0c f309 	lsl.w	r3, ip, r9
 8005df0:	431c      	orrs	r4, r3
 8005df2:	e7c6      	b.n	8005d82 <HAL_GPIO_Init+0x156>
 8005df4:	f04f 0c05 	mov.w	ip, #5
 8005df8:	fa0c f309 	lsl.w	r3, ip, r9
 8005dfc:	431c      	orrs	r4, r3
 8005dfe:	e7c0      	b.n	8005d82 <HAL_GPIO_Init+0x156>
 8005e00:	f04f 0c03 	mov.w	ip, #3
 8005e04:	fa0c f309 	lsl.w	r3, ip, r9
 8005e08:	431c      	orrs	r4, r3
 8005e0a:	e7ba      	b.n	8005d82 <HAL_GPIO_Init+0x156>
 8005e0c:	f04f 0c04 	mov.w	ip, #4
 8005e10:	fa0c f309 	lsl.w	r3, ip, r9
 8005e14:	431c      	orrs	r4, r3
 8005e16:	e7b4      	b.n	8005d82 <HAL_GPIO_Init+0x156>
 8005e18:	f04f 0c06 	mov.w	ip, #6
 8005e1c:	fa0c f309 	lsl.w	r3, ip, r9
 8005e20:	431c      	orrs	r4, r3
 8005e22:	e7ae      	b.n	8005d82 <HAL_GPIO_Init+0x156>
 8005e24:	f04f 0c07 	mov.w	ip, #7
 8005e28:	fa0c f309 	lsl.w	r3, ip, r9
 8005e2c:	431c      	orrs	r4, r3
 8005e2e:	e7a8      	b.n	8005d82 <HAL_GPIO_Init+0x156>
 8005e30:	f04f 0c08 	mov.w	ip, #8
 8005e34:	fa0c f309 	lsl.w	r3, ip, r9
 8005e38:	431c      	orrs	r4, r3
 8005e3a:	e7a2      	b.n	8005d82 <HAL_GPIO_Init+0x156>
 8005e3c:	58024400 	.word	0x58024400
 8005e40:	58000400 	.word	0x58000400
 8005e44:	58020800 	.word	0x58020800
 8005e48:	58020c00 	.word	0x58020c00
 8005e4c:	58021000 	.word	0x58021000
 8005e50:	58021400 	.word	0x58021400
 8005e54:	58000080 	.word	0x58000080
 8005e58:	58021800 	.word	0x58021800
 8005e5c:	58021c00 	.word	0x58021c00
 8005e60:	58022000 	.word	0x58022000
 8005e64:	58022400 	.word	0x58022400

08005e68 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e68:	b902      	cbnz	r2, 8005e6c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005e6a:	0409      	lsls	r1, r1, #16
 8005e6c:	6181      	str	r1, [r0, #24]
  }
}
 8005e6e:	4770      	bx	lr

08005e70 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005e70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e74:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8005e78:	4201      	tst	r1, r0
 8005e7a:	d100      	bne.n	8005e7e <HAL_GPIO_EXTI_IRQHandler+0xe>
 8005e7c:	4770      	bx	lr
{
 8005e7e:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005e80:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005e84:	f7fb fa0a 	bl	800129c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005e88:	bd08      	pop	{r3, pc}
 8005e8a:	bf00      	nop

08005e8c <HAL_LPTIM_Init>:
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	d066      	beq.n	8005f5e <HAL_LPTIM_Init+0xd2>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8005e90:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
{
 8005e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8005e98:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005e9c:	4604      	mov	r4, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d03c      	beq.n	8005f1c <HAL_LPTIM_Init+0x90>
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	6960      	ldr	r0, [r4, #20]
 8005ea6:	68a2      	ldr	r2, [r4, #8]

  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005ea8:	f64f 7eff 	movw	lr, #65535	; 0xffff
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005eac:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 8005eb0:	6aa7      	ldr	r7, [r4, #40]	; 0x28
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005eb2:	e9d4 1500 	ldrd	r1, r5, [r4]
 8005eb6:	e9d4 6308 	ldrd	r6, r3, [r4, #32]
 8005eba:	2d01      	cmp	r5, #1
  tmpcfgr = hlptim->Instance->CFGR;
 8005ebc:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005ec0:	d026      	beq.n	8005f10 <HAL_LPTIM_Init+0x84>
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005ec2:	4570      	cmp	r0, lr
 8005ec4:	d001      	beq.n	8005eca <HAL_LPTIM_Init+0x3e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRIGSEL));
 8005ec6:	f42c 4c60 	bic.w	ip, ip, #57344	; 0xe000
  }
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8005eca:	bbb5      	cbnz	r5, 8005f3a <HAL_LPTIM_Init+0xae>
  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8005ecc:	4332      	orrs	r2, r6
 8005ece:	69e6      	ldr	r6, [r4, #28]
 8005ed0:	6925      	ldr	r5, [r4, #16]
 8005ed2:	4313      	orrs	r3, r2
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005ed4:	4a2e      	ldr	r2, [pc, #184]	; (8005f90 <HAL_LPTIM_Init+0x104>)
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8005ed6:	433b      	orrs	r3, r7
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005ed8:	ea0c 0202 	and.w	r2, ip, r2
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8005edc:	4333      	orrs	r3, r6
 8005ede:	432b      	orrs	r3, r5
 8005ee0:	4313      	orrs	r3, r2
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
  }

  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005ee2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ee6:	4290      	cmp	r0, r2
 8005ee8:	d002      	beq.n	8005ef0 <HAL_LPTIM_Init+0x64>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 8005eea:	69a2      	ldr	r2, [r4, #24]
 8005eec:	4310      	orrs	r0, r2
 8005eee:	4303      	orrs	r3, r0

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8005ef0:	4a28      	ldr	r2, [pc, #160]	; (8005f94 <HAL_LPTIM_Init+0x108>)
  hlptim->Instance->CFGR = tmpcfgr;
 8005ef2:	60cb      	str	r3, [r1, #12]
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8005ef4:	4291      	cmp	r1, r2
 8005ef6:	d016      	beq.n	8005f26 <HAL_LPTIM_Init+0x9a>
 8005ef8:	4b27      	ldr	r3, [pc, #156]	; (8005f98 <HAL_LPTIM_Init+0x10c>)
 8005efa:	4299      	cmp	r1, r3
 8005efc:	d013      	beq.n	8005f26 <HAL_LPTIM_Init+0x9a>
    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8005efe:	4b27      	ldr	r3, [pc, #156]	; (8005f9c <HAL_LPTIM_Init+0x110>)
 8005f00:	4299      	cmp	r1, r3
 8005f02:	d03c      	beq.n	8005f7e <HAL_LPTIM_Init+0xf2>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005f04:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 8005f06:	2000      	movs	r0, #0
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005f08:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8005f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005f10:	4570      	cmp	r0, lr
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
 8005f12:	f02c 0806 	bic.w	r8, ip, #6
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8005f16:	d024      	beq.n	8005f62 <HAL_LPTIM_Init+0xd6>
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
 8005f18:	46c4      	mov	ip, r8
 8005f1a:	e7d4      	b.n	8005ec6 <HAL_LPTIM_Init+0x3a>
    hlptim->Lock = HAL_UNLOCKED;
 8005f1c:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    HAL_LPTIM_MspInit(hlptim);
 8005f20:	f7fd fb54 	bl	80035cc <HAL_LPTIM_MspInit>
 8005f24:	e7bd      	b.n	8005ea2 <HAL_LPTIM_Init+0x16>
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8005f26:	e9d4 320b 	ldrd	r3, r2, [r4, #44]	; 0x2c
  return HAL_OK;
 8005f2a:	2000      	movs	r0, #0
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005f30:	2301      	movs	r3, #1
 8005f32:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8005f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005f3a:	432a      	orrs	r2, r5
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005f3c:	f8df e060 	ldr.w	lr, [pc, #96]	; 8005fa0 <HAL_LPTIM_Init+0x114>
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005f40:	2d01      	cmp	r5, #1
              hlptim->Init.Clock.Prescaler |
 8005f42:	ea42 0206 	orr.w	r2, r2, r6
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005f46:	ea0c 0e0e 	and.w	lr, ip, lr
              hlptim->Init.OutputPolarity  |
 8005f4a:	ea43 0302 	orr.w	r3, r3, r2
              hlptim->Init.UpdateMode      |
 8005f4e:	ea43 0307 	orr.w	r3, r3, r7
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005f52:	ea43 030e 	orr.w	r3, r3, lr
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8005f56:	d1c4      	bne.n	8005ee2 <HAL_LPTIM_Init+0x56>
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
 8005f58:	68e2      	ldr	r2, [r4, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	e7c1      	b.n	8005ee2 <HAL_LPTIM_Init+0x56>
    return HAL_ERROR;
 8005f5e:	2001      	movs	r0, #1
}
 8005f60:	4770      	bx	lr
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005f62:	f042 0501 	orr.w	r5, r2, #1
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005f66:	f8df e038 	ldr.w	lr, [pc, #56]	; 8005fa0 <HAL_LPTIM_Init+0x114>
              hlptim->Init.Clock.Prescaler |
 8005f6a:	ea45 0206 	orr.w	r2, r5, r6
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8005f6e:	ea0c 0e0e 	and.w	lr, ip, lr
              hlptim->Init.OutputPolarity  |
 8005f72:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8005f74:	ea42 0307 	orr.w	r3, r2, r7
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005f78:	ea43 030e 	orr.w	r3, r3, lr
 8005f7c:	e7ec      	b.n	8005f58 <HAL_LPTIM_Init+0xcc>
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8005f7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8005f80:	2000      	movs	r0, #0
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8005f82:	624b      	str	r3, [r1, #36]	; 0x24
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005f84:	2301      	movs	r3, #1
 8005f86:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8005f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f8e:	bf00      	nop
 8005f90:	ff19f120 	.word	0xff19f120
 8005f94:	40002400 	.word	0x40002400
 8005f98:	58002400 	.word	0x58002400
 8005f9c:	58002800 	.word	0x58002800
 8005fa0:	ff19f1f8 	.word	0xff19f1f8

08005fa4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005fa4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005fa6:	4b11      	ldr	r3, [pc, #68]	; (8005fec <HAL_PWREx_ConfigSupply+0x48>)
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	0752      	lsls	r2, r2, #29
 8005fac:	d406      	bmi.n	8005fbc <HAL_PWREx_ConfigSupply+0x18>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005fb4:	1a18      	subs	r0, r3, r0
 8005fb6:	bf18      	it	ne
 8005fb8:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8005fba:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005fbc:	68da      	ldr	r2, [r3, #12]
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005fbe:	461c      	mov	r4, r3
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005fc0:	f022 0207 	bic.w	r2, r2, #7
 8005fc4:	4310      	orrs	r0, r2
 8005fc6:	60d8      	str	r0, [r3, #12]
  tickstart = HAL_GetTick ();
 8005fc8:	f7fd fcce 	bl	8003968 <HAL_GetTick>
 8005fcc:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005fce:	e005      	b.n	8005fdc <HAL_PWREx_ConfigSupply+0x38>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005fd0:	f7fd fcca 	bl	8003968 <HAL_GetTick>
 8005fd4:	1b40      	subs	r0, r0, r5
 8005fd6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005fda:	d804      	bhi.n	8005fe6 <HAL_PWREx_ConfigSupply+0x42>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005fdc:	6863      	ldr	r3, [r4, #4]
 8005fde:	049b      	lsls	r3, r3, #18
 8005fe0:	d5f6      	bpl.n	8005fd0 <HAL_PWREx_ConfigSupply+0x2c>
  return HAL_OK;
 8005fe2:	2000      	movs	r0, #0
}
 8005fe4:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8005fe6:	2001      	movs	r0, #1
}
 8005fe8:	bd38      	pop	{r3, r4, r5, pc}
 8005fea:	bf00      	nop
 8005fec:	58024800 	.word	0x58024800

08005ff0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	f000 818f 	beq.w	8006314 <HAL_RCC_OscConfig+0x324>
{
 8005ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ff8:	6803      	ldr	r3, [r0, #0]
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	07d9      	lsls	r1, r3, #31
 8005ffe:	d533      	bpl.n	8006068 <HAL_RCC_OscConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006000:	49b1      	ldr	r1, [pc, #708]	; (80062c8 <HAL_RCC_OscConfig+0x2d8>)
 8006002:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006004:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006006:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800600a:	2a10      	cmp	r2, #16
 800600c:	f000 8107 	beq.w	800621e <HAL_RCC_OscConfig+0x22e>
 8006010:	2a18      	cmp	r2, #24
 8006012:	f000 80ff 	beq.w	8006214 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006016:	6863      	ldr	r3, [r4, #4]
 8006018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800601c:	d010      	beq.n	8006040 <HAL_RCC_OscConfig+0x50>
 800601e:	2b00      	cmp	r3, #0
 8006020:	f000 8161 	beq.w	80062e6 <HAL_RCC_OscConfig+0x2f6>
 8006024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006028:	4ba7      	ldr	r3, [pc, #668]	; (80062c8 <HAL_RCC_OscConfig+0x2d8>)
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	f000 81d1 	beq.w	80063d2 <HAL_RCC_OscConfig+0x3e2>
 8006030:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800603c:	601a      	str	r2, [r3, #0]
 800603e:	e004      	b.n	800604a <HAL_RCC_OscConfig+0x5a>
 8006040:	4aa1      	ldr	r2, [pc, #644]	; (80062c8 <HAL_RCC_OscConfig+0x2d8>)
 8006042:	6813      	ldr	r3, [r2, #0]
 8006044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006048:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800604a:	f7fd fc8d 	bl	8003968 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800604e:	4d9e      	ldr	r5, [pc, #632]	; (80062c8 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8006050:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006052:	e005      	b.n	8006060 <HAL_RCC_OscConfig+0x70>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006054:	f7fd fc88 	bl	8003968 <HAL_GetTick>
 8006058:	1b80      	subs	r0, r0, r6
 800605a:	2864      	cmp	r0, #100	; 0x64
 800605c:	f200 8141 	bhi.w	80062e2 <HAL_RCC_OscConfig+0x2f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006060:	682b      	ldr	r3, [r5, #0]
 8006062:	039f      	lsls	r7, r3, #14
 8006064:	d5f6      	bpl.n	8006054 <HAL_RCC_OscConfig+0x64>
 8006066:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006068:	0799      	lsls	r1, r3, #30
 800606a:	f100 808a 	bmi.w	8006182 <HAL_RCC_OscConfig+0x192>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800606e:	06d9      	lsls	r1, r3, #27
 8006070:	d530      	bpl.n	80060d4 <HAL_RCC_OscConfig+0xe4>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006072:	4a95      	ldr	r2, [pc, #596]	; (80062c8 <HAL_RCC_OscConfig+0x2d8>)
 8006074:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006076:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006078:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800607c:	2b08      	cmp	r3, #8
 800607e:	f000 80de 	beq.w	800623e <HAL_RCC_OscConfig+0x24e>
 8006082:	2b18      	cmp	r3, #24
 8006084:	f000 80d6 	beq.w	8006234 <HAL_RCC_OscConfig+0x244>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006088:	69e3      	ldr	r3, [r4, #28]
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 816a 	beq.w	8006364 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006090:	4b8d      	ldr	r3, [pc, #564]	; (80062c8 <HAL_RCC_OscConfig+0x2d8>)
 8006092:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006094:	461d      	mov	r5, r3
        __HAL_RCC_CSI_ENABLE();
 8006096:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800609a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800609c:	f7fd fc64 	bl	8003968 <HAL_GetTick>
 80060a0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060a2:	e005      	b.n	80060b0 <HAL_RCC_OscConfig+0xc0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80060a4:	f7fd fc60 	bl	8003968 <HAL_GetTick>
 80060a8:	1b80      	subs	r0, r0, r6
 80060aa:	2802      	cmp	r0, #2
 80060ac:	f200 8119 	bhi.w	80062e2 <HAL_RCC_OscConfig+0x2f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060b0:	682b      	ldr	r3, [r5, #0]
 80060b2:	05db      	lsls	r3, r3, #23
 80060b4:	d5f6      	bpl.n	80060a4 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060b6:	f7fd fc6f 	bl	8003998 <HAL_GetREVID>
 80060ba:	f241 0303 	movw	r3, #4099	; 0x1003
 80060be:	4298      	cmp	r0, r3
 80060c0:	f200 8241 	bhi.w	8006546 <HAL_RCC_OscConfig+0x556>
 80060c4:	686b      	ldr	r3, [r5, #4]
 80060c6:	6a22      	ldr	r2, [r4, #32]
 80060c8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80060cc:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80060d0:	606b      	str	r3, [r5, #4]
 80060d2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060d4:	071d      	lsls	r5, r3, #28
 80060d6:	d517      	bpl.n	8006108 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060d8:	6963      	ldr	r3, [r4, #20]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 811c 	beq.w	8006318 <HAL_RCC_OscConfig+0x328>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060e0:	4b79      	ldr	r3, [pc, #484]	; (80062c8 <HAL_RCC_OscConfig+0x2d8>)
 80060e2:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060e4:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 80060e6:	f042 0201 	orr.w	r2, r2, #1
 80060ea:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 80060ec:	f7fd fc3c 	bl	8003968 <HAL_GetTick>
 80060f0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80060f2:	e005      	b.n	8006100 <HAL_RCC_OscConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060f4:	f7fd fc38 	bl	8003968 <HAL_GetTick>
 80060f8:	1b80      	subs	r0, r0, r6
 80060fa:	2802      	cmp	r0, #2
 80060fc:	f200 80f1 	bhi.w	80062e2 <HAL_RCC_OscConfig+0x2f2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006100:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006102:	0798      	lsls	r0, r3, #30
 8006104:	d5f6      	bpl.n	80060f4 <HAL_RCC_OscConfig+0x104>
 8006106:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006108:	069a      	lsls	r2, r3, #26
 800610a:	d517      	bpl.n	800613c <HAL_RCC_OscConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800610c:	69a3      	ldr	r3, [r4, #24]
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 8115 	beq.w	800633e <HAL_RCC_OscConfig+0x34e>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006114:	4b6c      	ldr	r3, [pc, #432]	; (80062c8 <HAL_RCC_OscConfig+0x2d8>)
 8006116:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006118:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_ENABLE();
 800611a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800611e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006120:	f7fd fc22 	bl	8003968 <HAL_GetTick>
 8006124:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006126:	e005      	b.n	8006134 <HAL_RCC_OscConfig+0x144>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006128:	f7fd fc1e 	bl	8003968 <HAL_GetTick>
 800612c:	1b80      	subs	r0, r0, r6
 800612e:	2802      	cmp	r0, #2
 8006130:	f200 80d7 	bhi.w	80062e2 <HAL_RCC_OscConfig+0x2f2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006134:	682b      	ldr	r3, [r5, #0]
 8006136:	049f      	lsls	r7, r3, #18
 8006138:	d5f6      	bpl.n	8006128 <HAL_RCC_OscConfig+0x138>
 800613a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800613c:	0759      	lsls	r1, r3, #29
 800613e:	f100 8096 	bmi.w	800626e <HAL_RCC_OscConfig+0x27e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006142:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006144:	b1d8      	cbz	r0, 800617e <HAL_RCC_OscConfig+0x18e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006146:	4b60      	ldr	r3, [pc, #384]	; (80062c8 <HAL_RCC_OscConfig+0x2d8>)
 8006148:	691a      	ldr	r2, [r3, #16]
 800614a:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800614e:	2a18      	cmp	r2, #24
 8006150:	f000 81b1 	beq.w	80064b6 <HAL_RCC_OscConfig+0x4c6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006154:	2802      	cmp	r0, #2
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006156:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006158:	f000 8143 	beq.w	80063e2 <HAL_RCC_OscConfig+0x3f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800615c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006160:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 8006162:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006164:	f7fd fc00 	bl	8003968 <HAL_GetTick>
 8006168:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800616a:	e005      	b.n	8006178 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800616c:	f7fd fbfc 	bl	8003968 <HAL_GetTick>
 8006170:	1b40      	subs	r0, r0, r5
 8006172:	2802      	cmp	r0, #2
 8006174:	f200 80b5 	bhi.w	80062e2 <HAL_RCC_OscConfig+0x2f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	019b      	lsls	r3, r3, #6
 800617c:	d4f6      	bmi.n	800616c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800617e:	2000      	movs	r0, #0
}
 8006180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006182:	4a51      	ldr	r2, [pc, #324]	; (80062c8 <HAL_RCC_OscConfig+0x2d8>)
 8006184:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006186:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006188:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800618c:	d02b      	beq.n	80061e6 <HAL_RCC_OscConfig+0x1f6>
 800618e:	2b18      	cmp	r3, #24
 8006190:	d027      	beq.n	80061e2 <HAL_RCC_OscConfig+0x1f2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006192:	68e2      	ldr	r2, [r4, #12]
 8006194:	2a00      	cmp	r2, #0
 8006196:	f000 80f9 	beq.w	800638c <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800619a:	494b      	ldr	r1, [pc, #300]	; (80062c8 <HAL_RCC_OscConfig+0x2d8>)
 800619c:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800619e:	460d      	mov	r5, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80061a0:	f023 0319 	bic.w	r3, r3, #25
 80061a4:	4313      	orrs	r3, r2
 80061a6:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 80061a8:	f7fd fbde 	bl	8003968 <HAL_GetTick>
 80061ac:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061ae:	e005      	b.n	80061bc <HAL_RCC_OscConfig+0x1cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061b0:	f7fd fbda 	bl	8003968 <HAL_GetTick>
 80061b4:	1b80      	subs	r0, r0, r6
 80061b6:	2802      	cmp	r0, #2
 80061b8:	f200 8093 	bhi.w	80062e2 <HAL_RCC_OscConfig+0x2f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061bc:	682b      	ldr	r3, [r5, #0]
 80061be:	075f      	lsls	r7, r3, #29
 80061c0:	d5f6      	bpl.n	80061b0 <HAL_RCC_OscConfig+0x1c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061c2:	f7fd fbe9 	bl	8003998 <HAL_GetREVID>
 80061c6:	f241 0303 	movw	r3, #4099	; 0x1003
 80061ca:	6922      	ldr	r2, [r4, #16]
 80061cc:	4298      	cmp	r0, r3
 80061ce:	686b      	ldr	r3, [r5, #4]
 80061d0:	f200 81c2 	bhi.w	8006558 <HAL_RCC_OscConfig+0x568>
 80061d4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80061d8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80061dc:	606b      	str	r3, [r5, #4]
 80061de:	6823      	ldr	r3, [r4, #0]
 80061e0:	e745      	b.n	800606e <HAL_RCC_OscConfig+0x7e>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80061e2:	0792      	lsls	r2, r2, #30
 80061e4:	d1d5      	bne.n	8006192 <HAL_RCC_OscConfig+0x1a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061e6:	4b38      	ldr	r3, [pc, #224]	; (80062c8 <HAL_RCC_OscConfig+0x2d8>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	075b      	lsls	r3, r3, #29
 80061ec:	d501      	bpl.n	80061f2 <HAL_RCC_OscConfig+0x202>
 80061ee:	68e3      	ldr	r3, [r4, #12]
 80061f0:	b1f3      	cbz	r3, 8006230 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061f2:	f7fd fbd1 	bl	8003998 <HAL_GetREVID>
 80061f6:	f241 0303 	movw	r3, #4099	; 0x1003
 80061fa:	4a33      	ldr	r2, [pc, #204]	; (80062c8 <HAL_RCC_OscConfig+0x2d8>)
 80061fc:	4298      	cmp	r0, r3
 80061fe:	6921      	ldr	r1, [r4, #16]
 8006200:	6853      	ldr	r3, [r2, #4]
 8006202:	f200 80d7 	bhi.w	80063b4 <HAL_RCC_OscConfig+0x3c4>
 8006206:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800620a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800620e:	6053      	str	r3, [r2, #4]
 8006210:	6823      	ldr	r3, [r4, #0]
 8006212:	e72c      	b.n	800606e <HAL_RCC_OscConfig+0x7e>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006214:	f001 0103 	and.w	r1, r1, #3
 8006218:	2902      	cmp	r1, #2
 800621a:	f47f aefc 	bne.w	8006016 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800621e:	4a2a      	ldr	r2, [pc, #168]	; (80062c8 <HAL_RCC_OscConfig+0x2d8>)
 8006220:	6812      	ldr	r2, [r2, #0]
 8006222:	0392      	lsls	r2, r2, #14
 8006224:	f57f af20 	bpl.w	8006068 <HAL_RCC_OscConfig+0x78>
 8006228:	6862      	ldr	r2, [r4, #4]
 800622a:	2a00      	cmp	r2, #0
 800622c:	f47f af1c 	bne.w	8006068 <HAL_RCC_OscConfig+0x78>
        return HAL_ERROR;
 8006230:	2001      	movs	r0, #1
}
 8006232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006234:	f002 0203 	and.w	r2, r2, #3
 8006238:	2a01      	cmp	r2, #1
 800623a:	f47f af25 	bne.w	8006088 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800623e:	4b22      	ldr	r3, [pc, #136]	; (80062c8 <HAL_RCC_OscConfig+0x2d8>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	05da      	lsls	r2, r3, #23
 8006244:	d502      	bpl.n	800624c <HAL_RCC_OscConfig+0x25c>
 8006246:	69e3      	ldr	r3, [r4, #28]
 8006248:	2b80      	cmp	r3, #128	; 0x80
 800624a:	d1f1      	bne.n	8006230 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800624c:	f7fd fba4 	bl	8003998 <HAL_GetREVID>
 8006250:	f241 0303 	movw	r3, #4099	; 0x1003
 8006254:	4a1c      	ldr	r2, [pc, #112]	; (80062c8 <HAL_RCC_OscConfig+0x2d8>)
 8006256:	4298      	cmp	r0, r3
 8006258:	6a21      	ldr	r1, [r4, #32]
 800625a:	f200 80b2 	bhi.w	80063c2 <HAL_RCC_OscConfig+0x3d2>
 800625e:	6853      	ldr	r3, [r2, #4]
 8006260:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006264:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8006268:	6053      	str	r3, [r2, #4]
 800626a:	6823      	ldr	r3, [r4, #0]
 800626c:	e732      	b.n	80060d4 <HAL_RCC_OscConfig+0xe4>
    PWR->CR1 |= PWR_CR1_DBP;
 800626e:	4b17      	ldr	r3, [pc, #92]	; (80062cc <HAL_RCC_OscConfig+0x2dc>)
 8006270:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006272:	461d      	mov	r5, r3
    PWR->CR1 |= PWR_CR1_DBP;
 8006274:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006278:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800627a:	f7fd fb75 	bl	8003968 <HAL_GetTick>
 800627e:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006280:	e004      	b.n	800628c <HAL_RCC_OscConfig+0x29c>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006282:	f7fd fb71 	bl	8003968 <HAL_GetTick>
 8006286:	1b80      	subs	r0, r0, r6
 8006288:	2864      	cmp	r0, #100	; 0x64
 800628a:	d82a      	bhi.n	80062e2 <HAL_RCC_OscConfig+0x2f2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800628c:	682b      	ldr	r3, [r5, #0]
 800628e:	05da      	lsls	r2, r3, #23
 8006290:	d5f7      	bpl.n	8006282 <HAL_RCC_OscConfig+0x292>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006292:	68a3      	ldr	r3, [r4, #8]
 8006294:	2b01      	cmp	r3, #1
 8006296:	f000 8166 	beq.w	8006566 <HAL_RCC_OscConfig+0x576>
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 8139 	beq.w	8006512 <HAL_RCC_OscConfig+0x522>
 80062a0:	2b05      	cmp	r3, #5
 80062a2:	4b09      	ldr	r3, [pc, #36]	; (80062c8 <HAL_RCC_OscConfig+0x2d8>)
 80062a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80062a6:	f000 8164 	beq.w	8006572 <HAL_RCC_OscConfig+0x582>
 80062aa:	f022 0201 	bic.w	r2, r2, #1
 80062ae:	671a      	str	r2, [r3, #112]	; 0x70
 80062b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80062b2:	f022 0204 	bic.w	r2, r2, #4
 80062b6:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80062b8:	f7fd fb56 	bl	8003968 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062bc:	4d02      	ldr	r5, [pc, #8]	; (80062c8 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80062be:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062c0:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062c4:	e009      	b.n	80062da <HAL_RCC_OscConfig+0x2ea>
 80062c6:	bf00      	nop
 80062c8:	58024400 	.word	0x58024400
 80062cc:	58024800 	.word	0x58024800
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062d0:	f7fd fb4a 	bl	8003968 <HAL_GetTick>
 80062d4:	1bc0      	subs	r0, r0, r7
 80062d6:	42b0      	cmp	r0, r6
 80062d8:	d803      	bhi.n	80062e2 <HAL_RCC_OscConfig+0x2f2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062da:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80062dc:	079b      	lsls	r3, r3, #30
 80062de:	d5f7      	bpl.n	80062d0 <HAL_RCC_OscConfig+0x2e0>
 80062e0:	e72f      	b.n	8006142 <HAL_RCC_OscConfig+0x152>
            return HAL_TIMEOUT;
 80062e2:	2003      	movs	r0, #3
}
 80062e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062e6:	4ba7      	ldr	r3, [pc, #668]	; (8006584 <HAL_RCC_OscConfig+0x594>)
 80062e8:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80062ea:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80062f8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80062fa:	f7fd fb35 	bl	8003968 <HAL_GetTick>
 80062fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006300:	e004      	b.n	800630c <HAL_RCC_OscConfig+0x31c>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006302:	f7fd fb31 	bl	8003968 <HAL_GetTick>
 8006306:	1b80      	subs	r0, r0, r6
 8006308:	2864      	cmp	r0, #100	; 0x64
 800630a:	d8ea      	bhi.n	80062e2 <HAL_RCC_OscConfig+0x2f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800630c:	682b      	ldr	r3, [r5, #0]
 800630e:	0398      	lsls	r0, r3, #14
 8006310:	d4f7      	bmi.n	8006302 <HAL_RCC_OscConfig+0x312>
 8006312:	e6a8      	b.n	8006066 <HAL_RCC_OscConfig+0x76>
    return HAL_ERROR;
 8006314:	2001      	movs	r0, #1
}
 8006316:	4770      	bx	lr
      __HAL_RCC_LSI_DISABLE();
 8006318:	4b9a      	ldr	r3, [pc, #616]	; (8006584 <HAL_RCC_OscConfig+0x594>)
 800631a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800631c:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 800631e:	f022 0201 	bic.w	r2, r2, #1
 8006322:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006324:	f7fd fb20 	bl	8003968 <HAL_GetTick>
 8006328:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800632a:	e004      	b.n	8006336 <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800632c:	f7fd fb1c 	bl	8003968 <HAL_GetTick>
 8006330:	1b80      	subs	r0, r0, r6
 8006332:	2802      	cmp	r0, #2
 8006334:	d8d5      	bhi.n	80062e2 <HAL_RCC_OscConfig+0x2f2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006336:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006338:	0799      	lsls	r1, r3, #30
 800633a:	d4f7      	bmi.n	800632c <HAL_RCC_OscConfig+0x33c>
 800633c:	e6e3      	b.n	8006106 <HAL_RCC_OscConfig+0x116>
      __HAL_RCC_HSI48_DISABLE();
 800633e:	4b91      	ldr	r3, [pc, #580]	; (8006584 <HAL_RCC_OscConfig+0x594>)
 8006340:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006342:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_DISABLE();
 8006344:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006348:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800634a:	f7fd fb0d 	bl	8003968 <HAL_GetTick>
 800634e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006350:	e004      	b.n	800635c <HAL_RCC_OscConfig+0x36c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006352:	f7fd fb09 	bl	8003968 <HAL_GetTick>
 8006356:	1b80      	subs	r0, r0, r6
 8006358:	2802      	cmp	r0, #2
 800635a:	d8c2      	bhi.n	80062e2 <HAL_RCC_OscConfig+0x2f2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800635c:	682b      	ldr	r3, [r5, #0]
 800635e:	0498      	lsls	r0, r3, #18
 8006360:	d4f7      	bmi.n	8006352 <HAL_RCC_OscConfig+0x362>
 8006362:	e6ea      	b.n	800613a <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_DISABLE();
 8006364:	4b87      	ldr	r3, [pc, #540]	; (8006584 <HAL_RCC_OscConfig+0x594>)
 8006366:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006368:	461d      	mov	r5, r3
        __HAL_RCC_CSI_DISABLE();
 800636a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800636e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006370:	f7fd fafa 	bl	8003968 <HAL_GetTick>
 8006374:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006376:	e004      	b.n	8006382 <HAL_RCC_OscConfig+0x392>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006378:	f7fd faf6 	bl	8003968 <HAL_GetTick>
 800637c:	1b80      	subs	r0, r0, r6
 800637e:	2802      	cmp	r0, #2
 8006380:	d8af      	bhi.n	80062e2 <HAL_RCC_OscConfig+0x2f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006382:	682b      	ldr	r3, [r5, #0]
 8006384:	05df      	lsls	r7, r3, #23
 8006386:	d4f7      	bmi.n	8006378 <HAL_RCC_OscConfig+0x388>
 8006388:	6823      	ldr	r3, [r4, #0]
 800638a:	e6a3      	b.n	80060d4 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_HSI_DISABLE();
 800638c:	4b7d      	ldr	r3, [pc, #500]	; (8006584 <HAL_RCC_OscConfig+0x594>)
 800638e:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006390:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 8006392:	f022 0201 	bic.w	r2, r2, #1
 8006396:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006398:	f7fd fae6 	bl	8003968 <HAL_GetTick>
 800639c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800639e:	e004      	b.n	80063aa <HAL_RCC_OscConfig+0x3ba>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063a0:	f7fd fae2 	bl	8003968 <HAL_GetTick>
 80063a4:	1b80      	subs	r0, r0, r6
 80063a6:	2802      	cmp	r0, #2
 80063a8:	d89b      	bhi.n	80062e2 <HAL_RCC_OscConfig+0x2f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80063aa:	682b      	ldr	r3, [r5, #0]
 80063ac:	0758      	lsls	r0, r3, #29
 80063ae:	d4f7      	bmi.n	80063a0 <HAL_RCC_OscConfig+0x3b0>
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	e65c      	b.n	800606e <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063b4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80063b8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80063bc:	6053      	str	r3, [r2, #4]
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	e655      	b.n	800606e <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063c2:	68d3      	ldr	r3, [r2, #12]
 80063c4:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80063c8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80063cc:	60d3      	str	r3, [r2, #12]
 80063ce:	6823      	ldr	r3, [r4, #0]
 80063d0:	e680      	b.n	80060d4 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063d2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80063d6:	601a      	str	r2, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	e633      	b.n	800604a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_PLL_DISABLE();
 80063e2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063e6:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 80063e8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80063ea:	f7fd fabd 	bl	8003968 <HAL_GetTick>
 80063ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063f0:	e005      	b.n	80063fe <HAL_RCC_OscConfig+0x40e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063f2:	f7fd fab9 	bl	8003968 <HAL_GetTick>
 80063f6:	1b80      	subs	r0, r0, r6
 80063f8:	2802      	cmp	r0, #2
 80063fa:	f63f af72 	bhi.w	80062e2 <HAL_RCC_OscConfig+0x2f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80063fe:	682b      	ldr	r3, [r5, #0]
 8006400:	0199      	lsls	r1, r3, #6
 8006402:	d4f6      	bmi.n	80063f2 <HAL_RCC_OscConfig+0x402>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006404:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8006406:	4b60      	ldr	r3, [pc, #384]	; (8006588 <HAL_RCC_OscConfig+0x598>)
 8006408:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800640a:	4013      	ands	r3, r2
 800640c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800640e:	495f      	ldr	r1, [pc, #380]	; (800658c <HAL_RCC_OscConfig+0x59c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006410:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006412:	4e5c      	ldr	r6, [pc, #368]	; (8006584 <HAL_RCC_OscConfig+0x594>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006414:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8006418:	62ab      	str	r3, [r5, #40]	; 0x28
 800641a:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800641c:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8006420:	3f01      	subs	r7, #1
 8006422:	1e50      	subs	r0, r2, #1
 8006424:	3b01      	subs	r3, #1
 8006426:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006428:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800642c:	025b      	lsls	r3, r3, #9
 800642e:	0400      	lsls	r0, r0, #16
 8006430:	3a01      	subs	r2, #1
 8006432:	b29b      	uxth	r3, r3
 8006434:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8006438:	0612      	lsls	r2, r2, #24
 800643a:	4303      	orrs	r3, r0
 800643c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006440:	433b      	orrs	r3, r7
 8006442:	4313      	orrs	r3, r2
 8006444:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8006446:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006448:	f023 0301 	bic.w	r3, r3, #1
 800644c:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800644e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8006450:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006452:	4011      	ands	r1, r2
 8006454:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8006458:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800645a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800645c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800645e:	f023 030c 	bic.w	r3, r3, #12
 8006462:	4313      	orrs	r3, r2
 8006464:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006466:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006468:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800646a:	f023 0302 	bic.w	r3, r3, #2
 800646e:	4313      	orrs	r3, r2
 8006470:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006472:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006478:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800647a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800647c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006480:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006482:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006484:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006488:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 800648a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800648c:	f043 0301 	orr.w	r3, r3, #1
 8006490:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8006492:	682b      	ldr	r3, [r5, #0]
 8006494:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006498:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800649a:	f7fd fa65 	bl	8003968 <HAL_GetTick>
 800649e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064a0:	e005      	b.n	80064ae <HAL_RCC_OscConfig+0x4be>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064a2:	f7fd fa61 	bl	8003968 <HAL_GetTick>
 80064a6:	1b00      	subs	r0, r0, r4
 80064a8:	2802      	cmp	r0, #2
 80064aa:	f63f af1a 	bhi.w	80062e2 <HAL_RCC_OscConfig+0x2f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80064ae:	6833      	ldr	r3, [r6, #0]
 80064b0:	019a      	lsls	r2, r3, #6
 80064b2:	d5f6      	bpl.n	80064a2 <HAL_RCC_OscConfig+0x4b2>
 80064b4:	e663      	b.n	800617e <HAL_RCC_OscConfig+0x18e>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064b6:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80064b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80064ba:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064bc:	f43f ae60 	beq.w	8006180 <HAL_RCC_OscConfig+0x190>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064c0:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064c4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80064c6:	428b      	cmp	r3, r1
 80064c8:	f47f aeb2 	bne.w	8006230 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80064cc:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80064d2:	429a      	cmp	r2, r3
 80064d4:	f47f aeac 	bne.w	8006230 <HAL_RCC_OscConfig+0x240>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80064da:	f3c5 0208 	ubfx	r2, r5, #0, #9
 80064de:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80064e0:	429a      	cmp	r2, r3
 80064e2:	f47f aea5 	bne.w	8006230 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064e8:	f3c5 2246 	ubfx	r2, r5, #9, #7
 80064ec:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064ee:	429a      	cmp	r2, r3
 80064f0:	f47f ae9e 	bne.w	8006230 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80064f6:	f3c5 4206 	ubfx	r2, r5, #16, #7
 80064fa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064fc:	429a      	cmp	r2, r3
 80064fe:	f47f ae97 	bne.w	8006230 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006502:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006504:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8006508:	3801      	subs	r0, #1
    return HAL_ERROR;
 800650a:	1a28      	subs	r0, r5, r0
 800650c:	bf18      	it	ne
 800650e:	2001      	movne	r0, #1
 8006510:	e636      	b.n	8006180 <HAL_RCC_OscConfig+0x190>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006512:	4b1c      	ldr	r3, [pc, #112]	; (8006584 <HAL_RCC_OscConfig+0x594>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006514:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006518:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800651a:	461d      	mov	r5, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800651c:	f022 0201 	bic.w	r2, r2, #1
 8006520:	671a      	str	r2, [r3, #112]	; 0x70
 8006522:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006524:	f022 0204 	bic.w	r2, r2, #4
 8006528:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800652a:	f7fd fa1d 	bl	8003968 <HAL_GetTick>
 800652e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006530:	e005      	b.n	800653e <HAL_RCC_OscConfig+0x54e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006532:	f7fd fa19 	bl	8003968 <HAL_GetTick>
 8006536:	1b80      	subs	r0, r0, r6
 8006538:	42b8      	cmp	r0, r7
 800653a:	f63f aed2 	bhi.w	80062e2 <HAL_RCC_OscConfig+0x2f2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800653e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006540:	0798      	lsls	r0, r3, #30
 8006542:	d4f6      	bmi.n	8006532 <HAL_RCC_OscConfig+0x542>
 8006544:	e5fd      	b.n	8006142 <HAL_RCC_OscConfig+0x152>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006546:	68eb      	ldr	r3, [r5, #12]
 8006548:	6a22      	ldr	r2, [r4, #32]
 800654a:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800654e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006552:	60eb      	str	r3, [r5, #12]
 8006554:	6823      	ldr	r3, [r4, #0]
 8006556:	e5bd      	b.n	80060d4 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006558:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800655c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006560:	606b      	str	r3, [r5, #4]
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	e583      	b.n	800606e <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006566:	4a07      	ldr	r2, [pc, #28]	; (8006584 <HAL_RCC_OscConfig+0x594>)
 8006568:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800656a:	f043 0301 	orr.w	r3, r3, #1
 800656e:	6713      	str	r3, [r2, #112]	; 0x70
 8006570:	e6a2      	b.n	80062b8 <HAL_RCC_OscConfig+0x2c8>
 8006572:	f042 0204 	orr.w	r2, r2, #4
 8006576:	671a      	str	r2, [r3, #112]	; 0x70
 8006578:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800657a:	f042 0201 	orr.w	r2, r2, #1
 800657e:	671a      	str	r2, [r3, #112]	; 0x70
 8006580:	e69a      	b.n	80062b8 <HAL_RCC_OscConfig+0x2c8>
 8006582:	bf00      	nop
 8006584:	58024400 	.word	0x58024400
 8006588:	fffffc0c 	.word	0xfffffc0c
 800658c:	ffff0007 	.word	0xffff0007

08006590 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006592:	460e      	mov	r6, r1
 8006594:	b089      	sub	sp, #36	; 0x24
 8006596:	4615      	mov	r5, r2
  if(RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8006598:	4c22      	ldr	r4, [pc, #136]	; (8006624 <HAL_RCC_MCOConfig+0x94>)
  if(RCC_MCOx == RCC_MCO1)
 800659a:	b310      	cbz	r0, 80065e2 <HAL_RCC_MCOConfig+0x52>
  else
  {
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));

    /* MCO2 Clock Enable */
    MCO2_CLK_ENABLE();
 800659c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0

    /* Configure the MCO2 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO2_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065a0:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = MCO2_PIN;
 80065a2:	f44f 7000 	mov.w	r0, #512	; 0x200
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065a6:	2103      	movs	r1, #3
    MCO2_CLK_ENABLE();
 80065a8:	f043 0304 	orr.w	r3, r3, #4
 80065ac:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80065b0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065b4:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065b6:	2200      	movs	r2, #0
    MCO2_CLK_ENABLE();
 80065b8:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Pin = MCO2_PIN;
 80065bc:	9003      	str	r0, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065be:	9106      	str	r1, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80065c0:	a903      	add	r1, sp, #12
    MCO2_CLK_ENABLE();
 80065c2:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80065c4:	4818      	ldr	r0, [pc, #96]	; (8006628 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 80065c6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065c8:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80065ca:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80065cc:	f7ff fb2e 	bl	8005c2c <HAL_GPIO_Init>

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80065d0:	6921      	ldr	r1, [r4, #16]
 80065d2:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 80065d6:	4331      	orrs	r1, r6
 80065d8:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 80065dc:	6121      	str	r1, [r4, #16]
  }
}
 80065de:	b009      	add	sp, #36	; 0x24
 80065e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MCO1_CLK_ENABLE();
 80065e2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pin = MCO1_PIN;
 80065e6:	f44f 7280 	mov.w	r2, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065ea:	2702      	movs	r7, #2
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80065ec:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 80065ee:	f043 0301 	orr.w	r3, r3, #1
 80065f2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80065f6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pin = MCO1_PIN;
 80065fa:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065fc:	2203      	movs	r2, #3
    MCO1_CLK_ENABLE();
 80065fe:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006602:	9005      	str	r0, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006604:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 8006606:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006608:	4808      	ldr	r0, [pc, #32]	; (800662c <HAL_RCC_MCOConfig+0x9c>)
    MCO1_CLK_ENABLE();
 800660a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800660c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800660e:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006610:	f7ff fb0c 	bl	8005c2c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006614:	6921      	ldr	r1, [r4, #16]
 8006616:	f021 71fe 	bic.w	r1, r1, #33292288	; 0x1fc0000
 800661a:	4331      	orrs	r1, r6
 800661c:	4329      	orrs	r1, r5
 800661e:	6121      	str	r1, [r4, #16]
}
 8006620:	b009      	add	sp, #36	; 0x24
 8006622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006624:	58024400 	.word	0x58024400
 8006628:	58020800 	.word	0x58020800
 800662c:	58020000 	.word	0x58020000

08006630 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006630:	4a3e      	ldr	r2, [pc, #248]	; (800672c <HAL_RCC_GetSysClockFreq+0xfc>)
 8006632:	6913      	ldr	r3, [r2, #16]
 8006634:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006638:	2b10      	cmp	r3, #16
 800663a:	d04f      	beq.n	80066dc <HAL_RCC_GetSysClockFreq+0xac>
 800663c:	2b18      	cmp	r3, #24
 800663e:	d00b      	beq.n	8006658 <HAL_RCC_GetSysClockFreq+0x28>
 8006640:	b10b      	cbz	r3, 8006646 <HAL_RCC_GetSysClockFreq+0x16>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006642:	483b      	ldr	r0, [pc, #236]	; (8006730 <HAL_RCC_GetSysClockFreq+0x100>)
 8006644:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006646:	6813      	ldr	r3, [r2, #0]
 8006648:	0699      	lsls	r1, r3, #26
 800664a:	d549      	bpl.n	80066e0 <HAL_RCC_GetSysClockFreq+0xb0>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800664c:	6813      	ldr	r3, [r2, #0]
 800664e:	4839      	ldr	r0, [pc, #228]	; (8006734 <HAL_RCC_GetSysClockFreq+0x104>)
 8006650:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006654:	40d8      	lsrs	r0, r3
 8006656:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006658:	6a91      	ldr	r1, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800665a:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800665c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800665e:	f3c0 1005 	ubfx	r0, r0, #4, #6
{
 8006662:	b410      	push	{r4}
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006664:	6b54      	ldr	r4, [r2, #52]	; 0x34

    if (pllm != 0U)
 8006666:	b3b0      	cbz	r0, 80066d6 <HAL_RCC_GetSysClockFreq+0xa6>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006668:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800666c:	f003 0301 	and.w	r3, r3, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006670:	f001 0103 	and.w	r1, r1, #3
 8006674:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006678:	fb03 f304 	mul.w	r3, r3, r4
    {
      switch (pllsource)
 800667c:	2901      	cmp	r1, #1
 800667e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006682:	ee07 3a10 	vmov	s14, r3
 8006686:	eeba 7ae9 	vcvt.f32.s32	s14, s14, #13
      switch (pllsource)
 800668a:	d002      	beq.n	8006692 <HAL_RCC_GetSysClockFreq+0x62>
 800668c:	d32d      	bcc.n	80066ea <HAL_RCC_GetSysClockFreq+0xba>
 800668e:	2902      	cmp	r1, #2
 8006690:	d028      	beq.n	80066e4 <HAL_RCC_GetSysClockFreq+0xb4>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006692:	eddf 5a29 	vldr	s11, [pc, #164]	; 8006738 <HAL_RCC_GetSysClockFreq+0x108>
 8006696:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 800669a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800669c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066a0:	ee07 3a90 	vmov	s15, r3
 80066a4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80066a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066ac:	ee77 7a86 	vadd.f32	s15, s15, s12
 80066b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066b4:	ee27 7a26 	vmul.f32	s14, s14, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80066b8:	4b1c      	ldr	r3, [pc, #112]	; (800672c <HAL_RCC_GetSysClockFreq+0xfc>)
 80066ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066bc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80066c0:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80066c2:	ee07 3a90 	vmov	s15, r3
 80066c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80066ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066d2:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80066d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066da:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80066dc:	4817      	ldr	r0, [pc, #92]	; (800673c <HAL_RCC_GetSysClockFreq+0x10c>)
 80066de:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 80066e0:	4814      	ldr	r0, [pc, #80]	; (8006734 <HAL_RCC_GetSysClockFreq+0x104>)
}
 80066e2:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066e4:	eddf 5a16 	vldr	s11, [pc, #88]	; 8006740 <HAL_RCC_GetSysClockFreq+0x110>
 80066e8:	e7d5      	b.n	8006696 <HAL_RCC_GetSysClockFreq+0x66>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066ea:	6813      	ldr	r3, [r2, #0]
 80066ec:	069b      	lsls	r3, r3, #26
 80066ee:	d51a      	bpl.n	8006726 <HAL_RCC_GetSysClockFreq+0xf6>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066f0:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066f2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066f6:	490f      	ldr	r1, [pc, #60]	; (8006734 <HAL_RCC_GetSysClockFreq+0x104>)
 80066f8:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066fe:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006704:	ee06 1a90 	vmov	s13, r1
 8006708:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 800670c:	ee06 3a90 	vmov	s13, r3
 8006710:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8006714:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8006718:	ee76 7a05 	vadd.f32	s15, s12, s10
 800671c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006720:	ee26 7a87 	vmul.f32	s14, s13, s14
 8006724:	e7c8      	b.n	80066b8 <HAL_RCC_GetSysClockFreq+0x88>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006726:	eddf 5a07 	vldr	s11, [pc, #28]	; 8006744 <HAL_RCC_GetSysClockFreq+0x114>
 800672a:	e7b4      	b.n	8006696 <HAL_RCC_GetSysClockFreq+0x66>
 800672c:	58024400 	.word	0x58024400
 8006730:	003d0900 	.word	0x003d0900
 8006734:	03d09000 	.word	0x03d09000
 8006738:	4a742400 	.word	0x4a742400
 800673c:	007a1200 	.word	0x007a1200
 8006740:	4af42400 	.word	0x4af42400
 8006744:	4c742400 	.word	0x4c742400

08006748 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8006748:	b178      	cbz	r0, 800676a <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800674a:	4a8e      	ldr	r2, [pc, #568]	; (8006984 <HAL_RCC_ClockConfig+0x23c>)
 800674c:	6813      	ldr	r3, [r2, #0]
 800674e:	f003 030f 	and.w	r3, r3, #15
 8006752:	428b      	cmp	r3, r1
 8006754:	d20b      	bcs.n	800676e <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006756:	6813      	ldr	r3, [r2, #0]
 8006758:	f023 030f 	bic.w	r3, r3, #15
 800675c:	430b      	orrs	r3, r1
 800675e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006760:	6813      	ldr	r3, [r2, #0]
 8006762:	f003 030f 	and.w	r3, r3, #15
 8006766:	428b      	cmp	r3, r1
 8006768:	d001      	beq.n	800676e <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 800676a:	2001      	movs	r0, #1
}
 800676c:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800676e:	6803      	ldr	r3, [r0, #0]
{
 8006770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006774:	075d      	lsls	r5, r3, #29
 8006776:	d50b      	bpl.n	8006790 <HAL_RCC_ClockConfig+0x48>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006778:	4c83      	ldr	r4, [pc, #524]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 800677a:	6905      	ldr	r5, [r0, #16]
 800677c:	69a2      	ldr	r2, [r4, #24]
 800677e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8006782:	4295      	cmp	r5, r2
 8006784:	d904      	bls.n	8006790 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006786:	69a2      	ldr	r2, [r4, #24]
 8006788:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800678c:	432a      	orrs	r2, r5
 800678e:	61a2      	str	r2, [r4, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006790:	071c      	lsls	r4, r3, #28
 8006792:	d50b      	bpl.n	80067ac <HAL_RCC_ClockConfig+0x64>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006794:	4c7c      	ldr	r4, [pc, #496]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 8006796:	6945      	ldr	r5, [r0, #20]
 8006798:	69e2      	ldr	r2, [r4, #28]
 800679a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800679e:	4295      	cmp	r5, r2
 80067a0:	d904      	bls.n	80067ac <HAL_RCC_ClockConfig+0x64>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067a2:	69e2      	ldr	r2, [r4, #28]
 80067a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80067a8:	432a      	orrs	r2, r5
 80067aa:	61e2      	str	r2, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067ac:	06da      	lsls	r2, r3, #27
 80067ae:	d50b      	bpl.n	80067c8 <HAL_RCC_ClockConfig+0x80>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80067b0:	4c75      	ldr	r4, [pc, #468]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 80067b2:	6985      	ldr	r5, [r0, #24]
 80067b4:	69e2      	ldr	r2, [r4, #28]
 80067b6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80067ba:	4295      	cmp	r5, r2
 80067bc:	d904      	bls.n	80067c8 <HAL_RCC_ClockConfig+0x80>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80067be:	69e2      	ldr	r2, [r4, #28]
 80067c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80067c4:	432a      	orrs	r2, r5
 80067c6:	61e2      	str	r2, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067c8:	069f      	lsls	r7, r3, #26
 80067ca:	d50b      	bpl.n	80067e4 <HAL_RCC_ClockConfig+0x9c>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80067cc:	4c6e      	ldr	r4, [pc, #440]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 80067ce:	69c5      	ldr	r5, [r0, #28]
 80067d0:	6a22      	ldr	r2, [r4, #32]
 80067d2:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80067d6:	4295      	cmp	r5, r2
 80067d8:	d904      	bls.n	80067e4 <HAL_RCC_ClockConfig+0x9c>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80067da:	6a22      	ldr	r2, [r4, #32]
 80067dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80067e0:	432a      	orrs	r2, r5
 80067e2:	6222      	str	r2, [r4, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067e4:	079e      	lsls	r6, r3, #30
 80067e6:	4604      	mov	r4, r0
 80067e8:	460d      	mov	r5, r1
 80067ea:	f003 0201 	and.w	r2, r3, #1
 80067ee:	d55d      	bpl.n	80068ac <HAL_RCC_ClockConfig+0x164>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80067f0:	4e65      	ldr	r6, [pc, #404]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 80067f2:	68c0      	ldr	r0, [r0, #12]
 80067f4:	69b1      	ldr	r1, [r6, #24]
 80067f6:	f001 010f 	and.w	r1, r1, #15
 80067fa:	4288      	cmp	r0, r1
 80067fc:	d904      	bls.n	8006808 <HAL_RCC_ClockConfig+0xc0>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067fe:	69b1      	ldr	r1, [r6, #24]
 8006800:	f021 010f 	bic.w	r1, r1, #15
 8006804:	4301      	orrs	r1, r0
 8006806:	61b1      	str	r1, [r6, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006808:	2a00      	cmp	r2, #0
 800680a:	d031      	beq.n	8006870 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800680c:	4a5e      	ldr	r2, [pc, #376]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 800680e:	68a1      	ldr	r1, [r4, #8]
 8006810:	6993      	ldr	r3, [r2, #24]
 8006812:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006816:	430b      	orrs	r3, r1
 8006818:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800681a:	6863      	ldr	r3, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800681c:	6812      	ldr	r2, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800681e:	2b02      	cmp	r3, #2
 8006820:	f000 80a2 	beq.w	8006968 <HAL_RCC_ClockConfig+0x220>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006824:	2b03      	cmp	r3, #3
 8006826:	f000 80a5 	beq.w	8006974 <HAL_RCC_ClockConfig+0x22c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800682a:	2b01      	cmp	r3, #1
 800682c:	f000 80a6 	beq.w	800697c <HAL_RCC_ClockConfig+0x234>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006830:	0757      	lsls	r7, r2, #29
 8006832:	d538      	bpl.n	80068a6 <HAL_RCC_ClockConfig+0x15e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006834:	4954      	ldr	r1, [pc, #336]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006836:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800683a:	690a      	ldr	r2, [r1, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800683c:	460e      	mov	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800683e:	f022 0207 	bic.w	r2, r2, #7
 8006842:	4313      	orrs	r3, r2
 8006844:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 8006846:	f7fd f88f 	bl	8003968 <HAL_GetTick>
 800684a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800684c:	e005      	b.n	800685a <HAL_RCC_ClockConfig+0x112>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800684e:	f7fd f88b 	bl	8003968 <HAL_GetTick>
 8006852:	1bc0      	subs	r0, r0, r7
 8006854:	4540      	cmp	r0, r8
 8006856:	f200 808b 	bhi.w	8006970 <HAL_RCC_ClockConfig+0x228>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800685a:	6933      	ldr	r3, [r6, #16]
 800685c:	6862      	ldr	r2, [r4, #4]
 800685e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006862:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8006866:	d1f2      	bne.n	800684e <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	079e      	lsls	r6, r3, #30
 800686c:	d50b      	bpl.n	8006886 <HAL_RCC_ClockConfig+0x13e>
 800686e:	68e0      	ldr	r0, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006870:	4945      	ldr	r1, [pc, #276]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 8006872:	698a      	ldr	r2, [r1, #24]
 8006874:	f002 020f 	and.w	r2, r2, #15
 8006878:	4282      	cmp	r2, r0
 800687a:	d904      	bls.n	8006886 <HAL_RCC_ClockConfig+0x13e>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800687c:	698a      	ldr	r2, [r1, #24]
 800687e:	f022 020f 	bic.w	r2, r2, #15
 8006882:	4310      	orrs	r0, r2
 8006884:	6188      	str	r0, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006886:	493f      	ldr	r1, [pc, #252]	; (8006984 <HAL_RCC_ClockConfig+0x23c>)
 8006888:	680a      	ldr	r2, [r1, #0]
 800688a:	f002 020f 	and.w	r2, r2, #15
 800688e:	42aa      	cmp	r2, r5
 8006890:	d914      	bls.n	80068bc <HAL_RCC_ClockConfig+0x174>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006892:	680a      	ldr	r2, [r1, #0]
 8006894:	f022 020f 	bic.w	r2, r2, #15
 8006898:	432a      	orrs	r2, r5
 800689a:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800689c:	680a      	ldr	r2, [r1, #0]
 800689e:	f002 020f 	and.w	r2, r2, #15
 80068a2:	42aa      	cmp	r2, r5
 80068a4:	d00a      	beq.n	80068bc <HAL_RCC_ClockConfig+0x174>
    return HAL_ERROR;
 80068a6:	2001      	movs	r0, #1
}
 80068a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068ac:	2a00      	cmp	r2, #0
 80068ae:	d1ad      	bne.n	800680c <HAL_RCC_ClockConfig+0xc4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068b0:	4934      	ldr	r1, [pc, #208]	; (8006984 <HAL_RCC_ClockConfig+0x23c>)
 80068b2:	680a      	ldr	r2, [r1, #0]
 80068b4:	f002 020f 	and.w	r2, r2, #15
 80068b8:	42aa      	cmp	r2, r5
 80068ba:	d8ea      	bhi.n	8006892 <HAL_RCC_ClockConfig+0x14a>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80068bc:	0758      	lsls	r0, r3, #29
 80068be:	d50b      	bpl.n	80068d8 <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80068c0:	4931      	ldr	r1, [pc, #196]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 80068c2:	6920      	ldr	r0, [r4, #16]
 80068c4:	698a      	ldr	r2, [r1, #24]
 80068c6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80068ca:	4290      	cmp	r0, r2
 80068cc:	d204      	bcs.n	80068d8 <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80068ce:	698a      	ldr	r2, [r1, #24]
 80068d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80068d4:	4302      	orrs	r2, r0
 80068d6:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068d8:	0719      	lsls	r1, r3, #28
 80068da:	d50b      	bpl.n	80068f4 <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80068dc:	492a      	ldr	r1, [pc, #168]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 80068de:	6960      	ldr	r0, [r4, #20]
 80068e0:	69ca      	ldr	r2, [r1, #28]
 80068e2:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80068e6:	4290      	cmp	r0, r2
 80068e8:	d204      	bcs.n	80068f4 <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80068ea:	69ca      	ldr	r2, [r1, #28]
 80068ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80068f0:	4302      	orrs	r2, r0
 80068f2:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068f4:	06da      	lsls	r2, r3, #27
 80068f6:	d50b      	bpl.n	8006910 <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80068f8:	4923      	ldr	r1, [pc, #140]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 80068fa:	69a0      	ldr	r0, [r4, #24]
 80068fc:	69ca      	ldr	r2, [r1, #28]
 80068fe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8006902:	4290      	cmp	r0, r2
 8006904:	d204      	bcs.n	8006910 <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006906:	69ca      	ldr	r2, [r1, #28]
 8006908:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800690c:	4302      	orrs	r2, r0
 800690e:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006910:	069b      	lsls	r3, r3, #26
 8006912:	d50b      	bpl.n	800692c <HAL_RCC_ClockConfig+0x1e4>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006914:	4a1c      	ldr	r2, [pc, #112]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 8006916:	69e1      	ldr	r1, [r4, #28]
 8006918:	6a13      	ldr	r3, [r2, #32]
 800691a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800691e:	4299      	cmp	r1, r3
 8006920:	d204      	bcs.n	800692c <HAL_RCC_ClockConfig+0x1e4>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006922:	6a13      	ldr	r3, [r2, #32]
 8006924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006928:	430b      	orrs	r3, r1
 800692a:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800692c:	f7ff fe80 	bl	8006630 <HAL_RCC_GetSysClockFreq>
 8006930:	4a15      	ldr	r2, [pc, #84]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 8006932:	4916      	ldr	r1, [pc, #88]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006934:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006936:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006938:	f3c3 2303 	ubfx	r3, r3, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 800693c:	4d14      	ldr	r5, [pc, #80]	; (8006990 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800693e:	f002 020f 	and.w	r2, r2, #15
 8006942:	4c14      	ldr	r4, [pc, #80]	; (8006994 <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006944:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006946:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006948:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 800694c:	4912      	ldr	r1, [pc, #72]	; (8006998 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800694e:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006952:	fa20 f303 	lsr.w	r3, r0, r3
  halstatus = HAL_InitTick (uwTickPrio);
 8006956:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006958:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 800695c:	600b      	str	r3, [r1, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800695e:	6022      	str	r2, [r4, #0]
}
 8006960:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8006964:	f7fc bf9c 	b.w	80038a0 <HAL_InitTick>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006968:	0390      	lsls	r0, r2, #14
 800696a:	f53f af63 	bmi.w	8006834 <HAL_RCC_ClockConfig+0xec>
 800696e:	e79a      	b.n	80068a6 <HAL_RCC_ClockConfig+0x15e>
            return HAL_TIMEOUT;
 8006970:	2003      	movs	r0, #3
 8006972:	e799      	b.n	80068a8 <HAL_RCC_ClockConfig+0x160>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006974:	0191      	lsls	r1, r2, #6
 8006976:	f53f af5d 	bmi.w	8006834 <HAL_RCC_ClockConfig+0xec>
 800697a:	e794      	b.n	80068a6 <HAL_RCC_ClockConfig+0x15e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800697c:	05d2      	lsls	r2, r2, #23
 800697e:	f53f af59 	bmi.w	8006834 <HAL_RCC_ClockConfig+0xec>
 8006982:	e790      	b.n	80068a6 <HAL_RCC_ClockConfig+0x15e>
 8006984:	52002000 	.word	0x52002000
 8006988:	58024400 	.word	0x58024400
 800698c:	0801af18 	.word	0x0801af18
 8006990:	24000204 	.word	0x24000204
 8006994:	240001fc 	.word	0x240001fc
 8006998:	240001f8 	.word	0x240001f8

0800699c <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800699c:	4a49      	ldr	r2, [pc, #292]	; (8006ac4 <HAL_RCC_GetHCLKFreq+0x128>)
 800699e:	6913      	ldr	r3, [r2, #16]
 80069a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069a4:	2b10      	cmp	r3, #16
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069a6:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069a8:	d064      	beq.n	8006a74 <HAL_RCC_GetHCLKFreq+0xd8>
 80069aa:	2b18      	cmp	r3, #24
 80069ac:	d022      	beq.n	80069f4 <HAL_RCC_GetHCLKFreq+0x58>
 80069ae:	b1bb      	cbz	r3, 80069e0 <HAL_RCC_GetHCLKFreq+0x44>
    sysclockfreq = CSI_VALUE;
 80069b0:	4b45      	ldr	r3, [pc, #276]	; (8006ac8 <HAL_RCC_GetHCLKFreq+0x12c>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80069b2:	4944      	ldr	r1, [pc, #272]	; (8006ac4 <HAL_RCC_GetHCLKFreq+0x128>)
 80069b4:	4845      	ldr	r0, [pc, #276]	; (8006acc <HAL_RCC_GetHCLKFreq+0x130>)
 80069b6:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069b8:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80069ba:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069be:	4c44      	ldr	r4, [pc, #272]	; (8006ad0 <HAL_RCC_GetHCLKFreq+0x134>)
 80069c0:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80069c4:	4d43      	ldr	r5, [pc, #268]	; (8006ad4 <HAL_RCC_GetHCLKFreq+0x138>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80069c6:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069c8:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80069ca:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069ce:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80069d2:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069d4:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 80069d8:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069da:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80069dc:	bc30      	pop	{r4, r5}
 80069de:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069e0:	6813      	ldr	r3, [r2, #0]
 80069e2:	0699      	lsls	r1, r3, #26
 80069e4:	d548      	bpl.n	8006a78 <HAL_RCC_GetHCLKFreq+0xdc>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069e6:	6813      	ldr	r3, [r2, #0]
 80069e8:	4a3b      	ldr	r2, [pc, #236]	; (8006ad8 <HAL_RCC_GetHCLKFreq+0x13c>)
 80069ea:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80069ee:	fa22 f303 	lsr.w	r3, r2, r3
 80069f2:	e7de      	b.n	80069b2 <HAL_RCC_GetHCLKFreq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069f4:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80069f6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80069f8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80069fa:	f3c3 1305 	ubfx	r3, r3, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80069fe:	6b54      	ldr	r4, [r2, #52]	; 0x34
    if (pllm != 0U)
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d0d6      	beq.n	80069b2 <HAL_RCC_GetHCLKFreq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006a04:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006a08:	f001 0101 	and.w	r1, r1, #1
 8006a0c:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a10:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006a14:	fb01 f304 	mul.w	r3, r1, r4
 8006a18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 8006a1c:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006a1e:	ee07 3a90 	vmov	s15, r3
 8006a22:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 8006a26:	d002      	beq.n	8006a2e <HAL_RCC_GetHCLKFreq+0x92>
 8006a28:	d32b      	bcc.n	8006a82 <HAL_RCC_GetHCLKFreq+0xe6>
 8006a2a:	2802      	cmp	r0, #2
 8006a2c:	d026      	beq.n	8006a7c <HAL_RCC_GetHCLKFreq+0xe0>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a2e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006adc <HAL_RCC_GetHCLKFreq+0x140>
 8006a32:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8006a36:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a3c:	ee07 3a10 	vmov	s14, r3
 8006a40:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006a44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006a48:	ee37 7a25 	vadd.f32	s14, s14, s11
 8006a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a50:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006a54:	4b1b      	ldr	r3, [pc, #108]	; (8006ac4 <HAL_RCC_GetHCLKFreq+0x128>)
 8006a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a58:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006a5c:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006a5e:	ee07 3a10 	vmov	s14, r3
 8006a62:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006a66:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006a6a:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8006a6e:	ee17 3a90 	vmov	r3, s15
 8006a72:	e79e      	b.n	80069b2 <HAL_RCC_GetHCLKFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8006a74:	4b1a      	ldr	r3, [pc, #104]	; (8006ae0 <HAL_RCC_GetHCLKFreq+0x144>)
 8006a76:	e79c      	b.n	80069b2 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006a78:	4b17      	ldr	r3, [pc, #92]	; (8006ad8 <HAL_RCC_GetHCLKFreq+0x13c>)
 8006a7a:	e79a      	b.n	80069b2 <HAL_RCC_GetHCLKFreq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a7c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006ae4 <HAL_RCC_GetHCLKFreq+0x148>
 8006a80:	e7d7      	b.n	8006a32 <HAL_RCC_GetHCLKFreq+0x96>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a82:	6813      	ldr	r3, [r2, #0]
 8006a84:	069b      	lsls	r3, r3, #26
 8006a86:	d51a      	bpl.n	8006abe <HAL_RCC_GetHCLKFreq+0x122>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a88:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a8a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a8e:	4912      	ldr	r1, [pc, #72]	; (8006ad8 <HAL_RCC_GetHCLKFreq+0x13c>)
 8006a90:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a94:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a96:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a9c:	ee07 1a10 	vmov	s14, r1
 8006aa0:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8006aa4:	ee07 3a10 	vmov	s14, r3
 8006aa8:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8006aac:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8006ab0:	ee76 6a05 	vadd.f32	s13, s12, s10
 8006ab4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006abc:	e7ca      	b.n	8006a54 <HAL_RCC_GetHCLKFreq+0xb8>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006abe:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8006ae8 <HAL_RCC_GetHCLKFreq+0x14c>
 8006ac2:	e7b6      	b.n	8006a32 <HAL_RCC_GetHCLKFreq+0x96>
 8006ac4:	58024400 	.word	0x58024400
 8006ac8:	003d0900 	.word	0x003d0900
 8006acc:	0801af18 	.word	0x0801af18
 8006ad0:	240001fc 	.word	0x240001fc
 8006ad4:	240001f8 	.word	0x240001f8
 8006ad8:	03d09000 	.word	0x03d09000
 8006adc:	4a742400 	.word	0x4a742400
 8006ae0:	007a1200 	.word	0x007a1200
 8006ae4:	4af42400 	.word	0x4af42400
 8006ae8:	4c742400 	.word	0x4c742400

08006aec <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006aec:	494d      	ldr	r1, [pc, #308]	; (8006c24 <HAL_RCC_GetPCLK1Freq+0x138>)
 8006aee:	690b      	ldr	r3, [r1, #16]
 8006af0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006af4:	2b10      	cmp	r3, #16
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006af6:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006af8:	d06b      	beq.n	8006bd2 <HAL_RCC_GetPCLK1Freq+0xe6>
 8006afa:	2b18      	cmp	r3, #24
 8006afc:	d029      	beq.n	8006b52 <HAL_RCC_GetPCLK1Freq+0x66>
 8006afe:	b1fb      	cbz	r3, 8006b40 <HAL_RCC_GetPCLK1Freq+0x54>
    sysclockfreq = CSI_VALUE;
 8006b00:	4a49      	ldr	r2, [pc, #292]	; (8006c28 <HAL_RCC_GetPCLK1Freq+0x13c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006b02:	4848      	ldr	r0, [pc, #288]	; (8006c24 <HAL_RCC_GetPCLK1Freq+0x138>)
 8006b04:	4949      	ldr	r1, [pc, #292]	; (8006c2c <HAL_RCC_GetPCLK1Freq+0x140>)
 8006b06:	6984      	ldr	r4, [r0, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b08:	6983      	ldr	r3, [r0, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006b0a:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 8006b0e:	4d48      	ldr	r5, [pc, #288]	; (8006c30 <HAL_RCC_GetPCLK1Freq+0x144>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b10:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006b14:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b16:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006b18:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b1c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006b20:	40e2      	lsrs	r2, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b22:	4c44      	ldr	r4, [pc, #272]	; (8006c34 <HAL_RCC_GetPCLK1Freq+0x148>)
 8006b24:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8006b28:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b2a:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006b2c:	69c2      	ldr	r2, [r0, #28]
 8006b2e:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8006b32:	5c88      	ldrb	r0, [r1, r2]
 8006b34:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006b38:	bc30      	pop	{r4, r5}
 8006b3a:	fa23 f000 	lsr.w	r0, r3, r0
 8006b3e:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b40:	680b      	ldr	r3, [r1, #0]
 8006b42:	069a      	lsls	r2, r3, #26
 8006b44:	d547      	bpl.n	8006bd6 <HAL_RCC_GetPCLK1Freq+0xea>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b46:	680b      	ldr	r3, [r1, #0]
 8006b48:	4a3b      	ldr	r2, [pc, #236]	; (8006c38 <HAL_RCC_GetPCLK1Freq+0x14c>)
 8006b4a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006b4e:	40da      	lsrs	r2, r3
 8006b50:	e7d7      	b.n	8006b02 <HAL_RCC_GetPCLK1Freq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b52:	6a88      	ldr	r0, [r1, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006b54:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b56:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006b58:	f3c2 1205 	ubfx	r2, r2, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006b5c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    if (pllm != 0U)
 8006b5e:	2a00      	cmp	r2, #0
 8006b60:	d0cf      	beq.n	8006b02 <HAL_RCC_GetPCLK1Freq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006b62:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b6e:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006b72:	fb03 f304 	mul.w	r3, r3, r4
 8006b76:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 8006b7a:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006b7c:	ee07 3a90 	vmov	s15, r3
 8006b80:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 8006b84:	d002      	beq.n	8006b8c <HAL_RCC_GetPCLK1Freq+0xa0>
 8006b86:	d32b      	bcc.n	8006be0 <HAL_RCC_GetPCLK1Freq+0xf4>
 8006b88:	2802      	cmp	r0, #2
 8006b8a:	d026      	beq.n	8006bda <HAL_RCC_GetPCLK1Freq+0xee>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006b8c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006c3c <HAL_RCC_GetPCLK1Freq+0x150>
 8006b90:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8006b94:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8006b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b9a:	ee07 3a10 	vmov	s14, r3
 8006b9e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006ba2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006ba6:	ee37 7a25 	vadd.f32	s14, s14, s11
 8006baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bae:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006bb2:	4b1c      	ldr	r3, [pc, #112]	; (8006c24 <HAL_RCC_GetPCLK1Freq+0x138>)
 8006bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb6:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006bba:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006bbc:	ee07 3a10 	vmov	s14, r3
 8006bc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006bc4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006bc8:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8006bcc:	ee17 2a90 	vmov	r2, s15
 8006bd0:	e797      	b.n	8006b02 <HAL_RCC_GetPCLK1Freq+0x16>
    sysclockfreq = HSE_VALUE;
 8006bd2:	4a1b      	ldr	r2, [pc, #108]	; (8006c40 <HAL_RCC_GetPCLK1Freq+0x154>)
 8006bd4:	e795      	b.n	8006b02 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006bd6:	4a18      	ldr	r2, [pc, #96]	; (8006c38 <HAL_RCC_GetPCLK1Freq+0x14c>)
 8006bd8:	e793      	b.n	8006b02 <HAL_RCC_GetPCLK1Freq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006bda:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006c44 <HAL_RCC_GetPCLK1Freq+0x158>
 8006bde:	e7d7      	b.n	8006b90 <HAL_RCC_GetPCLK1Freq+0xa4>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006be0:	680b      	ldr	r3, [r1, #0]
 8006be2:	069b      	lsls	r3, r3, #26
 8006be4:	d51a      	bpl.n	8006c1c <HAL_RCC_GetPCLK1Freq+0x130>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006be6:	6808      	ldr	r0, [r1, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006be8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006bec:	4a12      	ldr	r2, [pc, #72]	; (8006c38 <HAL_RCC_GetPCLK1Freq+0x14c>)
 8006bee:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006bf2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006bf4:	40c2      	lsrs	r2, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bfa:	ee07 2a10 	vmov	s14, r2
 8006bfe:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8006c02:	ee07 3a10 	vmov	s14, r3
 8006c06:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8006c0a:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8006c0e:	ee76 6a05 	vadd.f32	s13, s12, s10
 8006c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c1a:	e7ca      	b.n	8006bb2 <HAL_RCC_GetPCLK1Freq+0xc6>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c1c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8006c48 <HAL_RCC_GetPCLK1Freq+0x15c>
 8006c20:	e7b6      	b.n	8006b90 <HAL_RCC_GetPCLK1Freq+0xa4>
 8006c22:	bf00      	nop
 8006c24:	58024400 	.word	0x58024400
 8006c28:	003d0900 	.word	0x003d0900
 8006c2c:	0801af18 	.word	0x0801af18
 8006c30:	240001f8 	.word	0x240001f8
 8006c34:	240001fc 	.word	0x240001fc
 8006c38:	03d09000 	.word	0x03d09000
 8006c3c:	4a742400 	.word	0x4a742400
 8006c40:	007a1200 	.word	0x007a1200
 8006c44:	4af42400 	.word	0x4af42400
 8006c48:	4c742400 	.word	0x4c742400

08006c4c <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c4c:	494d      	ldr	r1, [pc, #308]	; (8006d84 <HAL_RCC_GetPCLK2Freq+0x138>)
 8006c4e:	690b      	ldr	r3, [r1, #16]
 8006c50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c54:	2b10      	cmp	r3, #16
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c56:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c58:	d06b      	beq.n	8006d32 <HAL_RCC_GetPCLK2Freq+0xe6>
 8006c5a:	2b18      	cmp	r3, #24
 8006c5c:	d029      	beq.n	8006cb2 <HAL_RCC_GetPCLK2Freq+0x66>
 8006c5e:	b1fb      	cbz	r3, 8006ca0 <HAL_RCC_GetPCLK2Freq+0x54>
    sysclockfreq = CSI_VALUE;
 8006c60:	4a49      	ldr	r2, [pc, #292]	; (8006d88 <HAL_RCC_GetPCLK2Freq+0x13c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006c62:	4848      	ldr	r0, [pc, #288]	; (8006d84 <HAL_RCC_GetPCLK2Freq+0x138>)
 8006c64:	4949      	ldr	r1, [pc, #292]	; (8006d8c <HAL_RCC_GetPCLK2Freq+0x140>)
 8006c66:	6984      	ldr	r4, [r0, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c68:	6983      	ldr	r3, [r0, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006c6a:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 8006c6e:	4d48      	ldr	r5, [pc, #288]	; (8006d90 <HAL_RCC_GetPCLK2Freq+0x144>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c70:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006c74:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c76:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006c78:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c7c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006c80:	40e2      	lsrs	r2, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c82:	4c44      	ldr	r4, [pc, #272]	; (8006d94 <HAL_RCC_GetPCLK2Freq+0x148>)
 8006c84:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8006c88:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c8a:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006c8c:	69c2      	ldr	r2, [r0, #28]
 8006c8e:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8006c92:	5c88      	ldrb	r0, [r1, r2]
 8006c94:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006c98:	bc30      	pop	{r4, r5}
 8006c9a:	fa23 f000 	lsr.w	r0, r3, r0
 8006c9e:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ca0:	680b      	ldr	r3, [r1, #0]
 8006ca2:	069a      	lsls	r2, r3, #26
 8006ca4:	d547      	bpl.n	8006d36 <HAL_RCC_GetPCLK2Freq+0xea>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ca6:	680b      	ldr	r3, [r1, #0]
 8006ca8:	4a3b      	ldr	r2, [pc, #236]	; (8006d98 <HAL_RCC_GetPCLK2Freq+0x14c>)
 8006caa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006cae:	40da      	lsrs	r2, r3
 8006cb0:	e7d7      	b.n	8006c62 <HAL_RCC_GetPCLK2Freq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cb2:	6a88      	ldr	r0, [r1, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006cb4:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006cb6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006cb8:	f3c2 1205 	ubfx	r2, r2, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006cbc:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    if (pllm != 0U)
 8006cbe:	2a00      	cmp	r2, #0
 8006cc0:	d0cf      	beq.n	8006c62 <HAL_RCC_GetPCLK2Freq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006cc2:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cce:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006cd2:	fb03 f304 	mul.w	r3, r3, r4
 8006cd6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 8006cda:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006cdc:	ee07 3a90 	vmov	s15, r3
 8006ce0:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 8006ce4:	d002      	beq.n	8006cec <HAL_RCC_GetPCLK2Freq+0xa0>
 8006ce6:	d32b      	bcc.n	8006d40 <HAL_RCC_GetPCLK2Freq+0xf4>
 8006ce8:	2802      	cmp	r0, #2
 8006cea:	d026      	beq.n	8006d3a <HAL_RCC_GetPCLK2Freq+0xee>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006cec:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006d9c <HAL_RCC_GetPCLK2Freq+0x150>
 8006cf0:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8006cf4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8006cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cfa:	ee07 3a10 	vmov	s14, r3
 8006cfe:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006d02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006d06:	ee37 7a25 	vadd.f32	s14, s14, s11
 8006d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d0e:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006d12:	4b1c      	ldr	r3, [pc, #112]	; (8006d84 <HAL_RCC_GetPCLK2Freq+0x138>)
 8006d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d16:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006d1a:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006d1c:	ee07 3a10 	vmov	s14, r3
 8006d20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006d24:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006d28:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8006d2c:	ee17 2a90 	vmov	r2, s15
 8006d30:	e797      	b.n	8006c62 <HAL_RCC_GetPCLK2Freq+0x16>
    sysclockfreq = HSE_VALUE;
 8006d32:	4a1b      	ldr	r2, [pc, #108]	; (8006da0 <HAL_RCC_GetPCLK2Freq+0x154>)
 8006d34:	e795      	b.n	8006c62 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006d36:	4a18      	ldr	r2, [pc, #96]	; (8006d98 <HAL_RCC_GetPCLK2Freq+0x14c>)
 8006d38:	e793      	b.n	8006c62 <HAL_RCC_GetPCLK2Freq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d3a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006da4 <HAL_RCC_GetPCLK2Freq+0x158>
 8006d3e:	e7d7      	b.n	8006cf0 <HAL_RCC_GetPCLK2Freq+0xa4>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d40:	680b      	ldr	r3, [r1, #0]
 8006d42:	069b      	lsls	r3, r3, #26
 8006d44:	d51a      	bpl.n	8006d7c <HAL_RCC_GetPCLK2Freq+0x130>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d46:	6808      	ldr	r0, [r1, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d48:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d4c:	4a12      	ldr	r2, [pc, #72]	; (8006d98 <HAL_RCC_GetPCLK2Freq+0x14c>)
 8006d4e:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d52:	6b0b      	ldr	r3, [r1, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d54:	40c2      	lsrs	r2, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d5a:	ee07 2a10 	vmov	s14, r2
 8006d5e:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8006d62:	ee07 3a10 	vmov	s14, r3
 8006d66:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8006d6a:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8006d6e:	ee76 6a05 	vadd.f32	s13, s12, s10
 8006d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d7a:	e7ca      	b.n	8006d12 <HAL_RCC_GetPCLK2Freq+0xc6>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d7c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8006da8 <HAL_RCC_GetPCLK2Freq+0x15c>
 8006d80:	e7b6      	b.n	8006cf0 <HAL_RCC_GetPCLK2Freq+0xa4>
 8006d82:	bf00      	nop
 8006d84:	58024400 	.word	0x58024400
 8006d88:	003d0900 	.word	0x003d0900
 8006d8c:	0801af18 	.word	0x0801af18
 8006d90:	240001f8 	.word	0x240001f8
 8006d94:	240001fc 	.word	0x240001fc
 8006d98:	03d09000 	.word	0x03d09000
 8006d9c:	4a742400 	.word	0x4a742400
 8006da0:	007a1200 	.word	0x007a1200
 8006da4:	4af42400 	.word	0x4af42400
 8006da8:	4c742400 	.word	0x4c742400

08006dac <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006dac:	4a3b      	ldr	r2, [pc, #236]	; (8006e9c <RCCEx_PLL2_Config+0xf0>)
{
 8006dae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006db0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006db2:	f003 0303 	and.w	r3, r3, #3
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d067      	beq.n	8006e8a <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006dba:	6813      	ldr	r3, [r2, #0]
 8006dbc:	460f      	mov	r7, r1
 8006dbe:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006dc0:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 8006dc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006dc6:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006dc8:	f7fc fdce 	bl	8003968 <HAL_GetTick>
 8006dcc:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006dce:	e004      	b.n	8006dda <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006dd0:	f7fc fdca 	bl	8003968 <HAL_GetTick>
 8006dd4:	1b80      	subs	r0, r0, r6
 8006dd6:	2802      	cmp	r0, #2
 8006dd8:	d859      	bhi.n	8006e8e <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006dda:	6823      	ldr	r3, [r4, #0]
 8006ddc:	011a      	lsls	r2, r3, #4
 8006dde:	d4f7      	bmi.n	8006dd0 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006de0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006de2:	682a      	ldr	r2, [r5, #0]
 8006de4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006de8:	492d      	ldr	r1, [pc, #180]	; (8006ea0 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006dea:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8006dee:	62a3      	str	r3, [r4, #40]	; 0x28
 8006df0:	686e      	ldr	r6, [r5, #4]
 8006df2:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8006df6:	3e01      	subs	r6, #1
 8006df8:	1e50      	subs	r0, r2, #1
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	692a      	ldr	r2, [r5, #16]
 8006dfe:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8006e02:	025b      	lsls	r3, r3, #9
 8006e04:	0400      	lsls	r0, r0, #16
 8006e06:	3a01      	subs	r2, #1
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8006e0e:	0612      	lsls	r2, r2, #24
 8006e10:	4303      	orrs	r3, r0
 8006e12:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006e16:	4333      	orrs	r3, r6
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006e1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006e1e:	696a      	ldr	r2, [r5, #20]
 8006e20:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e24:	4313      	orrs	r3, r2
 8006e26:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006e28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006e2a:	69aa      	ldr	r2, [r5, #24]
 8006e2c:	f023 0320 	bic.w	r3, r3, #32
 8006e30:	4313      	orrs	r3, r2
 8006e32:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006e34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006e36:	f023 0310 	bic.w	r3, r3, #16
 8006e3a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006e3c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006e3e:	69eb      	ldr	r3, [r5, #28]
 8006e40:	4011      	ands	r1, r2
 8006e42:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8006e46:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006e48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006e4a:	f043 0310 	orr.w	r3, r3, #16
 8006e4e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006e50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8006e52:	b1f7      	cbz	r7, 8006e92 <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006e54:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006e56:	bf0c      	ite	eq
 8006e58:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006e5c:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8006e60:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006e62:	4b0e      	ldr	r3, [pc, #56]	; (8006e9c <RCCEx_PLL2_Config+0xf0>)
 8006e64:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e66:	461c      	mov	r4, r3
    __HAL_RCC_PLL2_ENABLE();
 8006e68:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006e6c:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8006e6e:	f7fc fd7b 	bl	8003968 <HAL_GetTick>
 8006e72:	4605      	mov	r5, r0
 8006e74:	e004      	b.n	8006e80 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006e76:	f7fc fd77 	bl	8003968 <HAL_GetTick>
 8006e7a:	1b40      	subs	r0, r0, r5
 8006e7c:	2802      	cmp	r0, #2
 8006e7e:	d806      	bhi.n	8006e8e <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006e80:	6823      	ldr	r3, [r4, #0]
 8006e82:	011b      	lsls	r3, r3, #4
 8006e84:	d5f7      	bpl.n	8006e76 <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 8006e86:	2000      	movs	r0, #0
}
 8006e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8006e8a:	2001      	movs	r0, #1
}
 8006e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8006e8e:	2003      	movs	r0, #3
}
 8006e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006e92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e96:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e98:	e7e3      	b.n	8006e62 <RCCEx_PLL2_Config+0xb6>
 8006e9a:	bf00      	nop
 8006e9c:	58024400 	.word	0x58024400
 8006ea0:	ffff0007 	.word	0xffff0007

08006ea4 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ea4:	4a3b      	ldr	r2, [pc, #236]	; (8006f94 <RCCEx_PLL3_Config+0xf0>)
{
 8006ea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ea8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006eaa:	f003 0303 	and.w	r3, r3, #3
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d067      	beq.n	8006f82 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006eb2:	6813      	ldr	r3, [r2, #0]
 8006eb4:	460f      	mov	r7, r1
 8006eb6:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006eb8:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 8006eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ebe:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006ec0:	f7fc fd52 	bl	8003968 <HAL_GetTick>
 8006ec4:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ec6:	e004      	b.n	8006ed2 <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006ec8:	f7fc fd4e 	bl	8003968 <HAL_GetTick>
 8006ecc:	1b80      	subs	r0, r0, r6
 8006ece:	2802      	cmp	r0, #2
 8006ed0:	d859      	bhi.n	8006f86 <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	009a      	lsls	r2, r3, #2
 8006ed6:	d4f7      	bmi.n	8006ec8 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006ed8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006eda:	682a      	ldr	r2, [r5, #0]
 8006edc:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006ee0:	492d      	ldr	r1, [pc, #180]	; (8006f98 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006ee2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8006ee6:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ee8:	686e      	ldr	r6, [r5, #4]
 8006eea:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8006eee:	3e01      	subs	r6, #1
 8006ef0:	1e50      	subs	r0, r2, #1
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	692a      	ldr	r2, [r5, #16]
 8006ef6:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8006efa:	025b      	lsls	r3, r3, #9
 8006efc:	0400      	lsls	r0, r0, #16
 8006efe:	3a01      	subs	r2, #1
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8006f06:	0612      	lsls	r2, r2, #24
 8006f08:	4303      	orrs	r3, r0
 8006f0a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006f0e:	4333      	orrs	r3, r6
 8006f10:	4313      	orrs	r3, r2
 8006f12:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006f14:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006f16:	696a      	ldr	r2, [r5, #20]
 8006f18:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006f20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006f22:	69aa      	ldr	r2, [r5, #24]
 8006f24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006f2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006f2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f32:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006f34:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006f36:	69eb      	ldr	r3, [r5, #28]
 8006f38:	4011      	ands	r1, r2
 8006f3a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8006f3e:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006f40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f46:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006f48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8006f4a:	b1f7      	cbz	r7, 8006f8a <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006f4c:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006f4e:	bf0c      	ite	eq
 8006f50:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006f54:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8006f58:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006f5a:	4b0e      	ldr	r3, [pc, #56]	; (8006f94 <RCCEx_PLL3_Config+0xf0>)
 8006f5c:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f5e:	461c      	mov	r4, r3
    __HAL_RCC_PLL3_ENABLE();
 8006f60:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006f64:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8006f66:	f7fc fcff 	bl	8003968 <HAL_GetTick>
 8006f6a:	4605      	mov	r5, r0
 8006f6c:	e004      	b.n	8006f78 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006f6e:	f7fc fcfb 	bl	8003968 <HAL_GetTick>
 8006f72:	1b40      	subs	r0, r0, r5
 8006f74:	2802      	cmp	r0, #2
 8006f76:	d806      	bhi.n	8006f86 <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f78:	6823      	ldr	r3, [r4, #0]
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	d5f7      	bpl.n	8006f6e <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 8006f7e:	2000      	movs	r0, #0
}
 8006f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8006f82:	2001      	movs	r0, #1
}
 8006f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8006f86:	2003      	movs	r0, #3
}
 8006f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006f8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f8e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f90:	e7e3      	b.n	8006f5a <RCCEx_PLL3_Config+0xb6>
 8006f92:	bf00      	nop
 8006f94:	58024400 	.word	0x58024400
 8006f98:	ffff0007 	.word	0xffff0007

08006f9c <HAL_RCCEx_PeriphCLKConfig>:
{
 8006f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006fa0:	6803      	ldr	r3, [r0, #0]
{
 8006fa2:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006fa4:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8006fa8:	d015      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8006faa:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8006fac:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8006fb0:	f000 8442 	beq.w	8007838 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8006fb4:	f240 84f3 	bls.w	800799e <HAL_RCCEx_PeriphCLKConfig+0xa02>
 8006fb8:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8006fbc:	f000 8455 	beq.w	800786a <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 8006fc0:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8006fc4:	f040 8504 	bne.w	80079d0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006fc8:	48a2      	ldr	r0, [pc, #648]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006fca:	2600      	movs	r6, #0
 8006fcc:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8006fce:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8006fd2:	430a      	orrs	r2, r1
 8006fd4:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006fd6:	05dd      	lsls	r5, r3, #23
 8006fd8:	d50a      	bpl.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch(PeriphClkInit->Sai1ClockSelection)
 8006fda:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006fdc:	2a04      	cmp	r2, #4
 8006fde:	d806      	bhi.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006fe0:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006fe4:	03d903d2 	.word	0x03d903d2
 8006fe8:	039303c7 	.word	0x039303c7
 8006fec:	0393      	.short	0x0393
      ret = HAL_ERROR;
 8006fee:	2601      	movs	r6, #1
 8006ff0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006ff2:	0598      	lsls	r0, r3, #22
 8006ff4:	d51b      	bpl.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x92>
    switch(PeriphClkInit->Sai23ClockSelection)
 8006ff6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006ff8:	2a80      	cmp	r2, #128	; 0x80
 8006ffa:	f000 83f5 	beq.w	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8006ffe:	f200 84c3 	bhi.w	8007988 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 8007002:	2a00      	cmp	r2, #0
 8007004:	f000 8437 	beq.w	8007876 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8007008:	2a40      	cmp	r2, #64	; 0x40
 800700a:	f040 84c4 	bne.w	8007996 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800700e:	2100      	movs	r1, #0
 8007010:	1d20      	adds	r0, r4, #4
 8007012:	f7ff fecb 	bl	8006dac <RCCEx_PLL2_Config>
 8007016:	6823      	ldr	r3, [r4, #0]
 8007018:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800701a:	2d00      	cmp	r5, #0
 800701c:	f040 83ee 	bne.w	80077fc <HAL_RCCEx_PeriphCLKConfig+0x860>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007020:	498c      	ldr	r1, [pc, #560]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007022:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007024:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007026:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 800702a:	4302      	orrs	r2, r0
 800702c:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800702e:	0559      	lsls	r1, r3, #21
 8007030:	d51f      	bpl.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai4AClockSelection)
 8007032:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8007036:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800703a:	f000 83c9 	beq.w	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x834>
 800703e:	f200 848b 	bhi.w	8007958 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
 8007042:	2a00      	cmp	r2, #0
 8007044:	f000 8404 	beq.w	8007850 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8007048:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800704c:	f040 848c 	bne.w	8007968 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007050:	2100      	movs	r1, #0
 8007052:	1d20      	adds	r0, r4, #4
 8007054:	f7ff feaa 	bl	8006dac <RCCEx_PLL2_Config>
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800705c:	2d00      	cmp	r5, #0
 800705e:	f040 83c1 	bne.w	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x848>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007062:	497c      	ldr	r1, [pc, #496]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007064:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8007068:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800706a:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 800706e:	4302      	orrs	r2, r0
 8007070:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007072:	051a      	lsls	r2, r3, #20
 8007074:	d51f      	bpl.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch(PeriphClkInit->Sai4BClockSelection)
 8007076:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 800707a:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 800707e:	f000 83c3 	beq.w	8007808 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 8007082:	f200 8475 	bhi.w	8007970 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007086:	2a00      	cmp	r2, #0
 8007088:	f000 83fc 	beq.w	8007884 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 800708c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8007090:	f040 8476 	bne.w	8007980 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007094:	2100      	movs	r1, #0
 8007096:	1d20      	adds	r0, r4, #4
 8007098:	f7ff fe88 	bl	8006dac <RCCEx_PLL2_Config>
 800709c:	6823      	ldr	r3, [r4, #0]
 800709e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80070a0:	2d00      	cmp	r5, #0
 80070a2:	f040 83bb 	bne.w	800781c <HAL_RCCEx_PeriphCLKConfig+0x880>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80070a6:	496b      	ldr	r1, [pc, #428]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80070a8:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 80070ac:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80070ae:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 80070b2:	4302      	orrs	r2, r0
 80070b4:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80070b6:	019f      	lsls	r7, r3, #6
 80070b8:	d50d      	bpl.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    switch(PeriphClkInit->QspiClockSelection)
 80070ba:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80070bc:	2a10      	cmp	r2, #16
 80070be:	f000 8301 	beq.w	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80070c2:	f240 8480 	bls.w	80079c6 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 80070c6:	2a20      	cmp	r2, #32
 80070c8:	f000 833e 	beq.w	8007748 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 80070cc:	2a30      	cmp	r2, #48	; 0x30
 80070ce:	f000 82fe 	beq.w	80076ce <HAL_RCCEx_PeriphCLKConfig+0x732>
      ret = HAL_ERROR;
 80070d2:	2601      	movs	r6, #1
 80070d4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80070d6:	04d8      	lsls	r0, r3, #19
 80070d8:	d51d      	bpl.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    switch(PeriphClkInit->Spi123ClockSelection)
 80070da:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80070dc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80070e0:	f000 839e 	beq.w	8007820 <HAL_RCCEx_PeriphCLKConfig+0x884>
 80070e4:	f200 8463 	bhi.w	80079ae <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80070e8:	2a00      	cmp	r2, #0
 80070ea:	f000 83b8 	beq.w	800785e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
 80070ee:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80070f2:	f040 8464 	bne.w	80079be <HAL_RCCEx_PeriphCLKConfig+0xa22>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070f6:	2100      	movs	r1, #0
 80070f8:	1d20      	adds	r0, r4, #4
 80070fa:	f7ff fe57 	bl	8006dac <RCCEx_PLL2_Config>
 80070fe:	6823      	ldr	r3, [r4, #0]
 8007100:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007102:	2d00      	cmp	r5, #0
 8007104:	f040 8396 	bne.w	8007834 <HAL_RCCEx_PeriphCLKConfig+0x898>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007108:	4952      	ldr	r1, [pc, #328]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800710a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800710c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800710e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8007112:	4302      	orrs	r2, r0
 8007114:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007116:	0499      	lsls	r1, r3, #18
 8007118:	d51b      	bpl.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Spi45ClockSelection)
 800711a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800711c:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8007120:	f000 82fe 	beq.w	8007720 <HAL_RCCEx_PeriphCLKConfig+0x784>
 8007124:	f200 83fa 	bhi.w	800791c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007128:	b14a      	cbz	r2, 800713e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800712a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800712e:	f040 8401 	bne.w	8007934 <HAL_RCCEx_PeriphCLKConfig+0x998>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007132:	2101      	movs	r1, #1
 8007134:	1d20      	adds	r0, r4, #4
 8007136:	f7ff fe39 	bl	8006dac <RCCEx_PLL2_Config>
 800713a:	6823      	ldr	r3, [r4, #0]
 800713c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800713e:	2d00      	cmp	r5, #0
 8007140:	f040 8266 	bne.w	8007610 <HAL_RCCEx_PeriphCLKConfig+0x674>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007144:	4943      	ldr	r1, [pc, #268]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007146:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8007148:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800714a:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800714e:	4302      	orrs	r2, r0
 8007150:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007152:	045a      	lsls	r2, r3, #17
 8007154:	d51d      	bpl.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007156:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 800715a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800715e:	f000 82a7 	beq.w	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8007162:	f200 83ea 	bhi.w	800793a <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8007166:	b14a      	cbz	r2, 800717c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8007168:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800716c:	f040 83f1 	bne.w	8007952 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007170:	2101      	movs	r1, #1
 8007172:	1d20      	adds	r0, r4, #4
 8007174:	f7ff fe1a 	bl	8006dac <RCCEx_PLL2_Config>
 8007178:	6823      	ldr	r3, [r4, #0]
 800717a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800717c:	2d00      	cmp	r5, #0
 800717e:	f040 8245 	bne.w	800760c <HAL_RCCEx_PeriphCLKConfig+0x670>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007182:	4934      	ldr	r1, [pc, #208]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8007184:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8007188:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800718a:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800718e:	4302      	orrs	r2, r0
 8007190:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007192:	041f      	lsls	r7, r3, #16
 8007194:	d50d      	bpl.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    switch(PeriphClkInit->FdcanClockSelection)
 8007196:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8007198:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800719c:	f000 82cb 	beq.w	8007736 <HAL_RCCEx_PeriphCLKConfig+0x79a>
 80071a0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80071a4:	f000 81a3 	beq.w	80074ee <HAL_RCCEx_PeriphCLKConfig+0x552>
 80071a8:	2a00      	cmp	r2, #0
 80071aa:	f000 81a6 	beq.w	80074fa <HAL_RCCEx_PeriphCLKConfig+0x55e>
      ret = HAL_ERROR;
 80071ae:	2601      	movs	r6, #1
 80071b0:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80071b2:	01d8      	lsls	r0, r3, #7
 80071b4:	d519      	bpl.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x24e>
    switch(PeriphClkInit->FmcClockSelection)
 80071b6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80071b8:	2a03      	cmp	r2, #3
 80071ba:	f200 8434 	bhi.w	8007a26 <HAL_RCCEx_PeriphCLKConfig+0xa8a>
 80071be:	e8df f012 	tbh	[pc, r2, lsl #1]
 80071c2:	000a      	.short	0x000a
 80071c4:	00040259 	.word	0x00040259
 80071c8:	000a      	.short	0x000a
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80071ca:	2102      	movs	r1, #2
 80071cc:	1d20      	adds	r0, r4, #4
 80071ce:	f7ff fded 	bl	8006dac <RCCEx_PLL2_Config>
 80071d2:	6823      	ldr	r3, [r4, #0]
 80071d4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80071d6:	2d00      	cmp	r5, #0
 80071d8:	f040 8210 	bne.w	80075fc <HAL_RCCEx_PeriphCLKConfig+0x660>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80071dc:	491d      	ldr	r1, [pc, #116]	; (8007254 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80071de:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80071e0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80071e2:	f022 0203 	bic.w	r2, r2, #3
 80071e6:	4302      	orrs	r2, r0
 80071e8:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80071ea:	0259      	lsls	r1, r3, #9
 80071ec:	f100 81c0 	bmi.w	8007570 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80071f0:	07df      	lsls	r7, r3, #31
 80071f2:	d542      	bpl.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch(PeriphClkInit->Usart16ClockSelection)
 80071f4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80071f6:	2a28      	cmp	r2, #40	; 0x28
 80071f8:	f200 835c 	bhi.w	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x918>
 80071fc:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007200:	035a0033 	.word	0x035a0033
 8007204:	035a035a 	.word	0x035a035a
 8007208:	035a035a 	.word	0x035a035a
 800720c:	035a035a 	.word	0x035a035a
 8007210:	035a024b 	.word	0x035a024b
 8007214:	035a035a 	.word	0x035a035a
 8007218:	035a035a 	.word	0x035a035a
 800721c:	035a035a 	.word	0x035a035a
 8007220:	035a002c 	.word	0x035a002c
 8007224:	035a035a 	.word	0x035a035a
 8007228:	035a035a 	.word	0x035a035a
 800722c:	035a035a 	.word	0x035a035a
 8007230:	035a0033 	.word	0x035a0033
 8007234:	035a035a 	.word	0x035a035a
 8007238:	035a035a 	.word	0x035a035a
 800723c:	035a035a 	.word	0x035a035a
 8007240:	035a0033 	.word	0x035a0033
 8007244:	035a035a 	.word	0x035a035a
 8007248:	035a035a 	.word	0x035a035a
 800724c:	035a035a 	.word	0x035a035a
 8007250:	0033      	.short	0x0033
 8007252:	bf00      	nop
 8007254:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007258:	2101      	movs	r1, #1
 800725a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800725e:	f7ff fe21 	bl	8006ea4 <RCCEx_PLL3_Config>
 8007262:	6823      	ldr	r3, [r4, #0]
 8007264:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007266:	2d00      	cmp	r5, #0
 8007268:	f040 81c6 	bne.w	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800726c:	49b1      	ldr	r1, [pc, #708]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800726e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8007270:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8007272:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8007276:	4302      	orrs	r2, r0
 8007278:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800727a:	0798      	lsls	r0, r3, #30
 800727c:	d51c      	bpl.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800727e:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8007280:	2a05      	cmp	r2, #5
 8007282:	f200 83ca 	bhi.w	8007a1a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007286:	e8df f012 	tbh	[pc, r2, lsl #1]
 800728a:	000d      	.short	0x000d
 800728c:	000601ec 	.word	0x000601ec
 8007290:	000d000d 	.word	0x000d000d
 8007294:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007296:	2101      	movs	r1, #1
 8007298:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800729c:	f7ff fe02 	bl	8006ea4 <RCCEx_PLL3_Config>
 80072a0:	6823      	ldr	r3, [r4, #0]
 80072a2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80072a4:	2d00      	cmp	r5, #0
 80072a6:	f040 81ab 	bne.w	8007600 <HAL_RCCEx_PeriphCLKConfig+0x664>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80072aa:	49a2      	ldr	r1, [pc, #648]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80072ac:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80072ae:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 80072b0:	f022 0207 	bic.w	r2, r2, #7
 80072b4:	4302      	orrs	r2, r0
 80072b6:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80072b8:	0759      	lsls	r1, r3, #29
 80072ba:	d51e      	bpl.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x35e>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80072bc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80072c0:	2a05      	cmp	r2, #5
 80072c2:	f200 83ad 	bhi.w	8007a20 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 80072c6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80072ca:	000d      	.short	0x000d
 80072cc:	000601dd 	.word	0x000601dd
 80072d0:	000d000d 	.word	0x000d000d
 80072d4:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80072d6:	2101      	movs	r1, #1
 80072d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80072dc:	f7ff fde2 	bl	8006ea4 <RCCEx_PLL3_Config>
 80072e0:	6823      	ldr	r3, [r4, #0]
 80072e2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80072e4:	2d00      	cmp	r5, #0
 80072e6:	f040 818d 	bne.w	8007604 <HAL_RCCEx_PeriphCLKConfig+0x668>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80072ea:	4992      	ldr	r1, [pc, #584]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80072ec:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80072f0:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80072f2:	f022 0207 	bic.w	r2, r2, #7
 80072f6:	4302      	orrs	r2, r0
 80072f8:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072fa:	069a      	lsls	r2, r3, #26
 80072fc:	d51d      	bpl.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80072fe:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007302:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8007306:	f000 81ec 	beq.w	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x746>
 800730a:	f200 82da 	bhi.w	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x926>
 800730e:	b14a      	cbz	r2, 8007324 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8007310:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8007314:	f040 82e1 	bne.w	80078da <HAL_RCCEx_PeriphCLKConfig+0x93e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007318:	2100      	movs	r1, #0
 800731a:	1d20      	adds	r0, r4, #4
 800731c:	f7ff fd46 	bl	8006dac <RCCEx_PLL2_Config>
 8007320:	6823      	ldr	r3, [r4, #0]
 8007322:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007324:	2d00      	cmp	r5, #0
 8007326:	f040 816f 	bne.w	8007608 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800732a:	4982      	ldr	r1, [pc, #520]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800732c:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8007330:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8007332:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8007336:	4302      	orrs	r2, r0
 8007338:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800733a:	065f      	lsls	r7, r3, #25
 800733c:	d51d      	bpl.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800733e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8007342:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007346:	f000 81d6 	beq.w	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 800734a:	f200 82c9 	bhi.w	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x944>
 800734e:	b14a      	cbz	r2, 8007364 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8007350:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007354:	f040 82d0 	bne.w	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007358:	2100      	movs	r1, #0
 800735a:	1d20      	adds	r0, r4, #4
 800735c:	f7ff fd26 	bl	8006dac <RCCEx_PLL2_Config>
 8007360:	6823      	ldr	r3, [r4, #0]
 8007362:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007364:	2d00      	cmp	r5, #0
 8007366:	f040 8157 	bne.w	8007618 <HAL_RCCEx_PeriphCLKConfig+0x67c>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800736a:	4972      	ldr	r1, [pc, #456]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800736c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8007370:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8007372:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8007376:	4302      	orrs	r2, r0
 8007378:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800737a:	0618      	lsls	r0, r3, #24
 800737c:	d51d      	bpl.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800737e:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8007382:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8007386:	f000 81e9 	beq.w	800775c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800738a:	f200 82b8 	bhi.w	80078fe <HAL_RCCEx_PeriphCLKConfig+0x962>
 800738e:	b14a      	cbz	r2, 80073a4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007390:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8007394:	f040 82bf 	bne.w	8007916 <HAL_RCCEx_PeriphCLKConfig+0x97a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007398:	2100      	movs	r1, #0
 800739a:	1d20      	adds	r0, r4, #4
 800739c:	f7ff fd06 	bl	8006dac <RCCEx_PLL2_Config>
 80073a0:	6823      	ldr	r3, [r4, #0]
 80073a2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80073a4:	2d00      	cmp	r5, #0
 80073a6:	f040 8139 	bne.w	800761c <HAL_RCCEx_PeriphCLKConfig+0x680>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80073aa:	4962      	ldr	r1, [pc, #392]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80073ac:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 80073b0:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80073b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80073b6:	4302      	orrs	r2, r0
 80073b8:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80073ba:	0719      	lsls	r1, r3, #28
 80073bc:	d50b      	bpl.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80073be:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80073c2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80073c6:	f000 81ed 	beq.w	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x808>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80073ca:	485a      	ldr	r0, [pc, #360]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80073cc:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80073ce:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80073d2:	430a      	orrs	r2, r1
 80073d4:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80073d6:	06da      	lsls	r2, r3, #27
 80073d8:	d50b      	bpl.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x456>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80073da:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80073de:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80073e2:	f000 81ea 	beq.w	80077ba <HAL_RCCEx_PeriphCLKConfig+0x81e>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073e6:	4853      	ldr	r0, [pc, #332]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80073e8:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80073ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80073ee:	430a      	orrs	r2, r1
 80073f0:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80073f2:	031f      	lsls	r7, r3, #12
 80073f4:	d50e      	bpl.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x478>
    switch(PeriphClkInit->AdcClockSelection)
 80073f6:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80073fa:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80073fe:	f000 8087 	beq.w	8007510 <HAL_RCCEx_PeriphCLKConfig+0x574>
 8007402:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8007406:	f000 808a 	beq.w	800751e <HAL_RCCEx_PeriphCLKConfig+0x582>
 800740a:	2900      	cmp	r1, #0
 800740c:	f000 8240 	beq.w	8007890 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      ret = HAL_ERROR;
 8007410:	2601      	movs	r6, #1
 8007412:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007414:	0358      	lsls	r0, r3, #13
 8007416:	d50f      	bpl.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x49c>
    switch(PeriphClkInit->UsbClockSelection)
 8007418:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800741c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8007420:	f000 808a 	beq.w	8007538 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007424:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8007428:	f000 808d 	beq.w	8007546 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800742c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8007430:	f000 8237 	beq.w	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      ret = HAL_ERROR;
 8007434:	2601      	movs	r6, #1
 8007436:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007438:	03d9      	lsls	r1, r3, #15
 800743a:	d517      	bpl.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    switch(PeriphClkInit->SdmmcClockSelection)
 800743c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800743e:	2a00      	cmp	r2, #0
 8007440:	f000 8105 	beq.w	800764e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8007444:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007448:	f040 80ec 	bne.w	8007624 <HAL_RCCEx_PeriphCLKConfig+0x688>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800744c:	2102      	movs	r1, #2
 800744e:	1d20      	adds	r0, r4, #4
 8007450:	f7ff fcac 	bl	8006dac <RCCEx_PLL2_Config>
 8007454:	4605      	mov	r5, r0
 8007456:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007458:	2d00      	cmp	r5, #0
 800745a:	f040 8100 	bne.w	800765e <HAL_RCCEx_PeriphCLKConfig+0x6c2>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800745e:	4935      	ldr	r1, [pc, #212]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8007460:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007462:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8007464:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007468:	4302      	orrs	r2, r0
 800746a:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800746c:	009a      	lsls	r2, r3, #2
 800746e:	d475      	bmi.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007470:	039f      	lsls	r7, r3, #14
 8007472:	d42b      	bmi.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x530>
 8007474:	1c30      	adds	r0, r6, #0
 8007476:	bf18      	it	ne
 8007478:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800747a:	02dd      	lsls	r5, r3, #11
 800747c:	d506      	bpl.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800747e:	492d      	ldr	r1, [pc, #180]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8007480:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8007482:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007484:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007488:	432a      	orrs	r2, r5
 800748a:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800748c:	0299      	lsls	r1, r3, #10
 800748e:	d506      	bpl.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x502>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007490:	4928      	ldr	r1, [pc, #160]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8007492:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 8007494:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007496:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800749a:	432a      	orrs	r2, r5
 800749c:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800749e:	005a      	lsls	r2, r3, #1
 80074a0:	d509      	bpl.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80074a2:	4a24      	ldr	r2, [pc, #144]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80074a4:	6911      	ldr	r1, [r2, #16]
 80074a6:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80074aa:	6111      	str	r1, [r2, #16]
 80074ac:	6911      	ldr	r1, [r2, #16]
 80074ae:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 80074b2:	4329      	orrs	r1, r5
 80074b4:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	da06      	bge.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80074ba:	4a1e      	ldr	r2, [pc, #120]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80074bc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80074be:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80074c0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80074c4:	430b      	orrs	r3, r1
 80074c6:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80074c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 80074cc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80074ce:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80074d2:	f000 80aa 	beq.w	800762a <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80074d6:	f240 80e7 	bls.w	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x70c>
 80074da:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80074de:	f000 80a9 	beq.w	8007634 <HAL_RCCEx_PeriphCLKConfig+0x698>
 80074e2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80074e6:	f000 80a5 	beq.w	8007634 <HAL_RCCEx_PeriphCLKConfig+0x698>
 80074ea:	2001      	movs	r0, #1
 80074ec:	e7c5      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80074ee:	2101      	movs	r1, #1
 80074f0:	1d20      	adds	r0, r4, #4
 80074f2:	f7ff fc5b 	bl	8006dac <RCCEx_PLL2_Config>
 80074f6:	6823      	ldr	r3, [r4, #0]
 80074f8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80074fa:	2d00      	cmp	r5, #0
 80074fc:	f040 808a 	bne.w	8007614 <HAL_RCCEx_PeriphCLKConfig+0x678>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007500:	490c      	ldr	r1, [pc, #48]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8007502:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007504:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007506:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800750a:	4302      	orrs	r2, r0
 800750c:	650a      	str	r2, [r1, #80]	; 0x50
 800750e:	e650      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x216>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007510:	2102      	movs	r1, #2
 8007512:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007516:	f7ff fcc5 	bl	8006ea4 <RCCEx_PLL3_Config>
 800751a:	6823      	ldr	r3, [r4, #0]
 800751c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800751e:	2d00      	cmp	r5, #0
 8007520:	d17e      	bne.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x684>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007522:	4904      	ldr	r1, [pc, #16]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8007524:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8007528:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800752a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800752e:	4302      	orrs	r2, r0
 8007530:	658a      	str	r2, [r1, #88]	; 0x58
 8007532:	e76f      	b.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007534:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007538:	2101      	movs	r1, #1
 800753a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800753e:	f7ff fcb1 	bl	8006ea4 <RCCEx_PLL3_Config>
 8007542:	6823      	ldr	r3, [r4, #0]
 8007544:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007546:	2d00      	cmp	r5, #0
 8007548:	d154      	bne.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x658>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800754a:	49ad      	ldr	r1, [pc, #692]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 800754c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8007550:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8007552:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8007556:	4302      	orrs	r2, r0
 8007558:	654a      	str	r2, [r1, #84]	; 0x54
 800755a:	e76d      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x49c>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800755c:	2102      	movs	r1, #2
 800755e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007562:	f7ff fc9f 	bl	8006ea4 <RCCEx_PLL3_Config>
 8007566:	6823      	ldr	r3, [r4, #0]
 8007568:	2800      	cmp	r0, #0
 800756a:	d081      	beq.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      status=HAL_ERROR;
 800756c:	2601      	movs	r6, #1
 800756e:	e77f      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007570:	4ba4      	ldr	r3, [pc, #656]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x868>)
 8007572:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007574:	461f      	mov	r7, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007576:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800757a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800757c:	f7fc f9f4 	bl	8003968 <HAL_GetTick>
 8007580:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007582:	e006      	b.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007584:	f7fc f9f0 	bl	8003968 <HAL_GetTick>
 8007588:	eba0 0008 	sub.w	r0, r0, r8
 800758c:	2864      	cmp	r0, #100	; 0x64
 800758e:	f200 8194 	bhi.w	80078ba <HAL_RCCEx_PeriphCLKConfig+0x91e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	05da      	lsls	r2, r3, #23
 8007596:	d5f5      	bpl.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    if(ret == HAL_OK)
 8007598:	2d00      	cmp	r5, #0
 800759a:	f040 823a 	bne.w	8007a12 <HAL_RCCEx_PeriphCLKConfig+0xa76>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800759e:	4a98      	ldr	r2, [pc, #608]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 80075a0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80075a4:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80075a6:	4059      	eors	r1, r3
 80075a8:	f411 7f40 	tst.w	r1, #768	; 0x300
 80075ac:	d00b      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075ae:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80075b0:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075b2:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80075b6:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80075ba:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80075bc:	6f10      	ldr	r0, [r2, #112]	; 0x70
 80075be:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 80075c2:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 80075c4:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80075c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075ca:	f000 8204 	beq.w	80079d6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075ce:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80075d2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80075d6:	f000 8212 	beq.w	80079fe <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80075da:	4989      	ldr	r1, [pc, #548]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 80075dc:	690a      	ldr	r2, [r1, #16]
 80075de:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80075e2:	610a      	str	r2, [r1, #16]
 80075e4:	4a86      	ldr	r2, [pc, #536]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 80075e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075ea:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80075ec:	430b      	orrs	r3, r1
 80075ee:	6713      	str	r3, [r2, #112]	; 0x70
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	e5fd      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80075f4:	462e      	mov	r6, r5
 80075f6:	e71f      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80075f8:	462e      	mov	r6, r5
 80075fa:	e63e      	b.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80075fc:	462e      	mov	r6, r5
 80075fe:	e5f4      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8007600:	462e      	mov	r6, r5
 8007602:	e659      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8007604:	462e      	mov	r6, r5
 8007606:	e678      	b.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8007608:	462e      	mov	r6, r5
 800760a:	e696      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x39e>
 800760c:	462e      	mov	r6, r5
 800760e:	e5c0      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007610:	462e      	mov	r6, r5
 8007612:	e59e      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007614:	462e      	mov	r6, r5
 8007616:	e5cc      	b.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x216>
 8007618:	462e      	mov	r6, r5
 800761a:	e6ae      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800761c:	462e      	mov	r6, r5
 800761e:	e6cc      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8007620:	462e      	mov	r6, r5
 8007622:	e6f7      	b.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x478>
      ret = HAL_ERROR;
 8007624:	2601      	movs	r6, #1
 8007626:	4635      	mov	r5, r6
 8007628:	e720      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800762a:	4875      	ldr	r0, [pc, #468]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 800762c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800762e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8007632:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 8007634:	2d00      	cmp	r5, #0
 8007636:	f47f af58 	bne.w	80074ea <HAL_RCCEx_PeriphCLKConfig+0x54e>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800763a:	4d71      	ldr	r5, [pc, #452]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 800763c:	1c30      	adds	r0, r6, #0
 800763e:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8007640:	bf18      	it	ne
 8007642:	2001      	movne	r0, #1
 8007644:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8007648:	430a      	orrs	r2, r1
 800764a:	656a      	str	r2, [r5, #84]	; 0x54
 800764c:	e715      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x4de>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800764e:	496c      	ldr	r1, [pc, #432]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007650:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007652:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007656:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8007658:	2d00      	cmp	r5, #0
 800765a:	f43f af00 	beq.w	800745e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800765e:	462e      	mov	r6, r5
 8007660:	e704      	b.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007662:	2101      	movs	r1, #1
 8007664:	1d20      	adds	r0, r4, #4
 8007666:	f7ff fba1 	bl	8006dac <RCCEx_PLL2_Config>
 800766a:	4605      	mov	r5, r0
 800766c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800766e:	2d00      	cmp	r5, #0
 8007670:	d1c6      	bne.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007672:	e61a      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007674:	4962      	ldr	r1, [pc, #392]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007676:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007678:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800767c:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 800767e:	2d00      	cmp	r5, #0
 8007680:	d1bc      	bne.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x660>
 8007682:	e5ab      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007684:	2101      	movs	r1, #1
 8007686:	1d20      	adds	r0, r4, #4
 8007688:	f7ff fb90 	bl	8006dac <RCCEx_PLL2_Config>
 800768c:	4605      	mov	r5, r0
 800768e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007690:	2d00      	cmp	r5, #0
 8007692:	d1b7      	bne.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x668>
 8007694:	e629      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007696:	2101      	movs	r1, #1
 8007698:	1d20      	adds	r0, r4, #4
 800769a:	f7ff fb87 	bl	8006dac <RCCEx_PLL2_Config>
 800769e:	4605      	mov	r5, r0
 80076a0:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80076a2:	2d00      	cmp	r5, #0
 80076a4:	d1a8      	bne.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 80076a6:	e5e1      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    switch(PeriphClkInit->RngClockSelection)
 80076a8:	2a00      	cmp	r2, #0
 80076aa:	f47f af1e 	bne.w	80074ea <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80076ae:	e7c1      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x698>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80076b0:	2101      	movs	r1, #1
 80076b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80076b6:	f7ff fbf5 	bl	8006ea4 <RCCEx_PLL3_Config>
 80076ba:	4605      	mov	r5, r0
 80076bc:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80076be:	2d00      	cmp	r5, #0
 80076c0:	d1a4      	bne.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x670>
 80076c2:	e55e      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076c4:	494e      	ldr	r1, [pc, #312]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 80076c6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80076c8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80076cc:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80076ce:	2d00      	cmp	r5, #0
 80076d0:	d142      	bne.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80076d2:	494b      	ldr	r1, [pc, #300]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 80076d4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80076d6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80076d8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80076dc:	4302      	orrs	r2, r0
 80076de:	64ca      	str	r2, [r1, #76]	; 0x4c
 80076e0:	e4f9      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076e2:	2102      	movs	r1, #2
 80076e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80076e8:	f7ff fbdc 	bl	8006ea4 <RCCEx_PLL3_Config>
 80076ec:	4605      	mov	r5, r0
 80076ee:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80076f0:	2d00      	cmp	r5, #0
 80076f2:	d189      	bne.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80076f4:	e619      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076f6:	2102      	movs	r1, #2
 80076f8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80076fc:	f7ff fbd2 	bl	8006ea4 <RCCEx_PLL3_Config>
 8007700:	4605      	mov	r5, r0
 8007702:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007704:	2d00      	cmp	r5, #0
 8007706:	d187      	bne.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x67c>
 8007708:	e62f      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    switch(PeriphClkInit->Sai1ClockSelection)
 800770a:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 800770c:	2d00      	cmp	r5, #0
 800770e:	d139      	bne.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x7e8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007710:	493b      	ldr	r1, [pc, #236]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007712:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007714:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007716:	f022 0207 	bic.w	r2, r2, #7
 800771a:	4302      	orrs	r2, r0
 800771c:	650a      	str	r2, [r1, #80]	; 0x50
 800771e:	e468      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x56>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007720:	2101      	movs	r1, #1
 8007722:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007726:	f7ff fbbd 	bl	8006ea4 <RCCEx_PLL3_Config>
 800772a:	4605      	mov	r5, r0
 800772c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800772e:	2d00      	cmp	r5, #0
 8007730:	f47f af6e 	bne.w	8007610 <HAL_RCCEx_PeriphCLKConfig+0x674>
 8007734:	e506      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007736:	4932      	ldr	r1, [pc, #200]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007738:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800773a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800773e:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8007740:	2d00      	cmp	r5, #0
 8007742:	f47f af67 	bne.w	8007614 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8007746:	e6db      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x564>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007748:	2102      	movs	r1, #2
 800774a:	1d20      	adds	r0, r4, #4
 800774c:	f7ff fb2e 	bl	8006dac <RCCEx_PLL2_Config>
 8007750:	4605      	mov	r5, r0
 8007752:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007754:	2d00      	cmp	r5, #0
 8007756:	d0bc      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x736>
 8007758:	462e      	mov	r6, r5
 800775a:	e4bc      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800775c:	2102      	movs	r1, #2
 800775e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007762:	f7ff fb9f 	bl	8006ea4 <RCCEx_PLL3_Config>
 8007766:	4605      	mov	r5, r0
 8007768:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800776a:	2d00      	cmp	r5, #0
 800776c:	f47f af56 	bne.w	800761c <HAL_RCCEx_PeriphCLKConfig+0x680>
 8007770:	e61b      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007772:	2100      	movs	r1, #0
 8007774:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007778:	f7ff fb94 	bl	8006ea4 <RCCEx_PLL3_Config>
 800777c:	4605      	mov	r5, r0
 800777e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007780:	2d00      	cmp	r5, #0
 8007782:	d0c5      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x774>
 8007784:	462e      	mov	r6, r5
 8007786:	e434      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007788:	491d      	ldr	r1, [pc, #116]	; (8007800 <HAL_RCCEx_PeriphCLKConfig+0x864>)
      break;
 800778a:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800778c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800778e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007792:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8007794:	e7ba      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x770>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007796:	2100      	movs	r1, #0
 8007798:	1d20      	adds	r0, r4, #4
 800779a:	f7ff fb07 	bl	8006dac <RCCEx_PLL2_Config>
 800779e:	6823      	ldr	r3, [r4, #0]
 80077a0:	4605      	mov	r5, r0
      break;
 80077a2:	e7b3      	b.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x770>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80077a4:	2102      	movs	r1, #2
 80077a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80077aa:	f7ff fb7b 	bl	8006ea4 <RCCEx_PLL3_Config>
 80077ae:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80077b2:	b100      	cbz	r0, 80077b6 <HAL_RCCEx_PeriphCLKConfig+0x81a>
          status = HAL_ERROR;
 80077b4:	2601      	movs	r6, #1
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	e607      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80077ba:	2102      	movs	r1, #2
 80077bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80077c0:	f7ff fb70 	bl	8006ea4 <RCCEx_PLL3_Config>
 80077c4:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80077c8:	b100      	cbz	r0, 80077cc <HAL_RCCEx_PeriphCLKConfig+0x830>
        status = HAL_ERROR;
 80077ca:	2601      	movs	r6, #1
 80077cc:	6823      	ldr	r3, [r4, #0]
 80077ce:	e60a      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80077d0:	2100      	movs	r1, #0
 80077d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80077d6:	f7ff fb65 	bl	8006ea4 <RCCEx_PLL3_Config>
 80077da:	4605      	mov	r5, r0
 80077dc:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80077de:	2d00      	cmp	r5, #0
 80077e0:	f43f ac3f 	beq.w	8007062 <HAL_RCCEx_PeriphCLKConfig+0xc6>
 80077e4:	462e      	mov	r6, r5
 80077e6:	e444      	b.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80077e8:	2100      	movs	r1, #0
 80077ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80077ee:	f7ff fb59 	bl	8006ea4 <RCCEx_PLL3_Config>
 80077f2:	4605      	mov	r5, r0
 80077f4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80077f6:	2d00      	cmp	r5, #0
 80077f8:	f43f ac12 	beq.w	8007020 <HAL_RCCEx_PeriphCLKConfig+0x84>
 80077fc:	462e      	mov	r6, r5
 80077fe:	e416      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x92>
 8007800:	58024400 	.word	0x58024400
 8007804:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007808:	2100      	movs	r1, #0
 800780a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800780e:	f7ff fb49 	bl	8006ea4 <RCCEx_PLL3_Config>
 8007812:	4605      	mov	r5, r0
 8007814:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007816:	2d00      	cmp	r5, #0
 8007818:	f43f ac45 	beq.w	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800781c:	462e      	mov	r6, r5
 800781e:	e44a      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007820:	2100      	movs	r1, #0
 8007822:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007826:	f7ff fb3d 	bl	8006ea4 <RCCEx_PLL3_Config>
 800782a:	4605      	mov	r5, r0
 800782c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800782e:	2d00      	cmp	r5, #0
 8007830:	f43f ac6a 	beq.w	8007108 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007834:	462e      	mov	r6, r5
 8007836:	e46e      	b.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007838:	2102      	movs	r1, #2
 800783a:	3004      	adds	r0, #4
 800783c:	f7ff fab6 	bl	8006dac <RCCEx_PLL2_Config>
 8007840:	4606      	mov	r6, r0
 8007842:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007844:	2e00      	cmp	r6, #0
 8007846:	f47f abc6 	bne.w	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 800784a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800784c:	f7ff bbbc 	b.w	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007850:	4977      	ldr	r1, [pc, #476]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007852:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007854:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007858:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800785a:	f7ff bbff 	b.w	800705c <HAL_RCCEx_PeriphCLKConfig+0xc0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800785e:	4974      	ldr	r1, [pc, #464]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007860:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007862:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007866:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8007868:	e44b      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800786a:	2102      	movs	r1, #2
 800786c:	3024      	adds	r0, #36	; 0x24
 800786e:	f7ff fb19 	bl	8006ea4 <RCCEx_PLL3_Config>
 8007872:	4606      	mov	r6, r0
      break;
 8007874:	e7e5      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007876:	496e      	ldr	r1, [pc, #440]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007878:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800787a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800787e:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 8007880:	f7ff bbcb 	b.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007884:	496a      	ldr	r1, [pc, #424]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007886:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007888:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800788c:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 800788e:	e407      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x104>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007890:	1d20      	adds	r0, r4, #4
 8007892:	f7ff fa8b 	bl	8006dac <RCCEx_PLL2_Config>
 8007896:	4605      	mov	r5, r0
 8007898:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800789a:	2d00      	cmp	r5, #0
 800789c:	f47f aec0 	bne.w	8007620 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80078a0:	e63f      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x586>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078a2:	4963      	ldr	r1, [pc, #396]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80078a4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80078a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80078aa:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80078ac:	2d00      	cmp	r5, #0
 80078ae:	f47f aea1 	bne.w	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x658>
 80078b2:	e64a      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      ret = HAL_ERROR;
 80078b4:	2601      	movs	r6, #1
 80078b6:	4635      	mov	r5, r6
 80078b8:	e4df      	b.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x2de>
            ret = HAL_TIMEOUT;
 80078ba:	2603      	movs	r6, #3
 80078bc:	6823      	ldr	r3, [r4, #0]
 80078be:	4635      	mov	r5, r6
 80078c0:	e496      	b.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80078c2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80078c6:	f43f ad2d 	beq.w	8007324 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80078ca:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80078ce:	f43f ad29 	beq.w	8007324 <HAL_RCCEx_PeriphCLKConfig+0x388>
 80078d2:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80078d6:	f43f ad25 	beq.w	8007324 <HAL_RCCEx_PeriphCLKConfig+0x388>
      ret = HAL_ERROR;
 80078da:	2601      	movs	r6, #1
 80078dc:	4635      	mov	r5, r6
 80078de:	e52c      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80078e0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80078e4:	f43f ad3e 	beq.w	8007364 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80078e8:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 80078ec:	f43f ad3a 	beq.w	8007364 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 80078f0:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80078f4:	f43f ad36 	beq.w	8007364 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
      ret = HAL_ERROR;
 80078f8:	2601      	movs	r6, #1
 80078fa:	4635      	mov	r5, r6
 80078fc:	e53d      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80078fe:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007902:	f43f ad4f 	beq.w	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007906:	f5b2 4f20 	cmp.w	r2, #40960	; 0xa000
 800790a:	f43f ad4b 	beq.w	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800790e:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 8007912:	f43f ad47 	beq.w	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x408>
      ret = HAL_ERROR;
 8007916:	2601      	movs	r6, #1
 8007918:	4635      	mov	r5, r6
 800791a:	e54e      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch(PeriphClkInit->Spi45ClockSelection)
 800791c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8007920:	f43f ac0d 	beq.w	800713e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8007924:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8007928:	f43f ac09 	beq.w	800713e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800792c:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8007930:	f43f ac05 	beq.w	800713e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ret = HAL_ERROR;
 8007934:	2601      	movs	r6, #1
 8007936:	4635      	mov	r5, r6
 8007938:	e40b      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Spi6ClockSelection)
 800793a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800793e:	f43f ac1d 	beq.w	800717c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8007942:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8007946:	f43f ac19 	beq.w	800717c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800794a:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800794e:	f43f ac15 	beq.w	800717c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = HAL_ERROR;
 8007952:	2601      	movs	r6, #1
 8007954:	4635      	mov	r5, r6
 8007956:	e41c      	b.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    switch(PeriphClkInit->Sai4AClockSelection)
 8007958:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 800795c:	f43f ab7e 	beq.w	800705c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8007960:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8007964:	f43f ab7a 	beq.w	800705c <HAL_RCCEx_PeriphCLKConfig+0xc0>
      ret = HAL_ERROR;
 8007968:	2601      	movs	r6, #1
 800796a:	4635      	mov	r5, r6
 800796c:	f7ff bb81 	b.w	8007072 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai4BClockSelection)
 8007970:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8007974:	f43f ab94 	beq.w	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8007978:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800797c:	f43f ab90 	beq.w	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x104>
      ret = HAL_ERROR;
 8007980:	2601      	movs	r6, #1
 8007982:	4635      	mov	r5, r6
 8007984:	f7ff bb97 	b.w	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch(PeriphClkInit->Sai23ClockSelection)
 8007988:	2ac0      	cmp	r2, #192	; 0xc0
 800798a:	f43f ab46 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800798e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8007992:	f43f ab42 	beq.w	800701a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      ret = HAL_ERROR;
 8007996:	2601      	movs	r6, #1
 8007998:	4635      	mov	r5, r6
 800799a:	f7ff bb48 	b.w	800702e <HAL_RCCEx_PeriphCLKConfig+0x92>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800799e:	b9ba      	cbnz	r2, 80079d0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079a0:	4823      	ldr	r0, [pc, #140]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80079a2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80079a4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80079a8:	62c1      	str	r1, [r0, #44]	; 0x2c
 80079aa:	f7ff bb0d 	b.w	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Spi123ClockSelection)
 80079ae:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80079b2:	f43f aba6 	beq.w	8007102 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80079b6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80079ba:	f43f aba2 	beq.w	8007102 <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = HAL_ERROR;
 80079be:	2601      	movs	r6, #1
 80079c0:	4635      	mov	r5, r6
 80079c2:	f7ff bba8 	b.w	8007116 <HAL_RCCEx_PeriphCLKConfig+0x17a>
    switch(PeriphClkInit->QspiClockSelection)
 80079c6:	2a00      	cmp	r2, #0
 80079c8:	f43f ae81 	beq.w	80076ce <HAL_RCCEx_PeriphCLKConfig+0x732>
 80079cc:	f7ff bb81 	b.w	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
      ret = HAL_ERROR;
 80079d0:	2601      	movs	r6, #1
 80079d2:	f7ff bb00 	b.w	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 80079d6:	f7fb ffc7 	bl	8003968 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079da:	4f15      	ldr	r7, [pc, #84]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
        tickstart = HAL_GetTick();
 80079dc:	4681      	mov	r9, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079de:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079e2:	e006      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079e4:	f7fb ffc0 	bl	8003968 <HAL_GetTick>
 80079e8:	eba0 0009 	sub.w	r0, r0, r9
 80079ec:	4540      	cmp	r0, r8
 80079ee:	f63f af64 	bhi.w	80078ba <HAL_RCCEx_PeriphCLKConfig+0x91e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079f4:	079b      	lsls	r3, r3, #30
 80079f6:	d5f5      	bpl.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 80079f8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80079fc:	e5e7      	b.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x632>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079fe:	480c      	ldr	r0, [pc, #48]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007a00:	4a0c      	ldr	r2, [pc, #48]	; (8007a34 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8007a02:	6901      	ldr	r1, [r0, #16]
 8007a04:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8007a08:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8007a0c:	430a      	orrs	r2, r1
 8007a0e:	6102      	str	r2, [r0, #16]
 8007a10:	e5e8      	b.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8007a12:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007a14:	462e      	mov	r6, r5
 8007a16:	f7ff bbeb 	b.w	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x254>
      ret = HAL_ERROR;
 8007a1a:	2601      	movs	r6, #1
 8007a1c:	4635      	mov	r5, r6
 8007a1e:	e44b      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = HAL_ERROR;
 8007a20:	2601      	movs	r6, #1
 8007a22:	4635      	mov	r5, r6
 8007a24:	e469      	b.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x35e>
      ret = HAL_ERROR;
 8007a26:	2601      	movs	r6, #1
 8007a28:	4635      	mov	r5, r6
 8007a2a:	f7ff bbde 	b.w	80071ea <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8007a2e:	bf00      	nop
 8007a30:	58024400 	.word	0x58024400
 8007a34:	00ffffcf 	.word	0x00ffffcf

08007a38 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8007a38:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007a3a:	f7fe ffaf 	bl	800699c <HAL_RCC_GetHCLKFreq>
 8007a3e:	4b05      	ldr	r3, [pc, #20]	; (8007a54 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8007a40:	4a05      	ldr	r2, [pc, #20]	; (8007a58 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8007a42:	6a1b      	ldr	r3, [r3, #32]
 8007a44:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007a48:	5cd3      	ldrb	r3, [r2, r3]
 8007a4a:	f003 031f 	and.w	r3, r3, #31
}
 8007a4e:	40d8      	lsrs	r0, r3
 8007a50:	bd08      	pop	{r3, pc}
 8007a52:	bf00      	nop
 8007a54:	58024400 	.word	0x58024400
 8007a58:	0801af18 	.word	0x0801af18

08007a5c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a5c:	4a46      	ldr	r2, [pc, #280]	; (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
{
 8007a5e:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a60:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007a62:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007a64:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007a66:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007a6a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d059      	beq.n	8007b24 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007a70:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007a74:	f3c1 1100 	ubfx	r1, r1, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a78:	f004 0403 	and.w	r4, r4, #3
 8007a7c:	ee07 3a90 	vmov	s15, r3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007a80:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8007a84:	2c01      	cmp	r4, #1
 8007a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a8a:	ee06 1a90 	vmov	s13, r1
 8007a8e:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8007a92:	d002      	beq.n	8007a9a <HAL_RCCEx_GetPLL2ClockFreq+0x3e>
 8007a94:	d34e      	bcc.n	8007b34 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 8007a96:	2c02      	cmp	r4, #2
 8007a98:	d049      	beq.n	8007b2e <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007a9a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007b7c <HAL_RCCEx_GetPLL2ClockFreq+0x120>
 8007a9e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8007aa2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8007aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aa8:	ee07 3a10 	vmov	s14, r3
 8007aac:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007ab0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007ab4:	ee37 7a25 	vadd.f32	s14, s14, s11
 8007ab8:	ee77 7a26 	vadd.f32	s15, s14, s13
 8007abc:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007ac0:	4a2d      	ldr	r2, [pc, #180]	; (8007b78 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
 8007ac2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007ac6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8007ac8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007acc:	ee06 3a90 	vmov	s13, r3
 8007ad0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8007ad4:	bc30      	pop	{r4, r5}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007ad6:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007ada:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007ade:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007ae2:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007ae6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8007ae8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007aec:	ee06 3a90 	vmov	s13, r3
 8007af0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007af4:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007af8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007afc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007b00:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007b04:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8007b06:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007b0a:	ee07 3a10 	vmov	s14, r3
 8007b0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007b12:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007b16:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007b1a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007b1e:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8007b22:	4770      	bx	lr
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007b24:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007b28:	6083      	str	r3, [r0, #8]
}
 8007b2a:	bc30      	pop	{r4, r5}
 8007b2c:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b2e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007b80 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8007b32:	e7b4      	b.n	8007a9e <HAL_RCCEx_GetPLL2ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b34:	6813      	ldr	r3, [r2, #0]
 8007b36:	069b      	lsls	r3, r3, #26
 8007b38:	d51a      	bpl.n	8007b70 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b3a:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b3c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b40:	4910      	ldr	r1, [pc, #64]	; (8007b84 <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 8007b42:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b46:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b48:	40e1      	lsrs	r1, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b4e:	ee07 1a10 	vmov	s14, r1
 8007b52:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8007b56:	ee07 3a10 	vmov	s14, r3
 8007b5a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8007b5e:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8007b62:	ee76 7a05 	vadd.f32	s15, s12, s10
 8007b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b6e:	e7a7      	b.n	8007ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x64>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b70:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8007b88 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 8007b74:	e793      	b.n	8007a9e <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8007b76:	bf00      	nop
 8007b78:	58024400 	.word	0x58024400
 8007b7c:	4a742400 	.word	0x4a742400
 8007b80:	4af42400 	.word	0x4af42400
 8007b84:	03d09000 	.word	0x03d09000
 8007b88:	4c742400 	.word	0x4c742400

08007b8c <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b8c:	4a46      	ldr	r2, [pc, #280]	; (8007ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
{
 8007b8e:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b90:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007b92:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007b94:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007b96:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007b9a:	6c55      	ldr	r5, [r2, #68]	; 0x44
  if (pll3m != 0U)
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d059      	beq.n	8007c54 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007ba0:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007ba4:	f3c1 2100 	ubfx	r1, r1, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007ba8:	f004 0403 	and.w	r4, r4, #3
 8007bac:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007bb0:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8007bb4:	2c01      	cmp	r4, #1
 8007bb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bba:	ee06 1a90 	vmov	s13, r1
 8007bbe:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8007bc2:	d002      	beq.n	8007bca <HAL_RCCEx_GetPLL3ClockFreq+0x3e>
 8007bc4:	d34e      	bcc.n	8007c64 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8007bc6:	2c02      	cmp	r4, #2
 8007bc8:	d049      	beq.n	8007c5e <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007bca:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007cac <HAL_RCCEx_GetPLL3ClockFreq+0x120>
 8007bce:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8007bd2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bd8:	ee07 3a10 	vmov	s14, r3
 8007bdc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007be0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007be4:	ee37 7a25 	vadd.f32	s14, s14, s11
 8007be8:	ee77 7a26 	vadd.f32	s15, s14, s13
 8007bec:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007bf0:	4a2d      	ldr	r2, [pc, #180]	; (8007ca8 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
 8007bf2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007bf6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007bf8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007bfc:	ee06 3a90 	vmov	s13, r3
 8007c00:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8007c04:	bc30      	pop	{r4, r5}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007c06:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007c0a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007c0e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007c12:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007c16:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007c18:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007c1c:	ee06 3a90 	vmov	s13, r3
 8007c20:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007c24:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007c28:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007c2c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007c30:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007c34:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007c36:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007c3a:	ee07 3a10 	vmov	s14, r3
 8007c3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007c42:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007c46:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007c4a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007c4e:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8007c52:	4770      	bx	lr
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007c54:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007c58:	6083      	str	r3, [r0, #8]
}
 8007c5a:	bc30      	pop	{r4, r5}
 8007c5c:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007c5e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8007c62:	e7b4      	b.n	8007bce <HAL_RCCEx_GetPLL3ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c64:	6813      	ldr	r3, [r2, #0]
 8007c66:	069b      	lsls	r3, r3, #26
 8007c68:	d51a      	bpl.n	8007ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c6a:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007c6c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c70:	4910      	ldr	r1, [pc, #64]	; (8007cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 8007c72:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007c76:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c78:	40e1      	lsrs	r1, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c7e:	ee07 1a10 	vmov	s14, r1
 8007c82:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8007c86:	ee07 3a10 	vmov	s14, r3
 8007c8a:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8007c8e:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8007c92:	ee76 7a05 	vadd.f32	s15, s12, s10
 8007c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c9e:	e7a7      	b.n	8007bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x64>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ca0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8007cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 8007ca4:	e793      	b.n	8007bce <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 8007ca6:	bf00      	nop
 8007ca8:	58024400 	.word	0x58024400
 8007cac:	4a742400 	.word	0x4a742400
 8007cb0:	4af42400 	.word	0x4af42400
 8007cb4:	03d09000 	.word	0x03d09000
 8007cb8:	4c742400 	.word	0x4c742400

08007cbc <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007cbc:	4a46      	ldr	r2, [pc, #280]	; (8007dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
{
 8007cbe:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007cc0:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007cc2:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007cc4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007cc6:	f3c3 1305 	ubfx	r3, r3, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007cca:	6b55      	ldr	r5, [r2, #52]	; 0x34
  if (pll1m != 0U)
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d059      	beq.n	8007d84 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007cd0:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007cd4:	f001 0101 	and.w	r1, r1, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007cd8:	f004 0403 	and.w	r4, r4, #3
 8007cdc:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007ce0:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8007ce4:	2c01      	cmp	r4, #1
 8007ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007cea:	ee06 1a90 	vmov	s13, r1
 8007cee:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8007cf2:	d002      	beq.n	8007cfa <HAL_RCCEx_GetPLL1ClockFreq+0x3e>
 8007cf4:	d34e      	bcc.n	8007d94 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 8007cf6:	2c02      	cmp	r4, #2
 8007cf8:	d049      	beq.n	8007d8e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007cfa:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007ddc <HAL_RCCEx_GetPLL1ClockFreq+0x120>
 8007cfe:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8007d02:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d08:	ee07 3a10 	vmov	s14, r3
 8007d0c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007d10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007d14:	ee37 7a25 	vadd.f32	s14, s14, s11
 8007d18:	ee77 7a26 	vadd.f32	s15, s14, s13
 8007d1c:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007d20:	4a2d      	ldr	r2, [pc, #180]	; (8007dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
 8007d22:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007d26:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007d28:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007d2c:	ee06 3a90 	vmov	s13, r3
 8007d30:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8007d34:	bc30      	pop	{r4, r5}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007d36:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007d3a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007d3e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007d42:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007d46:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007d48:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007d4c:	ee06 3a90 	vmov	s13, r3
 8007d50:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007d54:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007d58:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007d5c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007d60:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007d64:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007d66:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007d6a:	ee07 3a10 	vmov	s14, r3
 8007d6e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007d72:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007d76:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007d7a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007d7e:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8007d82:	4770      	bx	lr
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007d84:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007d88:	6083      	str	r3, [r0, #8]
}
 8007d8a:	bc30      	pop	{r4, r5}
 8007d8c:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d8e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007de0 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8007d92:	e7b4      	b.n	8007cfe <HAL_RCCEx_GetPLL1ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d94:	6813      	ldr	r3, [r2, #0]
 8007d96:	069b      	lsls	r3, r3, #26
 8007d98:	d51a      	bpl.n	8007dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d9a:	6814      	ldr	r4, [r2, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d9c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007da0:	4910      	ldr	r1, [pc, #64]	; (8007de4 <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 8007da2:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007da6:	6b13      	ldr	r3, [r2, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007da8:	40e1      	lsrs	r1, r4
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dae:	ee07 1a10 	vmov	s14, r1
 8007db2:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8007db6:	ee07 3a10 	vmov	s14, r3
 8007dba:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8007dbe:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8007dc2:	ee76 7a05 	vadd.f32	s15, s12, s10
 8007dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dce:	e7a7      	b.n	8007d20 <HAL_RCCEx_GetPLL1ClockFreq+0x64>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007dd0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8007de8 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 8007dd4:	e793      	b.n	8007cfe <HAL_RCCEx_GetPLL1ClockFreq+0x42>
 8007dd6:	bf00      	nop
 8007dd8:	58024400 	.word	0x58024400
 8007ddc:	4a742400 	.word	0x4a742400
 8007de0:	4af42400 	.word	0x4af42400
 8007de4:	03d09000 	.word	0x03d09000
 8007de8:	4c742400 	.word	0x4c742400

08007dec <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007dec:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8007df0:	b500      	push	{lr}
 8007df2:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007df4:	d02d      	beq.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007df6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007dfa:	d018      	beq.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007dfc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007e00:	d04e      	beq.n	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007e02:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8007e06:	d037      	beq.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007e08:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8007e0c:	f000 808b 	beq.w	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007e10:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8007e14:	f000 80ac 	beq.w	8007f70 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007e18:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8007e1c:	f000 80b6 	beq.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007e20:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8007e24:	d062      	beq.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
          frequency = 0;
 8007e26:	2000      	movs	r0, #0
}
 8007e28:	b005      	add	sp, #20
 8007e2a:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007e2e:	4a70      	ldr	r2, [pc, #448]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007e30:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007e32:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8007e36:	2b80      	cmp	r3, #128	; 0x80
 8007e38:	d043      	beq.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8007e3a:	d86a      	bhi.n	8007f12 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d039      	beq.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8007e40:	2b40      	cmp	r3, #64	; 0x40
 8007e42:	d1f0      	bne.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e44:	a801      	add	r0, sp, #4
 8007e46:	f7ff fe09 	bl	8007a5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e4a:	9801      	ldr	r0, [sp, #4]
}
 8007e4c:	b005      	add	sp, #20
 8007e4e:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007e52:	4b67      	ldr	r3, [pc, #412]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e56:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8007e5a:	2b04      	cmp	r3, #4
 8007e5c:	d8e3      	bhi.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007e5e:	a201      	add	r2, pc, #4	; (adr r2, 8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x78>)
 8007e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e64:	08007eb5 	.word	0x08007eb5
 8007e68:	08007e45 	.word	0x08007e45
 8007e6c:	08007ec3 	.word	0x08007ec3
 8007e70:	08007e99 	.word	0x08007e99
 8007e74:	08007ed1 	.word	0x08007ed1
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007e78:	4a5d      	ldr	r2, [pc, #372]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007e7a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007e7c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8007e80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e84:	d01d      	beq.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8007e86:	d85c      	bhi.n	8007f42 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 8007e88:	b1a3      	cbz	r3, 8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8007e8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e8e:	d0d9      	beq.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8007e90:	e7c9      	b.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 8007e92:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007e96:	d15b      	bne.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
          frequency = EXTERNAL_CLOCK_VALUE;
 8007e98:	4856      	ldr	r0, [pc, #344]	; (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
}
 8007e9a:	b005      	add	sp, #20
 8007e9c:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007ea0:	4a53      	ldr	r2, [pc, #332]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007ea2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007ea4:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8007ea8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007eac:	d009      	beq.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8007eae:	d8f0      	bhi.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d151      	bne.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007eb4:	a801      	add	r0, sp, #4
 8007eb6:	f7ff ff01 	bl	8007cbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007eba:	9802      	ldr	r0, [sp, #8]
}
 8007ebc:	b005      	add	sp, #20
 8007ebe:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ec2:	a801      	add	r0, sp, #4
 8007ec4:	f7ff fe62 	bl	8007b8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ec8:	9801      	ldr	r0, [sp, #4]
}
 8007eca:	b005      	add	sp, #20
 8007ecc:	f85d fb04 	ldr.w	pc, [sp], #4
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007ed0:	4b47      	ldr	r3, [pc, #284]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007ed4:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8007ed8:	d019      	beq.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007eda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ede:	d062      	beq.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
            frequency = HSE_VALUE;
 8007ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ee4:	4844      	ldr	r0, [pc, #272]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 8007ee6:	bf18      	it	ne
 8007ee8:	2000      	movne	r0, #0
 8007eea:	e79d      	b.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007eec:	4b40      	ldr	r3, [pc, #256]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8007ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ef8:	d068      	beq.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8007efa:	d95b      	bls.n	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 8007efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f00:	d051      	beq.n	8007fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 8007f02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f06:	d05f      	beq.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8007f08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f0c:	d18b      	bne.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
            frequency = HSI_VALUE;
 8007f0e:	483b      	ldr	r0, [pc, #236]	; (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x210>)
 8007f10:	e78a      	b.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (saiclocksource)
 8007f12:	2bc0      	cmp	r3, #192	; 0xc0
 8007f14:	d0c0      	beq.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8007f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f1a:	d184      	bne.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007f1c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007f1e:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8007f22:	d1da      	bne.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8007f24:	e7f3      	b.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007f26:	4a32      	ldr	r2, [pc, #200]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007f28:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007f2a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8007f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f32:	d0c6      	beq.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8007f34:	d815      	bhi.n	8007f62 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d0bc      	beq.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8007f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f3e:	d081      	beq.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8007f40:	e771      	b.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 8007f42:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f46:	d0a7      	beq.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8007f48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f4c:	d0e6      	beq.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8007f4e:	e76a      	b.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 8007f50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f54:	d0e2      	beq.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8007f56:	e766      	b.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007f58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f5c:	f43f af72 	beq.w	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8007f60:	e761      	b.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (srcclk)
 8007f62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f66:	d097      	beq.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8007f68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f6c:	d0d6      	beq.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8007f6e:	e75a      	b.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007f70:	4a1f      	ldr	r2, [pc, #124]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007f72:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007f74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8007f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f7c:	d015      	beq.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007f7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f82:	d0cb      	beq.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f47f af4e 	bne.w	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007f8a:	e75b      	b.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007f8c:	4b18      	ldr	r3, [pc, #96]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 8007f90:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8007f94:	d08e      	beq.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	f43f af45 	beq.w	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f9c:	a801      	add	r0, sp, #4
 8007f9e:	f7ff fd5d 	bl	8007a5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007fa2:	9803      	ldr	r0, [sp, #12]
          break;
 8007fa4:	e740      	b.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
            frequency = CSI_VALUE;
 8007fa6:	4816      	ldr	r0, [pc, #88]	; (8008000 <HAL_RCCEx_GetPeriphCLKFreq+0x214>)
 8007fa8:	e73e      	b.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007faa:	a801      	add	r0, sp, #4
 8007fac:	f7ff fdee 	bl	8007b8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007fb0:	9803      	ldr	r0, [sp, #12]
          break;
 8007fb2:	e739      	b.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (srcclk)
 8007fb4:	b17b      	cbz	r3, 8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007fb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fba:	f47f af34 	bne.w	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fbe:	a801      	add	r0, sp, #4
 8007fc0:	f7ff fd4c 	bl	8007a5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007fc4:	9802      	ldr	r0, [sp, #8]
          break;
 8007fc6:	e72f      	b.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          frequency = HSE_VALUE;
 8007fc8:	480b      	ldr	r0, [pc, #44]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
          break;
 8007fca:	e72d      	b.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fcc:	a801      	add	r0, sp, #4
 8007fce:	f7ff fddd 	bl	8007b8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007fd2:	9802      	ldr	r0, [sp, #8]
          break;
 8007fd4:	e728      	b.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007fd6:	f7fe fce1 	bl	800699c <HAL_RCC_GetHCLKFreq>
 8007fda:	4b05      	ldr	r3, [pc, #20]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007fdc:	4a09      	ldr	r2, [pc, #36]	; (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x218>)
 8007fde:	6a1b      	ldr	r3, [r3, #32]
 8007fe0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007fe4:	5cd3      	ldrb	r3, [r2, r3]
 8007fe6:	f003 031f 	and.w	r3, r3, #31
 8007fea:	40d8      	lsrs	r0, r3
          break;
 8007fec:	e71c      	b.n	8007e28 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007fee:	bf00      	nop
 8007ff0:	58024400 	.word	0x58024400
 8007ff4:	00bb8000 	.word	0x00bb8000
 8007ff8:	007a1200 	.word	0x007a1200
 8007ffc:	03d09000 	.word	0x03d09000
 8008000:	003d0900 	.word	0x003d0900
 8008004:	0801af18 	.word	0x0801af18

08008008 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008008:	2800      	cmp	r0, #0
 800800a:	d060      	beq.n	80080ce <HAL_TIM_Base_Init+0xc6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800800c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8008010:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8008012:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008016:	4604      	mov	r4, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d053      	beq.n	80080c4 <HAL_TIM_Base_Init+0xbc>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800801c:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800801e:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008020:	4931      	ldr	r1, [pc, #196]	; (80080e8 <HAL_TIM_Base_Init+0xe0>)
 8008022:	4e32      	ldr	r6, [pc, #200]	; (80080ec <HAL_TIM_Base_Init+0xe4>)
 8008024:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8008028:	eba2 0101 	sub.w	r1, r2, r1
  htim->State = HAL_TIM_STATE_BUSY;
 800802c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8008030:	eba2 0606 	sub.w	r6, r2, r6
  tmpcr1 = TIMx->CR1;
 8008034:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008036:	fab1 f181 	clz	r1, r1
 800803a:	fab6 f686 	clz	r6, r6
 800803e:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8008042:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8008046:	d018      	beq.n	800807a <HAL_TIM_Base_Init+0x72>
 8008048:	b9b9      	cbnz	r1, 800807a <HAL_TIM_Base_Init+0x72>
 800804a:	4829      	ldr	r0, [pc, #164]	; (80080f0 <HAL_TIM_Base_Init+0xe8>)
 800804c:	4282      	cmp	r2, r0
 800804e:	d014      	beq.n	800807a <HAL_TIM_Base_Init+0x72>
 8008050:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8008054:	4282      	cmp	r2, r0
 8008056:	d010      	beq.n	800807a <HAL_TIM_Base_Init+0x72>
 8008058:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800805c:	4282      	cmp	r2, r0
 800805e:	d038      	beq.n	80080d2 <HAL_TIM_Base_Init+0xca>
 8008060:	2e00      	cmp	r6, #0
 8008062:	d136      	bne.n	80080d2 <HAL_TIM_Base_Init+0xca>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008064:	4d23      	ldr	r5, [pc, #140]	; (80080f4 <HAL_TIM_Base_Init+0xec>)
 8008066:	4824      	ldr	r0, [pc, #144]	; (80080f8 <HAL_TIM_Base_Init+0xf0>)
 8008068:	4282      	cmp	r2, r0
 800806a:	bf18      	it	ne
 800806c:	42aa      	cmpne	r2, r5
 800806e:	d008      	beq.n	8008082 <HAL_TIM_Base_Init+0x7a>
 8008070:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8008074:	4282      	cmp	r2, r0
 8008076:	d108      	bne.n	800808a <HAL_TIM_Base_Init+0x82>
 8008078:	e003      	b.n	8008082 <HAL_TIM_Base_Init+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800807a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800807e:	68a0      	ldr	r0, [r4, #8]
 8008080:	4303      	orrs	r3, r0
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008086:	6920      	ldr	r0, [r4, #16]
 8008088:	4303      	orrs	r3, r0
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800808a:	69a0      	ldr	r0, [r4, #24]
 800808c:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008090:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008092:	4303      	orrs	r3, r0

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008094:	6860      	ldr	r0, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8008096:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008098:	62d5      	str	r5, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800809a:	6290      	str	r0, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800809c:	b951      	cbnz	r1, 80080b4 <HAL_TIM_Base_Init+0xac>
 800809e:	b94e      	cbnz	r6, 80080b4 <HAL_TIM_Base_Init+0xac>
 80080a0:	4914      	ldr	r1, [pc, #80]	; (80080f4 <HAL_TIM_Base_Init+0xec>)
 80080a2:	4b15      	ldr	r3, [pc, #84]	; (80080f8 <HAL_TIM_Base_Init+0xf0>)
 80080a4:	429a      	cmp	r2, r3
 80080a6:	bf18      	it	ne
 80080a8:	428a      	cmpne	r2, r1
 80080aa:	d003      	beq.n	80080b4 <HAL_TIM_Base_Init+0xac>
 80080ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d101      	bne.n	80080b8 <HAL_TIM_Base_Init+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080b4:	6963      	ldr	r3, [r4, #20]
 80080b6:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080b8:	2301      	movs	r3, #1
  return HAL_OK;
 80080ba:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 80080bc:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 80080be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80080c2:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80080c4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80080c8:	f7fb fab8 	bl	800363c <HAL_TIM_Base_MspInit>
 80080cc:	e7a6      	b.n	800801c <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 80080ce:	2001      	movs	r0, #1
}
 80080d0:	4770      	bx	lr
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080d2:	480a      	ldr	r0, [pc, #40]	; (80080fc <HAL_TIM_Base_Init+0xf4>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80080d8:	68a5      	ldr	r5, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080da:	4282      	cmp	r2, r0
    tmpcr1 |= Structure->CounterMode;
 80080dc:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080e0:	d0cf      	beq.n	8008082 <HAL_TIM_Base_Init+0x7a>
 80080e2:	2e00      	cmp	r6, #0
 80080e4:	d1cd      	bne.n	8008082 <HAL_TIM_Base_Init+0x7a>
 80080e6:	e7bd      	b.n	8008064 <HAL_TIM_Base_Init+0x5c>
 80080e8:	40010000 	.word	0x40010000
 80080ec:	40010400 	.word	0x40010400
 80080f0:	40000400 	.word	0x40000400
 80080f4:	40014000 	.word	0x40014000
 80080f8:	40014400 	.word	0x40014400
 80080fc:	40000c00 	.word	0x40000c00

08008100 <HAL_TIM_Base_Start>:
{
 8008100:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8008102:	2002      	movs	r0, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008104:	4b09      	ldr	r3, [pc, #36]	; (800812c <HAL_TIM_Base_Start+0x2c>)
 8008106:	6811      	ldr	r1, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8008108:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800810c:	6888      	ldr	r0, [r1, #8]
 800810e:	4003      	ands	r3, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008110:	2b06      	cmp	r3, #6
 8008112:	d006      	beq.n	8008122 <HAL_TIM_Base_Start+0x22>
 8008114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008118:	d003      	beq.n	8008122 <HAL_TIM_Base_Start+0x22>
    __HAL_TIM_ENABLE(htim);
 800811a:	680b      	ldr	r3, [r1, #0]
 800811c:	f043 0301 	orr.w	r3, r3, #1
 8008120:	600b      	str	r3, [r1, #0]
  htim->State = HAL_TIM_STATE_READY;
 8008122:	2301      	movs	r3, #1
}
 8008124:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008126:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
}
 800812a:	4770      	bx	lr
 800812c:	00010007 	.word	0x00010007

08008130 <HAL_TIM_PeriodElapsedCallback>:
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop

08008134 <HAL_TIM_OC_DelayElapsedCallback>:
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop

08008138 <HAL_TIM_IC_CaptureCallback>:
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop

0800813c <HAL_TIM_PWM_PulseFinishedCallback>:
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop

08008140 <HAL_TIM_TriggerCallback>:
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop

08008144 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008144:	6803      	ldr	r3, [r0, #0]
 8008146:	691a      	ldr	r2, [r3, #16]
 8008148:	0791      	lsls	r1, r2, #30
{
 800814a:	b510      	push	{r4, lr}
 800814c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800814e:	d502      	bpl.n	8008156 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008150:	68da      	ldr	r2, [r3, #12]
 8008152:	0792      	lsls	r2, r2, #30
 8008154:	d468      	bmi.n	8008228 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008156:	691a      	ldr	r2, [r3, #16]
 8008158:	0752      	lsls	r2, r2, #29
 800815a:	d502      	bpl.n	8008162 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800815c:	68da      	ldr	r2, [r3, #12]
 800815e:	0750      	lsls	r0, r2, #29
 8008160:	d44f      	bmi.n	8008202 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008162:	691a      	ldr	r2, [r3, #16]
 8008164:	0711      	lsls	r1, r2, #28
 8008166:	d502      	bpl.n	800816e <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008168:	68da      	ldr	r2, [r3, #12]
 800816a:	0712      	lsls	r2, r2, #28
 800816c:	d437      	bmi.n	80081de <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800816e:	691a      	ldr	r2, [r3, #16]
 8008170:	06d0      	lsls	r0, r2, #27
 8008172:	d502      	bpl.n	800817a <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008174:	68da      	ldr	r2, [r3, #12]
 8008176:	06d1      	lsls	r1, r2, #27
 8008178:	d41e      	bmi.n	80081b8 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800817a:	691a      	ldr	r2, [r3, #16]
 800817c:	07d2      	lsls	r2, r2, #31
 800817e:	d502      	bpl.n	8008186 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008180:	68da      	ldr	r2, [r3, #12]
 8008182:	07d0      	lsls	r0, r2, #31
 8008184:	d469      	bmi.n	800825a <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008186:	691a      	ldr	r2, [r3, #16]
 8008188:	0611      	lsls	r1, r2, #24
 800818a:	d502      	bpl.n	8008192 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800818c:	68da      	ldr	r2, [r3, #12]
 800818e:	0612      	lsls	r2, r2, #24
 8008190:	d46b      	bmi.n	800826a <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008192:	691a      	ldr	r2, [r3, #16]
 8008194:	05d0      	lsls	r0, r2, #23
 8008196:	d502      	bpl.n	800819e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008198:	68da      	ldr	r2, [r3, #12]
 800819a:	0611      	lsls	r1, r2, #24
 800819c:	d46d      	bmi.n	800827a <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800819e:	691a      	ldr	r2, [r3, #16]
 80081a0:	0652      	lsls	r2, r2, #25
 80081a2:	d502      	bpl.n	80081aa <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081a4:	68da      	ldr	r2, [r3, #12]
 80081a6:	0650      	lsls	r0, r2, #25
 80081a8:	d46f      	bmi.n	800828a <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081aa:	691a      	ldr	r2, [r3, #16]
 80081ac:	0691      	lsls	r1, r2, #26
 80081ae:	d502      	bpl.n	80081b6 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081b0:	68da      	ldr	r2, [r3, #12]
 80081b2:	0692      	lsls	r2, r2, #26
 80081b4:	d449      	bmi.n	800824a <HAL_TIM_IRQHandler+0x106>
}
 80081b6:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081b8:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081bc:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 80081be:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081c0:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081c2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081c4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081c6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80081ca:	d16f      	bne.n	80082ac <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081cc:	f7ff ffb2 	bl	8008134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081d0:	4620      	mov	r0, r4
 80081d2:	f7ff ffb3 	bl	800813c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081d6:	2200      	movs	r2, #0
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	7722      	strb	r2, [r4, #28]
 80081dc:	e7cd      	b.n	800817a <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80081de:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081e2:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 80081e4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80081e6:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081e8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081ea:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081ec:	079b      	lsls	r3, r3, #30
 80081ee:	d15a      	bne.n	80082a6 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081f0:	f7ff ffa0 	bl	8008134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081f4:	4620      	mov	r0, r4
 80081f6:	f7ff ffa1 	bl	800813c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081fa:	2200      	movs	r2, #0
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	7722      	strb	r2, [r4, #28]
 8008200:	e7b5      	b.n	800816e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008202:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008206:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8008208:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800820a:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800820c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800820e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008210:	f413 7f40 	tst.w	r3, #768	; 0x300
 8008214:	d144      	bne.n	80082a0 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008216:	f7ff ff8d 	bl	8008134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800821a:	4620      	mov	r0, r4
 800821c:	f7ff ff8e 	bl	800813c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008220:	2200      	movs	r2, #0
 8008222:	6823      	ldr	r3, [r4, #0]
 8008224:	7722      	strb	r2, [r4, #28]
 8008226:	e79c      	b.n	8008162 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008228:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800822c:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800822e:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008230:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008232:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008234:	0799      	lsls	r1, r3, #30
 8008236:	d130      	bne.n	800829a <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008238:	f7ff ff7c 	bl	8008134 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800823c:	4620      	mov	r0, r4
 800823e:	f7ff ff7d 	bl	800813c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008242:	2200      	movs	r2, #0
 8008244:	6823      	ldr	r3, [r4, #0]
 8008246:	7722      	strb	r2, [r4, #28]
 8008248:	e785      	b.n	8008156 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800824a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800824e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008250:	611a      	str	r2, [r3, #16]
}
 8008252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8008256:	f000 b887 	b.w	8008368 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800825a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800825e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008260:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8008262:	f7ff ff65 	bl	8008130 <HAL_TIM_PeriodElapsedCallback>
 8008266:	6823      	ldr	r3, [r4, #0]
 8008268:	e78d      	b.n	8008186 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800826a:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800826e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008270:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008272:	f000 f87b 	bl	800836c <HAL_TIMEx_BreakCallback>
 8008276:	6823      	ldr	r3, [r4, #0]
 8008278:	e78b      	b.n	8008192 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800827a:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800827e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008280:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8008282:	f000 f875 	bl	8008370 <HAL_TIMEx_Break2Callback>
 8008286:	6823      	ldr	r3, [r4, #0]
 8008288:	e789      	b.n	800819e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800828a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800828e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008290:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8008292:	f7ff ff55 	bl	8008140 <HAL_TIM_TriggerCallback>
 8008296:	6823      	ldr	r3, [r4, #0]
 8008298:	e787      	b.n	80081aa <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800829a:	f7ff ff4d 	bl	8008138 <HAL_TIM_IC_CaptureCallback>
 800829e:	e7d0      	b.n	8008242 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 80082a0:	f7ff ff4a 	bl	8008138 <HAL_TIM_IC_CaptureCallback>
 80082a4:	e7bc      	b.n	8008220 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 80082a6:	f7ff ff47 	bl	8008138 <HAL_TIM_IC_CaptureCallback>
 80082aa:	e7a6      	b.n	80081fa <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 80082ac:	f7ff ff44 	bl	8008138 <HAL_TIM_IC_CaptureCallback>
 80082b0:	e791      	b.n	80081d6 <HAL_TIM_IRQHandler+0x92>
 80082b2:	bf00      	nop

080082b4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082b4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d045      	beq.n	8008348 <HAL_TIMEx_MasterConfigSynchronization+0x94>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082bc:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80082be:	4a24      	ldr	r2, [pc, #144]	; (8008350 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
{
 80082c0:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80082c2:	4e24      	ldr	r6, [pc, #144]	; (8008354 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 80082c4:	2502      	movs	r5, #2
  __HAL_LOCK(htim);
 80082c6:	2401      	movs	r4, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80082c8:	4293      	cmp	r3, r2
 80082ca:	bf18      	it	ne
 80082cc:	42b3      	cmpne	r3, r6
  htim->State = HAL_TIM_STATE_BUSY;
 80082ce:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 80082d2:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80082d6:	bf08      	it	eq
 80082d8:	2601      	moveq	r6, #1
  tmpcr2 = htim->Instance->CR2;
 80082da:	685c      	ldr	r4, [r3, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80082dc:	bf18      	it	ne
 80082de:	2600      	movne	r6, #0
  tmpsmcr = htim->Instance->SMCR;
 80082e0:	689d      	ldr	r5, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80082e2:	d103      	bne.n	80082ec <HAL_TIMEx_MasterConfigSynchronization+0x38>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80082e4:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80082e8:	684a      	ldr	r2, [r1, #4]
 80082ea:	4314      	orrs	r4, r2
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082ec:	4a1a      	ldr	r2, [pc, #104]	; (8008358 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  tmpcr2 &= ~TIM_CR2_MMS;
 80082ee:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082f2:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082f4:	4293      	cmp	r3, r2
 80082f6:	bf18      	it	ne
 80082f8:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 80082fc:	f8df c064 	ldr.w	ip, [pc, #100]	; 8008364 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008300:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008304:	4f15      	ldr	r7, [pc, #84]	; (800835c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8008306:	bf0c      	ite	eq
 8008308:	2201      	moveq	r2, #1
 800830a:	2200      	movne	r2, #0
  htim->Instance->CR2 = tmpcr2;
 800830c:	605c      	str	r4, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800830e:	4563      	cmp	r3, ip
 8008310:	bf08      	it	eq
 8008312:	f042 0201 	orreq.w	r2, r2, #1
 8008316:	4c12      	ldr	r4, [pc, #72]	; (8008360 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8008318:	42bb      	cmp	r3, r7
 800831a:	bf08      	it	eq
 800831c:	f042 0201 	orreq.w	r2, r2, #1
 8008320:	42a3      	cmp	r3, r4
 8008322:	bf08      	it	eq
 8008324:	f042 0201 	orreq.w	r2, r2, #1
 8008328:	b902      	cbnz	r2, 800832c <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800832a:	b126      	cbz	r6, 8008336 <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800832c:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800832e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008332:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008334:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8008336:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8008338:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 800833a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 800833e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  return HAL_OK;
}
 8008342:	4618      	mov	r0, r3
 8008344:	bcf0      	pop	{r4, r5, r6, r7}
 8008346:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008348:	2202      	movs	r2, #2
}
 800834a:	4610      	mov	r0, r2
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	40010400 	.word	0x40010400
 8008354:	40010000 	.word	0x40010000
 8008358:	40000400 	.word	0x40000400
 800835c:	40000c00 	.word	0x40000c00
 8008360:	40001800 	.word	0x40001800
 8008364:	40000800 	.word	0x40000800

08008368 <HAL_TIMEx_CommutCallback>:
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop

0800836c <HAL_TIMEx_BreakCallback>:
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop

08008370 <HAL_TIMEx_Break2Callback>:
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop

08008374 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008378:	461e      	mov	r6, r3
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800837a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 800837e:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8008380:	2b20      	cmp	r3, #32
 8008382:	d14a      	bne.n	800841a <HAL_UART_Transmit+0xa6>
 8008384:	4689      	mov	r9, r1
  {
    if ((pData == NULL) || (Size == 0U))
 8008386:	2900      	cmp	r1, #0
 8008388:	d04b      	beq.n	8008422 <HAL_UART_Transmit+0xae>
 800838a:	fab2 f782 	clz	r7, r2
 800838e:	9201      	str	r2, [sp, #4]
 8008390:	097f      	lsrs	r7, r7, #5
 8008392:	2f00      	cmp	r7, #0
 8008394:	d145      	bne.n	8008422 <HAL_UART_Transmit+0xae>
    {
      return  HAL_ERROR;
    }

    __HAL_LOCK(huart);
 8008396:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800839a:	4605      	mov	r5, r0
 800839c:	2b01      	cmp	r3, #1
 800839e:	d03c      	beq.n	800841a <HAL_UART_Transmit+0xa6>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083a0:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 80083a2:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083a4:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
    __HAL_LOCK(huart);
 80083a8:	f880 107c 	strb.w	r1, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083ac:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80083b0:	f7fb fada 	bl	8003968 <HAL_GetTick>

    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083b4:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 80083b6:	9a01      	ldr	r2, [sp, #4]
    tickstart = HAL_GetTick();
 80083b8:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize  = Size;
 80083be:	f8a5 2054 	strh.w	r2, [r5, #84]	; 0x54
    huart->TxXferCount = Size;
 80083c2:	f8a5 2056 	strh.w	r2, [r5, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083c6:	f000 8089 	beq.w	80084dc <HAL_UART_Transmit+0x168>
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
    }

    while (huart->TxXferCount > 0U)
 80083ca:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 80083ce:	682c      	ldr	r4, [r5, #0]
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	b1ab      	cbz	r3, 8008400 <HAL_UART_Transmit+0x8c>
 80083d4:	1c71      	adds	r1, r6, #1
 80083d6:	d128      	bne.n	800842a <HAL_UART_Transmit+0xb6>
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083d8:	69e2      	ldr	r2, [r4, #28]
 80083da:	0612      	lsls	r2, r2, #24
 80083dc:	d5fc      	bpl.n	80083d8 <HAL_UART_Transmit+0x64>
      if (pdata8bits == NULL)
 80083de:	f1b9 0f00 	cmp.w	r9, #0
 80083e2:	d038      	beq.n	8008456 <HAL_UART_Transmit+0xe2>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80083e4:	f819 3b01 	ldrb.w	r3, [r9], #1
 80083e8:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 80083ea:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 80083ee:	3b01      	subs	r3, #1
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80083f6:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1e9      	bne.n	80083d4 <HAL_UART_Transmit+0x60>
 8008400:	1c71      	adds	r1, r6, #1
 8008402:	d12d      	bne.n	8008460 <HAL_UART_Transmit+0xec>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008404:	69e3      	ldr	r3, [r4, #28]
 8008406:	065a      	lsls	r2, r3, #25
 8008408:	d5fc      	bpl.n	8008404 <HAL_UART_Transmit+0x90>
    __HAL_UNLOCK(huart);
 800840a:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_READY;
 800840c:	2220      	movs	r2, #32
    return HAL_OK;
 800840e:	4618      	mov	r0, r3
    huart->gState = HAL_UART_STATE_READY;
 8008410:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
    __HAL_UNLOCK(huart);
 8008414:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
    return HAL_OK;
 8008418:	e000      	b.n	800841c <HAL_UART_Transmit+0xa8>
    return HAL_BUSY;
 800841a:	2002      	movs	r0, #2
}
 800841c:	b003      	add	sp, #12
 800841e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8008422:	2001      	movs	r0, #1
}
 8008424:	b003      	add	sp, #12
 8008426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800842a:	69e3      	ldr	r3, [r4, #28]
 800842c:	061b      	lsls	r3, r3, #24
 800842e:	d4d6      	bmi.n	80083de <HAL_UART_Transmit+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008430:	f7fb fa9a 	bl	8003968 <HAL_GetTick>
 8008434:	eba0 0008 	sub.w	r0, r0, r8
 8008438:	4286      	cmp	r6, r0
 800843a:	d33c      	bcc.n	80084b6 <HAL_UART_Transmit+0x142>
 800843c:	fab6 f386 	clz	r3, r6
 8008440:	095b      	lsrs	r3, r3, #5
 8008442:	2b00      	cmp	r3, #0
 8008444:	d137      	bne.n	80084b6 <HAL_UART_Transmit+0x142>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008446:	682c      	ldr	r4, [r5, #0]
 8008448:	6822      	ldr	r2, [r4, #0]
 800844a:	0752      	lsls	r2, r2, #29
 800844c:	d5c2      	bpl.n	80083d4 <HAL_UART_Transmit+0x60>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800844e:	69e2      	ldr	r2, [r4, #28]
 8008450:	0510      	lsls	r0, r2, #20
 8008452:	d5bf      	bpl.n	80083d4 <HAL_UART_Transmit+0x60>
 8008454:	e019      	b.n	800848a <HAL_UART_Transmit+0x116>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008456:	f837 3b02 	ldrh.w	r3, [r7], #2
 800845a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800845e:	e7c3      	b.n	80083e8 <HAL_UART_Transmit+0x74>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008460:	69e3      	ldr	r3, [r4, #28]
 8008462:	065b      	lsls	r3, r3, #25
 8008464:	d4d1      	bmi.n	800840a <HAL_UART_Transmit+0x96>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008466:	f7fb fa7f 	bl	8003968 <HAL_GetTick>
 800846a:	eba0 0008 	sub.w	r0, r0, r8
 800846e:	fab6 f386 	clz	r3, r6
 8008472:	4286      	cmp	r6, r0
 8008474:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8008478:	d31d      	bcc.n	80084b6 <HAL_UART_Transmit+0x142>
 800847a:	b9e3      	cbnz	r3, 80084b6 <HAL_UART_Transmit+0x142>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800847c:	682c      	ldr	r4, [r5, #0]
 800847e:	6822      	ldr	r2, [r4, #0]
 8008480:	0757      	lsls	r7, r2, #29
 8008482:	d5bd      	bpl.n	8008400 <HAL_UART_Transmit+0x8c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008484:	69e2      	ldr	r2, [r4, #28]
 8008486:	0510      	lsls	r0, r2, #20
 8008488:	d5ba      	bpl.n	8008400 <HAL_UART_Transmit+0x8c>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800848a:	f44f 6100 	mov.w	r1, #2048	; 0x800
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

          huart->gState = HAL_UART_STATE_READY;
 800848e:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8008490:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008492:	6221      	str	r1, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008494:	6821      	ldr	r1, [r4, #0]
 8008496:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 800849a:	6021      	str	r1, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800849c:	68a1      	ldr	r1, [r4, #8]
 800849e:	f021 0101 	bic.w	r1, r1, #1
 80084a2:	60a1      	str	r1, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 80084a4:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084a8:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80084ac:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084b0:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
 80084b4:	e7b2      	b.n	800841c <HAL_UART_Transmit+0xa8>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80084b6:	682b      	ldr	r3, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 80084b8:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 80084ba:	2400      	movs	r4, #0
      return HAL_TIMEOUT;
 80084bc:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80084c4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084c6:	689a      	ldr	r2, [r3, #8]
 80084c8:	f022 0201 	bic.w	r2, r2, #1
 80084cc:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80084ce:	f8c5 1080 	str.w	r1, [r5, #128]	; 0x80
        __HAL_UNLOCK(huart);
 80084d2:	f885 407c 	strb.w	r4, [r5, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80084d6:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84
 80084da:	e79f      	b.n	800841c <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084dc:	692b      	ldr	r3, [r5, #16]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f47f af73 	bne.w	80083ca <HAL_UART_Transmit+0x56>
 80084e4:	464f      	mov	r7, r9
      pdata8bits  = NULL;
 80084e6:	4699      	mov	r9, r3
 80084e8:	e76f      	b.n	80083ca <HAL_UART_Transmit+0x56>
 80084ea:	bf00      	nop

080084ec <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80084ec:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80084f0:	2b20      	cmp	r3, #32
 80084f2:	d13d      	bne.n	8008570 <HAL_UART_Receive_IT+0x84>
    if ((pData == NULL) || (Size == 0U))
 80084f4:	2900      	cmp	r1, #0
 80084f6:	d039      	beq.n	800856c <HAL_UART_Receive_IT+0x80>
 80084f8:	fab2 f382 	clz	r3, r2
 80084fc:	095b      	lsrs	r3, r3, #5
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d134      	bne.n	800856c <HAL_UART_Receive_IT+0x80>
{
 8008502:	b470      	push	{r4, r5, r6}
    __HAL_LOCK(huart);
 8008504:	f890 407c 	ldrb.w	r4, [r0, #124]	; 0x7c
 8008508:	2c01      	cmp	r4, #1
 800850a:	d062      	beq.n	80085d2 <HAL_UART_Receive_IT+0xe6>
    UART_MASK_COMPUTATION(huart);
 800850c:	6884      	ldr	r4, [r0, #8]
    __HAL_LOCK(huart);
 800850e:	2501      	movs	r5, #1
    huart->pRxBuffPtr  = pData;
 8008510:	6581      	str	r1, [r0, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8008512:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    __HAL_LOCK(huart);
 8008516:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    huart->RxXferSize  = Size;
 800851a:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->RxXferCount = Size;
 800851e:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    huart->RxISR       = NULL;
 8008522:	66c3      	str	r3, [r0, #108]	; 0x6c
 8008524:	6801      	ldr	r1, [r0, #0]
 8008526:	6e45      	ldr	r5, [r0, #100]	; 0x64
    UART_MASK_COMPUTATION(huart);
 8008528:	d024      	beq.n	8008574 <HAL_UART_Receive_IT+0x88>
 800852a:	2c00      	cmp	r4, #0
 800852c:	d146      	bne.n	80085bc <HAL_UART_Receive_IT+0xd0>
 800852e:	6903      	ldr	r3, [r0, #16]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d066      	beq.n	8008602 <HAL_UART_Receive_IT+0x116>
 8008534:	237f      	movs	r3, #127	; 0x7f
 8008536:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800853a:	2400      	movs	r4, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800853c:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800853e:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008542:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008546:	688b      	ldr	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008548:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800854c:	f043 0301 	orr.w	r3, r3, #1
 8008550:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008552:	d020      	beq.n	8008596 <HAL_UART_Receive_IT+0xaa>
        huart->RxISR = UART_RxISR_8BIT;
 8008554:	4c31      	ldr	r4, [pc, #196]	; (800861c <HAL_UART_Receive_IT+0x130>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008556:	680a      	ldr	r2, [r1, #0]
      __HAL_UNLOCK(huart);
 8008558:	2300      	movs	r3, #0
 800855a:	66c4      	str	r4, [r0, #108]	; 0x6c
 800855c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008560:	f442 7290 	orr.w	r2, r2, #288	; 0x120
    return HAL_OK;
 8008564:	4618      	mov	r0, r3
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008566:	600a      	str	r2, [r1, #0]
}
 8008568:	bc70      	pop	{r4, r5, r6}
 800856a:	4770      	bx	lr
      return HAL_ERROR;
 800856c:	2001      	movs	r0, #1
}
 800856e:	4770      	bx	lr
    return HAL_BUSY;
 8008570:	2002      	movs	r0, #2
 8008572:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8008574:	6904      	ldr	r4, [r0, #16]
 8008576:	b374      	cbz	r4, 80085d6 <HAL_UART_Receive_IT+0xea>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008578:	2622      	movs	r6, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800857a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    UART_MASK_COMPUTATION(huart);
 800857e:	24ff      	movs	r4, #255	; 0xff
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008580:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008584:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008588:	688b      	ldr	r3, [r1, #8]
    UART_MASK_COMPUTATION(huart);
 800858a:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800858e:	f043 0301 	orr.w	r3, r3, #1
 8008592:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008594:	d1de      	bne.n	8008554 <HAL_UART_Receive_IT+0x68>
 8008596:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 800859a:	4293      	cmp	r3, r2
 800859c:	d8da      	bhi.n	8008554 <HAL_UART_Receive_IT+0x68>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800859e:	4c20      	ldr	r4, [pc, #128]	; (8008620 <HAL_UART_Receive_IT+0x134>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085a0:	680a      	ldr	r2, [r1, #0]
      __HAL_UNLOCK(huart);
 80085a2:	2300      	movs	r3, #0
 80085a4:	66c4      	str	r4, [r0, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      __HAL_UNLOCK(huart);
 80085aa:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    return HAL_OK;
 80085ae:	4618      	mov	r0, r3
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085b0:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80085b2:	688b      	ldr	r3, [r1, #8]
 80085b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085b8:	608b      	str	r3, [r1, #8]
 80085ba:	e7d5      	b.n	8008568 <HAL_UART_Receive_IT+0x7c>
    UART_MASK_COMPUTATION(huart);
 80085bc:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 80085c0:	d023      	beq.n	800860a <HAL_UART_Receive_IT+0x11e>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085c2:	2422      	movs	r4, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085c4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    UART_MASK_COMPUTATION(huart);
 80085c8:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085cc:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
 80085d0:	e7b9      	b.n	8008546 <HAL_UART_Receive_IT+0x5a>
    return HAL_BUSY;
 80085d2:	2002      	movs	r0, #2
 80085d4:	e7c8      	b.n	8008568 <HAL_UART_Receive_IT+0x7c>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085d6:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085d8:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80085dc:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    UART_MASK_COMPUTATION(huart);
 80085e0:	f240 14ff 	movw	r4, #511	; 0x1ff
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085e4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085e8:	688b      	ldr	r3, [r1, #8]
    UART_MASK_COMPUTATION(huart);
 80085ea:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085ee:	f043 0301 	orr.w	r3, r3, #1
 80085f2:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80085f4:	d103      	bne.n	80085fe <HAL_UART_Receive_IT+0x112>
 80085f6:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d90c      	bls.n	8008618 <HAL_UART_Receive_IT+0x12c>
        huart->RxISR = UART_RxISR_16BIT;
 80085fe:	4c09      	ldr	r4, [pc, #36]	; (8008624 <HAL_UART_Receive_IT+0x138>)
 8008600:	e7a9      	b.n	8008556 <HAL_UART_Receive_IT+0x6a>
    UART_MASK_COMPUTATION(huart);
 8008602:	23ff      	movs	r3, #255	; 0xff
 8008604:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008608:	e797      	b.n	800853a <HAL_UART_Receive_IT+0x4e>
 800860a:	6903      	ldr	r3, [r0, #16]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d091      	beq.n	8008534 <HAL_UART_Receive_IT+0x48>
 8008610:	233f      	movs	r3, #63	; 0x3f
 8008612:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008616:	e790      	b.n	800853a <HAL_UART_Receive_IT+0x4e>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008618:	4c03      	ldr	r4, [pc, #12]	; (8008628 <HAL_UART_Receive_IT+0x13c>)
 800861a:	e7c1      	b.n	80085a0 <HAL_UART_Receive_IT+0xb4>
 800861c:	08008631 	.word	0x08008631
 8008620:	080086ed 	.word	0x080086ed
 8008624:	08008691 	.word	0x08008691
 8008628:	080087a5 	.word	0x080087a5

0800862c <HAL_UART_TxCpltCallback>:
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop

08008630 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008630:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8008634:	6802      	ldr	r2, [r0, #0]
 8008636:	2922      	cmp	r1, #34	; 0x22
{
 8008638:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800863a:	d004      	beq.n	8008646 <UART_RxISR_8BIT+0x16>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800863c:	6993      	ldr	r3, [r2, #24]
 800863e:	f043 0308 	orr.w	r3, r3, #8
 8008642:	6193      	str	r3, [r2, #24]
  }
}
 8008644:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008646:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008648:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 800864c:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800864e:	4022      	ands	r2, r4
 8008650:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 8008652:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 8008656:	6d81      	ldr	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8008658:	3a01      	subs	r2, #1
    huart->pRxBuffPtr++;
 800865a:	3101      	adds	r1, #1
    huart->RxXferCount--;
 800865c:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 800865e:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8008660:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8008664:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8008668:	b292      	uxth	r2, r2
 800866a:	2a00      	cmp	r2, #0
 800866c:	d1ea      	bne.n	8008644 <UART_RxISR_8BIT+0x14>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800866e:	6801      	ldr	r1, [r0, #0]
      huart->RxState = HAL_UART_STATE_READY;
 8008670:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008672:	680c      	ldr	r4, [r1, #0]
 8008674:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8008678:	600c      	str	r4, [r1, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800867a:	688c      	ldr	r4, [r1, #8]
 800867c:	f024 0401 	bic.w	r4, r4, #1
 8008680:	608c      	str	r4, [r1, #8]
      huart->RxISR = NULL;
 8008682:	66c2      	str	r2, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 8008684:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
      HAL_UART_RxCpltCallback(huart);
 8008688:	f7fa f964 	bl	8002954 <HAL_UART_RxCpltCallback>
}
 800868c:	bd38      	pop	{r3, r4, r5, pc}
 800868e:	bf00      	nop

08008690 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008690:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 8008694:	6802      	ldr	r2, [r0, #0]
 8008696:	2922      	cmp	r1, #34	; 0x22
{
 8008698:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800869a:	d004      	beq.n	80086a6 <UART_RxISR_16BIT+0x16>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800869c:	6993      	ldr	r3, [r2, #24]
 800869e:	f043 0308 	orr.w	r3, r3, #8
 80086a2:	6193      	str	r3, [r2, #24]
  }
}
 80086a4:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086a6:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 80086a8:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
 80086ac:	6d84      	ldr	r4, [r0, #88]	; 0x58
 80086ae:	4029      	ands	r1, r5
 80086b0:	f824 1b02 	strh.w	r1, [r4], #2
    huart->RxXferCount--;
 80086b4:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
    huart->pRxBuffPtr += 2U;
 80086b8:	6584      	str	r4, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80086ba:	3901      	subs	r1, #1
 80086bc:	b289      	uxth	r1, r1
 80086be:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80086c2:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 80086c6:	b289      	uxth	r1, r1
 80086c8:	2900      	cmp	r1, #0
 80086ca:	d1eb      	bne.n	80086a4 <UART_RxISR_16BIT+0x14>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086cc:	6814      	ldr	r4, [r2, #0]
      huart->RxState = HAL_UART_STATE_READY;
 80086ce:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086d0:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 80086d4:	6014      	str	r4, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086d6:	6894      	ldr	r4, [r2, #8]
 80086d8:	f024 0401 	bic.w	r4, r4, #1
 80086dc:	6094      	str	r4, [r2, #8]
      huart->RxISR = NULL;
 80086de:	66c1      	str	r1, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 80086e0:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
      HAL_UART_RxCpltCallback(huart);
 80086e4:	f7fa f936 	bl	8002954 <HAL_UART_RxCpltCallback>
}
 80086e8:	bd38      	pop	{r3, r4, r5, pc}
 80086ea:	bf00      	nop

080086ec <UART_RxISR_8BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086ec:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80086f0:	2b22      	cmp	r3, #34	; 0x22
 80086f2:	d005      	beq.n	8008700 <UART_RxISR_8BIT_FIFOEN+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80086f4:	6802      	ldr	r2, [r0, #0]
 80086f6:	6993      	ldr	r3, [r2, #24]
 80086f8:	f043 0308 	orr.w	r3, r3, #8
 80086fc:	6193      	str	r3, [r2, #24]
 80086fe:	4770      	bx	lr
{
 8008700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008704:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 8008708:	2d00      	cmp	r5, #0
 800870a:	d043      	beq.n	8008794 <UART_RxISR_8BIT_FIFOEN+0xa8>
 800870c:	4604      	mov	r4, r0
 800870e:	f890 8060 	ldrb.w	r8, [r0, #96]	; 0x60
        huart->RxState = HAL_UART_STATE_READY;
 8008712:	2720      	movs	r7, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008714:	4e21      	ldr	r6, [pc, #132]	; (800879c <UART_RxISR_8BIT_FIFOEN+0xb0>)
 8008716:	e002      	b.n	800871e <UART_RxISR_8BIT_FIFOEN+0x32>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008718:	3d01      	subs	r5, #1
 800871a:	b2ad      	uxth	r5, r5
 800871c:	b32d      	cbz	r5, 800876a <UART_RxISR_8BIT_FIFOEN+0x7e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800871e:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008720:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008724:	ea08 0303 	and.w	r3, r8, r3
 8008728:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 800872a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      huart->pRxBuffPtr++;
 800872e:	6da2      	ldr	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8008730:	3b01      	subs	r3, #1
      huart->pRxBuffPtr++;
 8008732:	3201      	adds	r2, #1
      huart->RxXferCount--;
 8008734:	b29b      	uxth	r3, r3
      huart->pRxBuffPtr++;
 8008736:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8008738:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 800873c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008740:	b29b      	uxth	r3, r3
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1e8      	bne.n	8008718 <UART_RxISR_8BIT_FIFOEN+0x2c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008746:	6822      	ldr	r2, [r4, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008748:	3d01      	subs	r5, #1
        HAL_UART_RxCpltCallback(huart);
 800874a:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800874c:	6811      	ldr	r1, [r2, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800874e:	b2ad      	uxth	r5, r5
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008750:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008754:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008756:	6891      	ldr	r1, [r2, #8]
 8008758:	4031      	ands	r1, r6
 800875a:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 800875c:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 8008760:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 8008762:	f7fa f8f7 	bl	8002954 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008766:	2d00      	cmp	r5, #0
 8008768:	d1d9      	bne.n	800871e <UART_RxISR_8BIT_FIFOEN+0x32>
    rxdatacount = huart->RxXferCount;
 800876a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800876e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008770:	b173      	cbz	r3, 8008790 <UART_RxISR_8BIT_FIFOEN+0xa4>
 8008772:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8008776:	429a      	cmp	r2, r3
 8008778:	d90a      	bls.n	8008790 <UART_RxISR_8BIT_FIFOEN+0xa4>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800877a:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_8BIT;
 800877c:	4908      	ldr	r1, [pc, #32]	; (80087a0 <UART_RxISR_8BIT_FIFOEN+0xb4>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800877e:	689a      	ldr	r2, [r3, #8]
 8008780:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008784:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008786:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_8BIT;
 8008788:	66e1      	str	r1, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800878a:	f042 0220 	orr.w	r2, r2, #32
 800878e:	601a      	str	r2, [r3, #0]
  }
}
 8008790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rxdatacount = huart->RxXferCount;
 8008794:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8008798:	e7fa      	b.n	8008790 <UART_RxISR_8BIT_FIFOEN+0xa4>
 800879a:	bf00      	nop
 800879c:	effffffe 	.word	0xeffffffe
 80087a0:	08008631 	.word	0x08008631

080087a4 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087a4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80087a8:	2b22      	cmp	r3, #34	; 0x22
 80087aa:	d005      	beq.n	80087b8 <UART_RxISR_16BIT_FIFOEN+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80087ac:	6802      	ldr	r2, [r0, #0]
 80087ae:	6993      	ldr	r3, [r2, #24]
 80087b0:	f043 0308 	orr.w	r3, r3, #8
 80087b4:	6193      	str	r3, [r2, #24]
 80087b6:	4770      	bx	lr
{
 80087b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80087bc:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 80087c0:	2d00      	cmp	r5, #0
 80087c2:	d041      	beq.n	8008848 <UART_RxISR_16BIT_FIFOEN+0xa4>
 80087c4:	4604      	mov	r4, r0
  uint16_t  uhMask = huart->Mask;
 80087c6:	f8b0 8060 	ldrh.w	r8, [r0, #96]	; 0x60
        huart->RxState = HAL_UART_STATE_READY;
 80087ca:	2720      	movs	r7, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087cc:	4e20      	ldr	r6, [pc, #128]	; (8008850 <UART_RxISR_16BIT_FIFOEN+0xac>)
 80087ce:	e002      	b.n	80087d6 <UART_RxISR_16BIT_FIFOEN+0x32>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80087d0:	3d01      	subs	r5, #1
 80087d2:	b2ad      	uxth	r5, r5
 80087d4:	b31d      	cbz	r5, 800881e <UART_RxISR_16BIT_FIFOEN+0x7a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087d6:	6821      	ldr	r1, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 80087d8:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087da:	6a4b      	ldr	r3, [r1, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 80087dc:	ea08 0303 	and.w	r3, r8, r3
 80087e0:	f822 3b02 	strh.w	r3, [r2], #2
      huart->RxXferCount--;
 80087e4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      huart->pRxBuffPtr += 2U;
 80087e8:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80087ea:	3b01      	subs	r3, #1
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 80087f2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1e9      	bne.n	80087d0 <UART_RxISR_16BIT_FIFOEN+0x2c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087fc:	680a      	ldr	r2, [r1, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80087fe:	3d01      	subs	r5, #1
        HAL_UART_RxCpltCallback(huart);
 8008800:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008802:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008806:	b2ad      	uxth	r5, r5
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008808:	600a      	str	r2, [r1, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800880a:	688a      	ldr	r2, [r1, #8]
 800880c:	4032      	ands	r2, r6
 800880e:	608a      	str	r2, [r1, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8008810:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 8008814:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 8008816:	f7fa f89d 	bl	8002954 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800881a:	2d00      	cmp	r5, #0
 800881c:	d1db      	bne.n	80087d6 <UART_RxISR_16BIT_FIFOEN+0x32>
    rxdatacount = huart->RxXferCount;
 800881e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008822:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008824:	b173      	cbz	r3, 8008844 <UART_RxISR_16BIT_FIFOEN+0xa0>
 8008826:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800882a:	429a      	cmp	r2, r3
 800882c:	d90a      	bls.n	8008844 <UART_RxISR_16BIT_FIFOEN+0xa0>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800882e:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_16BIT;
 8008830:	4908      	ldr	r1, [pc, #32]	; (8008854 <UART_RxISR_16BIT_FIFOEN+0xb0>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008832:	689a      	ldr	r2, [r3, #8]
 8008834:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008838:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800883a:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_16BIT;
 800883c:	66e1      	str	r1, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800883e:	f042 0220 	orr.w	r2, r2, #32
 8008842:	601a      	str	r2, [r3, #0]
  }
}
 8008844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rxdatacount = huart->RxXferCount;
 8008848:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800884c:	e7fa      	b.n	8008844 <UART_RxISR_16BIT_FIFOEN+0xa0>
 800884e:	bf00      	nop
 8008850:	effffffe 	.word	0xeffffffe
 8008854:	08008691 	.word	0x08008691

08008858 <HAL_UART_ErrorCallback>:
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop

0800885c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800885c:	6802      	ldr	r2, [r0, #0]
{
 800885e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008862:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008864:	f640 050f 	movw	r5, #2063	; 0x80f
{
 8008868:	4604      	mov	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800886a:	6810      	ldr	r0, [r2, #0]
  if (errorflags == 0U)
 800886c:	422b      	tst	r3, r5
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800886e:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8008870:	d070      	beq.n	8008954 <HAL_UART_IRQHandler+0xf8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008872:	4d73      	ldr	r5, [pc, #460]	; (8008a40 <HAL_UART_IRQHandler+0x1e4>)
 8008874:	400d      	ands	r5, r1
 8008876:	f000 808f 	beq.w	8008998 <HAL_UART_IRQHandler+0x13c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800887a:	07df      	lsls	r7, r3, #31
 800887c:	d509      	bpl.n	8008892 <HAL_UART_IRQHandler+0x36>
 800887e:	05c6      	lsls	r6, r0, #23
 8008880:	d507      	bpl.n	8008892 <HAL_UART_IRQHandler+0x36>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008882:	2601      	movs	r6, #1
 8008884:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008886:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 800888a:	f046 0601 	orr.w	r6, r6, #1
 800888e:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008892:	079f      	lsls	r7, r3, #30
 8008894:	f003 0604 	and.w	r6, r3, #4
 8008898:	f140 8093 	bpl.w	80089c2 <HAL_UART_IRQHandler+0x166>
 800889c:	07cf      	lsls	r7, r1, #31
 800889e:	d50a      	bpl.n	80088b6 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80088a0:	2702      	movs	r7, #2
 80088a2:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088a4:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
 80088a8:	f047 0704 	orr.w	r7, r7, #4
 80088ac:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088b0:	2e00      	cmp	r6, #0
 80088b2:	f040 808c 	bne.w	80089ce <HAL_UART_IRQHandler+0x172>
    if (((isrflags & USART_ISR_ORE) != 0U)
 80088b6:	071f      	lsls	r7, r3, #28
 80088b8:	d505      	bpl.n	80088c6 <HAL_UART_IRQHandler+0x6a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80088ba:	0686      	lsls	r6, r0, #26
 80088bc:	f100 8097 	bmi.w	80089ee <HAL_UART_IRQHandler+0x192>
 80088c0:	2d00      	cmp	r5, #0
 80088c2:	f040 8094 	bne.w	80089ee <HAL_UART_IRQHandler+0x192>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80088c6:	051f      	lsls	r7, r3, #20
 80088c8:	d50a      	bpl.n	80088e0 <HAL_UART_IRQHandler+0x84>
 80088ca:	0146      	lsls	r6, r0, #5
 80088cc:	d508      	bpl.n	80088e0 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088ce:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80088d2:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80088d4:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 80088d8:	f045 0520 	orr.w	r5, r5, #32
 80088dc:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088e0:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 80088e4:	2d00      	cmp	r5, #0
 80088e6:	d06a      	beq.n	80089be <HAL_UART_IRQHandler+0x162>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80088e8:	069d      	lsls	r5, r3, #26
 80088ea:	d507      	bpl.n	80088fc <HAL_UART_IRQHandler+0xa0>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80088ec:	0680      	lsls	r0, r0, #26
 80088ee:	f140 808b 	bpl.w	8008a08 <HAL_UART_IRQHandler+0x1ac>
        if (huart->RxISR != NULL)
 80088f2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80088f4:	b113      	cbz	r3, 80088fc <HAL_UART_IRQHandler+0xa0>
          huart->RxISR(huart);
 80088f6:	4620      	mov	r0, r4
 80088f8:	4798      	blx	r3
 80088fa:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 80088fc:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008900:	6891      	ldr	r1, [r2, #8]
 8008902:	064f      	lsls	r7, r1, #25
 8008904:	d403      	bmi.n	800890e <HAL_UART_IRQHandler+0xb2>
 8008906:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 800890a:	f000 8093 	beq.w	8008a34 <HAL_UART_IRQHandler+0x1d8>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800890e:	6811      	ldr	r1, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8008910:	2520      	movs	r5, #32
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008912:	4b4c      	ldr	r3, [pc, #304]	; (8008a44 <HAL_UART_IRQHandler+0x1e8>)
  huart->RxISR = NULL;
 8008914:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008916:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 800891a:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800891c:	6891      	ldr	r1, [r2, #8]
 800891e:	400b      	ands	r3, r1
 8008920:	6093      	str	r3, [r2, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8008922:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008926:	6893      	ldr	r3, [r2, #8]
  huart->RxISR = NULL;
 8008928:	66e0      	str	r0, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800892a:	065e      	lsls	r6, r3, #25
 800892c:	d568      	bpl.n	8008a00 <HAL_UART_IRQHandler+0x1a4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800892e:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8008930:	6fa1      	ldr	r1, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008936:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8008938:	2900      	cmp	r1, #0
 800893a:	d061      	beq.n	8008a00 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800893c:	4b42      	ldr	r3, [pc, #264]	; (8008a48 <HAL_UART_IRQHandler+0x1ec>)
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800893e:	4608      	mov	r0, r1
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008940:	650b      	str	r3, [r1, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008942:	f7fc fd69 	bl	8005418 <HAL_DMA_Abort_IT>
 8008946:	2800      	cmp	r0, #0
 8008948:	d039      	beq.n	80089be <HAL_UART_IRQHandler+0x162>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800894a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
}
 800894c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008950:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8008952:	4718      	bx	r3
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008954:	069f      	lsls	r7, r3, #26
 8008956:	d509      	bpl.n	800896c <HAL_UART_IRQHandler+0x110>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008958:	0686      	lsls	r6, r0, #26
 800895a:	d505      	bpl.n	8008968 <HAL_UART_IRQHandler+0x10c>
      if (huart->RxISR != NULL)
 800895c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800895e:	b373      	cbz	r3, 80089be <HAL_UART_IRQHandler+0x162>
      huart->TxISR(huart);
 8008960:	4620      	mov	r0, r4
}
 8008962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8008966:	4718      	bx	r3
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008968:	00cd      	lsls	r5, r1, #3
 800896a:	d4f7      	bmi.n	800895c <HAL_UART_IRQHandler+0x100>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800896c:	02dd      	lsls	r5, r3, #11
 800896e:	d409      	bmi.n	8008984 <HAL_UART_IRQHandler+0x128>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008970:	061e      	lsls	r6, r3, #24
 8008972:	d51a      	bpl.n	80089aa <HAL_UART_IRQHandler+0x14e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008974:	0605      	lsls	r5, r0, #24
 8008976:	d516      	bpl.n	80089a6 <HAL_UART_IRQHandler+0x14a>
    if (huart->TxISR != NULL)
 8008978:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800897a:	b303      	cbz	r3, 80089be <HAL_UART_IRQHandler+0x162>
      huart->TxISR(huart);
 800897c:	4620      	mov	r0, r4
}
 800897e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8008982:	4718      	bx	r3
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008984:	024f      	lsls	r7, r1, #9
 8008986:	d5f3      	bpl.n	8008970 <HAL_UART_IRQHandler+0x114>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008988:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800898c:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800898e:	6213      	str	r3, [r2, #32]
}
 8008990:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8008994:	f001 baee 	b.w	8009f74 <HAL_UARTEx_WakeupCallback>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008998:	4e2c      	ldr	r6, [pc, #176]	; (8008a4c <HAL_UART_IRQHandler+0x1f0>)
 800899a:	4230      	tst	r0, r6
 800899c:	d0e6      	beq.n	800896c <HAL_UART_IRQHandler+0x110>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800899e:	07df      	lsls	r7, r3, #31
 80089a0:	f57f af77 	bpl.w	8008892 <HAL_UART_IRQHandler+0x36>
 80089a4:	e76b      	b.n	800887e <HAL_UART_IRQHandler+0x22>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80089a6:	020f      	lsls	r7, r1, #8
 80089a8:	d4e6      	bmi.n	8008978 <HAL_UART_IRQHandler+0x11c>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80089aa:	065e      	lsls	r6, r3, #25
 80089ac:	d501      	bpl.n	80089b2 <HAL_UART_IRQHandler+0x156>
 80089ae:	0645      	lsls	r5, r0, #25
 80089b0:	d42e      	bmi.n	8008a10 <HAL_UART_IRQHandler+0x1b4>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80089b2:	0219      	lsls	r1, r3, #8
 80089b4:	d414      	bmi.n	80089e0 <HAL_UART_IRQHandler+0x184>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80089b6:	01db      	lsls	r3, r3, #7
 80089b8:	d501      	bpl.n	80089be <HAL_UART_IRQHandler+0x162>
 80089ba:	2800      	cmp	r0, #0
 80089bc:	db35      	blt.n	8008a2a <HAL_UART_IRQHandler+0x1ce>
}
 80089be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089c2:	2e00      	cmp	r6, #0
 80089c4:	f43f af77 	beq.w	80088b6 <HAL_UART_IRQHandler+0x5a>
 80089c8:	07ce      	lsls	r6, r1, #31
 80089ca:	f57f af74 	bpl.w	80088b6 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80089ce:	2604      	movs	r6, #4
 80089d0:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089d2:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 80089d6:	f046 0602 	orr.w	r6, r6, #2
 80089da:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
 80089de:	e76a      	b.n	80088b6 <HAL_UART_IRQHandler+0x5a>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80089e0:	0042      	lsls	r2, r0, #1
 80089e2:	d5e8      	bpl.n	80089b6 <HAL_UART_IRQHandler+0x15a>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80089e4:	4620      	mov	r0, r4
}
 80089e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80089ea:	f001 bac7 	b.w	8009f7c <HAL_UARTEx_TxFifoEmptyCallback>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80089ee:	2508      	movs	r5, #8
 80089f0:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089f2:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 80089f6:	f045 0508 	orr.w	r5, r5, #8
 80089fa:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 80089fe:	e762      	b.n	80088c6 <HAL_UART_IRQHandler+0x6a>
            HAL_UART_ErrorCallback(huart);
 8008a00:	4620      	mov	r0, r4
 8008a02:	f7ff ff29 	bl	8008858 <HAL_UART_ErrorCallback>
 8008a06:	e7da      	b.n	80089be <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008a08:	00cb      	lsls	r3, r1, #3
 8008a0a:	f57f af77 	bpl.w	80088fc <HAL_UART_IRQHandler+0xa0>
 8008a0e:	e770      	b.n	80088f2 <HAL_UART_IRQHandler+0x96>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a10:	6813      	ldr	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008a12:	2520      	movs	r5, #32
  huart->TxISR = NULL;
 8008a14:	2100      	movs	r1, #0
  HAL_UART_TxCpltCallback(huart);
 8008a16:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a1c:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008a1e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  huart->TxISR = NULL;
 8008a22:	6721      	str	r1, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 8008a24:	f7ff fe02 	bl	800862c <HAL_UART_TxCpltCallback>
 8008a28:	e7c9      	b.n	80089be <HAL_UART_IRQHandler+0x162>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008a2a:	4620      	mov	r0, r4
}
 8008a2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008a30:	f001 baa2 	b.w	8009f78 <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 8008a34:	4620      	mov	r0, r4
 8008a36:	f7ff ff0f 	bl	8008858 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a3a:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8008a3e:	e7be      	b.n	80089be <HAL_UART_IRQHandler+0x162>
 8008a40:	10000001 	.word	0x10000001
 8008a44:	effffffe 	.word	0xeffffffe
 8008a48:	08008a51 	.word	0x08008a51
 8008a4c:	04000120 	.word	0x04000120

08008a50 <UART_DMAAbortOnError>:
{
 8008a50:	b508      	push	{r3, lr}
  huart->RxXferCount = 0U;
 8008a52:	2200      	movs	r2, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a54:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8008a56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  HAL_UART_ErrorCallback(huart);
 8008a5a:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 8008a5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8008a60:	f7ff fefa 	bl	8008858 <HAL_UART_ErrorCallback>
}
 8008a64:	bd08      	pop	{r3, pc}
 8008a66:	bf00      	nop

08008a68 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a68:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008a6a:	07da      	lsls	r2, r3, #31
{
 8008a6c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a6e:	d506      	bpl.n	8008a7e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a70:	6801      	ldr	r1, [r0, #0]
 8008a72:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8008a74:	684a      	ldr	r2, [r1, #4]
 8008a76:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008a7a:	4322      	orrs	r2, r4
 8008a7c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a7e:	079c      	lsls	r4, r3, #30
 8008a80:	d506      	bpl.n	8008a90 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a82:	6801      	ldr	r1, [r0, #0]
 8008a84:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8008a86:	684a      	ldr	r2, [r1, #4]
 8008a88:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008a8c:	4322      	orrs	r2, r4
 8008a8e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a90:	0759      	lsls	r1, r3, #29
 8008a92:	d506      	bpl.n	8008aa2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a94:	6801      	ldr	r1, [r0, #0]
 8008a96:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008a98:	684a      	ldr	r2, [r1, #4]
 8008a9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008a9e:	4322      	orrs	r2, r4
 8008aa0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008aa2:	071a      	lsls	r2, r3, #28
 8008aa4:	d506      	bpl.n	8008ab4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008aa6:	6801      	ldr	r1, [r0, #0]
 8008aa8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8008aaa:	684a      	ldr	r2, [r1, #4]
 8008aac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ab0:	4322      	orrs	r2, r4
 8008ab2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ab4:	06dc      	lsls	r4, r3, #27
 8008ab6:	d506      	bpl.n	8008ac6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ab8:	6801      	ldr	r1, [r0, #0]
 8008aba:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8008abc:	688a      	ldr	r2, [r1, #8]
 8008abe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008ac2:	4322      	orrs	r2, r4
 8008ac4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ac6:	0699      	lsls	r1, r3, #26
 8008ac8:	d506      	bpl.n	8008ad8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008aca:	6801      	ldr	r1, [r0, #0]
 8008acc:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8008ace:	688a      	ldr	r2, [r1, #8]
 8008ad0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ad4:	4322      	orrs	r2, r4
 8008ad6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ad8:	065a      	lsls	r2, r3, #25
 8008ada:	d50a      	bpl.n	8008af2 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008adc:	6801      	ldr	r1, [r0, #0]
 8008ade:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8008ae0:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ae2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ae6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008aea:	ea42 0204 	orr.w	r2, r2, r4
 8008aee:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008af0:	d00b      	beq.n	8008b0a <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008af2:	061b      	lsls	r3, r3, #24
 8008af4:	d506      	bpl.n	8008b04 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008af6:	6802      	ldr	r2, [r0, #0]
 8008af8:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8008afa:	6853      	ldr	r3, [r2, #4]
 8008afc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008b00:	430b      	orrs	r3, r1
 8008b02:	6053      	str	r3, [r2, #4]
}
 8008b04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b08:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b0a:	684a      	ldr	r2, [r1, #4]
 8008b0c:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8008b0e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8008b12:	4322      	orrs	r2, r4
 8008b14:	604a      	str	r2, [r1, #4]
 8008b16:	e7ec      	b.n	8008af2 <UART_AdvFeatureConfig+0x8a>

08008b18 <HAL_UART_Init>:
  if (huart == NULL)
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	f000 8253 	beq.w	8008fc4 <HAL_UART_Init+0x4ac>
  if (huart->gState == HAL_UART_STATE_RESET)
 8008b1e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 8008b22:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8008b26:	4604      	mov	r4, r0
 8008b28:	b086      	sub	sp, #24
  if (huart->gState == HAL_UART_STATE_RESET)
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d058      	beq.n	8008be0 <HAL_UART_Init+0xc8>
  __HAL_UART_DISABLE(huart);
 8008b2e:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008b30:	2024      	movs	r0, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b32:	6921      	ldr	r1, [r4, #16]
 8008b34:	68a2      	ldr	r2, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 8008b36:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b3a:	430a      	orrs	r2, r1
  __HAL_UART_DISABLE(huart);
 8008b3c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b3e:	6960      	ldr	r0, [r4, #20]
 8008b40:	69e1      	ldr	r1, [r4, #28]
  __HAL_UART_DISABLE(huart);
 8008b42:	f025 0501 	bic.w	r5, r5, #1
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b46:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b48:	485e      	ldr	r0, [pc, #376]	; (8008cc4 <HAL_UART_Init+0x1ac>)
  __HAL_UART_DISABLE(huart);
 8008b4a:	601d      	str	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b4c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b4e:	681e      	ldr	r6, [r3, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 8008b50:	6e65      	ldr	r5, [r4, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b52:	4030      	ands	r0, r6
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b54:	68e7      	ldr	r7, [r4, #12]
  tmpreg |= (uint32_t)huart->FifoMode;
 8008b56:	432a      	orrs	r2, r5
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b58:	f8d4 c018 	ldr.w	ip, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b5c:	4e5a      	ldr	r6, [pc, #360]	; (8008cc8 <HAL_UART_Init+0x1b0>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b5e:	4302      	orrs	r2, r0
 8008b60:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b62:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b64:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b66:	685a      	ldr	r2, [r3, #4]
 8008b68:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8008b6c:	ea42 0207 	orr.w	r2, r2, r7
 8008b70:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b72:	f000 808c 	beq.w	8008c8e <HAL_UART_Init+0x176>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b76:	689e      	ldr	r6, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8008b78:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b7a:	4854      	ldr	r0, [pc, #336]	; (8008ccc <HAL_UART_Init+0x1b4>)
    tmpreg |= huart->Init.OneBitSampling;
 8008b7c:	ea4c 0202 	orr.w	r2, ip, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b80:	4030      	ands	r0, r6
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b82:	4e53      	ldr	r6, [pc, #332]	; (8008cd0 <HAL_UART_Init+0x1b8>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b84:	4302      	orrs	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b86:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b88:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b8c:	f022 020f 	bic.w	r2, r2, #15
 8008b90:	ea42 0205 	orr.w	r2, r2, r5
 8008b94:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b96:	d028      	beq.n	8008bea <HAL_UART_Init+0xd2>
 8008b98:	4a4e      	ldr	r2, [pc, #312]	; (8008cd4 <HAL_UART_Init+0x1bc>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	f000 817f 	beq.w	8008e9e <HAL_UART_Init+0x386>
 8008ba0:	4a4d      	ldr	r2, [pc, #308]	; (8008cd8 <HAL_UART_Init+0x1c0>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	f000 8171 	beq.w	8008e8a <HAL_UART_Init+0x372>
 8008ba8:	4a4c      	ldr	r2, [pc, #304]	; (8008cdc <HAL_UART_Init+0x1c4>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	f000 849d 	beq.w	80094ea <HAL_UART_Init+0x9d2>
 8008bb0:	4a4b      	ldr	r2, [pc, #300]	; (8008ce0 <HAL_UART_Init+0x1c8>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	f000 84a4 	beq.w	8009500 <HAL_UART_Init+0x9e8>
 8008bb8:	4a4a      	ldr	r2, [pc, #296]	; (8008ce4 <HAL_UART_Init+0x1cc>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	f000 84ab 	beq.w	8009516 <HAL_UART_Init+0x9fe>
 8008bc0:	4a49      	ldr	r2, [pc, #292]	; (8008ce8 <HAL_UART_Init+0x1d0>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	f000 851e 	beq.w	8009604 <HAL_UART_Init+0xaec>
 8008bc8:	4a48      	ldr	r2, [pc, #288]	; (8008cec <HAL_UART_Init+0x1d4>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d170      	bne.n	8008cb0 <HAL_UART_Init+0x198>
 8008bce:	4b48      	ldr	r3, [pc, #288]	; (8008cf0 <HAL_UART_Init+0x1d8>)
 8008bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bd2:	f003 0307 	and.w	r3, r3, #7
 8008bd6:	2b05      	cmp	r3, #5
 8008bd8:	d86a      	bhi.n	8008cb0 <HAL_UART_Init+0x198>
 8008bda:	4a46      	ldr	r2, [pc, #280]	; (8008cf4 <HAL_UART_Init+0x1dc>)
 8008bdc:	5cd3      	ldrb	r3, [r2, r3]
 8008bde:	e00c      	b.n	8008bfa <HAL_UART_Init+0xe2>
    huart->Lock = HAL_UNLOCKED;
 8008be0:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8008be4:	f7fa fd4e 	bl	8003684 <HAL_UART_MspInit>
 8008be8:	e7a1      	b.n	8008b2e <HAL_UART_Init+0x16>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008bea:	4b41      	ldr	r3, [pc, #260]	; (8008cf0 <HAL_UART_Init+0x1d8>)
 8008bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008bf2:	2b28      	cmp	r3, #40	; 0x28
 8008bf4:	d85c      	bhi.n	8008cb0 <HAL_UART_Init+0x198>
 8008bf6:	4a40      	ldr	r2, [pc, #256]	; (8008cf8 <HAL_UART_Init+0x1e0>)
 8008bf8:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bfa:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8008bfe:	f000 8158 	beq.w	8008eb2 <HAL_UART_Init+0x39a>
    switch (clocksource)
 8008c02:	2b40      	cmp	r3, #64	; 0x40
 8008c04:	f201 812f 	bhi.w	8009e66 <HAL_UART_Init+0x134e>
 8008c08:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008c0c:	02ea0317 	.word	0x02ea0317
 8008c10:	092d092d 	.word	0x092d092d
 8008c14:	092d031d 	.word	0x092d031d
 8008c18:	092d092d 	.word	0x092d092d
 8008c1c:	092d02c1 	.word	0x092d02c1
 8008c20:	092d092d 	.word	0x092d092d
 8008c24:	092d092d 	.word	0x092d092d
 8008c28:	092d092d 	.word	0x092d092d
 8008c2c:	092d0293 	.word	0x092d0293
 8008c30:	092d092d 	.word	0x092d092d
 8008c34:	092d092d 	.word	0x092d092d
 8008c38:	092d092d 	.word	0x092d092d
 8008c3c:	092d092d 	.word	0x092d092d
 8008c40:	092d092d 	.word	0x092d092d
 8008c44:	092d092d 	.word	0x092d092d
 8008c48:	092d092d 	.word	0x092d092d
 8008c4c:	092d026b 	.word	0x092d026b
 8008c50:	092d092d 	.word	0x092d092d
 8008c54:	092d092d 	.word	0x092d092d
 8008c58:	092d092d 	.word	0x092d092d
 8008c5c:	092d092d 	.word	0x092d092d
 8008c60:	092d092d 	.word	0x092d092d
 8008c64:	092d092d 	.word	0x092d092d
 8008c68:	092d092d 	.word	0x092d092d
 8008c6c:	092d092d 	.word	0x092d092d
 8008c70:	092d092d 	.word	0x092d092d
 8008c74:	092d092d 	.word	0x092d092d
 8008c78:	092d092d 	.word	0x092d092d
 8008c7c:	092d092d 	.word	0x092d092d
 8008c80:	092d092d 	.word	0x092d092d
 8008c84:	092d092d 	.word	0x092d092d
 8008c88:	092d092d 	.word	0x092d092d
 8008c8c:	0228      	.short	0x0228
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c8e:	6898      	ldr	r0, [r3, #8]
 8008c90:	4a0e      	ldr	r2, [pc, #56]	; (8008ccc <HAL_UART_Init+0x1b4>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c92:	4917      	ldr	r1, [pc, #92]	; (8008cf0 <HAL_UART_Init+0x1d8>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c94:	4002      	ands	r2, r0
 8008c96:	ea42 020c 	orr.w	r2, r2, ip
 8008c9a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c9e:	f022 020f 	bic.w	r2, r2, #15
 8008ca2:	432a      	orrs	r2, r5
 8008ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ca6:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8008ca8:	f003 0307 	and.w	r3, r3, #7
 8008cac:	2b05      	cmp	r3, #5
 8008cae:	d925      	bls.n	8008cfc <HAL_UART_Init+0x1e4>
  huart->RxISR = NULL;
 8008cb0:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8008cb2:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    return HAL_ERROR;
 8008cb6:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 8008cb8:	6723      	str	r3, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 8008cba:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
}
 8008cbe:	b006      	add	sp, #24
 8008cc0:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8008cc4:	cfff69f3 	.word	0xcfff69f3
 8008cc8:	58000c00 	.word	0x58000c00
 8008ccc:	11fff4ff 	.word	0x11fff4ff
 8008cd0:	40011000 	.word	0x40011000
 8008cd4:	40004400 	.word	0x40004400
 8008cd8:	40004800 	.word	0x40004800
 8008cdc:	40004c00 	.word	0x40004c00
 8008ce0:	40005000 	.word	0x40005000
 8008ce4:	40011400 	.word	0x40011400
 8008ce8:	40007800 	.word	0x40007800
 8008cec:	40007c00 	.word	0x40007c00
 8008cf0:	58024400 	.word	0x58024400
 8008cf4:	0801af5c 	.word	0x0801af5c
 8008cf8:	0801af30 	.word	0x0801af30
 8008cfc:	4ad1      	ldr	r2, [pc, #836]	; (8009044 <HAL_UART_Init+0x52c>)
 8008cfe:	5cd6      	ldrb	r6, [r2, r3]
    switch (clocksource)
 8008d00:	2e08      	cmp	r6, #8
 8008d02:	f000 8477 	beq.w	80095f4 <HAL_UART_Init+0xadc>
 8008d06:	f240 8411 	bls.w	800952c <HAL_UART_Init+0xa14>
 8008d0a:	2e20      	cmp	r6, #32
 8008d0c:	f000 82a4 	beq.w	8009258 <HAL_UART_Init+0x740>
 8008d10:	2e40      	cmp	r6, #64	; 0x40
 8008d12:	f000 8447 	beq.w	80095a4 <HAL_UART_Init+0xa8c>
 8008d16:	2e10      	cmp	r6, #16
 8008d18:	d1ca      	bne.n	8008cb0 <HAL_UART_Init+0x198>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d1a:	680b      	ldr	r3, [r1, #0]
 8008d1c:	069b      	lsls	r3, r3, #26
 8008d1e:	f140 84bd 	bpl.w	800969c <HAL_UART_Init+0xb84>
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008d22:	680b      	ldr	r3, [r1, #0]
 8008d24:	48c8      	ldr	r0, [pc, #800]	; (8009048 <HAL_UART_Init+0x530>)
 8008d26:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008d2a:	40d8      	lsrs	r0, r3
 8008d2c:	b305      	cbz	r5, 8008d70 <HAL_UART_Init+0x258>
 8008d2e:	2d01      	cmp	r5, #1
 8008d30:	f000 863b 	beq.w	80099aa <HAL_UART_Init+0xe92>
 8008d34:	2d02      	cmp	r5, #2
 8008d36:	f000 862f 	beq.w	8009998 <HAL_UART_Init+0xe80>
 8008d3a:	2d03      	cmp	r5, #3
 8008d3c:	f000 8629 	beq.w	8009992 <HAL_UART_Init+0xe7a>
 8008d40:	2d04      	cmp	r5, #4
 8008d42:	f000 86e2 	beq.w	8009b0a <HAL_UART_Init+0xff2>
 8008d46:	2d05      	cmp	r5, #5
 8008d48:	f000 875b 	beq.w	8009c02 <HAL_UART_Init+0x10ea>
 8008d4c:	2d06      	cmp	r5, #6
 8008d4e:	f000 87d0 	beq.w	8009cf2 <HAL_UART_Init+0x11da>
 8008d52:	2d07      	cmp	r5, #7
 8008d54:	f000 87d2 	beq.w	8009cfc <HAL_UART_Init+0x11e4>
 8008d58:	2d08      	cmp	r5, #8
 8008d5a:	f001 8056 	beq.w	8009e0a <HAL_UART_Init+0x12f2>
 8008d5e:	2d09      	cmp	r5, #9
 8008d60:	f001 8038 	beq.w	8009dd4 <HAL_UART_Init+0x12bc>
 8008d64:	2d0a      	cmp	r5, #10
 8008d66:	f001 80b7 	beq.w	8009ed8 <HAL_UART_Init+0x13c0>
 8008d6a:	2d0b      	cmp	r5, #11
 8008d6c:	f001 8078 	beq.w	8009e60 <HAL_UART_Init+0x1348>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d70:	6865      	ldr	r5, [r4, #4]
 8008d72:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8008d76:	4283      	cmp	r3, r0
 8008d78:	d89a      	bhi.n	8008cb0 <HAL_UART_Init+0x198>
 8008d7a:	ebb0 3f05 	cmp.w	r0, r5, lsl #12
 8008d7e:	d897      	bhi.n	8008cb0 <HAL_UART_Init+0x198>
        switch (clocksource)
 8008d80:	2e08      	cmp	r6, #8
 8008d82:	f000 8574 	beq.w	800986e <HAL_UART_Init+0xd56>
 8008d86:	f240 84e1 	bls.w	800974c <HAL_UART_Init+0xc34>
 8008d8a:	2e20      	cmp	r6, #32
 8008d8c:	f000 857a 	beq.w	8009884 <HAL_UART_Init+0xd6c>
 8008d90:	2e40      	cmp	r6, #64	; 0x40
 8008d92:	f000 85b6 	beq.w	8009902 <HAL_UART_Init+0xdea>
 8008d96:	2e10      	cmp	r6, #16
 8008d98:	d18a      	bne.n	8008cb0 <HAL_UART_Init+0x198>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d9a:	4aac      	ldr	r2, [pc, #688]	; (800904c <HAL_UART_Init+0x534>)
 8008d9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d9e:	6811      	ldr	r1, [r2, #0]
 8008da0:	068f      	lsls	r7, r1, #26
 8008da2:	f140 8625 	bpl.w	80099f0 <HAL_UART_Init+0xed8>
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008da6:	6811      	ldr	r1, [r2, #0]
 8008da8:	4aa7      	ldr	r2, [pc, #668]	; (8009048 <HAL_UART_Init+0x530>)
 8008daa:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8008dae:	40ca      	lsrs	r2, r1
 8008db0:	2100      	movs	r1, #0
 8008db2:	4610      	mov	r0, r2
 8008db4:	b30b      	cbz	r3, 8008dfa <HAL_UART_Init+0x2e2>
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	f000 8750 	beq.w	8009c5c <HAL_UART_Init+0x1144>
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	f000 87a7 	beq.w	8009d10 <HAL_UART_Init+0x11f8>
 8008dc2:	2b03      	cmp	r3, #3
 8008dc4:	f001 8024 	beq.w	8009e10 <HAL_UART_Init+0x12f8>
 8008dc8:	2b04      	cmp	r3, #4
 8008dca:	f001 800c 	beq.w	8009de6 <HAL_UART_Init+0x12ce>
 8008dce:	2b05      	cmp	r3, #5
 8008dd0:	f001 8003 	beq.w	8009dda <HAL_UART_Init+0x12c2>
 8008dd4:	2b06      	cmp	r3, #6
 8008dd6:	f001 8086 	beq.w	8009ee6 <HAL_UART_Init+0x13ce>
 8008dda:	2b07      	cmp	r3, #7
 8008ddc:	f001 807f 	beq.w	8009ede <HAL_UART_Init+0x13c6>
 8008de0:	2b08      	cmp	r3, #8
 8008de2:	f001 8066 	beq.w	8009eb2 <HAL_UART_Init+0x139a>
 8008de6:	2b09      	cmp	r3, #9
 8008de8:	f001 805f 	beq.w	8009eaa <HAL_UART_Init+0x1392>
 8008dec:	2b0a      	cmp	r3, #10
 8008dee:	f001 801a 	beq.w	8009e26 <HAL_UART_Init+0x130e>
 8008df2:	2b0b      	cmp	r3, #11
 8008df4:	d101      	bne.n	8008dfa <HAL_UART_Init+0x2e2>
 8008df6:	0a10      	lsrs	r0, r2, #8
 8008df8:	2100      	movs	r1, #0
 8008dfa:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 8008dfe:	462a      	mov	r2, r5
 8008e00:	020f      	lsls	r7, r1, #8
 8008e02:	2300      	movs	r3, #0
 8008e04:	0206      	lsls	r6, r0, #8
 8008e06:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8008e0a:	eb16 000c 	adds.w	r0, r6, ip
 8008e0e:	f147 0100 	adc.w	r1, r7, #0
 8008e12:	f7f7 fb1d 	bl	8000450 <__aeabi_uldivmod>
 8008e16:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008e1a:	4b8d      	ldr	r3, [pc, #564]	; (8009050 <HAL_UART_Init+0x538>)
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	f63f af47 	bhi.w	8008cb0 <HAL_UART_Init+0x198>
  huart->RxISR = NULL;
 8008e22:	2300      	movs	r3, #0
          huart->Instance->BRR = usartdiv;
 8008e24:	6821      	ldr	r1, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8008e26:	f04f 1201 	mov.w	r2, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 8008e2a:	60c8      	str	r0, [r1, #12]
  huart->TxISR = NULL;
 8008e2c:	6723      	str	r3, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 8008e2e:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f040 8342 	bne.w	80094be <HAL_UART_Init+0x9a6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e3a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e3c:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e3e:	685a      	ldr	r2, [r3, #4]
 8008e40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e46:	689a      	ldr	r2, [r3, #8]
 8008e48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e4c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	f042 0201 	orr.w	r2, r2, #1
 8008e54:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e56:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  tickstart = HAL_GetTick();
 8008e5a:	f7fa fd85 	bl	8003968 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e5e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8008e60:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	0711      	lsls	r1, r2, #28
 8008e66:	f100 80af 	bmi.w	8008fc8 <HAL_UART_Init+0x4b0>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	0750      	lsls	r0, r2, #29
 8008e6e:	f100 80d4 	bmi.w	800901a <HAL_UART_Init+0x502>
  __HAL_UNLOCK(huart);
 8008e72:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8008e74:	2220      	movs	r2, #32
  return HAL_OK;
 8008e76:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8008e78:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8008e7c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008e80:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
}
 8008e84:	b006      	add	sp, #24
 8008e86:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e8a:	4b70      	ldr	r3, [pc, #448]	; (800904c <HAL_UART_Init+0x534>)
 8008e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e8e:	f003 0307 	and.w	r3, r3, #7
 8008e92:	2b05      	cmp	r3, #5
 8008e94:	f63f af0c 	bhi.w	8008cb0 <HAL_UART_Init+0x198>
 8008e98:	4a6e      	ldr	r2, [pc, #440]	; (8009054 <HAL_UART_Init+0x53c>)
 8008e9a:	5cd3      	ldrb	r3, [r2, r3]
 8008e9c:	e6ad      	b.n	8008bfa <HAL_UART_Init+0xe2>
 8008e9e:	4b6b      	ldr	r3, [pc, #428]	; (800904c <HAL_UART_Init+0x534>)
 8008ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ea2:	f003 0307 	and.w	r3, r3, #7
 8008ea6:	2b05      	cmp	r3, #5
 8008ea8:	f63f af02 	bhi.w	8008cb0 <HAL_UART_Init+0x198>
 8008eac:	4a6a      	ldr	r2, [pc, #424]	; (8009058 <HAL_UART_Init+0x540>)
 8008eae:	5cd3      	ldrb	r3, [r2, r3]
 8008eb0:	e6a3      	b.n	8008bfa <HAL_UART_Init+0xe2>
    switch (clocksource)
 8008eb2:	2b40      	cmp	r3, #64	; 0x40
 8008eb4:	f63f aefc 	bhi.w	8008cb0 <HAL_UART_Init+0x198>
 8008eb8:	a201      	add	r2, pc, #4	; (adr r2, 8008ec0 <HAL_UART_Init+0x3a8>)
 8008eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ebe:	bf00      	nop
 8008ec0:	080094b3 	.word	0x080094b3
 8008ec4:	08009459 	.word	0x08009459
 8008ec8:	08008cb1 	.word	0x08008cb1
 8008ecc:	08008cb1 	.word	0x08008cb1
 8008ed0:	08009437 	.word	0x08009437
 8008ed4:	08008cb1 	.word	0x08008cb1
 8008ed8:	08008cb1 	.word	0x08008cb1
 8008edc:	08008cb1 	.word	0x08008cb1
 8008ee0:	080093e5 	.word	0x080093e5
 8008ee4:	08008cb1 	.word	0x08008cb1
 8008ee8:	08008cb1 	.word	0x08008cb1
 8008eec:	08008cb1 	.word	0x08008cb1
 8008ef0:	08008cb1 	.word	0x08008cb1
 8008ef4:	08008cb1 	.word	0x08008cb1
 8008ef8:	08008cb1 	.word	0x08008cb1
 8008efc:	08008cb1 	.word	0x08008cb1
 8008f00:	0800937d 	.word	0x0800937d
 8008f04:	08008cb1 	.word	0x08008cb1
 8008f08:	08008cb1 	.word	0x08008cb1
 8008f0c:	08008cb1 	.word	0x08008cb1
 8008f10:	08008cb1 	.word	0x08008cb1
 8008f14:	08008cb1 	.word	0x08008cb1
 8008f18:	08008cb1 	.word	0x08008cb1
 8008f1c:	08008cb1 	.word	0x08008cb1
 8008f20:	08008cb1 	.word	0x08008cb1
 8008f24:	08008cb1 	.word	0x08008cb1
 8008f28:	08008cb1 	.word	0x08008cb1
 8008f2c:	08008cb1 	.word	0x08008cb1
 8008f30:	08008cb1 	.word	0x08008cb1
 8008f34:	08008cb1 	.word	0x08008cb1
 8008f38:	08008cb1 	.word	0x08008cb1
 8008f3c:	08008cb1 	.word	0x08008cb1
 8008f40:	0800932d 	.word	0x0800932d
 8008f44:	08008cb1 	.word	0x08008cb1
 8008f48:	08008cb1 	.word	0x08008cb1
 8008f4c:	08008cb1 	.word	0x08008cb1
 8008f50:	08008cb1 	.word	0x08008cb1
 8008f54:	08008cb1 	.word	0x08008cb1
 8008f58:	08008cb1 	.word	0x08008cb1
 8008f5c:	08008cb1 	.word	0x08008cb1
 8008f60:	08008cb1 	.word	0x08008cb1
 8008f64:	08008cb1 	.word	0x08008cb1
 8008f68:	08008cb1 	.word	0x08008cb1
 8008f6c:	08008cb1 	.word	0x08008cb1
 8008f70:	08008cb1 	.word	0x08008cb1
 8008f74:	08008cb1 	.word	0x08008cb1
 8008f78:	08008cb1 	.word	0x08008cb1
 8008f7c:	08008cb1 	.word	0x08008cb1
 8008f80:	08008cb1 	.word	0x08008cb1
 8008f84:	08008cb1 	.word	0x08008cb1
 8008f88:	08008cb1 	.word	0x08008cb1
 8008f8c:	08008cb1 	.word	0x08008cb1
 8008f90:	08008cb1 	.word	0x08008cb1
 8008f94:	08008cb1 	.word	0x08008cb1
 8008f98:	08008cb1 	.word	0x08008cb1
 8008f9c:	08008cb1 	.word	0x08008cb1
 8008fa0:	08008cb1 	.word	0x08008cb1
 8008fa4:	08008cb1 	.word	0x08008cb1
 8008fa8:	08008cb1 	.word	0x08008cb1
 8008fac:	08008cb1 	.word	0x08008cb1
 8008fb0:	08008cb1 	.word	0x08008cb1
 8008fb4:	08008cb1 	.word	0x08008cb1
 8008fb8:	08008cb1 	.word	0x08008cb1
 8008fbc:	08008cb1 	.word	0x08008cb1
 8008fc0:	080092a9 	.word	0x080092a9
    return HAL_ERROR;
 8008fc4:	2001      	movs	r0, #1
}
 8008fc6:	4770      	bx	lr
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fc8:	69dd      	ldr	r5, [r3, #28]
 8008fca:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8008fce:	f47f af4c 	bne.w	8008e6a <HAL_UART_Init+0x352>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fd2:	f7fa fcc9 	bl	8003968 <HAL_GetTick>
 8008fd6:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008fd8:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fda:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8008fde:	f080 8272 	bcs.w	80094c6 <HAL_UART_Init+0x9ae>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	0752      	lsls	r2, r2, #29
 8008fe6:	d5ef      	bpl.n	8008fc8 <HAL_UART_Init+0x4b0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008fe8:	69da      	ldr	r2, [r3, #28]
 8008fea:	0517      	lsls	r7, r2, #20
 8008fec:	d5ec      	bpl.n	8008fc8 <HAL_UART_Init+0x4b0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fee:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 8008ff2:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8008ff4:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ff6:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008ff8:	6819      	ldr	r1, [r3, #0]
 8008ffa:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8008ffe:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009000:	6899      	ldr	r1, [r3, #8]
 8009002:	f021 0101 	bic.w	r1, r1, #1
 8009006:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8009008:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          __HAL_UNLOCK(huart);
 800900c:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009010:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009014:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 8009018:	e651      	b.n	8008cbe <HAL_UART_Init+0x1a6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800901a:	69dd      	ldr	r5, [r3, #28]
 800901c:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 8009020:	f47f af27 	bne.w	8008e72 <HAL_UART_Init+0x35a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009024:	f7fa fca0 	bl	8003968 <HAL_GetTick>
 8009028:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800902a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800902c:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8009030:	f080 8249 	bcs.w	80094c6 <HAL_UART_Init+0x9ae>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	0751      	lsls	r1, r2, #29
 8009038:	d5ef      	bpl.n	800901a <HAL_UART_Init+0x502>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800903a:	69da      	ldr	r2, [r3, #28]
 800903c:	0512      	lsls	r2, r2, #20
 800903e:	d5ec      	bpl.n	800901a <HAL_UART_Init+0x502>
 8009040:	e7d5      	b.n	8008fee <HAL_UART_Init+0x4d6>
 8009042:	bf00      	nop
 8009044:	0801af64 	.word	0x0801af64
 8009048:	03d09000 	.word	0x03d09000
 800904c:	58024400 	.word	0x58024400
 8009050:	000ffcff 	.word	0x000ffcff
 8009054:	0801af5c 	.word	0x0801af5c
 8009058:	0801af5c 	.word	0x0801af5c
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800905c:	2d00      	cmp	r5, #0
 800905e:	f000 82de 	beq.w	800961e <HAL_UART_Init+0xb06>
 8009062:	2d01      	cmp	r5, #1
 8009064:	f000 83cb 	beq.w	80097fe <HAL_UART_Init+0xce6>
 8009068:	2d02      	cmp	r5, #2
 800906a:	f000 83fd 	beq.w	8009868 <HAL_UART_Init+0xd50>
 800906e:	2d03      	cmp	r5, #3
 8009070:	f000 8488 	beq.w	8009984 <HAL_UART_Init+0xe6c>
 8009074:	2d04      	cmp	r5, #4
 8009076:	f000 84b5 	beq.w	80099e4 <HAL_UART_Init+0xecc>
 800907a:	2d05      	cmp	r5, #5
 800907c:	f000 850d 	beq.w	8009a9a <HAL_UART_Init+0xf82>
 8009080:	2d06      	cmp	r5, #6
 8009082:	f000 8531 	beq.w	8009ae8 <HAL_UART_Init+0xfd0>
 8009086:	2d07      	cmp	r5, #7
 8009088:	f000 85af 	beq.w	8009bea <HAL_UART_Init+0x10d2>
 800908c:	2d08      	cmp	r5, #8
 800908e:	f000 85f5 	beq.w	8009c7c <HAL_UART_Init+0x1164>
 8009092:	2d09      	cmp	r5, #9
 8009094:	f000 8638 	beq.w	8009d08 <HAL_UART_Init+0x11f0>
 8009098:	2d0a      	cmp	r5, #10
 800909a:	f000 8660 	beq.w	8009d5e <HAL_UART_Init+0x1246>
 800909e:	2d0b      	cmp	r5, #11
 80090a0:	bf14      	ite	ne
 80090a2:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 80090a6:	2380      	moveq	r3, #128	; 0x80
 80090a8:	6861      	ldr	r1, [r4, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 80090aa:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090ac:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 80090b0:	fbb3 f3f1 	udiv	r3, r3, r1
 80090b4:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090b6:	f1a3 0010 	sub.w	r0, r3, #16
 80090ba:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80090be:	4288      	cmp	r0, r1
 80090c0:	f63f adf6 	bhi.w	8008cb0 <HAL_UART_Init+0x198>
  huart->RxISR = NULL;
 80090c4:	2100      	movs	r1, #0
      huart->Instance->BRR = usartdiv;
 80090c6:	6825      	ldr	r5, [r4, #0]
  huart->NbRxDataToProcess = 1;
 80090c8:	f04f 1001 	mov.w	r0, #65537	; 0x10001
      huart->Instance->BRR = usartdiv;
 80090cc:	60eb      	str	r3, [r5, #12]
  huart->TxISR = NULL;
 80090ce:	6721      	str	r1, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 80090d0:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090d4:	2a00      	cmp	r2, #0
 80090d6:	f43f aeac 	beq.w	8008e32 <HAL_UART_Init+0x31a>
    return HAL_ERROR;
 80090da:	2001      	movs	r0, #1
}
 80090dc:	b006      	add	sp, #24
 80090de:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090e2:	2d00      	cmp	r5, #0
 80090e4:	f000 8299 	beq.w	800961a <HAL_UART_Init+0xb02>
 80090e8:	2d01      	cmp	r5, #1
 80090ea:	f000 8386 	beq.w	80097fa <HAL_UART_Init+0xce2>
 80090ee:	2d02      	cmp	r5, #2
 80090f0:	f000 83b4 	beq.w	800985c <HAL_UART_Init+0xd44>
 80090f4:	2d03      	cmp	r5, #3
 80090f6:	f000 8449 	beq.w	800998c <HAL_UART_Init+0xe74>
 80090fa:	2d04      	cmp	r5, #4
 80090fc:	f000 8466 	beq.w	80099cc <HAL_UART_Init+0xeb4>
 8009100:	2d05      	cmp	r5, #5
 8009102:	f000 84c7 	beq.w	8009a94 <HAL_UART_Init+0xf7c>
 8009106:	2d06      	cmp	r5, #6
 8009108:	f000 84eb 	beq.w	8009ae2 <HAL_UART_Init+0xfca>
 800910c:	2d07      	cmp	r5, #7
 800910e:	f000 8569 	beq.w	8009be4 <HAL_UART_Init+0x10cc>
 8009112:	2d08      	cmp	r5, #8
 8009114:	f000 8596 	beq.w	8009c44 <HAL_UART_Init+0x112c>
 8009118:	2d09      	cmp	r5, #9
 800911a:	f000 860a 	beq.w	8009d32 <HAL_UART_Init+0x121a>
 800911e:	2d0a      	cmp	r5, #10
 8009120:	f000 8621 	beq.w	8009d66 <HAL_UART_Init+0x124e>
 8009124:	4bc8      	ldr	r3, [pc, #800]	; (8009448 <HAL_UART_Init+0x930>)
 8009126:	f643 5209 	movw	r2, #15625	; 0x3d09
 800912a:	2d0b      	cmp	r5, #11
 800912c:	bf08      	it	eq
 800912e:	4613      	moveq	r3, r2
 8009130:	e7ba      	b.n	80090a8 <HAL_UART_Init+0x590>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009132:	4bc6      	ldr	r3, [pc, #792]	; (800944c <HAL_UART_Init+0x934>)
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	0690      	lsls	r0, r2, #26
 8009138:	f140 8274 	bpl.w	8009624 <HAL_UART_Init+0xb0c>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	4bc4      	ldr	r3, [pc, #784]	; (8009450 <HAL_UART_Init+0x938>)
 8009140:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8009144:	40d3      	lsrs	r3, r2
 8009146:	2d00      	cmp	r5, #0
 8009148:	d0ae      	beq.n	80090a8 <HAL_UART_Init+0x590>
 800914a:	2d01      	cmp	r5, #1
 800914c:	f000 8295 	beq.w	800967a <HAL_UART_Init+0xb62>
 8009150:	2d02      	cmp	r5, #2
 8009152:	f000 8290 	beq.w	8009676 <HAL_UART_Init+0xb5e>
 8009156:	2d03      	cmp	r5, #3
 8009158:	f000 828a 	beq.w	8009670 <HAL_UART_Init+0xb58>
 800915c:	2d04      	cmp	r5, #4
 800915e:	f000 8345 	beq.w	80097ec <HAL_UART_Init+0xcd4>
 8009162:	2d05      	cmp	r5, #5
 8009164:	f000 8505 	beq.w	8009b72 <HAL_UART_Init+0x105a>
 8009168:	2d06      	cmp	r5, #6
 800916a:	f000 8432 	beq.w	80099d2 <HAL_UART_Init+0xeba>
 800916e:	2d07      	cmp	r5, #7
 8009170:	f000 849b 	beq.w	8009aaa <HAL_UART_Init+0xf92>
 8009174:	2d08      	cmp	r5, #8
 8009176:	f000 84bf 	beq.w	8009af8 <HAL_UART_Init+0xfe0>
 800917a:	2d09      	cmp	r5, #9
 800917c:	f000 8505 	beq.w	8009b8a <HAL_UART_Init+0x1072>
 8009180:	2d0a      	cmp	r5, #10
 8009182:	f000 8550 	beq.w	8009c26 <HAL_UART_Init+0x110e>
 8009186:	2d0b      	cmp	r5, #11
 8009188:	d18e      	bne.n	80090a8 <HAL_UART_Init+0x590>
 800918a:	0a1b      	lsrs	r3, r3, #8
 800918c:	e78c      	b.n	80090a8 <HAL_UART_Init+0x590>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800918e:	a803      	add	r0, sp, #12
 8009190:	f7fe fcfc 	bl	8007b8c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009194:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009196:	9b04      	ldr	r3, [sp, #16]
 8009198:	2a00      	cmp	r2, #0
 800919a:	d085      	beq.n	80090a8 <HAL_UART_Init+0x590>
 800919c:	2a01      	cmp	r2, #1
 800919e:	f000 826c 	beq.w	800967a <HAL_UART_Init+0xb62>
 80091a2:	2a02      	cmp	r2, #2
 80091a4:	f000 8267 	beq.w	8009676 <HAL_UART_Init+0xb5e>
 80091a8:	2a03      	cmp	r2, #3
 80091aa:	f000 8261 	beq.w	8009670 <HAL_UART_Init+0xb58>
 80091ae:	2a04      	cmp	r2, #4
 80091b0:	f000 831c 	beq.w	80097ec <HAL_UART_Init+0xcd4>
 80091b4:	2a05      	cmp	r2, #5
 80091b6:	f000 8316 	beq.w	80097e6 <HAL_UART_Init+0xcce>
 80091ba:	2a06      	cmp	r2, #6
 80091bc:	f000 8409 	beq.w	80099d2 <HAL_UART_Init+0xeba>
 80091c0:	2a07      	cmp	r2, #7
 80091c2:	f000 8472 	beq.w	8009aaa <HAL_UART_Init+0xf92>
 80091c6:	2a08      	cmp	r2, #8
 80091c8:	f000 8496 	beq.w	8009af8 <HAL_UART_Init+0xfe0>
 80091cc:	2a09      	cmp	r2, #9
 80091ce:	f000 84dc 	beq.w	8009b8a <HAL_UART_Init+0x1072>
 80091d2:	2a0a      	cmp	r2, #10
 80091d4:	f000 8527 	beq.w	8009c26 <HAL_UART_Init+0x110e>
 80091d8:	2a0b      	cmp	r2, #11
 80091da:	f47f af65 	bne.w	80090a8 <HAL_UART_Init+0x590>
 80091de:	e7d4      	b.n	800918a <HAL_UART_Init+0x672>
        pclk = HAL_RCC_GetPCLK2Freq();
 80091e0:	f7fd fd34 	bl	8006c4c <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091e6:	b303      	cbz	r3, 800922a <HAL_UART_Init+0x712>
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	f000 8282 	beq.w	80096f2 <HAL_UART_Init+0xbda>
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	f000 8252 	beq.w	8009698 <HAL_UART_Init+0xb80>
 80091f4:	2b03      	cmp	r3, #3
 80091f6:	f000 824c 	beq.w	8009692 <HAL_UART_Init+0xb7a>
 80091fa:	2b04      	cmp	r3, #4
 80091fc:	f000 8305 	beq.w	800980a <HAL_UART_Init+0xcf2>
 8009200:	2b05      	cmp	r3, #5
 8009202:	f000 82ff 	beq.w	8009804 <HAL_UART_Init+0xcec>
 8009206:	2b06      	cmp	r3, #6
 8009208:	f000 8424 	beq.w	8009a54 <HAL_UART_Init+0xf3c>
 800920c:	2b07      	cmp	r3, #7
 800920e:	f000 845f 	beq.w	8009ad0 <HAL_UART_Init+0xfb8>
 8009212:	2b08      	cmp	r3, #8
 8009214:	f000 8494 	beq.w	8009b40 <HAL_UART_Init+0x1028>
 8009218:	2b09      	cmp	r3, #9
 800921a:	f000 84f7 	beq.w	8009c0c <HAL_UART_Init+0x10f4>
 800921e:	2b0a      	cmp	r3, #10
 8009220:	f000 8592 	beq.w	8009d48 <HAL_UART_Init+0x1230>
 8009224:	2b0b      	cmp	r3, #11
 8009226:	bf08      	it	eq
 8009228:	0a00      	lsreq	r0, r0, #8
 800922a:	6861      	ldr	r1, [r4, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 800922c:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800922e:	eb00 0351 	add.w	r3, r0, r1, lsr #1
 8009232:	fbb3 f3f1 	udiv	r3, r3, r1
 8009236:	b29b      	uxth	r3, r3
 8009238:	e73d      	b.n	80090b6 <HAL_UART_Init+0x59e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800923a:	f7fd fc57 	bl	8006aec <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800923e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009240:	2b00      	cmp	r3, #0
 8009242:	d0f2      	beq.n	800922a <HAL_UART_Init+0x712>
 8009244:	e7d0      	b.n	80091e8 <HAL_UART_Init+0x6d0>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009246:	4668      	mov	r0, sp
 8009248:	f7fe fc08 	bl	8007a5c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800924c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800924e:	9b01      	ldr	r3, [sp, #4]
 8009250:	2a00      	cmp	r2, #0
 8009252:	f43f af29 	beq.w	80090a8 <HAL_UART_Init+0x590>
 8009256:	e7a1      	b.n	800919c <HAL_UART_Init+0x684>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009258:	2d00      	cmp	r5, #0
 800925a:	f000 8217 	beq.w	800968c <HAL_UART_Init+0xb74>
 800925e:	2d01      	cmp	r5, #1
 8009260:	f000 82d7 	beq.w	8009812 <HAL_UART_Init+0xcfa>
 8009264:	2d02      	cmp	r5, #2
 8009266:	f000 8379 	beq.w	800995c <HAL_UART_Init+0xe44>
 800926a:	2d03      	cmp	r5, #3
 800926c:	f000 83ab 	beq.w	80099c6 <HAL_UART_Init+0xeae>
 8009270:	2d04      	cmp	r5, #4
 8009272:	f000 8407 	beq.w	8009a84 <HAL_UART_Init+0xf6c>
 8009276:	2d05      	cmp	r5, #5
 8009278:	f000 8430 	beq.w	8009adc <HAL_UART_Init+0xfc4>
 800927c:	2d06      	cmp	r5, #6
 800927e:	f000 8481 	beq.w	8009b84 <HAL_UART_Init+0x106c>
 8009282:	2d07      	cmp	r5, #7
 8009284:	f000 8505 	beq.w	8009c92 <HAL_UART_Init+0x117a>
 8009288:	2d08      	cmp	r5, #8
 800928a:	f000 8556 	beq.w	8009d3a <HAL_UART_Init+0x1222>
 800928e:	2d09      	cmp	r5, #9
 8009290:	f000 855d 	beq.w	8009d4e <HAL_UART_Init+0x1236>
 8009294:	2d0a      	cmp	r5, #10
 8009296:	f000 856a 	beq.w	8009d6e <HAL_UART_Init+0x1256>
 800929a:	f643 5009 	movw	r0, #15625	; 0x3d09
 800929e:	4b6a      	ldr	r3, [pc, #424]	; (8009448 <HAL_UART_Init+0x930>)
 80092a0:	2d0b      	cmp	r5, #11
 80092a2:	bf18      	it	ne
 80092a4:	4618      	movne	r0, r3
 80092a6:	e563      	b.n	8008d70 <HAL_UART_Init+0x258>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092a8:	2d00      	cmp	r5, #0
 80092aa:	f000 8226 	beq.w	80096fa <HAL_UART_Init+0xbe2>
 80092ae:	2d01      	cmp	r5, #1
 80092b0:	f000 8351 	beq.w	8009956 <HAL_UART_Init+0xe3e>
 80092b4:	2d02      	cmp	r5, #2
 80092b6:	f000 837e 	beq.w	80099b6 <HAL_UART_Init+0xe9e>
 80092ba:	2d03      	cmp	r5, #3
 80092bc:	f000 83df 	beq.w	8009a7e <HAL_UART_Init+0xf66>
 80092c0:	2d04      	cmp	r5, #4
 80092c2:	f000 83fe 	beq.w	8009ac2 <HAL_UART_Init+0xfaa>
 80092c6:	2d05      	cmp	r5, #5
 80092c8:	f000 8458 	beq.w	8009b7c <HAL_UART_Init+0x1064>
 80092cc:	2d06      	cmp	r5, #6
 80092ce:	f000 84d9 	beq.w	8009c84 <HAL_UART_Init+0x116c>
 80092d2:	2d07      	cmp	r5, #7
 80092d4:	f000 8503 	beq.w	8009cde <HAL_UART_Init+0x11c6>
 80092d8:	2d08      	cmp	r5, #8
 80092da:	f000 8577 	beq.w	8009dcc <HAL_UART_Init+0x12b4>
 80092de:	2d09      	cmp	r5, #9
 80092e0:	f000 8570 	beq.w	8009dc4 <HAL_UART_Init+0x12ac>
 80092e4:	2d0a      	cmp	r5, #10
 80092e6:	f000 855f 	beq.w	8009da8 <HAL_UART_Init+0x1290>
 80092ea:	2d0b      	cmp	r5, #11
 80092ec:	bf14      	ite	ne
 80092ee:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 80092f2:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80092f6:	6862      	ldr	r2, [r4, #4]
 80092f8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80092fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009300:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009302:	f1a3 0110 	sub.w	r1, r3, #16
 8009306:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800930a:	4291      	cmp	r1, r2
 800930c:	f63f acd0 	bhi.w	8008cb0 <HAL_UART_Init+0x198>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009310:	f023 020f 	bic.w	r2, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009314:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8009318:	6820      	ldr	r0, [r4, #0]
  huart->NbRxDataToProcess = 1;
 800931a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      huart->Instance->BRR = brrtemp;
 800931e:	4313      	orrs	r3, r2
  huart->RxISR = NULL;
 8009320:	2200      	movs	r2, #0
      huart->Instance->BRR = brrtemp;
 8009322:	60c3      	str	r3, [r0, #12]
  huart->TxISR = NULL;
 8009324:	6722      	str	r2, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 8009326:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68
 800932a:	e582      	b.n	8008e32 <HAL_UART_Init+0x31a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800932c:	2d00      	cmp	r5, #0
 800932e:	f000 81e2 	beq.w	80096f6 <HAL_UART_Init+0xbde>
 8009332:	2d01      	cmp	r5, #1
 8009334:	f000 830d 	beq.w	8009952 <HAL_UART_Init+0xe3a>
 8009338:	2d02      	cmp	r5, #2
 800933a:	f000 8342 	beq.w	80099c2 <HAL_UART_Init+0xeaa>
 800933e:	2d03      	cmp	r5, #3
 8009340:	f000 8397 	beq.w	8009a72 <HAL_UART_Init+0xf5a>
 8009344:	2d04      	cmp	r5, #4
 8009346:	f000 83ba 	beq.w	8009abe <HAL_UART_Init+0xfa6>
 800934a:	2d05      	cmp	r5, #5
 800934c:	f000 83ff 	beq.w	8009b4e <HAL_UART_Init+0x1036>
 8009350:	2d06      	cmp	r5, #6
 8009352:	f000 848c 	beq.w	8009c6e <HAL_UART_Init+0x1156>
 8009356:	2d07      	cmp	r5, #7
 8009358:	f000 84d3 	beq.w	8009d02 <HAL_UART_Init+0x11ea>
 800935c:	2d08      	cmp	r5, #8
 800935e:	f000 852e 	beq.w	8009dbe <HAL_UART_Init+0x12a6>
 8009362:	2d09      	cmp	r5, #9
 8009364:	f000 8528 	beq.w	8009db8 <HAL_UART_Init+0x12a0>
 8009368:	2d0a      	cmp	r5, #10
 800936a:	f000 8521 	beq.w	8009db0 <HAL_UART_Init+0x1298>
 800936e:	4b39      	ldr	r3, [pc, #228]	; (8009454 <HAL_UART_Init+0x93c>)
 8009370:	f647 2212 	movw	r2, #31250	; 0x7a12
 8009374:	2d0b      	cmp	r5, #11
 8009376:	bf08      	it	eq
 8009378:	4613      	moveq	r3, r2
 800937a:	e7bc      	b.n	80092f6 <HAL_UART_Init+0x7de>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800937c:	4b33      	ldr	r3, [pc, #204]	; (800944c <HAL_UART_Init+0x934>)
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	0696      	lsls	r6, r2, #26
 8009382:	f140 81bd 	bpl.w	8009700 <HAL_UART_Init+0xbe8>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	4b31      	ldr	r3, [pc, #196]	; (8009450 <HAL_UART_Init+0x938>)
 800938a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800938e:	fa23 f202 	lsr.w	r2, r3, r2
 8009392:	b1fd      	cbz	r5, 80093d4 <HAL_UART_Init+0x8bc>
 8009394:	2d01      	cmp	r5, #1
 8009396:	f000 8224 	beq.w	80097e2 <HAL_UART_Init+0xcca>
 800939a:	2d02      	cmp	r5, #2
 800939c:	f000 8237 	beq.w	800980e <HAL_UART_Init+0xcf6>
 80093a0:	2d03      	cmp	r5, #3
 80093a2:	f000 83b5 	beq.w	8009b10 <HAL_UART_Init+0xff8>
 80093a6:	2d04      	cmp	r5, #4
 80093a8:	f000 82fd 	beq.w	80099a6 <HAL_UART_Init+0xe8e>
 80093ac:	2d05      	cmp	r5, #5
 80093ae:	f000 8356 	beq.w	8009a5e <HAL_UART_Init+0xf46>
 80093b2:	2d06      	cmp	r5, #6
 80093b4:	f000 8388 	beq.w	8009ac8 <HAL_UART_Init+0xfb0>
 80093b8:	2d07      	cmp	r5, #7
 80093ba:	f000 83d8 	beq.w	8009b6e <HAL_UART_Init+0x1056>
 80093be:	2d08      	cmp	r5, #8
 80093c0:	f000 843d 	beq.w	8009c3e <HAL_UART_Init+0x1126>
 80093c4:	2d09      	cmp	r5, #9
 80093c6:	f000 8487 	beq.w	8009cd8 <HAL_UART_Init+0x11c0>
 80093ca:	2d0a      	cmp	r5, #10
 80093cc:	f000 8481 	beq.w	8009cd2 <HAL_UART_Init+0x11ba>
 80093d0:	2d0b      	cmp	r5, #11
 80093d2:	d02e      	beq.n	8009432 <HAL_UART_Init+0x91a>
 80093d4:	6861      	ldr	r1, [r4, #4]
 80093d6:	084b      	lsrs	r3, r1, #1
 80093d8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80093dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	e78e      	b.n	8009302 <HAL_UART_Init+0x7ea>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093e4:	a803      	add	r0, sp, #12
 80093e6:	f7fe fbd1 	bl	8007b8c <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093ec:	9a04      	ldr	r2, [sp, #16]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d0f0      	beq.n	80093d4 <HAL_UART_Init+0x8bc>
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	f000 81f5 	beq.w	80097e2 <HAL_UART_Init+0xcca>
 80093f8:	2b02      	cmp	r3, #2
 80093fa:	f000 8208 	beq.w	800980e <HAL_UART_Init+0xcf6>
 80093fe:	2b03      	cmp	r3, #3
 8009400:	f000 82bb 	beq.w	800997a <HAL_UART_Init+0xe62>
 8009404:	2b04      	cmp	r3, #4
 8009406:	f000 82ce 	beq.w	80099a6 <HAL_UART_Init+0xe8e>
 800940a:	2b05      	cmp	r3, #5
 800940c:	f000 8327 	beq.w	8009a5e <HAL_UART_Init+0xf46>
 8009410:	2b06      	cmp	r3, #6
 8009412:	f000 8359 	beq.w	8009ac8 <HAL_UART_Init+0xfb0>
 8009416:	2b07      	cmp	r3, #7
 8009418:	f000 83a9 	beq.w	8009b6e <HAL_UART_Init+0x1056>
 800941c:	2b08      	cmp	r3, #8
 800941e:	f000 840e 	beq.w	8009c3e <HAL_UART_Init+0x1126>
 8009422:	2b09      	cmp	r3, #9
 8009424:	f000 8458 	beq.w	8009cd8 <HAL_UART_Init+0x11c0>
 8009428:	2b0a      	cmp	r3, #10
 800942a:	f000 8452 	beq.w	8009cd2 <HAL_UART_Init+0x11ba>
 800942e:	2b0b      	cmp	r3, #11
 8009430:	d1d0      	bne.n	80093d4 <HAL_UART_Init+0x8bc>
 8009432:	0a12      	lsrs	r2, r2, #8
 8009434:	e7ce      	b.n	80093d4 <HAL_UART_Init+0x8bc>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009436:	4668      	mov	r0, sp
 8009438:	f7fe fb10 	bl	8007a5c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800943c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800943e:	9a01      	ldr	r2, [sp, #4]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d0c7      	beq.n	80093d4 <HAL_UART_Init+0x8bc>
 8009444:	e7d5      	b.n	80093f2 <HAL_UART_Init+0x8da>
 8009446:	bf00      	nop
 8009448:	003d0900 	.word	0x003d0900
 800944c:	58024400 	.word	0x58024400
 8009450:	03d09000 	.word	0x03d09000
 8009454:	007a1200 	.word	0x007a1200
        pclk = HAL_RCC_GetPCLK2Freq();
 8009458:	f7fd fbf8 	bl	8006c4c <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800945c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800945e:	b303      	cbz	r3, 80094a2 <HAL_UART_Init+0x98a>
 8009460:	2b01      	cmp	r3, #1
 8009462:	f000 81c8 	beq.w	80097f6 <HAL_UART_Init+0xcde>
 8009466:	2b02      	cmp	r3, #2
 8009468:	f000 81fa 	beq.w	8009860 <HAL_UART_Init+0xd48>
 800946c:	2b03      	cmp	r3, #3
 800946e:	f000 827f 	beq.w	8009970 <HAL_UART_Init+0xe58>
 8009472:	2b04      	cmp	r3, #4
 8009474:	f000 82ba 	beq.w	80099ec <HAL_UART_Init+0xed4>
 8009478:	2b05      	cmp	r3, #5
 800947a:	f000 8312 	beq.w	8009aa2 <HAL_UART_Init+0xf8a>
 800947e:	2b06      	cmp	r3, #6
 8009480:	f000 833f 	beq.w	8009b02 <HAL_UART_Init+0xfea>
 8009484:	2b07      	cmp	r3, #7
 8009486:	f000 83ba 	beq.w	8009bfe <HAL_UART_Init+0x10e6>
 800948a:	2b08      	cmp	r3, #8
 800948c:	f000 842e 	beq.w	8009cec <HAL_UART_Init+0x11d4>
 8009490:	2b09      	cmp	r3, #9
 8009492:	f000 8411 	beq.w	8009cb8 <HAL_UART_Init+0x11a0>
 8009496:	2b0a      	cmp	r3, #10
 8009498:	f000 840b 	beq.w	8009cb2 <HAL_UART_Init+0x119a>
 800949c:	2b0b      	cmp	r3, #11
 800949e:	bf08      	it	eq
 80094a0:	0a00      	lsreq	r0, r0, #8
 80094a2:	6862      	ldr	r2, [r4, #4]
 80094a4:	0853      	lsrs	r3, r2, #1
 80094a6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80094aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	e727      	b.n	8009302 <HAL_UART_Init+0x7ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 80094b2:	f7fd fb1b 	bl	8006aec <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d0f2      	beq.n	80094a2 <HAL_UART_Init+0x98a>
 80094bc:	e7d0      	b.n	8009460 <HAL_UART_Init+0x948>
    UART_AdvFeatureConfig(huart);
 80094be:	4620      	mov	r0, r4
 80094c0:	f7ff fad2 	bl	8008a68 <UART_AdvFeatureConfig>
 80094c4:	e4b9      	b.n	8008e3a <HAL_UART_Init+0x322>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80094c6:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 80094c8:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 80094ca:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80094cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80094d0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094d2:	689a      	ldr	r2, [r3, #8]
 80094d4:	f022 0201 	bic.w	r2, r2, #1
 80094d8:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80094da:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
        __HAL_UNLOCK(huart);
 80094de:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80094e2:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 80094e6:	f7ff bbea 	b.w	8008cbe <HAL_UART_Init+0x1a6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094ea:	4bcb      	ldr	r3, [pc, #812]	; (8009818 <HAL_UART_Init+0xd00>)
 80094ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094ee:	f003 0307 	and.w	r3, r3, #7
 80094f2:	2b05      	cmp	r3, #5
 80094f4:	f63f abdc 	bhi.w	8008cb0 <HAL_UART_Init+0x198>
 80094f8:	4ac8      	ldr	r2, [pc, #800]	; (800981c <HAL_UART_Init+0xd04>)
 80094fa:	5cd3      	ldrb	r3, [r2, r3]
 80094fc:	f7ff bb7d 	b.w	8008bfa <HAL_UART_Init+0xe2>
 8009500:	4bc5      	ldr	r3, [pc, #788]	; (8009818 <HAL_UART_Init+0xd00>)
 8009502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009504:	f003 0307 	and.w	r3, r3, #7
 8009508:	2b05      	cmp	r3, #5
 800950a:	f63f abd1 	bhi.w	8008cb0 <HAL_UART_Init+0x198>
 800950e:	4ac4      	ldr	r2, [pc, #784]	; (8009820 <HAL_UART_Init+0xd08>)
 8009510:	5cd3      	ldrb	r3, [r2, r3]
 8009512:	f7ff bb72 	b.w	8008bfa <HAL_UART_Init+0xe2>
 8009516:	4bc0      	ldr	r3, [pc, #768]	; (8009818 <HAL_UART_Init+0xd00>)
 8009518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800951a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800951e:	2b28      	cmp	r3, #40	; 0x28
 8009520:	f63f abc6 	bhi.w	8008cb0 <HAL_UART_Init+0x198>
 8009524:	4abf      	ldr	r2, [pc, #764]	; (8009824 <HAL_UART_Init+0xd0c>)
 8009526:	5cd3      	ldrb	r3, [r2, r3]
 8009528:	f7ff bb67 	b.w	8008bfa <HAL_UART_Init+0xe2>
    switch (clocksource)
 800952c:	2e02      	cmp	r6, #2
 800952e:	d033      	beq.n	8009598 <HAL_UART_Init+0xa80>
 8009530:	2e04      	cmp	r6, #4
 8009532:	f47f abbd 	bne.w	8008cb0 <HAL_UART_Init+0x198>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009536:	4668      	mov	r0, sp
 8009538:	f7fe fa90 	bl	8007a5c <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800953c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800953e:	9801      	ldr	r0, [sp, #4]
 8009540:	b1fb      	cbz	r3, 8009582 <HAL_UART_Init+0xa6a>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009542:	2b01      	cmp	r3, #1
 8009544:	f000 80a0 	beq.w	8009688 <HAL_UART_Init+0xb70>
 8009548:	2b02      	cmp	r3, #2
 800954a:	f000 809b 	beq.w	8009684 <HAL_UART_Init+0xb6c>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800954e:	2b03      	cmp	r3, #3
 8009550:	f000 8095 	beq.w	800967e <HAL_UART_Init+0xb66>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009554:	2b04      	cmp	r3, #4
 8009556:	f000 8185 	beq.w	8009864 <HAL_UART_Init+0xd4c>
 800955a:	2b05      	cmp	r3, #5
 800955c:	f000 821f 	beq.w	800999e <HAL_UART_Init+0xe86>
 8009560:	2b06      	cmp	r3, #6
 8009562:	f000 8271 	beq.w	8009a48 <HAL_UART_Init+0xf30>
 8009566:	2b07      	cmp	r3, #7
 8009568:	f000 82a2 	beq.w	8009ab0 <HAL_UART_Init+0xf98>
 800956c:	2b08      	cmp	r3, #8
 800956e:	f000 82c6 	beq.w	8009afe <HAL_UART_Init+0xfe6>
 8009572:	2b09      	cmp	r3, #9
 8009574:	f000 8380 	beq.w	8009c78 <HAL_UART_Init+0x1160>
 8009578:	2b0a      	cmp	r3, #10
 800957a:	f000 837b 	beq.w	8009c74 <HAL_UART_Init+0x115c>
 800957e:	2b0b      	cmp	r3, #11
 8009580:	d008      	beq.n	8009594 <HAL_UART_Init+0xa7c>
    if (lpuart_ker_ck_pres != 0U)
 8009582:	2800      	cmp	r0, #0
 8009584:	f47f abf4 	bne.w	8008d70 <HAL_UART_Init+0x258>
  huart->NbRxDataToProcess = 1;
 8009588:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  huart->TxISR = NULL;
 800958c:	e9c4 001b 	strd	r0, r0, [r4, #108]	; 0x6c
  huart->NbRxDataToProcess = 1;
 8009590:	66a3      	str	r3, [r4, #104]	; 0x68
 8009592:	e44e      	b.n	8008e32 <HAL_UART_Init+0x31a>
 8009594:	0a00      	lsrs	r0, r0, #8
 8009596:	e7f4      	b.n	8009582 <HAL_UART_Init+0xa6a>
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009598:	f7fe fa4e 	bl	8007a38 <HAL_RCCEx_GetD3PCLK1Freq>
 800959c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d0ef      	beq.n	8009582 <HAL_UART_Init+0xa6a>
 80095a2:	e7ce      	b.n	8009542 <HAL_UART_Init+0xa2a>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80095a4:	2d00      	cmp	r5, #0
 80095a6:	f000 80a0 	beq.w	80096ea <HAL_UART_Init+0xbd2>
 80095aa:	2d01      	cmp	r5, #1
 80095ac:	f000 8152 	beq.w	8009854 <HAL_UART_Init+0xd3c>
 80095b0:	2d02      	cmp	r5, #2
 80095b2:	f000 81d6 	beq.w	8009962 <HAL_UART_Init+0xe4a>
 80095b6:	2d03      	cmp	r5, #3
 80095b8:	f000 8210 	beq.w	80099dc <HAL_UART_Init+0xec4>
 80095bc:	2d04      	cmp	r5, #4
 80095be:	f000 825a 	beq.w	8009a76 <HAL_UART_Init+0xf5e>
 80095c2:	2d05      	cmp	r5, #5
 80095c4:	f000 8294 	beq.w	8009af0 <HAL_UART_Init+0xfd8>
 80095c8:	2d06      	cmp	r5, #6
 80095ca:	f000 82bc 	beq.w	8009b46 <HAL_UART_Init+0x102e>
 80095ce:	2d07      	cmp	r5, #7
 80095d0:	f000 8349 	beq.w	8009c66 <HAL_UART_Init+0x114e>
 80095d4:	2d08      	cmp	r5, #8
 80095d6:	f000 83b3 	beq.w	8009d40 <HAL_UART_Init+0x1228>
 80095da:	2d09      	cmp	r5, #9
 80095dc:	f000 83bb 	beq.w	8009d56 <HAL_UART_Init+0x123e>
 80095e0:	2d0a      	cmp	r5, #10
 80095e2:	f000 840e 	beq.w	8009e02 <HAL_UART_Init+0x12ea>
 80095e6:	2d0b      	cmp	r5, #11
 80095e8:	bf0c      	ite	eq
 80095ea:	2080      	moveq	r0, #128	; 0x80
 80095ec:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 80095f0:	f7ff bbbe 	b.w	8008d70 <HAL_UART_Init+0x258>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095f4:	a803      	add	r0, sp, #12
 80095f6:	f7fe fac9 	bl	8007b8c <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80095fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095fc:	9804      	ldr	r0, [sp, #16]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d0bf      	beq.n	8009582 <HAL_UART_Init+0xa6a>
 8009602:	e79e      	b.n	8009542 <HAL_UART_Init+0xa2a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009604:	4b84      	ldr	r3, [pc, #528]	; (8009818 <HAL_UART_Init+0xd00>)
 8009606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009608:	f003 0307 	and.w	r3, r3, #7
 800960c:	2b05      	cmp	r3, #5
 800960e:	f63f ab4f 	bhi.w	8008cb0 <HAL_UART_Init+0x198>
 8009612:	4a85      	ldr	r2, [pc, #532]	; (8009828 <HAL_UART_Init+0xd10>)
 8009614:	5cd3      	ldrb	r3, [r2, r3]
 8009616:	f7ff baf0 	b.w	8008bfa <HAL_UART_Init+0xe2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800961a:	4b84      	ldr	r3, [pc, #528]	; (800982c <HAL_UART_Init+0xd14>)
 800961c:	e544      	b.n	80090a8 <HAL_UART_Init+0x590>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800961e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009622:	e541      	b.n	80090a8 <HAL_UART_Init+0x590>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009624:	2d00      	cmp	r5, #0
 8009626:	f000 80da 	beq.w	80097de <HAL_UART_Init+0xcc6>
 800962a:	2d01      	cmp	r5, #1
 800962c:	f000 819d 	beq.w	800996a <HAL_UART_Init+0xe52>
 8009630:	2d02      	cmp	r5, #2
 8009632:	f000 81c3 	beq.w	80099bc <HAL_UART_Init+0xea4>
 8009636:	2d03      	cmp	r5, #3
 8009638:	f000 8218 	beq.w	8009a6c <HAL_UART_Init+0xf54>
 800963c:	2d04      	cmp	r5, #4
 800963e:	f000 824a 	beq.w	8009ad6 <HAL_UART_Init+0xfbe>
 8009642:	2d05      	cmp	r5, #5
 8009644:	f000 8290 	beq.w	8009b68 <HAL_UART_Init+0x1050>
 8009648:	2d06      	cmp	r5, #6
 800964a:	f000 8325 	beq.w	8009c98 <HAL_UART_Init+0x1180>
 800964e:	2d07      	cmp	r5, #7
 8009650:	d0e3      	beq.n	800961a <HAL_UART_Init+0xb02>
 8009652:	2d08      	cmp	r5, #8
 8009654:	f000 80d1 	beq.w	80097fa <HAL_UART_Init+0xce2>
 8009658:	2d09      	cmp	r5, #9
 800965a:	f000 80ff 	beq.w	800985c <HAL_UART_Init+0xd44>
 800965e:	2d0a      	cmp	r5, #10
 8009660:	f000 81b4 	beq.w	80099cc <HAL_UART_Init+0xeb4>
 8009664:	4b72      	ldr	r3, [pc, #456]	; (8009830 <HAL_UART_Init+0xd18>)
 8009666:	4a73      	ldr	r2, [pc, #460]	; (8009834 <HAL_UART_Init+0xd1c>)
 8009668:	2d0b      	cmp	r5, #11
 800966a:	bf08      	it	eq
 800966c:	4613      	moveq	r3, r2
 800966e:	e51b      	b.n	80090a8 <HAL_UART_Init+0x590>
 8009670:	4a71      	ldr	r2, [pc, #452]	; (8009838 <HAL_UART_Init+0xd20>)
 8009672:	fba2 2303 	umull	r2, r3, r2, r3
 8009676:	089b      	lsrs	r3, r3, #2
 8009678:	e516      	b.n	80090a8 <HAL_UART_Init+0x590>
 800967a:	085b      	lsrs	r3, r3, #1
 800967c:	e514      	b.n	80090a8 <HAL_UART_Init+0x590>
 800967e:	4b6e      	ldr	r3, [pc, #440]	; (8009838 <HAL_UART_Init+0xd20>)
 8009680:	fba3 3000 	umull	r3, r0, r3, r0
 8009684:	0880      	lsrs	r0, r0, #2
 8009686:	e77c      	b.n	8009582 <HAL_UART_Init+0xa6a>
 8009688:	0840      	lsrs	r0, r0, #1
 800968a:	e77a      	b.n	8009582 <HAL_UART_Init+0xa6a>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800968c:	4867      	ldr	r0, [pc, #412]	; (800982c <HAL_UART_Init+0xd14>)
 800968e:	f7ff bb6f 	b.w	8008d70 <HAL_UART_Init+0x258>
 8009692:	4b69      	ldr	r3, [pc, #420]	; (8009838 <HAL_UART_Init+0xd20>)
 8009694:	fba3 3000 	umull	r3, r0, r3, r0
 8009698:	0880      	lsrs	r0, r0, #2
 800969a:	e5c6      	b.n	800922a <HAL_UART_Init+0x712>
 800969c:	2d00      	cmp	r5, #0
 800969e:	f000 80a7 	beq.w	80097f0 <HAL_UART_Init+0xcd8>
 80096a2:	2d01      	cmp	r5, #1
 80096a4:	f000 8184 	beq.w	80099b0 <HAL_UART_Init+0xe98>
 80096a8:	2d02      	cmp	r5, #2
 80096aa:	f000 81dc 	beq.w	8009a66 <HAL_UART_Init+0xf4e>
 80096ae:	2d03      	cmp	r5, #3
 80096b0:	f000 8200 	beq.w	8009ab4 <HAL_UART_Init+0xf9c>
 80096b4:	2d04      	cmp	r5, #4
 80096b6:	f000 822f 	beq.w	8009b18 <HAL_UART_Init+0x1000>
 80096ba:	2d05      	cmp	r5, #5
 80096bc:	f000 829c 	beq.w	8009bf8 <HAL_UART_Init+0x10e0>
 80096c0:	2d06      	cmp	r5, #6
 80096c2:	f000 8310 	beq.w	8009ce6 <HAL_UART_Init+0x11ce>
 80096c6:	2d07      	cmp	r5, #7
 80096c8:	d0e0      	beq.n	800968c <HAL_UART_Init+0xb74>
 80096ca:	2d08      	cmp	r5, #8
 80096cc:	f000 80a1 	beq.w	8009812 <HAL_UART_Init+0xcfa>
 80096d0:	2d09      	cmp	r5, #9
 80096d2:	f000 8143 	beq.w	800995c <HAL_UART_Init+0xe44>
 80096d6:	2d0a      	cmp	r5, #10
 80096d8:	f000 81d4 	beq.w	8009a84 <HAL_UART_Init+0xf6c>
 80096dc:	4855      	ldr	r0, [pc, #340]	; (8009834 <HAL_UART_Init+0xd1c>)
 80096de:	4b54      	ldr	r3, [pc, #336]	; (8009830 <HAL_UART_Init+0xd18>)
 80096e0:	2d0b      	cmp	r5, #11
 80096e2:	bf18      	it	ne
 80096e4:	4618      	movne	r0, r3
 80096e6:	f7ff bb43 	b.w	8008d70 <HAL_UART_Init+0x258>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80096ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80096ee:	f7ff bb3f 	b.w	8008d70 <HAL_UART_Init+0x258>
 80096f2:	0840      	lsrs	r0, r0, #1
 80096f4:	e599      	b.n	800922a <HAL_UART_Init+0x712>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096f6:	4b51      	ldr	r3, [pc, #324]	; (800983c <HAL_UART_Init+0xd24>)
 80096f8:	e5fd      	b.n	80092f6 <HAL_UART_Init+0x7de>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096fe:	e5fa      	b.n	80092f6 <HAL_UART_Init+0x7de>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009700:	2d00      	cmp	r5, #0
 8009702:	f000 80a5 	beq.w	8009850 <HAL_UART_Init+0xd38>
 8009706:	2d01      	cmp	r5, #1
 8009708:	f000 81a2 	beq.w	8009a50 <HAL_UART_Init+0xf38>
 800970c:	2d02      	cmp	r5, #2
 800970e:	f000 81d4 	beq.w	8009aba <HAL_UART_Init+0xfa2>
 8009712:	2d03      	cmp	r5, #3
 8009714:	f000 8203 	beq.w	8009b1e <HAL_UART_Init+0x1006>
 8009718:	2d04      	cmp	r5, #4
 800971a:	f000 826a 	beq.w	8009bf2 <HAL_UART_Init+0x10da>
 800971e:	2d05      	cmp	r5, #5
 8009720:	f000 82b4 	beq.w	8009c8c <HAL_UART_Init+0x1174>
 8009724:	2d06      	cmp	r5, #6
 8009726:	f000 82f7 	beq.w	8009d18 <HAL_UART_Init+0x1200>
 800972a:	2d07      	cmp	r5, #7
 800972c:	d0e3      	beq.n	80096f6 <HAL_UART_Init+0xbde>
 800972e:	2d08      	cmp	r5, #8
 8009730:	f000 810f 	beq.w	8009952 <HAL_UART_Init+0xe3a>
 8009734:	2d09      	cmp	r5, #9
 8009736:	f000 8144 	beq.w	80099c2 <HAL_UART_Init+0xeaa>
 800973a:	2d0a      	cmp	r5, #10
 800973c:	f000 81bf 	beq.w	8009abe <HAL_UART_Init+0xfa6>
 8009740:	4b3f      	ldr	r3, [pc, #252]	; (8009840 <HAL_UART_Init+0xd28>)
 8009742:	4a40      	ldr	r2, [pc, #256]	; (8009844 <HAL_UART_Init+0xd2c>)
 8009744:	2d0b      	cmp	r5, #11
 8009746:	bf08      	it	eq
 8009748:	4613      	moveq	r3, r2
 800974a:	e5d4      	b.n	80092f6 <HAL_UART_Init+0x7de>
        switch (clocksource)
 800974c:	2e02      	cmp	r6, #2
 800974e:	f000 80cd 	beq.w	80098ec <HAL_UART_Init+0xdd4>
 8009752:	2e04      	cmp	r6, #4
 8009754:	f47f aaac 	bne.w	8008cb0 <HAL_UART_Init+0x198>
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009758:	4668      	mov	r0, sp
 800975a:	f7fe f97f 	bl	8007a5c <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800975e:	9a01      	ldr	r2, [sp, #4]
 8009760:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009762:	f04f 0c00 	mov.w	ip, #0
 8009766:	4693      	mov	fp, r2
 8009768:	b31b      	cbz	r3, 80097b2 <HAL_UART_Init+0xc9a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800976a:	2b01      	cmp	r3, #1
 800976c:	f000 8167 	beq.w	8009a3e <HAL_UART_Init+0xf26>
 8009770:	2b02      	cmp	r3, #2
 8009772:	f000 818a 	beq.w	8009a8a <HAL_UART_Init+0xf72>
 8009776:	2b03      	cmp	r3, #3
 8009778:	f000 81d4 	beq.w	8009b24 <HAL_UART_Init+0x100c>
 800977c:	2b04      	cmp	r3, #4
 800977e:	f000 81da 	beq.w	8009b36 <HAL_UART_Init+0x101e>
 8009782:	2b05      	cmp	r3, #5
 8009784:	f000 8252 	beq.w	8009c2c <HAL_UART_Init+0x1114>
 8009788:	2b06      	cmp	r3, #6
 800978a:	f000 825e 	beq.w	8009c4a <HAL_UART_Init+0x1132>
 800978e:	2b07      	cmp	r3, #7
 8009790:	f000 837c 	beq.w	8009e8c <HAL_UART_Init+0x1374>
 8009794:	2b08      	cmp	r3, #8
 8009796:	f000 8383 	beq.w	8009ea0 <HAL_UART_Init+0x1388>
 800979a:	2b09      	cmp	r3, #9
 800979c:	f000 837b 	beq.w	8009e96 <HAL_UART_Init+0x137e>
 80097a0:	2b0a      	cmp	r3, #10
 80097a2:	f000 8344 	beq.w	8009e2e <HAL_UART_Init+0x1316>
 80097a6:	2b0b      	cmp	r3, #11
 80097a8:	d103      	bne.n	80097b2 <HAL_UART_Init+0xc9a>
 80097aa:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 80097ae:	f04f 0c00 	mov.w	ip, #0
 80097b2:	6863      	ldr	r3, [r4, #4]
 80097b4:	ea4f 270c 	mov.w	r7, ip, lsl #8
 80097b8:	ea4f 260b 	mov.w	r6, fp, lsl #8
 80097bc:	0859      	lsrs	r1, r3, #1
 80097be:	461a      	mov	r2, r3
 80097c0:	ea47 671b 	orr.w	r7, r7, fp, lsr #24
 80097c4:	2300      	movs	r3, #0
 80097c6:	eb16 0b01 	adds.w	fp, r6, r1
 80097ca:	f147 0c00 	adc.w	ip, r7, #0
 80097ce:	4658      	mov	r0, fp
 80097d0:	4661      	mov	r1, ip
 80097d2:	f7f6 fe3d 	bl	8000450 <__aeabi_uldivmod>
 80097d6:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80097da:	f7ff bb1e 	b.w	8008e1a <HAL_UART_Init+0x302>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097de:	4b14      	ldr	r3, [pc, #80]	; (8009830 <HAL_UART_Init+0xd18>)
 80097e0:	e462      	b.n	80090a8 <HAL_UART_Init+0x590>
 80097e2:	0852      	lsrs	r2, r2, #1
 80097e4:	e5f6      	b.n	80093d4 <HAL_UART_Init+0x8bc>
 80097e6:	4a18      	ldr	r2, [pc, #96]	; (8009848 <HAL_UART_Init+0xd30>)
 80097e8:	fba2 2303 	umull	r2, r3, r2, r3
 80097ec:	08db      	lsrs	r3, r3, #3
 80097ee:	e45b      	b.n	80090a8 <HAL_UART_Init+0x590>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80097f0:	480f      	ldr	r0, [pc, #60]	; (8009830 <HAL_UART_Init+0xd18>)
 80097f2:	f7ff babd 	b.w	8008d70 <HAL_UART_Init+0x258>
 80097f6:	0840      	lsrs	r0, r0, #1
 80097f8:	e653      	b.n	80094a2 <HAL_UART_Init+0x98a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097fa:	4b14      	ldr	r3, [pc, #80]	; (800984c <HAL_UART_Init+0xd34>)
 80097fc:	e454      	b.n	80090a8 <HAL_UART_Init+0x590>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009802:	e451      	b.n	80090a8 <HAL_UART_Init+0x590>
 8009804:	4b10      	ldr	r3, [pc, #64]	; (8009848 <HAL_UART_Init+0xd30>)
 8009806:	fba3 3000 	umull	r3, r0, r3, r0
 800980a:	08c0      	lsrs	r0, r0, #3
 800980c:	e50d      	b.n	800922a <HAL_UART_Init+0x712>
 800980e:	0892      	lsrs	r2, r2, #2
 8009810:	e5e0      	b.n	80093d4 <HAL_UART_Init+0x8bc>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009812:	480e      	ldr	r0, [pc, #56]	; (800984c <HAL_UART_Init+0xd34>)
 8009814:	f7ff baac 	b.w	8008d70 <HAL_UART_Init+0x258>
 8009818:	58024400 	.word	0x58024400
 800981c:	0801af5c 	.word	0x0801af5c
 8009820:	0801af5c 	.word	0x0801af5c
 8009824:	0801af30 	.word	0x0801af30
 8009828:	0801af5c 	.word	0x0801af5c
 800982c:	003d0900 	.word	0x003d0900
 8009830:	03d09000 	.word	0x03d09000
 8009834:	0003d090 	.word	0x0003d090
 8009838:	aaaaaaab 	.word	0xaaaaaaab
 800983c:	007a1200 	.word	0x007a1200
 8009840:	07a12000 	.word	0x07a12000
 8009844:	0007a120 	.word	0x0007a120
 8009848:	cccccccd 	.word	0xcccccccd
 800984c:	001e8480 	.word	0x001e8480
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009850:	4bcf      	ldr	r3, [pc, #828]	; (8009b90 <HAL_UART_Init+0x1078>)
 8009852:	e550      	b.n	80092f6 <HAL_UART_Init+0x7de>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009854:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009858:	f7ff ba8a 	b.w	8008d70 <HAL_UART_Init+0x258>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800985c:	4bcd      	ldr	r3, [pc, #820]	; (8009b94 <HAL_UART_Init+0x107c>)
 800985e:	e423      	b.n	80090a8 <HAL_UART_Init+0x590>
 8009860:	0880      	lsrs	r0, r0, #2
 8009862:	e61e      	b.n	80094a2 <HAL_UART_Init+0x98a>
 8009864:	08c0      	lsrs	r0, r0, #3
 8009866:	e68c      	b.n	8009582 <HAL_UART_Init+0xa6a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009868:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800986c:	e41c      	b.n	80090a8 <HAL_UART_Init+0x590>
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800986e:	a803      	add	r0, sp, #12
 8009870:	f7fe f98c 	bl	8007b8c <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009874:	9a04      	ldr	r2, [sp, #16]
 8009876:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009878:	f04f 0c00 	mov.w	ip, #0
 800987c:	4693      	mov	fp, r2
 800987e:	2b00      	cmp	r3, #0
 8009880:	d097      	beq.n	80097b2 <HAL_UART_Init+0xc9a>
 8009882:	e772      	b.n	800976a <HAL_UART_Init+0xc52>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009884:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009886:	b303      	cbz	r3, 80098ca <HAL_UART_Init+0xdb2>
 8009888:	2b01      	cmp	r3, #1
 800988a:	f000 8163 	beq.w	8009b54 <HAL_UART_Init+0x103c>
 800988e:	2b02      	cmp	r3, #2
 8009890:	f000 81bf 	beq.w	8009c12 <HAL_UART_Init+0x10fa>
 8009894:	2b03      	cmp	r3, #3
 8009896:	f000 8247 	beq.w	8009d28 <HAL_UART_Init+0x1210>
 800989a:	2b04      	cmp	r3, #4
 800989c:	f000 823f 	beq.w	8009d1e <HAL_UART_Init+0x1206>
 80098a0:	2b05      	cmp	r3, #5
 80098a2:	f000 82a9 	beq.w	8009df8 <HAL_UART_Init+0x12e0>
 80098a6:	2b06      	cmp	r3, #6
 80098a8:	f000 82a1 	beq.w	8009dee <HAL_UART_Init+0x12d6>
 80098ac:	2b07      	cmp	r3, #7
 80098ae:	f000 82c8 	beq.w	8009e42 <HAL_UART_Init+0x132a>
 80098b2:	2b08      	cmp	r3, #8
 80098b4:	f000 82c0 	beq.w	8009e38 <HAL_UART_Init+0x1320>
 80098b8:	2b09      	cmp	r3, #9
 80098ba:	f000 82cc 	beq.w	8009e56 <HAL_UART_Init+0x133e>
 80098be:	2b0a      	cmp	r3, #10
 80098c0:	f000 82c4 	beq.w	8009e4c <HAL_UART_Init+0x1334>
 80098c4:	2b0b      	cmp	r3, #11
 80098c6:	f000 82dc 	beq.w	8009e82 <HAL_UART_Init+0x136a>
 80098ca:	f8df b30c 	ldr.w	fp, [pc, #780]	; 8009bd8 <HAL_UART_Init+0x10c0>
 80098ce:	f04f 0c00 	mov.w	ip, #0
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098d2:	086e      	lsrs	r6, r5, #1
 80098d4:	462a      	mov	r2, r5
 80098d6:	2300      	movs	r3, #0
 80098d8:	eb1b 0006 	adds.w	r0, fp, r6
 80098dc:	f14c 0100 	adc.w	r1, ip, #0
 80098e0:	f7f6 fdb6 	bl	8000450 <__aeabi_uldivmod>
 80098e4:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80098e8:	f7ff ba97 	b.w	8008e1a <HAL_UART_Init+0x302>
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80098ec:	f7fe f8a4 	bl	8007a38 <HAL_RCCEx_GetD3PCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80098f2:	4602      	mov	r2, r0
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098f4:	4683      	mov	fp, r0
 80098f6:	f04f 0c00 	mov.w	ip, #0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	f43f af59 	beq.w	80097b2 <HAL_UART_Init+0xc9a>
 8009900:	e733      	b.n	800976a <HAL_UART_Init+0xc52>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009902:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009904:	b303      	cbz	r3, 8009948 <HAL_UART_Init+0xe30>
 8009906:	2b01      	cmp	r3, #1
 8009908:	f000 8129 	beq.w	8009b5e <HAL_UART_Init+0x1046>
 800990c:	2b02      	cmp	r3, #2
 800990e:	f000 8185 	beq.w	8009c1c <HAL_UART_Init+0x1104>
 8009912:	2b03      	cmp	r3, #3
 8009914:	f000 81d8 	beq.w	8009cc8 <HAL_UART_Init+0x11b0>
 8009918:	2b04      	cmp	r3, #4
 800991a:	f000 81d0 	beq.w	8009cbe <HAL_UART_Init+0x11a6>
 800991e:	2b05      	cmp	r3, #5
 8009920:	f000 823d 	beq.w	8009d9e <HAL_UART_Init+0x1286>
 8009924:	2b06      	cmp	r3, #6
 8009926:	f000 8235 	beq.w	8009d94 <HAL_UART_Init+0x127c>
 800992a:	2b07      	cmp	r3, #7
 800992c:	f000 82ca 	beq.w	8009ec4 <HAL_UART_Init+0x13ac>
 8009930:	2b08      	cmp	r3, #8
 8009932:	f000 82c2 	beq.w	8009eba <HAL_UART_Init+0x13a2>
 8009936:	2b09      	cmp	r3, #9
 8009938:	f000 829e 	beq.w	8009e78 <HAL_UART_Init+0x1360>
 800993c:	2b0a      	cmp	r3, #10
 800993e:	f000 8296 	beq.w	8009e6e <HAL_UART_Init+0x1356>
 8009942:	2b0b      	cmp	r3, #11
 8009944:	f000 826a 	beq.w	8009e1c <HAL_UART_Init+0x1304>
 8009948:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
 800994c:	f04f 0c00 	mov.w	ip, #0
 8009950:	e7bf      	b.n	80098d2 <HAL_UART_Init+0xdba>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009952:	4b91      	ldr	r3, [pc, #580]	; (8009b98 <HAL_UART_Init+0x1080>)
 8009954:	e4cf      	b.n	80092f6 <HAL_UART_Init+0x7de>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800995a:	e4cc      	b.n	80092f6 <HAL_UART_Init+0x7de>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800995c:	488d      	ldr	r0, [pc, #564]	; (8009b94 <HAL_UART_Init+0x107c>)
 800995e:	f7ff ba07 	b.w	8008d70 <HAL_UART_Init+0x258>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009962:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009966:	f7ff ba03 	b.w	8008d70 <HAL_UART_Init+0x258>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800996a:	4b8c      	ldr	r3, [pc, #560]	; (8009b9c <HAL_UART_Init+0x1084>)
 800996c:	f7ff bb9c 	b.w	80090a8 <HAL_UART_Init+0x590>
 8009970:	4b8b      	ldr	r3, [pc, #556]	; (8009ba0 <HAL_UART_Init+0x1088>)
 8009972:	fba3 2300 	umull	r2, r3, r3, r0
 8009976:	0898      	lsrs	r0, r3, #2
 8009978:	e593      	b.n	80094a2 <HAL_UART_Init+0x98a>
 800997a:	4b89      	ldr	r3, [pc, #548]	; (8009ba0 <HAL_UART_Init+0x1088>)
 800997c:	fba3 2302 	umull	r2, r3, r3, r2
 8009980:	089a      	lsrs	r2, r3, #2
 8009982:	e527      	b.n	80093d4 <HAL_UART_Init+0x8bc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009984:	f241 5355 	movw	r3, #5461	; 0x1555
 8009988:	f7ff bb8e 	b.w	80090a8 <HAL_UART_Init+0x590>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800998c:	4b85      	ldr	r3, [pc, #532]	; (8009ba4 <HAL_UART_Init+0x108c>)
 800998e:	f7ff bb8b 	b.w	80090a8 <HAL_UART_Init+0x590>
 8009992:	4b83      	ldr	r3, [pc, #524]	; (8009ba0 <HAL_UART_Init+0x1088>)
 8009994:	fba3 3000 	umull	r3, r0, r3, r0
 8009998:	0880      	lsrs	r0, r0, #2
 800999a:	f7ff b9e9 	b.w	8008d70 <HAL_UART_Init+0x258>
 800999e:	230a      	movs	r3, #10
 80099a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80099a4:	e5ed      	b.n	8009582 <HAL_UART_Init+0xa6a>
 80099a6:	08d2      	lsrs	r2, r2, #3
 80099a8:	e514      	b.n	80093d4 <HAL_UART_Init+0x8bc>
 80099aa:	0840      	lsrs	r0, r0, #1
 80099ac:	f7ff b9e0 	b.w	8008d70 <HAL_UART_Init+0x258>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80099b0:	487a      	ldr	r0, [pc, #488]	; (8009b9c <HAL_UART_Init+0x1084>)
 80099b2:	f7ff b9dd 	b.w	8008d70 <HAL_UART_Init+0x258>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80099ba:	e49c      	b.n	80092f6 <HAL_UART_Init+0x7de>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099bc:	4b7a      	ldr	r3, [pc, #488]	; (8009ba8 <HAL_UART_Init+0x1090>)
 80099be:	f7ff bb73 	b.w	80090a8 <HAL_UART_Init+0x590>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099c2:	4b7a      	ldr	r3, [pc, #488]	; (8009bac <HAL_UART_Init+0x1094>)
 80099c4:	e497      	b.n	80092f6 <HAL_UART_Init+0x7de>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80099c6:	4877      	ldr	r0, [pc, #476]	; (8009ba4 <HAL_UART_Init+0x108c>)
 80099c8:	f7ff b9d2 	b.w	8008d70 <HAL_UART_Init+0x258>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099cc:	4b78      	ldr	r3, [pc, #480]	; (8009bb0 <HAL_UART_Init+0x1098>)
 80099ce:	f7ff bb6b 	b.w	80090a8 <HAL_UART_Init+0x590>
 80099d2:	220c      	movs	r2, #12
 80099d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80099d8:	f7ff bb66 	b.w	80090a8 <HAL_UART_Init+0x590>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80099dc:	f241 5055 	movw	r0, #5461	; 0x1555
 80099e0:	f7ff b9c6 	b.w	8008d70 <HAL_UART_Init+0x258>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099e8:	f7ff bb5e 	b.w	80090a8 <HAL_UART_Init+0x590>
 80099ec:	08c0      	lsrs	r0, r0, #3
 80099ee:	e558      	b.n	80094a2 <HAL_UART_Init+0x98a>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099f0:	b303      	cbz	r3, 8009a34 <HAL_UART_Init+0xf1c>
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	f000 8153 	beq.w	8009c9e <HAL_UART_Init+0x1186>
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	f000 8155 	beq.w	8009ca8 <HAL_UART_Init+0x1190>
 80099fe:	2b03      	cmp	r3, #3
 8009a00:	f000 81c3 	beq.w	8009d8a <HAL_UART_Init+0x1272>
 8009a04:	2b04      	cmp	r3, #4
 8009a06:	f000 81bb 	beq.w	8009d80 <HAL_UART_Init+0x1268>
 8009a0a:	2b05      	cmp	r3, #5
 8009a0c:	f000 81b3 	beq.w	8009d76 <HAL_UART_Init+0x125e>
 8009a10:	2b06      	cmp	r3, #6
 8009a12:	f000 825c 	beq.w	8009ece <HAL_UART_Init+0x13b6>
 8009a16:	2b07      	cmp	r3, #7
 8009a18:	f43f af57 	beq.w	80098ca <HAL_UART_Init+0xdb2>
 8009a1c:	2b08      	cmp	r3, #8
 8009a1e:	f000 8099 	beq.w	8009b54 <HAL_UART_Init+0x103c>
 8009a22:	2b09      	cmp	r3, #9
 8009a24:	f000 80f5 	beq.w	8009c12 <HAL_UART_Init+0x10fa>
 8009a28:	2b0a      	cmp	r3, #10
 8009a2a:	f000 8178 	beq.w	8009d1e <HAL_UART_Init+0x1206>
 8009a2e:	2b0b      	cmp	r3, #11
 8009a30:	f000 8207 	beq.w	8009e42 <HAL_UART_Init+0x132a>
 8009a34:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 8009bdc <HAL_UART_Init+0x10c4>
 8009a38:	f04f 0c03 	mov.w	ip, #3
 8009a3c:	e749      	b.n	80098d2 <HAL_UART_Init+0xdba>
 8009a3e:	ea5f 0c5c 	movs.w	ip, ip, lsr #1
 8009a42:	ea4f 0b3b 	mov.w	fp, fp, rrx
 8009a46:	e6b4      	b.n	80097b2 <HAL_UART_Init+0xc9a>
 8009a48:	230c      	movs	r3, #12
 8009a4a:	fbb0 f0f3 	udiv	r0, r0, r3
 8009a4e:	e598      	b.n	8009582 <HAL_UART_Init+0xa6a>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a50:	4b58      	ldr	r3, [pc, #352]	; (8009bb4 <HAL_UART_Init+0x109c>)
 8009a52:	e450      	b.n	80092f6 <HAL_UART_Init+0x7de>
 8009a54:	230c      	movs	r3, #12
 8009a56:	fbb0 f0f3 	udiv	r0, r0, r3
 8009a5a:	f7ff bbe6 	b.w	800922a <HAL_UART_Init+0x712>
 8009a5e:	230a      	movs	r3, #10
 8009a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8009a64:	e4b6      	b.n	80093d4 <HAL_UART_Init+0x8bc>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009a66:	4850      	ldr	r0, [pc, #320]	; (8009ba8 <HAL_UART_Init+0x1090>)
 8009a68:	f7ff b982 	b.w	8008d70 <HAL_UART_Init+0x258>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a6c:	4b52      	ldr	r3, [pc, #328]	; (8009bb8 <HAL_UART_Init+0x10a0>)
 8009a6e:	f7ff bb1b 	b.w	80090a8 <HAL_UART_Init+0x590>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a72:	4b52      	ldr	r3, [pc, #328]	; (8009bbc <HAL_UART_Init+0x10a4>)
 8009a74:	e43f      	b.n	80092f6 <HAL_UART_Init+0x7de>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009a76:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009a7a:	f7ff b979 	b.w	8008d70 <HAL_UART_Init+0x258>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a7e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8009a82:	e438      	b.n	80092f6 <HAL_UART_Init+0x7de>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009a84:	484a      	ldr	r0, [pc, #296]	; (8009bb0 <HAL_UART_Init+0x1098>)
 8009a86:	f7ff b973 	b.w	8008d70 <HAL_UART_Init+0x258>
 8009a8a:	ea4f 0b92 	mov.w	fp, r2, lsr #2
 8009a8e:	f04f 0c00 	mov.w	ip, #0
 8009a92:	e68e      	b.n	80097b2 <HAL_UART_Init+0xc9a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a94:	4b4a      	ldr	r3, [pc, #296]	; (8009bc0 <HAL_UART_Init+0x10a8>)
 8009a96:	f7ff bb07 	b.w	80090a8 <HAL_UART_Init+0x590>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a9a:	f640 43cc 	movw	r3, #3276	; 0xccc
 8009a9e:	f7ff bb03 	b.w	80090a8 <HAL_UART_Init+0x590>
 8009aa2:	230a      	movs	r3, #10
 8009aa4:	fbb0 f0f3 	udiv	r0, r0, r3
 8009aa8:	e4fb      	b.n	80094a2 <HAL_UART_Init+0x98a>
 8009aaa:	091b      	lsrs	r3, r3, #4
 8009aac:	f7ff bafc 	b.w	80090a8 <HAL_UART_Init+0x590>
 8009ab0:	0900      	lsrs	r0, r0, #4
 8009ab2:	e566      	b.n	8009582 <HAL_UART_Init+0xa6a>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009ab4:	4840      	ldr	r0, [pc, #256]	; (8009bb8 <HAL_UART_Init+0x10a0>)
 8009ab6:	f7ff b95b 	b.w	8008d70 <HAL_UART_Init+0x258>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009aba:	4b38      	ldr	r3, [pc, #224]	; (8009b9c <HAL_UART_Init+0x1084>)
 8009abc:	e41b      	b.n	80092f6 <HAL_UART_Init+0x7de>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009abe:	4b35      	ldr	r3, [pc, #212]	; (8009b94 <HAL_UART_Init+0x107c>)
 8009ac0:	e419      	b.n	80092f6 <HAL_UART_Init+0x7de>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ac2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ac6:	e416      	b.n	80092f6 <HAL_UART_Init+0x7de>
 8009ac8:	230c      	movs	r3, #12
 8009aca:	fbb2 f2f3 	udiv	r2, r2, r3
 8009ace:	e481      	b.n	80093d4 <HAL_UART_Init+0x8bc>
 8009ad0:	0900      	lsrs	r0, r0, #4
 8009ad2:	f7ff bbaa 	b.w	800922a <HAL_UART_Init+0x712>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ad6:	4b3b      	ldr	r3, [pc, #236]	; (8009bc4 <HAL_UART_Init+0x10ac>)
 8009ad8:	f7ff bae6 	b.w	80090a8 <HAL_UART_Init+0x590>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009adc:	4838      	ldr	r0, [pc, #224]	; (8009bc0 <HAL_UART_Init+0x10a8>)
 8009ade:	f7ff b947 	b.w	8008d70 <HAL_UART_Init+0x258>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ae2:	4b39      	ldr	r3, [pc, #228]	; (8009bc8 <HAL_UART_Init+0x10b0>)
 8009ae4:	f7ff bae0 	b.w	80090a8 <HAL_UART_Init+0x590>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ae8:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009aec:	f7ff badc 	b.w	80090a8 <HAL_UART_Init+0x590>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009af0:	f640 40cc 	movw	r0, #3276	; 0xccc
 8009af4:	f7ff b93c 	b.w	8008d70 <HAL_UART_Init+0x258>
 8009af8:	095b      	lsrs	r3, r3, #5
 8009afa:	f7ff bad5 	b.w	80090a8 <HAL_UART_Init+0x590>
 8009afe:	0940      	lsrs	r0, r0, #5
 8009b00:	e53f      	b.n	8009582 <HAL_UART_Init+0xa6a>
 8009b02:	230c      	movs	r3, #12
 8009b04:	fbb0 f0f3 	udiv	r0, r0, r3
 8009b08:	e4cb      	b.n	80094a2 <HAL_UART_Init+0x98a>
 8009b0a:	08c0      	lsrs	r0, r0, #3
 8009b0c:	f7ff b930 	b.w	8008d70 <HAL_UART_Init+0x258>
 8009b10:	2306      	movs	r3, #6
 8009b12:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b16:	e45d      	b.n	80093d4 <HAL_UART_Init+0x8bc>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009b18:	482a      	ldr	r0, [pc, #168]	; (8009bc4 <HAL_UART_Init+0x10ac>)
 8009b1a:	f7ff b929 	b.w	8008d70 <HAL_UART_Init+0x258>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b1e:	4b2b      	ldr	r3, [pc, #172]	; (8009bcc <HAL_UART_Init+0x10b4>)
 8009b20:	f7ff bbe9 	b.w	80092f6 <HAL_UART_Init+0x7de>
 8009b24:	4658      	mov	r0, fp
 8009b26:	4661      	mov	r1, ip
 8009b28:	2206      	movs	r2, #6
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	f7f6 fc90 	bl	8000450 <__aeabi_uldivmod>
 8009b30:	4683      	mov	fp, r0
 8009b32:	468c      	mov	ip, r1
 8009b34:	e63d      	b.n	80097b2 <HAL_UART_Init+0xc9a>
 8009b36:	ea4f 0bd2 	mov.w	fp, r2, lsr #3
 8009b3a:	f04f 0c00 	mov.w	ip, #0
 8009b3e:	e638      	b.n	80097b2 <HAL_UART_Init+0xc9a>
 8009b40:	0940      	lsrs	r0, r0, #5
 8009b42:	f7ff bb72 	b.w	800922a <HAL_UART_Init+0x712>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009b46:	f640 20aa 	movw	r0, #2730	; 0xaaa
 8009b4a:	f7ff b911 	b.w	8008d70 <HAL_UART_Init+0x258>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b4e:	4b20      	ldr	r3, [pc, #128]	; (8009bd0 <HAL_UART_Init+0x10b8>)
 8009b50:	f7ff bbd1 	b.w	80092f6 <HAL_UART_Init+0x7de>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b54:	f8df b088 	ldr.w	fp, [pc, #136]	; 8009be0 <HAL_UART_Init+0x10c8>
 8009b58:	f04f 0c00 	mov.w	ip, #0
 8009b5c:	e6b9      	b.n	80098d2 <HAL_UART_Init+0xdba>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b5e:	f44f 0b80 	mov.w	fp, #4194304	; 0x400000
 8009b62:	f04f 0c00 	mov.w	ip, #0
 8009b66:	e6b4      	b.n	80098d2 <HAL_UART_Init+0xdba>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b68:	4b1a      	ldr	r3, [pc, #104]	; (8009bd4 <HAL_UART_Init+0x10bc>)
 8009b6a:	f7ff ba9d 	b.w	80090a8 <HAL_UART_Init+0x590>
 8009b6e:	0912      	lsrs	r2, r2, #4
 8009b70:	e430      	b.n	80093d4 <HAL_UART_Init+0x8bc>
 8009b72:	220a      	movs	r2, #10
 8009b74:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b78:	f7ff ba96 	b.w	80090a8 <HAL_UART_Init+0x590>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b7c:	f641 1398 	movw	r3, #6552	; 0x1998
 8009b80:	f7ff bbb9 	b.w	80092f6 <HAL_UART_Init+0x7de>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009b84:	4810      	ldr	r0, [pc, #64]	; (8009bc8 <HAL_UART_Init+0x10b0>)
 8009b86:	f7ff b8f3 	b.w	8008d70 <HAL_UART_Init+0x258>
 8009b8a:	099b      	lsrs	r3, r3, #6
 8009b8c:	f7ff ba8c 	b.w	80090a8 <HAL_UART_Init+0x590>
 8009b90:	07a12000 	.word	0x07a12000
 8009b94:	000f4240 	.word	0x000f4240
 8009b98:	003d0900 	.word	0x003d0900
 8009b9c:	01e84800 	.word	0x01e84800
 8009ba0:	aaaaaaab 	.word	0xaaaaaaab
 8009ba4:	000a2c2a 	.word	0x000a2c2a
 8009ba8:	00f42400 	.word	0x00f42400
 8009bac:	001e8480 	.word	0x001e8480
 8009bb0:	0007a120 	.word	0x0007a120
 8009bb4:	03d09000 	.word	0x03d09000
 8009bb8:	00a2c2aa 	.word	0x00a2c2aa
 8009bbc:	00145854 	.word	0x00145854
 8009bc0:	00061a80 	.word	0x00061a80
 8009bc4:	007a1200 	.word	0x007a1200
 8009bc8:	00051615 	.word	0x00051615
 8009bcc:	01458554 	.word	0x01458554
 8009bd0:	000c3500 	.word	0x000c3500
 8009bd4:	0061a800 	.word	0x0061a800
 8009bd8:	3d090000 	.word	0x3d090000
 8009bdc:	d0900000 	.word	0xd0900000
 8009be0:	1e848000 	.word	0x1e848000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009be4:	4bcc      	ldr	r3, [pc, #816]	; (8009f18 <HAL_UART_Init+0x1400>)
 8009be6:	f7ff ba5f 	b.w	80090a8 <HAL_UART_Init+0x590>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009bee:	f7ff ba5b 	b.w	80090a8 <HAL_UART_Init+0x590>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bf2:	4bca      	ldr	r3, [pc, #808]	; (8009f1c <HAL_UART_Init+0x1404>)
 8009bf4:	f7ff bb7f 	b.w	80092f6 <HAL_UART_Init+0x7de>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009bf8:	48c9      	ldr	r0, [pc, #804]	; (8009f20 <HAL_UART_Init+0x1408>)
 8009bfa:	f7ff b8b9 	b.w	8008d70 <HAL_UART_Init+0x258>
 8009bfe:	0900      	lsrs	r0, r0, #4
 8009c00:	e44f      	b.n	80094a2 <HAL_UART_Init+0x98a>
 8009c02:	230a      	movs	r3, #10
 8009c04:	fbb0 f0f3 	udiv	r0, r0, r3
 8009c08:	f7ff b8b2 	b.w	8008d70 <HAL_UART_Init+0x258>
 8009c0c:	0980      	lsrs	r0, r0, #6
 8009c0e:	f7ff bb0c 	b.w	800922a <HAL_UART_Init+0x712>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c12:	f8df b328 	ldr.w	fp, [pc, #808]	; 8009f3c <HAL_UART_Init+0x1424>
 8009c16:	f04f 0c00 	mov.w	ip, #0
 8009c1a:	e65a      	b.n	80098d2 <HAL_UART_Init+0xdba>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c1c:	f44f 1b00 	mov.w	fp, #2097152	; 0x200000
 8009c20:	f04f 0c00 	mov.w	ip, #0
 8009c24:	e655      	b.n	80098d2 <HAL_UART_Init+0xdba>
 8009c26:	09db      	lsrs	r3, r3, #7
 8009c28:	f7ff ba3e 	b.w	80090a8 <HAL_UART_Init+0x590>
 8009c2c:	4658      	mov	r0, fp
 8009c2e:	4661      	mov	r1, ip
 8009c30:	220a      	movs	r2, #10
 8009c32:	2300      	movs	r3, #0
 8009c34:	f7f6 fc0c 	bl	8000450 <__aeabi_uldivmod>
 8009c38:	4683      	mov	fp, r0
 8009c3a:	468c      	mov	ip, r1
 8009c3c:	e5b9      	b.n	80097b2 <HAL_UART_Init+0xc9a>
 8009c3e:	0952      	lsrs	r2, r2, #5
 8009c40:	f7ff bbc8 	b.w	80093d4 <HAL_UART_Init+0x8bc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c44:	4bb7      	ldr	r3, [pc, #732]	; (8009f24 <HAL_UART_Init+0x140c>)
 8009c46:	f7ff ba2f 	b.w	80090a8 <HAL_UART_Init+0x590>
 8009c4a:	4658      	mov	r0, fp
 8009c4c:	4661      	mov	r1, ip
 8009c4e:	220c      	movs	r2, #12
 8009c50:	2300      	movs	r3, #0
 8009c52:	f7f6 fbfd 	bl	8000450 <__aeabi_uldivmod>
 8009c56:	4683      	mov	fp, r0
 8009c58:	468c      	mov	ip, r1
 8009c5a:	e5aa      	b.n	80097b2 <HAL_UART_Init+0xc9a>
 8009c5c:	0849      	lsrs	r1, r1, #1
 8009c5e:	ea4f 0030 	mov.w	r0, r0, rrx
 8009c62:	f7ff b8ca 	b.w	8008dfa <HAL_UART_Init+0x2e2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009c66:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009c6a:	f7ff b881 	b.w	8008d70 <HAL_UART_Init+0x258>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c6e:	4bae      	ldr	r3, [pc, #696]	; (8009f28 <HAL_UART_Init+0x1410>)
 8009c70:	f7ff bb41 	b.w	80092f6 <HAL_UART_Init+0x7de>
 8009c74:	09c0      	lsrs	r0, r0, #7
 8009c76:	e484      	b.n	8009582 <HAL_UART_Init+0xa6a>
 8009c78:	0980      	lsrs	r0, r0, #6
 8009c7a:	e482      	b.n	8009582 <HAL_UART_Init+0xa6a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c80:	f7ff ba12 	b.w	80090a8 <HAL_UART_Init+0x590>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c84:	f241 5354 	movw	r3, #5460	; 0x1554
 8009c88:	f7ff bb35 	b.w	80092f6 <HAL_UART_Init+0x7de>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c8c:	4ba7      	ldr	r3, [pc, #668]	; (8009f2c <HAL_UART_Init+0x1414>)
 8009c8e:	f7ff bb32 	b.w	80092f6 <HAL_UART_Init+0x7de>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009c92:	48a1      	ldr	r0, [pc, #644]	; (8009f18 <HAL_UART_Init+0x1400>)
 8009c94:	f7ff b86c 	b.w	8008d70 <HAL_UART_Init+0x258>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c98:	4ba5      	ldr	r3, [pc, #660]	; (8009f30 <HAL_UART_Init+0x1418>)
 8009c9a:	f7ff ba05 	b.w	80090a8 <HAL_UART_Init+0x590>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c9e:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 8009f40 <HAL_UART_Init+0x1428>
 8009ca2:	f04f 0c01 	mov.w	ip, #1
 8009ca6:	e614      	b.n	80098d2 <HAL_UART_Init+0xdba>
 8009ca8:	f8df b298 	ldr.w	fp, [pc, #664]	; 8009f44 <HAL_UART_Init+0x142c>
 8009cac:	f04f 0c00 	mov.w	ip, #0
 8009cb0:	e60f      	b.n	80098d2 <HAL_UART_Init+0xdba>
 8009cb2:	09c0      	lsrs	r0, r0, #7
 8009cb4:	f7ff bbf5 	b.w	80094a2 <HAL_UART_Init+0x98a>
 8009cb8:	0980      	lsrs	r0, r0, #6
 8009cba:	f7ff bbf2 	b.w	80094a2 <HAL_UART_Init+0x98a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cbe:	f44f 1b80 	mov.w	fp, #1048576	; 0x100000
 8009cc2:	f04f 0c00 	mov.w	ip, #0
 8009cc6:	e604      	b.n	80098d2 <HAL_UART_Init+0xdba>
 8009cc8:	f8df b27c 	ldr.w	fp, [pc, #636]	; 8009f48 <HAL_UART_Init+0x1430>
 8009ccc:	f04f 0c00 	mov.w	ip, #0
 8009cd0:	e5ff      	b.n	80098d2 <HAL_UART_Init+0xdba>
 8009cd2:	09d2      	lsrs	r2, r2, #7
 8009cd4:	f7ff bb7e 	b.w	80093d4 <HAL_UART_Init+0x8bc>
 8009cd8:	0992      	lsrs	r2, r2, #6
 8009cda:	f7ff bb7b 	b.w	80093d4 <HAL_UART_Init+0x8bc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ce2:	f7ff bb08 	b.w	80092f6 <HAL_UART_Init+0x7de>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009ce6:	4892      	ldr	r0, [pc, #584]	; (8009f30 <HAL_UART_Init+0x1418>)
 8009ce8:	f7ff b842 	b.w	8008d70 <HAL_UART_Init+0x258>
 8009cec:	0940      	lsrs	r0, r0, #5
 8009cee:	f7ff bbd8 	b.w	80094a2 <HAL_UART_Init+0x98a>
 8009cf2:	230c      	movs	r3, #12
 8009cf4:	fbb0 f0f3 	udiv	r0, r0, r3
 8009cf8:	f7ff b83a 	b.w	8008d70 <HAL_UART_Init+0x258>
 8009cfc:	0900      	lsrs	r0, r0, #4
 8009cfe:	f7ff b837 	b.w	8008d70 <HAL_UART_Init+0x258>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d02:	4b8c      	ldr	r3, [pc, #560]	; (8009f34 <HAL_UART_Init+0x141c>)
 8009d04:	f7ff baf7 	b.w	80092f6 <HAL_UART_Init+0x7de>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d0c:	f7ff b9cc 	b.w	80090a8 <HAL_UART_Init+0x590>
 8009d10:	0890      	lsrs	r0, r2, #2
 8009d12:	2100      	movs	r1, #0
 8009d14:	f7ff b871 	b.w	8008dfa <HAL_UART_Init+0x2e2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d18:	4b87      	ldr	r3, [pc, #540]	; (8009f38 <HAL_UART_Init+0x1420>)
 8009d1a:	f7ff baec 	b.w	80092f6 <HAL_UART_Init+0x7de>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d1e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8009f4c <HAL_UART_Init+0x1434>
 8009d22:	f04f 0c00 	mov.w	ip, #0
 8009d26:	e5d4      	b.n	80098d2 <HAL_UART_Init+0xdba>
 8009d28:	f20f 1ccc 	addw	ip, pc, #460	; 0x1cc
 8009d2c:	e9dc bc00 	ldrd	fp, ip, [ip]
 8009d30:	e5cf      	b.n	80098d2 <HAL_UART_Init+0xdba>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d32:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009d36:	f7ff b9b7 	b.w	80090a8 <HAL_UART_Init+0x590>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009d3a:	487a      	ldr	r0, [pc, #488]	; (8009f24 <HAL_UART_Init+0x140c>)
 8009d3c:	f7ff b818 	b.w	8008d70 <HAL_UART_Init+0x258>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009d40:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009d44:	f7ff b814 	b.w	8008d70 <HAL_UART_Init+0x258>
 8009d48:	09c0      	lsrs	r0, r0, #7
 8009d4a:	f7ff ba6e 	b.w	800922a <HAL_UART_Init+0x712>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009d4e:	f24f 4024 	movw	r0, #62500	; 0xf424
 8009d52:	f7ff b80d 	b.w	8008d70 <HAL_UART_Init+0x258>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009d56:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009d5a:	f7ff b809 	b.w	8008d70 <HAL_UART_Init+0x258>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d62:	f7ff b9a1 	b.w	80090a8 <HAL_UART_Init+0x590>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d66:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009d6a:	f7ff b99d 	b.w	80090a8 <HAL_UART_Init+0x590>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009d6e:	f647 2012 	movw	r0, #31250	; 0x7a12
 8009d72:	f7fe bffd 	b.w	8008d70 <HAL_UART_Init+0x258>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d76:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 8009f50 <HAL_UART_Init+0x1438>
 8009d7a:	f04f 0c00 	mov.w	ip, #0
 8009d7e:	e5a8      	b.n	80098d2 <HAL_UART_Init+0xdba>
 8009d80:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 8009f54 <HAL_UART_Init+0x143c>
 8009d84:	f04f 0c00 	mov.w	ip, #0
 8009d88:	e5a3      	b.n	80098d2 <HAL_UART_Init+0xdba>
 8009d8a:	f20f 1c74 	addw	ip, pc, #372	; 0x174
 8009d8e:	e9dc bc00 	ldrd	fp, ip, [ip]
 8009d92:	e59e      	b.n	80098d2 <HAL_UART_Init+0xdba>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d94:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 8009f58 <HAL_UART_Init+0x1440>
 8009d98:	f04f 0c00 	mov.w	ip, #0
 8009d9c:	e599      	b.n	80098d2 <HAL_UART_Init+0xdba>
 8009d9e:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8009f5c <HAL_UART_Init+0x1444>
 8009da2:	f04f 0c00 	mov.w	ip, #0
 8009da6:	e594      	b.n	80098d2 <HAL_UART_Init+0xdba>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009dac:	f7ff baa3 	b.w	80092f6 <HAL_UART_Init+0x7de>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009db0:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009db4:	f7ff ba9f 	b.w	80092f6 <HAL_UART_Init+0x7de>
 8009db8:	4b5a      	ldr	r3, [pc, #360]	; (8009f24 <HAL_UART_Init+0x140c>)
 8009dba:	f7ff ba9c 	b.w	80092f6 <HAL_UART_Init+0x7de>
 8009dbe:	4b56      	ldr	r3, [pc, #344]	; (8009f18 <HAL_UART_Init+0x1400>)
 8009dc0:	f7ff ba99 	b.w	80092f6 <HAL_UART_Init+0x7de>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dc8:	f7ff ba95 	b.w	80092f6 <HAL_UART_Init+0x7de>
 8009dcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009dd0:	f7ff ba91 	b.w	80092f6 <HAL_UART_Init+0x7de>
 8009dd4:	0980      	lsrs	r0, r0, #6
 8009dd6:	f7fe bfcb 	b.w	8008d70 <HAL_UART_Init+0x258>
 8009dda:	220a      	movs	r2, #10
 8009ddc:	2300      	movs	r3, #0
 8009dde:	f7f6 fb37 	bl	8000450 <__aeabi_uldivmod>
 8009de2:	f7ff b80a 	b.w	8008dfa <HAL_UART_Init+0x2e2>
 8009de6:	08d0      	lsrs	r0, r2, #3
 8009de8:	2100      	movs	r1, #0
 8009dea:	f7ff b806 	b.w	8008dfa <HAL_UART_Init+0x2e2>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dee:	f20f 1c18 	addw	ip, pc, #280	; 0x118
 8009df2:	e9dc bc00 	ldrd	fp, ip, [ip]
 8009df6:	e56c      	b.n	80098d2 <HAL_UART_Init+0xdba>
 8009df8:	f8df b164 	ldr.w	fp, [pc, #356]	; 8009f60 <HAL_UART_Init+0x1448>
 8009dfc:	f04f 0c00 	mov.w	ip, #0
 8009e00:	e567      	b.n	80098d2 <HAL_UART_Init+0xdba>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009e02:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009e06:	f7fe bfb3 	b.w	8008d70 <HAL_UART_Init+0x258>
 8009e0a:	0940      	lsrs	r0, r0, #5
 8009e0c:	f7fe bfb0 	b.w	8008d70 <HAL_UART_Init+0x258>
 8009e10:	2206      	movs	r2, #6
 8009e12:	2300      	movs	r3, #0
 8009e14:	f7f6 fb1c 	bl	8000450 <__aeabi_uldivmod>
 8009e18:	f7fe bfef 	b.w	8008dfa <HAL_UART_Init+0x2e2>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e1c:	f44f 4b00 	mov.w	fp, #32768	; 0x8000
 8009e20:	f04f 0c00 	mov.w	ip, #0
 8009e24:	e555      	b.n	80098d2 <HAL_UART_Init+0xdba>
 8009e26:	09d0      	lsrs	r0, r2, #7
 8009e28:	2100      	movs	r1, #0
 8009e2a:	f7fe bfe6 	b.w	8008dfa <HAL_UART_Init+0x2e2>
 8009e2e:	ea4f 1bd2 	mov.w	fp, r2, lsr #7
 8009e32:	f04f 0c00 	mov.w	ip, #0
 8009e36:	e4bc      	b.n	80097b2 <HAL_UART_Init+0xc9a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e38:	f8df b128 	ldr.w	fp, [pc, #296]	; 8009f64 <HAL_UART_Init+0x144c>
 8009e3c:	f04f 0c00 	mov.w	ip, #0
 8009e40:	e547      	b.n	80098d2 <HAL_UART_Init+0xdba>
 8009e42:	f8df b124 	ldr.w	fp, [pc, #292]	; 8009f68 <HAL_UART_Init+0x1450>
 8009e46:	f04f 0c00 	mov.w	ip, #0
 8009e4a:	e542      	b.n	80098d2 <HAL_UART_Init+0xdba>
 8009e4c:	f8df b11c 	ldr.w	fp, [pc, #284]	; 8009f6c <HAL_UART_Init+0x1454>
 8009e50:	f04f 0c00 	mov.w	ip, #0
 8009e54:	e53d      	b.n	80098d2 <HAL_UART_Init+0xdba>
 8009e56:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8009f1c <HAL_UART_Init+0x1404>
 8009e5a:	f04f 0c00 	mov.w	ip, #0
 8009e5e:	e538      	b.n	80098d2 <HAL_UART_Init+0xdba>
 8009e60:	0a00      	lsrs	r0, r0, #8
 8009e62:	f7fe bf85 	b.w	8008d70 <HAL_UART_Init+0x258>
        ret = HAL_ERROR;
 8009e66:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	f7ff b924 	b.w	80090b6 <HAL_UART_Init+0x59e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e6e:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
 8009e72:	f04f 0c00 	mov.w	ip, #0
 8009e76:	e52c      	b.n	80098d2 <HAL_UART_Init+0xdba>
 8009e78:	f44f 3b00 	mov.w	fp, #131072	; 0x20000
 8009e7c:	f04f 0c00 	mov.w	ip, #0
 8009e80:	e527      	b.n	80098d2 <HAL_UART_Init+0xdba>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e82:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 8009f70 <HAL_UART_Init+0x1458>
 8009e86:	f04f 0c00 	mov.w	ip, #0
 8009e8a:	e522      	b.n	80098d2 <HAL_UART_Init+0xdba>
 8009e8c:	ea4f 1b12 	mov.w	fp, r2, lsr #4
 8009e90:	f04f 0c00 	mov.w	ip, #0
 8009e94:	e48d      	b.n	80097b2 <HAL_UART_Init+0xc9a>
 8009e96:	ea4f 1b92 	mov.w	fp, r2, lsr #6
 8009e9a:	f04f 0c00 	mov.w	ip, #0
 8009e9e:	e488      	b.n	80097b2 <HAL_UART_Init+0xc9a>
 8009ea0:	ea4f 1b52 	mov.w	fp, r2, lsr #5
 8009ea4:	f04f 0c00 	mov.w	ip, #0
 8009ea8:	e483      	b.n	80097b2 <HAL_UART_Init+0xc9a>
 8009eaa:	0990      	lsrs	r0, r2, #6
 8009eac:	2100      	movs	r1, #0
 8009eae:	f7fe bfa4 	b.w	8008dfa <HAL_UART_Init+0x2e2>
 8009eb2:	0950      	lsrs	r0, r2, #5
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	f7fe bfa0 	b.w	8008dfa <HAL_UART_Init+0x2e2>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009eba:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
 8009ebe:	f04f 0c00 	mov.w	ip, #0
 8009ec2:	e506      	b.n	80098d2 <HAL_UART_Init+0xdba>
 8009ec4:	f44f 2b00 	mov.w	fp, #524288	; 0x80000
 8009ec8:	f04f 0c00 	mov.w	ip, #0
 8009ecc:	e501      	b.n	80098d2 <HAL_UART_Init+0xdba>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ece:	f20f 0c40 	addw	ip, pc, #64	; 0x40
 8009ed2:	e9dc bc00 	ldrd	fp, ip, [ip]
 8009ed6:	e4fc      	b.n	80098d2 <HAL_UART_Init+0xdba>
 8009ed8:	09c0      	lsrs	r0, r0, #7
 8009eda:	f7fe bf49 	b.w	8008d70 <HAL_UART_Init+0x258>
 8009ede:	0910      	lsrs	r0, r2, #4
 8009ee0:	2100      	movs	r1, #0
 8009ee2:	f7fe bf8a 	b.w	8008dfa <HAL_UART_Init+0x2e2>
 8009ee6:	220c      	movs	r2, #12
 8009ee8:	2300      	movs	r3, #0
 8009eea:	f7f6 fab1 	bl	8000450 <__aeabi_uldivmod>
 8009eee:	f7fe bf84 	b.w	8008dfa <HAL_UART_Init+0x2e2>
 8009ef2:	bf00      	nop
 8009ef4:	f3af 8000 	nop.w
 8009ef8:	0a2c2a00 	.word	0x0a2c2a00
 8009efc:	00000000 	.word	0x00000000
 8009f00:	a2c2aa00 	.word	0xa2c2aa00
 8009f04:	00000000 	.word	0x00000000
 8009f08:	05161500 	.word	0x05161500
 8009f0c:	00000000 	.word	0x00000000
 8009f10:	51615500 	.word	0x51615500
 8009f14:	00000000 	.word	0x00000000
 8009f18:	0003d090 	.word	0x0003d090
 8009f1c:	00f42400 	.word	0x00f42400
 8009f20:	0061a800 	.word	0x0061a800
 8009f24:	0001e848 	.word	0x0001e848
 8009f28:	000a2c2a 	.word	0x000a2c2a
 8009f2c:	00c35000 	.word	0x00c35000
 8009f30:	00516155 	.word	0x00516155
 8009f34:	0007a120 	.word	0x0007a120
 8009f38:	00a2c2aa 	.word	0x00a2c2aa
 8009f3c:	0f424000 	.word	0x0f424000
 8009f40:	e8480000 	.word	0xe8480000
 8009f44:	f4240000 	.word	0xf4240000
 8009f48:	00155500 	.word	0x00155500
 8009f4c:	07a12000 	.word	0x07a12000
 8009f50:	61a80000 	.word	0x61a80000
 8009f54:	7a120000 	.word	0x7a120000
 8009f58:	000aaa00 	.word	0x000aaa00
 8009f5c:	000ccc00 	.word	0x000ccc00
 8009f60:	061a8000 	.word	0x061a8000
 8009f64:	01e84800 	.word	0x01e84800
 8009f68:	03d09000 	.word	0x03d09000
 8009f6c:	007a1200 	.word	0x007a1200
 8009f70:	003d0900 	.word	0x003d0900

08009f74 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009f74:	4770      	bx	lr
 8009f76:	bf00      	nop

08009f78 <HAL_UARTEx_RxFifoFullCallback>:
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop

08009f7c <HAL_UARTEx_TxFifoEmptyCallback>:
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop

08009f80 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f80:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8009f84:	2a01      	cmp	r2, #1
 8009f86:	d017      	beq.n	8009fb8 <HAL_UARTEx_DisableFifoMode+0x38>
 8009f88:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 8009f8a:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009f8c:	2100      	movs	r1, #0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f8e:	681a      	ldr	r2, [r3, #0]
{
 8009f90:	b470      	push	{r4, r5, r6}
  huart->gState = HAL_UART_STATE_BUSY;
 8009f92:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8009f96:	2620      	movs	r6, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f98:	6814      	ldr	r4, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8009f9a:	4608      	mov	r0, r1
  __HAL_UART_DISABLE(huart);
 8009f9c:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f9e:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8009fa2:	f025 0501 	bic.w	r5, r5, #1
 8009fa6:	6015      	str	r5, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009fa8:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009faa:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009fac:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8009fb0:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8009fb4:	bc70      	pop	{r4, r5, r6}
 8009fb6:	4770      	bx	lr
  __HAL_LOCK(huart);
 8009fb8:	2002      	movs	r0, #2
}
 8009fba:	4770      	bx	lr

08009fbc <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fbc:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8009fc0:	2a01      	cmp	r2, #1
 8009fc2:	d046      	beq.n	800a052 <HAL_UARTEx_SetTxFifoThreshold+0x96>
 8009fc4:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 8009fc6:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fc8:	681a      	ldr	r2, [r3, #0]
{
 8009fca:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8009fcc:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
{
 8009fd0:	b084      	sub	sp, #16
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fd2:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fd4:	6810      	ldr	r0, [r2, #0]
{
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009fd6:	4d20      	ldr	r5, [pc, #128]	; (800a058 <HAL_UARTEx_SetTxFifoThreshold+0x9c>)
  __HAL_UART_DISABLE(huart);
 8009fd8:	f020 0001 	bic.w	r0, r0, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009fdc:	4e1f      	ldr	r6, [pc, #124]	; (800a05c <HAL_UARTEx_SetTxFifoThreshold+0xa0>)
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009fde:	9500      	str	r5, [sp, #0]
 8009fe0:	f240 1507 	movw	r5, #263	; 0x107
  __HAL_UART_DISABLE(huart);
 8009fe4:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009fe6:	6890      	ldr	r0, [r2, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009fe8:	9501      	str	r5, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009fea:	f105 7580 	add.w	r5, r5, #16777216	; 0x1000000
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009fee:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009ff2:	9602      	str	r6, [sp, #8]
 8009ff4:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ff8:	4301      	orrs	r1, r0

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ffa:	6e58      	ldr	r0, [r3, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009ffc:	9503      	str	r5, [sp, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ffe:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a000:	b320      	cbz	r0, 800a04c <HAL_UARTEx_SetTxFifoThreshold+0x90>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a002:	6895      	ldr	r5, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a004:	a904      	add	r1, sp, #16
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a006:	6896      	ldr	r6, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a008:	f3c5 6542 	ubfx	r5, r5, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a00c:	eb01 7656 	add.w	r6, r1, r6, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a010:	440d      	add	r5, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a012:	f816 0c10 	ldrb.w	r0, [r6, #-16]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a016:	f815 1c10 	ldrb.w	r1, [r5, #-16]
 800a01a:	f815 7c08 	ldrb.w	r7, [r5, #-8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a01e:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a020:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a022:	f816 5c08 	ldrb.w	r5, [r6, #-8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a026:	fb91 f1f7 	sdiv	r1, r1, r7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a02a:	fb90 f0f5 	sdiv	r0, r0, r5
 800a02e:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800a032:	2100      	movs	r1, #0
 800a034:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800a038:	2520      	movs	r5, #32
  return HAL_OK;
 800a03a:	4608      	mov	r0, r1
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a03c:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a03e:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800a042:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 800a046:	b004      	add	sp, #16
 800a048:	bcf0      	pop	{r4, r5, r6, r7}
 800a04a:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 800a04c:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800a04e:	4608      	mov	r0, r1
 800a050:	e7ed      	b.n	800a02e <HAL_UARTEx_SetTxFifoThreshold+0x72>
  __HAL_LOCK(huart);
 800a052:	2002      	movs	r0, #2
}
 800a054:	4770      	bx	lr
 800a056:	bf00      	nop
 800a058:	03010101 	.word	0x03010101
 800a05c:	04020408 	.word	0x04020408

0800a060 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800a060:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 800a064:	2a01      	cmp	r2, #1
 800a066:	d046      	beq.n	800a0f6 <HAL_UARTEx_SetRxFifoThreshold+0x96>
 800a068:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 800a06a:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a06c:	681a      	ldr	r2, [r3, #0]
{
 800a06e:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 800a070:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
{
 800a074:	b084      	sub	sp, #16
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a076:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800a078:	6810      	ldr	r0, [r2, #0]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a07a:	4d20      	ldr	r5, [pc, #128]	; (800a0fc <HAL_UARTEx_SetRxFifoThreshold+0x9c>)
  __HAL_UART_DISABLE(huart);
 800a07c:	f020 0001 	bic.w	r0, r0, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a080:	4e1f      	ldr	r6, [pc, #124]	; (800a100 <HAL_UARTEx_SetRxFifoThreshold+0xa0>)
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a082:	9500      	str	r5, [sp, #0]
 800a084:	f240 1507 	movw	r5, #263	; 0x107
  __HAL_UART_DISABLE(huart);
 800a088:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a08a:	6890      	ldr	r0, [r2, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a08c:	9501      	str	r5, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a08e:	f105 7580 	add.w	r5, r5, #16777216	; 0x1000000
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a092:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a096:	9602      	str	r6, [sp, #8]
 800a098:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a09c:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a09e:	6e58      	ldr	r0, [r3, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a0a0:	9503      	str	r5, [sp, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a0a2:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a0a4:	b320      	cbz	r0, 800a0f0 <HAL_UARTEx_SetRxFifoThreshold+0x90>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a0a6:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a0a8:	a904      	add	r1, sp, #16
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a0aa:	6896      	ldr	r6, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a0ac:	f3c5 6542 	ubfx	r5, r5, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a0b0:	eb01 7656 	add.w	r6, r1, r6, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a0b4:	440d      	add	r5, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a0b6:	f816 0c10 	ldrb.w	r0, [r6, #-16]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a0ba:	f815 1c10 	ldrb.w	r1, [r5, #-16]
 800a0be:	f815 7c08 	ldrb.w	r7, [r5, #-8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a0c2:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a0c4:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a0c6:	f816 5c08 	ldrb.w	r5, [r6, #-8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a0ca:	fb91 f1f7 	sdiv	r1, r1, r7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a0ce:	fb90 f0f5 	sdiv	r0, r0, r5
 800a0d2:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 800a0d6:	2100      	movs	r1, #0
 800a0d8:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800a0dc:	2520      	movs	r5, #32
  return HAL_OK;
 800a0de:	4608      	mov	r0, r1
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0e0:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800a0e2:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800a0e6:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 800a0ea:	b004      	add	sp, #16
 800a0ec:	bcf0      	pop	{r4, r5, r6, r7}
 800a0ee:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 800a0f0:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800a0f2:	4608      	mov	r0, r1
 800a0f4:	e7ed      	b.n	800a0d2 <HAL_UARTEx_SetRxFifoThreshold+0x72>
  __HAL_LOCK(huart);
 800a0f6:	2002      	movs	r0, #2
}
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	03010101 	.word	0x03010101
 800a100:	04020408 	.word	0x04020408

0800a104 <arm_cfft_radix8by2_f32>:
 800a104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a108:	4607      	mov	r7, r0
 800a10a:	4608      	mov	r0, r1
 800a10c:	ed2d 8b06 	vpush	{d8-d10}
 800a110:	f8b7 e000 	ldrh.w	lr, [r7]
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800a11a:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 800a11e:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800a122:	f000 80b0 	beq.w	800a286 <arm_cfft_radix8by2_f32+0x182>
 800a126:	008b      	lsls	r3, r1, #2
 800a128:	3210      	adds	r2, #16
 800a12a:	f100 0610 	add.w	r6, r0, #16
 800a12e:	f108 0510 	add.w	r5, r8, #16
 800a132:	3310      	adds	r3, #16
 800a134:	18c4      	adds	r4, r0, r3
 800a136:	4443      	add	r3, r8
 800a138:	ed55 6a04 	vldr	s13, [r5, #-16]
 800a13c:	f1be 0e01 	subs.w	lr, lr, #1
 800a140:	ed56 4a04 	vldr	s9, [r6, #-16]
 800a144:	f104 0410 	add.w	r4, r4, #16
 800a148:	ed15 7a03 	vldr	s14, [r5, #-12]
 800a14c:	f106 0610 	add.w	r6, r6, #16
 800a150:	ee74 9aa6 	vadd.f32	s19, s9, s13
 800a154:	ed55 7a02 	vldr	s15, [r5, #-8]
 800a158:	ed55 2a01 	vldr	s5, [r5, #-4]
 800a15c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800a160:	ed53 0a04 	vldr	s1, [r3, #-16]
 800a164:	f102 0210 	add.w	r2, r2, #16
 800a168:	ed13 5a03 	vldr	s10, [r3, #-12]
 800a16c:	f105 0510 	add.w	r5, r5, #16
 800a170:	ed13 3a02 	vldr	s6, [r3, #-8]
 800a174:	f103 0310 	add.w	r3, r3, #16
 800a178:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 800a17c:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 800a180:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 800a184:	ee33 8a83 	vadd.f32	s16, s7, s6
 800a188:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 800a18c:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 800a190:	ee34 0a06 	vadd.f32	s0, s8, s12
 800a194:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 800a198:	ee76 aa87 	vadd.f32	s21, s13, s14
 800a19c:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800a1a0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a1a4:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 800a1a8:	ee35 9aa0 	vadd.f32	s18, s11, s1
 800a1ac:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 800a1b0:	ee71 8a05 	vadd.f32	s17, s2, s10
 800a1b4:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800a1b8:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 800a1bc:	ee72 9a22 	vadd.f32	s19, s4, s5
 800a1c0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800a1c4:	ee35 5a41 	vsub.f32	s10, s10, s2
 800a1c8:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 800a1cc:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 800a1d0:	ee36 6a44 	vsub.f32	s12, s12, s8
 800a1d4:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 800a1d8:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800a1dc:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 800a1e0:	ee72 7a62 	vsub.f32	s15, s4, s5
 800a1e4:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 800a1e8:	ee73 2a63 	vsub.f32	s5, s6, s7
 800a1ec:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 800a1f0:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800a1f4:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800a1f8:	ee24 3a84 	vmul.f32	s6, s9, s8
 800a1fc:	ee27 2a26 	vmul.f32	s4, s14, s13
 800a200:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800a204:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800a208:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a20c:	ee65 5a84 	vmul.f32	s11, s11, s8
 800a210:	ee65 6a26 	vmul.f32	s13, s10, s13
 800a214:	ee25 5a04 	vmul.f32	s10, s10, s8
 800a218:	ee37 7a64 	vsub.f32	s14, s14, s9
 800a21c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800a220:	ee33 4a02 	vadd.f32	s8, s6, s4
 800a224:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800a228:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 800a22c:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 800a230:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 800a234:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 800a238:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 800a23c:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800a240:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800a244:	ee27 4a87 	vmul.f32	s8, s15, s14
 800a248:	ee61 5a87 	vmul.f32	s11, s3, s14
 800a24c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a250:	ee22 5a87 	vmul.f32	s10, s5, s14
 800a254:	ee26 7a07 	vmul.f32	s14, s12, s14
 800a258:	ee26 6a26 	vmul.f32	s12, s12, s13
 800a25c:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800a260:	ee74 4a84 	vadd.f32	s9, s9, s8
 800a264:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a268:	ee35 6a46 	vsub.f32	s12, s10, s12
 800a26c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a270:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 800a274:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 800a278:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 800a27c:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 800a280:	f47f af5a 	bne.w	800a138 <arm_cfft_radix8by2_f32+0x34>
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	b28c      	uxth	r4, r1
 800a288:	2302      	movs	r3, #2
 800a28a:	4621      	mov	r1, r4
 800a28c:	f000 fd54 	bl	800ad38 <arm_radix8_butterfly_f32>
 800a290:	4621      	mov	r1, r4
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	4640      	mov	r0, r8
 800a296:	2302      	movs	r3, #2
 800a298:	ecbd 8b06 	vpop	{d8-d10}
 800a29c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a0:	f000 bd4a 	b.w	800ad38 <arm_radix8_butterfly_f32>

0800a2a4 <arm_cfft_radix8by4_f32>:
 800a2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a8:	ed2d 8b06 	vpush	{d8-d10}
 800a2ac:	8804      	ldrh	r4, [r0, #0]
 800a2ae:	b08f      	sub	sp, #60	; 0x3c
 800a2b0:	ed91 6a00 	vldr	s12, [r1]
 800a2b4:	460a      	mov	r2, r1
 800a2b6:	0864      	lsrs	r4, r4, #1
 800a2b8:	ed91 7a01 	vldr	s14, [r1, #4]
 800a2bc:	9101      	str	r1, [sp, #4]
 800a2be:	00a3      	lsls	r3, r4, #2
 800a2c0:	6841      	ldr	r1, [r0, #4]
 800a2c2:	0864      	lsrs	r4, r4, #1
 800a2c4:	900c      	str	r0, [sp, #48]	; 0x30
 800a2c6:	9205      	str	r2, [sp, #20]
 800a2c8:	f101 0610 	add.w	r6, r1, #16
 800a2cc:	4625      	mov	r5, r4
 800a2ce:	940b      	str	r4, [sp, #44]	; 0x2c
 800a2d0:	f101 0408 	add.w	r4, r1, #8
 800a2d4:	9602      	str	r6, [sp, #8]
 800a2d6:	9407      	str	r4, [sp, #28]
 800a2d8:	18d4      	adds	r4, r2, r3
 800a2da:	1eaa      	subs	r2, r5, #2
 800a2dc:	f101 0518 	add.w	r5, r1, #24
 800a2e0:	18e0      	adds	r0, r4, r3
 800a2e2:	edd4 4a00 	vldr	s9, [r4]
 800a2e6:	ed94 4a01 	vldr	s8, [r4, #4]
 800a2ea:	46a6      	mov	lr, r4
 800a2ec:	edd0 6a00 	vldr	s13, [r0]
 800a2f0:	18c7      	adds	r7, r0, r3
 800a2f2:	edd0 7a01 	vldr	s15, [r0, #4]
 800a2f6:	46a0      	mov	r8, r4
 800a2f8:	ee76 5a26 	vadd.f32	s11, s12, s13
 800a2fc:	ed97 5a00 	vldr	s10, [r7]
 800a300:	ee76 6a66 	vsub.f32	s13, s12, s13
 800a304:	4604      	mov	r4, r0
 800a306:	9506      	str	r5, [sp, #24]
 800a308:	4605      	mov	r5, r0
 800a30a:	ee75 2aa4 	vadd.f32	s5, s11, s9
 800a30e:	900a      	str	r0, [sp, #40]	; 0x28
 800a310:	9801      	ldr	r0, [sp, #4]
 800a312:	ee37 6a27 	vadd.f32	s12, s14, s15
 800a316:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a31a:	ed97 3a01 	vldr	s6, [r7, #4]
 800a31e:	ee72 2a85 	vadd.f32	s5, s5, s10
 800a322:	46bc      	mov	ip, r7
 800a324:	ee76 3a84 	vadd.f32	s7, s13, s8
 800a328:	9704      	str	r7, [sp, #16]
 800a32a:	ee36 7a44 	vsub.f32	s14, s12, s8
 800a32e:	f8cd e00c 	str.w	lr, [sp, #12]
 800a332:	ee12 9a90 	vmov	r9, s5
 800a336:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800a33a:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800a33e:	1f3e      	subs	r6, r7, #4
 800a340:	f840 9b08 	str.w	r9, [r0], #8
 800a344:	ee37 4ae4 	vsub.f32	s8, s15, s9
 800a348:	edde 2a01 	vldr	s5, [lr, #4]
 800a34c:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800a350:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800a354:	eddc 4a01 	vldr	s9, [ip, #4]
 800a358:	ee36 6a22 	vadd.f32	s12, s12, s5
 800a35c:	9001      	str	r0, [sp, #4]
 800a35e:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800a362:	9805      	ldr	r0, [sp, #20]
 800a364:	ee13 9a90 	vmov	r9, s7
 800a368:	ee37 7a43 	vsub.f32	s14, s14, s6
 800a36c:	ee36 6a24 	vadd.f32	s12, s12, s9
 800a370:	f1ae 0704 	sub.w	r7, lr, #4
 800a374:	ee74 4a05 	vadd.f32	s9, s8, s10
 800a378:	ee76 6a83 	vadd.f32	s13, s13, s6
 800a37c:	ed80 6a01 	vstr	s12, [r0, #4]
 800a380:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800a384:	f848 9b08 	str.w	r9, [r8], #8
 800a388:	edce 4a01 	vstr	s9, [lr, #4]
 800a38c:	ee15 ea90 	vmov	lr, s11
 800a390:	f844 eb08 	str.w	lr, [r4], #8
 800a394:	ee16 ea90 	vmov	lr, s13
 800a398:	9408      	str	r4, [sp, #32]
 800a39a:	462c      	mov	r4, r5
 800a39c:	ed85 7a01 	vstr	s14, [r5, #4]
 800a3a0:	9d04      	ldr	r5, [sp, #16]
 800a3a2:	f84c eb08 	str.w	lr, [ip], #8
 800a3a6:	edc5 7a01 	vstr	s15, [r5, #4]
 800a3aa:	0855      	lsrs	r5, r2, #1
 800a3ac:	9509      	str	r5, [sp, #36]	; 0x24
 800a3ae:	f000 8130 	beq.w	800a612 <arm_cfft_radix8by4_f32+0x36e>
 800a3b2:	9805      	ldr	r0, [sp, #20]
 800a3b4:	3b08      	subs	r3, #8
 800a3b6:	46ab      	mov	fp, r5
 800a3b8:	f1a4 020c 	sub.w	r2, r4, #12
 800a3bc:	f100 0510 	add.w	r5, r0, #16
 800a3c0:	f101 0920 	add.w	r9, r1, #32
 800a3c4:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800a3c8:	f8dd a008 	ldr.w	sl, [sp, #8]
 800a3cc:	4433      	add	r3, r6
 800a3ce:	3410      	adds	r4, #16
 800a3d0:	4660      	mov	r0, ip
 800a3d2:	4641      	mov	r1, r8
 800a3d4:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 800a3d8:	ed54 6a02 	vldr	s13, [r4, #-8]
 800a3dc:	f1bb 0b01 	subs.w	fp, fp, #1
 800a3e0:	ed55 5a02 	vldr	s11, [r5, #-8]
 800a3e4:	f10a 0a08 	add.w	sl, sl, #8
 800a3e8:	edd1 7a00 	vldr	s15, [r1]
 800a3ec:	f105 0508 	add.w	r5, r5, #8
 800a3f0:	ee75 3aa6 	vadd.f32	s7, s11, s13
 800a3f4:	edd0 2a00 	vldr	s5, [r0]
 800a3f8:	ed14 7a01 	vldr	s14, [r4, #-4]
 800a3fc:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800a400:	ed55 6a03 	vldr	s13, [r5, #-12]
 800a404:	f1a2 0208 	sub.w	r2, r2, #8
 800a408:	ee73 4aa7 	vadd.f32	s9, s7, s15
 800a40c:	ed90 2a01 	vldr	s4, [r0, #4]
 800a410:	ee36 5a87 	vadd.f32	s10, s13, s14
 800a414:	ed91 6a01 	vldr	s12, [r1, #4]
 800a418:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a41c:	f109 0910 	add.w	r9, r9, #16
 800a420:	ee74 6aa2 	vadd.f32	s13, s9, s5
 800a424:	f104 0408 	add.w	r4, r4, #8
 800a428:	ee73 3ae7 	vsub.f32	s7, s7, s15
 800a42c:	f10e 0e18 	add.w	lr, lr, #24
 800a430:	ee37 3a67 	vsub.f32	s6, s14, s15
 800a434:	f1a3 0308 	sub.w	r3, r3, #8
 800a438:	ed45 6a04 	vstr	s13, [r5, #-16]
 800a43c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a440:	edd1 6a01 	vldr	s13, [r1, #4]
 800a444:	ee75 1a86 	vadd.f32	s3, s11, s12
 800a448:	edd0 4a01 	vldr	s9, [r0, #4]
 800a44c:	ee33 3a22 	vadd.f32	s6, s6, s5
 800a450:	ee75 6a26 	vadd.f32	s13, s10, s13
 800a454:	ee35 5a46 	vsub.f32	s10, s10, s12
 800a458:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800a45c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a460:	ee71 1ac2 	vsub.f32	s3, s3, s4
 800a464:	ee35 5a42 	vsub.f32	s10, s10, s4
 800a468:	ed45 6a03 	vstr	s13, [r5, #-12]
 800a46c:	ee36 2a02 	vadd.f32	s4, s12, s4
 800a470:	edd6 7a00 	vldr	s15, [r6]
 800a474:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800a478:	ed97 1a00 	vldr	s2, [r7]
 800a47c:	ee77 2a62 	vsub.f32	s5, s14, s5
 800a480:	ed92 8a04 	vldr	s16, [r2, #16]
 800a484:	ee71 8a27 	vadd.f32	s17, s2, s15
 800a488:	ed93 aa04 	vldr	s20, [r3, #16]
 800a48c:	ed16 7a01 	vldr	s14, [r6, #-4]
 800a490:	ee71 7a67 	vsub.f32	s15, s2, s15
 800a494:	ed57 0a01 	vldr	s1, [r7, #-4]
 800a498:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800a49c:	ee38 6a88 	vadd.f32	s12, s17, s16
 800a4a0:	edd3 9a03 	vldr	s19, [r3, #12]
 800a4a4:	ee30 0a87 	vadd.f32	s0, s1, s14
 800a4a8:	ed92 9a03 	vldr	s18, [r2, #12]
 800a4ac:	ee78 5ac8 	vsub.f32	s11, s17, s16
 800a4b0:	ee36 6a0a 	vadd.f32	s12, s12, s20
 800a4b4:	ee30 7ac7 	vsub.f32	s14, s1, s14
 800a4b8:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800a4bc:	ee16 ca10 	vmov	ip, s12
 800a4c0:	ee30 6a49 	vsub.f32	s12, s0, s18
 800a4c4:	ee77 4a01 	vadd.f32	s9, s14, s2
 800a4c8:	f847 c908 	str.w	ip, [r7], #-8
 800a4cc:	ee34 4a29 	vadd.f32	s8, s8, s19
 800a4d0:	edd2 8a03 	vldr	s17, [r2, #12]
 800a4d4:	ee39 9ac9 	vsub.f32	s18, s19, s18
 800a4d8:	ed93 8a03 	vldr	s16, [r3, #12]
 800a4dc:	ee71 0a47 	vsub.f32	s1, s2, s14
 800a4e0:	ee30 0a28 	vadd.f32	s0, s0, s17
 800a4e4:	ee39 1a67 	vsub.f32	s2, s18, s15
 800a4e8:	ee36 6a69 	vsub.f32	s12, s12, s19
 800a4ec:	ee30 0a08 	vadd.f32	s0, s0, s16
 800a4f0:	ee75 5aca 	vsub.f32	s11, s11, s20
 800a4f4:	ed87 0a01 	vstr	s0, [r7, #4]
 800a4f8:	ed1a 0a04 	vldr	s0, [sl, #-16]
 800a4fc:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800a500:	ee21 8a80 	vmul.f32	s16, s3, s0
 800a504:	ee23 7a26 	vmul.f32	s14, s6, s13
 800a508:	ee64 7a26 	vmul.f32	s15, s8, s13
 800a50c:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800a510:	ee24 4a00 	vmul.f32	s8, s8, s0
 800a514:	ee23 3a00 	vmul.f32	s6, s6, s0
 800a518:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800a51c:	ee24 0a80 	vmul.f32	s0, s9, s0
 800a520:	ee38 7a07 	vadd.f32	s14, s16, s14
 800a524:	ee76 6a84 	vadd.f32	s13, s13, s8
 800a528:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a52c:	ee33 3a61 	vsub.f32	s6, s6, s3
 800a530:	ee17 ca10 	vmov	ip, s14
 800a534:	f841 cb08 	str.w	ip, [r1], #8
 800a538:	ed01 3a01 	vstr	s6, [r1, #-4]
 800a53c:	ed82 0a04 	vstr	s0, [r2, #16]
 800a540:	edc2 6a03 	vstr	s13, [r2, #12]
 800a544:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 800a548:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 800a54c:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 800a550:	ee23 4aa6 	vmul.f32	s8, s7, s13
 800a554:	ee65 4a27 	vmul.f32	s9, s10, s15
 800a558:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800a55c:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800a560:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a564:	ee25 5a26 	vmul.f32	s10, s10, s13
 800a568:	ee66 6a26 	vmul.f32	s13, s12, s13
 800a56c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a570:	ee34 6a24 	vadd.f32	s12, s8, s9
 800a574:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800a578:	ee35 5a63 	vsub.f32	s10, s10, s7
 800a57c:	ee17 ca90 	vmov	ip, s15
 800a580:	ed04 6a04 	vstr	s12, [r4, #-16]
 800a584:	ed04 5a03 	vstr	s10, [r4, #-12]
 800a588:	f846 c908 	str.w	ip, [r6], #-8
 800a58c:	edc6 6a01 	vstr	s13, [r6, #4]
 800a590:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 800a594:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 800a598:	ee62 5a27 	vmul.f32	s11, s4, s15
 800a59c:	ee22 6a87 	vmul.f32	s12, s5, s14
 800a5a0:	ee22 2a07 	vmul.f32	s4, s4, s14
 800a5a4:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800a5a8:	ee61 6a07 	vmul.f32	s13, s2, s14
 800a5ac:	ee20 7a87 	vmul.f32	s14, s1, s14
 800a5b0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800a5b4:	ee61 7a27 	vmul.f32	s15, s2, s15
 800a5b8:	ee35 6a86 	vadd.f32	s12, s11, s12
 800a5bc:	ee72 2ac2 	vsub.f32	s5, s5, s4
 800a5c0:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800a5c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5c8:	ee16 ca10 	vmov	ip, s12
 800a5cc:	f840 cb08 	str.w	ip, [r0], #8
 800a5d0:	ed40 2a01 	vstr	s5, [r0, #-4]
 800a5d4:	edc3 0a04 	vstr	s1, [r3, #16]
 800a5d8:	edc3 7a03 	vstr	s15, [r3, #12]
 800a5dc:	f47f aefc 	bne.w	800a3d8 <arm_cfft_radix8by4_f32+0x134>
 800a5e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a5e2:	9802      	ldr	r0, [sp, #8]
 800a5e4:	00cb      	lsls	r3, r1, #3
 800a5e6:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800a5ea:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a5ee:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a5f2:	4498      	add	r8, r3
 800a5f4:	449c      	add	ip, r3
 800a5f6:	9102      	str	r1, [sp, #8]
 800a5f8:	9901      	ldr	r1, [sp, #4]
 800a5fa:	4419      	add	r1, r3
 800a5fc:	9101      	str	r1, [sp, #4]
 800a5fe:	9907      	ldr	r1, [sp, #28]
 800a600:	4419      	add	r1, r3
 800a602:	9107      	str	r1, [sp, #28]
 800a604:	9908      	ldr	r1, [sp, #32]
 800a606:	4419      	add	r1, r3
 800a608:	9b06      	ldr	r3, [sp, #24]
 800a60a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a60e:	9108      	str	r1, [sp, #32]
 800a610:	9306      	str	r3, [sp, #24]
 800a612:	9a01      	ldr	r2, [sp, #4]
 800a614:	2304      	movs	r3, #4
 800a616:	9e08      	ldr	r6, [sp, #32]
 800a618:	edd2 7a00 	vldr	s15, [r2]
 800a61c:	ed96 7a00 	vldr	s14, [r6]
 800a620:	edd8 2a00 	vldr	s5, [r8]
 800a624:	ee77 5a87 	vadd.f32	s11, s15, s14
 800a628:	ed9c 3a00 	vldr	s6, [ip]
 800a62c:	ed92 6a01 	vldr	s12, [r2, #4]
 800a630:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a634:	edd6 6a01 	vldr	s13, [r6, #4]
 800a638:	ee75 4aa2 	vadd.f32	s9, s11, s5
 800a63c:	ed9c 2a01 	vldr	s4, [ip, #4]
 800a640:	ee36 5a26 	vadd.f32	s10, s12, s13
 800a644:	edd8 7a01 	vldr	s15, [r8, #4]
 800a648:	ee76 6a66 	vsub.f32	s13, s12, s13
 800a64c:	9d02      	ldr	r5, [sp, #8]
 800a64e:	ee34 6a83 	vadd.f32	s12, s9, s6
 800a652:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800a656:	ee37 4a27 	vadd.f32	s8, s14, s15
 800a65a:	9805      	ldr	r0, [sp, #20]
 800a65c:	ee76 4ae2 	vsub.f32	s9, s13, s5
 800a660:	4621      	mov	r1, r4
 800a662:	ed82 6a00 	vstr	s12, [r2]
 800a666:	ee35 6ae2 	vsub.f32	s12, s11, s5
 800a66a:	edd8 3a01 	vldr	s7, [r8, #4]
 800a66e:	ee75 5a67 	vsub.f32	s11, s10, s15
 800a672:	eddc 1a01 	vldr	s3, [ip, #4]
 800a676:	ee34 4a42 	vsub.f32	s8, s8, s4
 800a67a:	ee75 3a23 	vadd.f32	s7, s10, s7
 800a67e:	ee74 4a83 	vadd.f32	s9, s9, s6
 800a682:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800a686:	ee33 5aa1 	vadd.f32	s10, s7, s3
 800a68a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a68e:	ee36 6a43 	vsub.f32	s12, s12, s6
 800a692:	ed82 5a01 	vstr	s10, [r2, #4]
 800a696:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800a69a:	9a07      	ldr	r2, [sp, #28]
 800a69c:	ee77 7a02 	vadd.f32	s15, s14, s4
 800a6a0:	ee36 7ac3 	vsub.f32	s14, s13, s6
 800a6a4:	edd2 2a00 	vldr	s5, [r2]
 800a6a8:	ed92 5a01 	vldr	s10, [r2, #4]
 800a6ac:	ee64 3a22 	vmul.f32	s7, s8, s5
 800a6b0:	ee24 4a05 	vmul.f32	s8, s8, s10
 800a6b4:	ee24 5a85 	vmul.f32	s10, s9, s10
 800a6b8:	ee64 4aa2 	vmul.f32	s9, s9, s5
 800a6bc:	ee33 5a85 	vadd.f32	s10, s7, s10
 800a6c0:	ee74 4ac4 	vsub.f32	s9, s9, s8
 800a6c4:	ed88 5a00 	vstr	s10, [r8]
 800a6c8:	edc8 4a01 	vstr	s9, [r8, #4]
 800a6cc:	edd5 4a01 	vldr	s9, [r5, #4]
 800a6d0:	edd5 6a00 	vldr	s13, [r5]
 800a6d4:	9d06      	ldr	r5, [sp, #24]
 800a6d6:	ee26 5a26 	vmul.f32	s10, s12, s13
 800a6da:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a6de:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800a6e2:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800a6e6:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800a6ea:	ee75 5a25 	vadd.f32	s11, s10, s11
 800a6ee:	ed86 6a01 	vstr	s12, [r6, #4]
 800a6f2:	edc6 5a00 	vstr	s11, [r6]
 800a6f6:	edd5 5a01 	vldr	s11, [r5, #4]
 800a6fa:	edd5 6a00 	vldr	s13, [r5]
 800a6fe:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a700:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800a704:	ee67 6a26 	vmul.f32	s13, s14, s13
 800a708:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a70c:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a710:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a714:	ee36 7a07 	vadd.f32	s14, s12, s14
 800a718:	edcc 7a01 	vstr	s15, [ip, #4]
 800a71c:	ed8c 7a00 	vstr	s14, [ip]
 800a720:	6872      	ldr	r2, [r6, #4]
 800a722:	f000 fb09 	bl	800ad38 <arm_radix8_butterfly_f32>
 800a726:	9803      	ldr	r0, [sp, #12]
 800a728:	4621      	mov	r1, r4
 800a72a:	6872      	ldr	r2, [r6, #4]
 800a72c:	2304      	movs	r3, #4
 800a72e:	f000 fb03 	bl	800ad38 <arm_radix8_butterfly_f32>
 800a732:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a734:	4621      	mov	r1, r4
 800a736:	6872      	ldr	r2, [r6, #4]
 800a738:	2304      	movs	r3, #4
 800a73a:	f000 fafd 	bl	800ad38 <arm_radix8_butterfly_f32>
 800a73e:	4621      	mov	r1, r4
 800a740:	6872      	ldr	r2, [r6, #4]
 800a742:	2304      	movs	r3, #4
 800a744:	9804      	ldr	r0, [sp, #16]
 800a746:	b00f      	add	sp, #60	; 0x3c
 800a748:	ecbd 8b06 	vpop	{d8-d10}
 800a74c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a750:	f000 baf2 	b.w	800ad38 <arm_radix8_butterfly_f32>

0800a754 <arm_cfft_f32>:
 800a754:	2a01      	cmp	r2, #1
 800a756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a75a:	4606      	mov	r6, r0
 800a75c:	4617      	mov	r7, r2
 800a75e:	460c      	mov	r4, r1
 800a760:	4698      	mov	r8, r3
 800a762:	8805      	ldrh	r5, [r0, #0]
 800a764:	d053      	beq.n	800a80e <arm_cfft_f32+0xba>
 800a766:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800a76a:	d04b      	beq.n	800a804 <arm_cfft_f32+0xb0>
 800a76c:	d916      	bls.n	800a79c <arm_cfft_f32+0x48>
 800a76e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800a772:	d01a      	beq.n	800a7aa <arm_cfft_f32+0x56>
 800a774:	d95a      	bls.n	800a82c <arm_cfft_f32+0xd8>
 800a776:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800a77a:	d043      	beq.n	800a804 <arm_cfft_f32+0xb0>
 800a77c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800a780:	d105      	bne.n	800a78e <arm_cfft_f32+0x3a>
 800a782:	2301      	movs	r3, #1
 800a784:	6872      	ldr	r2, [r6, #4]
 800a786:	4629      	mov	r1, r5
 800a788:	4620      	mov	r0, r4
 800a78a:	f000 fad5 	bl	800ad38 <arm_radix8_butterfly_f32>
 800a78e:	f1b8 0f00 	cmp.w	r8, #0
 800a792:	d111      	bne.n	800a7b8 <arm_cfft_f32+0x64>
 800a794:	2f01      	cmp	r7, #1
 800a796:	d016      	beq.n	800a7c6 <arm_cfft_f32+0x72>
 800a798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a79c:	2d20      	cmp	r5, #32
 800a79e:	d031      	beq.n	800a804 <arm_cfft_f32+0xb0>
 800a7a0:	d948      	bls.n	800a834 <arm_cfft_f32+0xe0>
 800a7a2:	2d40      	cmp	r5, #64	; 0x40
 800a7a4:	d0ed      	beq.n	800a782 <arm_cfft_f32+0x2e>
 800a7a6:	2d80      	cmp	r5, #128	; 0x80
 800a7a8:	d1f1      	bne.n	800a78e <arm_cfft_f32+0x3a>
 800a7aa:	4621      	mov	r1, r4
 800a7ac:	4630      	mov	r0, r6
 800a7ae:	f7ff fca9 	bl	800a104 <arm_cfft_radix8by2_f32>
 800a7b2:	f1b8 0f00 	cmp.w	r8, #0
 800a7b6:	d0ed      	beq.n	800a794 <arm_cfft_f32+0x40>
 800a7b8:	68b2      	ldr	r2, [r6, #8]
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	89b1      	ldrh	r1, [r6, #12]
 800a7be:	f7f5 fd8f 	bl	80002e0 <arm_bitreversal_32>
 800a7c2:	2f01      	cmp	r7, #1
 800a7c4:	d1e8      	bne.n	800a798 <arm_cfft_f32+0x44>
 800a7c6:	ee07 5a90 	vmov	s15, r5
 800a7ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a7ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a7d6:	2d00      	cmp	r5, #0
 800a7d8:	d0de      	beq.n	800a798 <arm_cfft_f32+0x44>
 800a7da:	f104 0108 	add.w	r1, r4, #8
 800a7de:	2300      	movs	r3, #0
 800a7e0:	ed11 7a02 	vldr	s14, [r1, #-8]
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a7ea:	3108      	adds	r1, #8
 800a7ec:	429d      	cmp	r5, r3
 800a7ee:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a7f2:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a7f6:	ed01 7a04 	vstr	s14, [r1, #-16]
 800a7fa:	ed41 7a03 	vstr	s15, [r1, #-12]
 800a7fe:	d1ef      	bne.n	800a7e0 <arm_cfft_f32+0x8c>
 800a800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a804:	4621      	mov	r1, r4
 800a806:	4630      	mov	r0, r6
 800a808:	f7ff fd4c 	bl	800a2a4 <arm_cfft_radix8by4_f32>
 800a80c:	e7bf      	b.n	800a78e <arm_cfft_f32+0x3a>
 800a80e:	b1a5      	cbz	r5, 800a83a <arm_cfft_f32+0xe6>
 800a810:	f101 030c 	add.w	r3, r1, #12
 800a814:	2200      	movs	r2, #0
 800a816:	ed53 7a02 	vldr	s15, [r3, #-8]
 800a81a:	3201      	adds	r2, #1
 800a81c:	3308      	adds	r3, #8
 800a81e:	eef1 7a67 	vneg.f32	s15, s15
 800a822:	4295      	cmp	r5, r2
 800a824:	ed43 7a04 	vstr	s15, [r3, #-16]
 800a828:	d1f5      	bne.n	800a816 <arm_cfft_f32+0xc2>
 800a82a:	e79c      	b.n	800a766 <arm_cfft_f32+0x12>
 800a82c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800a830:	d0a7      	beq.n	800a782 <arm_cfft_f32+0x2e>
 800a832:	e7ac      	b.n	800a78e <arm_cfft_f32+0x3a>
 800a834:	2d10      	cmp	r5, #16
 800a836:	d0b8      	beq.n	800a7aa <arm_cfft_f32+0x56>
 800a838:	e7a9      	b.n	800a78e <arm_cfft_f32+0x3a>
 800a83a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800a83e:	d896      	bhi.n	800a76e <arm_cfft_f32+0x1a>
 800a840:	e7ac      	b.n	800a79c <arm_cfft_f32+0x48>
 800a842:	bf00      	nop

0800a844 <arm_fir_decimate_init_f32>:
 800a844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a846:	9f07      	ldr	r7, [sp, #28]
 800a848:	fbb7 f4f2 	udiv	r4, r7, r2
 800a84c:	fb02 7414 	mls	r4, r2, r4, r7
 800a850:	b994      	cbnz	r4, 800a878 <arm_fir_decimate_init_f32+0x34>
 800a852:	468e      	mov	lr, r1
 800a854:	4616      	mov	r6, r2
 800a856:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800a85a:	4605      	mov	r5, r0
 800a85c:	4472      	add	r2, lr
 800a85e:	8069      	strh	r1, [r5, #2]
 800a860:	6043      	str	r3, [r0, #4]
 800a862:	4621      	mov	r1, r4
 800a864:	443a      	add	r2, r7
 800a866:	9806      	ldr	r0, [sp, #24]
 800a868:	0092      	lsls	r2, r2, #2
 800a86a:	f000 fd81 	bl	800b370 <memset>
 800a86e:	9b06      	ldr	r3, [sp, #24]
 800a870:	702e      	strb	r6, [r5, #0]
 800a872:	4620      	mov	r0, r4
 800a874:	60ab      	str	r3, [r5, #8]
 800a876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a878:	f06f 0001 	mvn.w	r0, #1
 800a87c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a87e:	bf00      	nop

0800a880 <arm_fir_decimate_f32>:
 800a880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a884:	7804      	ldrb	r4, [r0, #0]
 800a886:	4683      	mov	fp, r0
 800a888:	b08d      	sub	sp, #52	; 0x34
 800a88a:	8840      	ldrh	r0, [r0, #2]
 800a88c:	f8db 5004 	ldr.w	r5, [fp, #4]
 800a890:	f06f 4940 	mvn.w	r9, #3221225472	; 0xc0000000
 800a894:	4696      	mov	lr, r2
 800a896:	9208      	str	r2, [sp, #32]
 800a898:	9502      	str	r5, [sp, #8]
 800a89a:	462a      	mov	r2, r5
 800a89c:	f8db 6008 	ldr.w	r6, [fp, #8]
 800a8a0:	4481      	add	r9, r0
 800a8a2:	9009      	str	r0, [sp, #36]	; 0x24
 800a8a4:	eb06 0989 	add.w	r9, r6, r9, lsl #2
 800a8a8:	fbb3 f3f4 	udiv	r3, r3, r4
 800a8ac:	089d      	lsrs	r5, r3, #2
 800a8ae:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
 800a8b2:	950a      	str	r5, [sp, #40]	; 0x28
 800a8b4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8b6:	2d00      	cmp	r5, #0
 800a8b8:	f000 80f8 	beq.w	800aaac <arm_fir_decimate_f32+0x22c>
 800a8bc:	0883      	lsrs	r3, r0, #2
 800a8be:	f000 0003 	and.w	r0, r0, #3
 800a8c2:	462f      	mov	r7, r5
 800a8c4:	f8cd b010 	str.w	fp, [sp, #16]
 800a8c8:	9305      	str	r3, [sp, #20]
 800a8ca:	011b      	lsls	r3, r3, #4
 800a8cc:	9006      	str	r0, [sp, #24]
 800a8ce:	f10e 0a10 	add.w	sl, lr, #16
 800a8d2:	441a      	add	r2, r3
 800a8d4:	469b      	mov	fp, r3
 800a8d6:	4648      	mov	r0, r9
 800a8d8:	9703      	str	r7, [sp, #12]
 800a8da:	9207      	str	r2, [sp, #28]
 800a8dc:	f8cd 9004 	str.w	r9, [sp, #4]
 800a8e0:	00a4      	lsls	r4, r4, #2
 800a8e2:	460a      	mov	r2, r1
 800a8e4:	4623      	mov	r3, r4
 800a8e6:	f852 5b04 	ldr.w	r5, [r2], #4
 800a8ea:	3b01      	subs	r3, #1
 800a8ec:	f840 5b04 	str.w	r5, [r0], #4
 800a8f0:	d1f9      	bne.n	800a8e6 <arm_fir_decimate_f32+0x66>
 800a8f2:	9b04      	ldr	r3, [sp, #16]
 800a8f4:	00a4      	lsls	r4, r4, #2
 800a8f6:	9f05      	ldr	r7, [sp, #20]
 800a8f8:	f893 8000 	ldrb.w	r8, [r3]
 800a8fc:	4421      	add	r1, r4
 800a8fe:	9b01      	ldr	r3, [sp, #4]
 800a900:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800a904:	ed9f 1abb 	vldr	s2, [pc, #748]	; 800abf4 <arm_fir_decimate_f32+0x374>
 800a908:	4423      	add	r3, r4
 800a90a:	eb06 0e08 	add.w	lr, r6, r8
 800a90e:	9301      	str	r3, [sp, #4]
 800a910:	eb0e 0c08 	add.w	ip, lr, r8
 800a914:	eb0c 0908 	add.w	r9, ip, r8
 800a918:	2f00      	cmp	r7, #0
 800a91a:	f000 8161 	beq.w	800abe0 <arm_fir_decimate_f32+0x360>
 800a91e:	9b02      	ldr	r3, [sp, #8]
 800a920:	eef0 5a41 	vmov.f32	s11, s2
 800a924:	eeb0 5a41 	vmov.f32	s10, s2
 800a928:	f106 0410 	add.w	r4, r6, #16
 800a92c:	eef0 4a41 	vmov.f32	s9, s2
 800a930:	f103 0510 	add.w	r5, r3, #16
 800a934:	f10e 0010 	add.w	r0, lr, #16
 800a938:	f10c 0210 	add.w	r2, ip, #16
 800a93c:	f109 0310 	add.w	r3, r9, #16
 800a940:	ed55 6a04 	vldr	s13, [r5, #-16]
 800a944:	3f01      	subs	r7, #1
 800a946:	ed13 6a04 	vldr	s12, [r3, #-16]
 800a94a:	f105 0510 	add.w	r5, r5, #16
 800a94e:	ed14 4a04 	vldr	s8, [r4, #-16]
 800a952:	f100 0010 	add.w	r0, r0, #16
 800a956:	ed50 1a08 	vldr	s3, [r0, #-32]	; 0xffffffe0
 800a95a:	f104 0410 	add.w	r4, r4, #16
 800a95e:	ed52 2a04 	vldr	s5, [r2, #-16]
 800a962:	ee26 4a84 	vmul.f32	s8, s13, s8
 800a966:	ee66 1aa1 	vmul.f32	s3, s13, s3
 800a96a:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 800a96e:	ee66 2aa2 	vmul.f32	s5, s13, s5
 800a972:	ed54 3a07 	vldr	s7, [r4, #-28]	; 0xffffffe4
 800a976:	ee66 6a86 	vmul.f32	s13, s13, s12
 800a97a:	ed10 2a07 	vldr	s4, [r0, #-28]	; 0xffffffe4
 800a97e:	ed13 6a03 	vldr	s12, [r3, #-12]
 800a982:	ee74 4a24 	vadd.f32	s9, s8, s9
 800a986:	ed12 3a03 	vldr	s6, [r2, #-12]
 800a98a:	ee31 5a85 	vadd.f32	s10, s3, s10
 800a98e:	ee72 5aa5 	vadd.f32	s11, s5, s11
 800a992:	ed55 7a06 	vldr	s15, [r5, #-24]	; 0xffffffe8
 800a996:	ee67 3a23 	vmul.f32	s7, s14, s7
 800a99a:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 800a99e:	ee27 2a02 	vmul.f32	s4, s14, s4
 800a9a2:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800a9a6:	ee27 3a03 	vmul.f32	s6, s14, s6
 800a9aa:	ed52 2a02 	vldr	s5, [r2, #-8]
 800a9ae:	ee76 6a81 	vadd.f32	s13, s13, s2
 800a9b2:	ed10 0a05 	vldr	s0, [r0, #-20]	; 0xffffffec
 800a9b6:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a9ba:	ed13 6a02 	vldr	s12, [r3, #-8]
 800a9be:	ee73 3aa4 	vadd.f32	s7, s7, s9
 800a9c2:	ed15 1a05 	vldr	s2, [r5, #-20]	; 0xffffffec
 800a9c6:	ee67 4a84 	vmul.f32	s9, s15, s8
 800a9ca:	ed52 0a01 	vldr	s1, [r2, #-4]
 800a9ce:	ee32 2a05 	vadd.f32	s4, s4, s10
 800a9d2:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 800a9d6:	ee27 5aa1 	vmul.f32	s10, s15, s3
 800a9da:	ed53 1a01 	vldr	s3, [r3, #-4]
 800a9de:	ee33 3a25 	vadd.f32	s6, s6, s11
 800a9e2:	f102 0210 	add.w	r2, r2, #16
 800a9e6:	ee67 5aa2 	vmul.f32	s11, s15, s5
 800a9ea:	f103 0310 	add.w	r3, r3, #16
 800a9ee:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a9f2:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a9f6:	ee34 6aa3 	vadd.f32	s12, s9, s7
 800a9fa:	ee61 4a04 	vmul.f32	s9, s2, s8
 800a9fe:	ee75 3a02 	vadd.f32	s7, s10, s4
 800aa02:	ee35 4a83 	vadd.f32	s8, s11, s6
 800aa06:	ee21 5a00 	vmul.f32	s10, s2, s0
 800aa0a:	ee61 5a20 	vmul.f32	s11, s2, s1
 800aa0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa12:	ee21 1a21 	vmul.f32	s2, s2, s3
 800aa16:	ee74 4a86 	vadd.f32	s9, s9, s12
 800aa1a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800aa1e:	ee75 5a84 	vadd.f32	s11, s11, s8
 800aa22:	ee31 1a27 	vadd.f32	s2, s2, s15
 800aa26:	d18b      	bne.n	800a940 <arm_fir_decimate_f32+0xc0>
 800aa28:	445e      	add	r6, fp
 800aa2a:	44de      	add	lr, fp
 800aa2c:	44dc      	add	ip, fp
 800aa2e:	eb09 000b 	add.w	r0, r9, fp
 800aa32:	9a07      	ldr	r2, [sp, #28]
 800aa34:	9b06      	ldr	r3, [sp, #24]
 800aa36:	b1db      	cbz	r3, 800aa70 <arm_fir_decimate_f32+0x1f0>
 800aa38:	ecb2 6a01 	vldmia	r2!, {s12}
 800aa3c:	3b01      	subs	r3, #1
 800aa3e:	ecf6 6a01 	vldmia	r6!, {s13}
 800aa42:	ecbe 7a01 	vldmia	lr!, {s14}
 800aa46:	ecfc 7a01 	vldmia	ip!, {s15}
 800aa4a:	ee66 6a26 	vmul.f32	s13, s12, s13
 800aa4e:	ecb0 4a01 	vldmia	r0!, {s8}
 800aa52:	ee26 7a07 	vmul.f32	s14, s12, s14
 800aa56:	ee66 7a27 	vmul.f32	s15, s12, s15
 800aa5a:	ee26 6a04 	vmul.f32	s12, s12, s8
 800aa5e:	ee74 4aa6 	vadd.f32	s9, s9, s13
 800aa62:	ee35 5a07 	vadd.f32	s10, s10, s14
 800aa66:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800aa6a:	ee31 1a06 	vadd.f32	s2, s2, s12
 800aa6e:	d1e3      	bne.n	800aa38 <arm_fir_decimate_f32+0x1b8>
 800aa70:	9b03      	ldr	r3, [sp, #12]
 800aa72:	eb09 0608 	add.w	r6, r9, r8
 800aa76:	ed4a 4a04 	vstr	s9, [sl, #-16]
 800aa7a:	f10a 0a10 	add.w	sl, sl, #16
 800aa7e:	3b01      	subs	r3, #1
 800aa80:	ed0a 5a07 	vstr	s10, [sl, #-28]	; 0xffffffe4
 800aa84:	ed4a 5a06 	vstr	s11, [sl, #-24]	; 0xffffffe8
 800aa88:	ed0a 1a05 	vstr	s2, [sl, #-20]	; 0xffffffec
 800aa8c:	9303      	str	r3, [sp, #12]
 800aa8e:	d003      	beq.n	800aa98 <arm_fir_decimate_f32+0x218>
 800aa90:	9b04      	ldr	r3, [sp, #16]
 800aa92:	9801      	ldr	r0, [sp, #4]
 800aa94:	781c      	ldrb	r4, [r3, #0]
 800aa96:	e723      	b.n	800a8e0 <arm_fir_decimate_f32+0x60>
 800aa98:	9b08      	ldr	r3, [sp, #32]
 800aa9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa9c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800aaa0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800aaa4:	f8dd b010 	ldr.w	fp, [sp, #16]
 800aaa8:	9308      	str	r3, [sp, #32]
 800aaaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d061      	beq.n	800ab74 <arm_fir_decimate_f32+0x2f4>
 800aab0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aab2:	4698      	mov	r8, r3
 800aab4:	f8dd a020 	ldr.w	sl, [sp, #32]
 800aab8:	0895      	lsrs	r5, r2, #2
 800aaba:	f002 0703 	and.w	r7, r2, #3
 800aabe:	9a02      	ldr	r2, [sp, #8]
 800aac0:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 800aac4:	eb02 0c0e 	add.w	ip, r2, lr
 800aac8:	f89b 4000 	ldrb.w	r4, [fp]
 800aacc:	4648      	mov	r0, r9
 800aace:	460a      	mov	r2, r1
 800aad0:	4623      	mov	r3, r4
 800aad2:	ecf2 7a01 	vldmia	r2!, {s15}
 800aad6:	3b01      	subs	r3, #1
 800aad8:	ece0 7a01 	vstmia	r0!, {s15}
 800aadc:	d1f9      	bne.n	800aad2 <arm_fir_decimate_f32+0x252>
 800aade:	00a4      	lsls	r4, r4, #2
 800aae0:	44a1      	add	r9, r4
 800aae2:	4421      	add	r1, r4
 800aae4:	2d00      	cmp	r5, #0
 800aae6:	d076      	beq.n	800abd6 <arm_fir_decimate_f32+0x356>
 800aae8:	9b02      	ldr	r3, [sp, #8]
 800aaea:	4628      	mov	r0, r5
 800aaec:	eddf 7a41 	vldr	s15, [pc, #260]	; 800abf4 <arm_fir_decimate_f32+0x374>
 800aaf0:	f103 0210 	add.w	r2, r3, #16
 800aaf4:	f106 0310 	add.w	r3, r6, #16
 800aaf8:	ed52 6a04 	vldr	s13, [r2, #-16]
 800aafc:	3801      	subs	r0, #1
 800aafe:	ed13 7a04 	vldr	s14, [r3, #-16]
 800ab02:	f102 0210 	add.w	r2, r2, #16
 800ab06:	ed12 5a07 	vldr	s10, [r2, #-28]	; 0xffffffe4
 800ab0a:	f103 0310 	add.w	r3, r3, #16
 800ab0e:	ee66 5a87 	vmul.f32	s11, s13, s14
 800ab12:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 800ab16:	ed12 6a06 	vldr	s12, [r2, #-24]	; 0xffffffe8
 800ab1a:	ee25 5a07 	vmul.f32	s10, s10, s14
 800ab1e:	ed13 7a06 	vldr	s14, [r3, #-24]	; 0xffffffe8
 800ab22:	ee75 6aa7 	vadd.f32	s13, s11, s15
 800ab26:	ed52 5a05 	vldr	s11, [r2, #-20]	; 0xffffffec
 800ab2a:	ee26 6a07 	vmul.f32	s12, s12, s14
 800ab2e:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 800ab32:	ee75 6a26 	vadd.f32	s13, s10, s13
 800ab36:	ee25 7a87 	vmul.f32	s14, s11, s14
 800ab3a:	ee76 7a26 	vadd.f32	s15, s12, s13
 800ab3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab42:	d1d9      	bne.n	800aaf8 <arm_fir_decimate_f32+0x278>
 800ab44:	eb06 020e 	add.w	r2, r6, lr
 800ab48:	4660      	mov	r0, ip
 800ab4a:	b157      	cbz	r7, 800ab62 <arm_fir_decimate_f32+0x2e2>
 800ab4c:	463b      	mov	r3, r7
 800ab4e:	ecf0 6a01 	vldmia	r0!, {s13}
 800ab52:	3b01      	subs	r3, #1
 800ab54:	ecb2 7a01 	vldmia	r2!, {s14}
 800ab58:	ee26 7a87 	vmul.f32	s14, s13, s14
 800ab5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ab60:	d1f5      	bne.n	800ab4e <arm_fir_decimate_f32+0x2ce>
 800ab62:	f89b 3000 	ldrb.w	r3, [fp]
 800ab66:	f1b8 0801 	subs.w	r8, r8, #1
 800ab6a:	ecea 7a01 	vstmia	sl!, {s15}
 800ab6e:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800ab72:	d1a9      	bne.n	800aac8 <arm_fir_decimate_f32+0x248>
 800ab74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab76:	f8db 4008 	ldr.w	r4, [fp, #8]
 800ab7a:	1e59      	subs	r1, r3, #1
 800ab7c:	088f      	lsrs	r7, r1, #2
 800ab7e:	d01d      	beq.n	800abbc <arm_fir_decimate_f32+0x33c>
 800ab80:	f104 0210 	add.w	r2, r4, #16
 800ab84:	f106 0310 	add.w	r3, r6, #16
 800ab88:	4638      	mov	r0, r7
 800ab8a:	f853 5c10 	ldr.w	r5, [r3, #-16]
 800ab8e:	3801      	subs	r0, #1
 800ab90:	f103 0310 	add.w	r3, r3, #16
 800ab94:	f102 0210 	add.w	r2, r2, #16
 800ab98:	f842 5c20 	str.w	r5, [r2, #-32]
 800ab9c:	f853 5c1c 	ldr.w	r5, [r3, #-28]
 800aba0:	f842 5c1c 	str.w	r5, [r2, #-28]
 800aba4:	f853 5c18 	ldr.w	r5, [r3, #-24]
 800aba8:	f842 5c18 	str.w	r5, [r2, #-24]
 800abac:	f853 5c14 	ldr.w	r5, [r3, #-20]
 800abb0:	f842 5c14 	str.w	r5, [r2, #-20]
 800abb4:	d1e9      	bne.n	800ab8a <arm_fir_decimate_f32+0x30a>
 800abb6:	013b      	lsls	r3, r7, #4
 800abb8:	441c      	add	r4, r3
 800abba:	441e      	add	r6, r3
 800abbc:	f011 0303 	ands.w	r3, r1, #3
 800abc0:	d006      	beq.n	800abd0 <arm_fir_decimate_f32+0x350>
 800abc2:	4622      	mov	r2, r4
 800abc4:	f856 1b04 	ldr.w	r1, [r6], #4
 800abc8:	3b01      	subs	r3, #1
 800abca:	f842 1b04 	str.w	r1, [r2], #4
 800abce:	d1f9      	bne.n	800abc4 <arm_fir_decimate_f32+0x344>
 800abd0:	b00d      	add	sp, #52	; 0x34
 800abd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abd6:	9802      	ldr	r0, [sp, #8]
 800abd8:	4632      	mov	r2, r6
 800abda:	eddf 7a06 	vldr	s15, [pc, #24]	; 800abf4 <arm_fir_decimate_f32+0x374>
 800abde:	e7b4      	b.n	800ab4a <arm_fir_decimate_f32+0x2ca>
 800abe0:	4648      	mov	r0, r9
 800abe2:	9a02      	ldr	r2, [sp, #8]
 800abe4:	eef0 5a41 	vmov.f32	s11, s2
 800abe8:	eeb0 5a41 	vmov.f32	s10, s2
 800abec:	eef0 4a41 	vmov.f32	s9, s2
 800abf0:	e720      	b.n	800aa34 <arm_fir_decimate_f32+0x1b4>
 800abf2:	bf00      	nop
 800abf4:	00000000 	.word	0x00000000

0800abf8 <arm_cmplx_mult_cmplx_f32>:
 800abf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abfa:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800abfe:	d073      	beq.n	800ace8 <arm_cmplx_mult_cmplx_f32+0xf0>
 800ac00:	f100 0620 	add.w	r6, r0, #32
 800ac04:	f101 0520 	add.w	r5, r1, #32
 800ac08:	f102 0420 	add.w	r4, r2, #32
 800ac0c:	4677      	mov	r7, lr
 800ac0e:	ed16 7a08 	vldr	s14, [r6, #-32]	; 0xffffffe0
 800ac12:	3f01      	subs	r7, #1
 800ac14:	ed55 7a08 	vldr	s15, [r5, #-32]	; 0xffffffe0
 800ac18:	f106 0620 	add.w	r6, r6, #32
 800ac1c:	ed56 5a0f 	vldr	s11, [r6, #-60]	; 0xffffffc4
 800ac20:	f105 0520 	add.w	r5, r5, #32
 800ac24:	ed55 6a0f 	vldr	s13, [r5, #-60]	; 0xffffffc4
 800ac28:	ee27 3a27 	vmul.f32	s6, s14, s15
 800ac2c:	ee67 4aa5 	vmul.f32	s9, s15, s11
 800ac30:	ed16 6a0e 	vldr	s12, [r6, #-56]	; 0xffffffc8
 800ac34:	ee25 4aa6 	vmul.f32	s8, s11, s13
 800ac38:	ed55 7a0e 	vldr	s15, [r5, #-56]	; 0xffffffc8
 800ac3c:	ee67 6a26 	vmul.f32	s13, s14, s13
 800ac40:	ed15 5a0d 	vldr	s10, [r5, #-52]	; 0xffffffcc
 800ac44:	ed56 2a0d 	vldr	s5, [r6, #-52]	; 0xffffffcc
 800ac48:	ee66 3a27 	vmul.f32	s7, s12, s15
 800ac4c:	ee66 5a05 	vmul.f32	s11, s12, s10
 800ac50:	ed16 7a0c 	vldr	s14, [r6, #-48]	; 0xffffffd0
 800ac54:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800ac58:	ed15 6a0c 	vldr	s12, [r5, #-48]	; 0xffffffd0
 800ac5c:	ee25 5a22 	vmul.f32	s10, s10, s5
 800ac60:	f104 0420 	add.w	r4, r4, #32
 800ac64:	ee33 4a44 	vsub.f32	s8, s6, s8
 800ac68:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800ac6c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800ac70:	ed04 4a10 	vstr	s8, [r4, #-64]	; 0xffffffc0
 800ac74:	ee67 4a06 	vmul.f32	s9, s14, s12
 800ac78:	ed16 5a0b 	vldr	s10, [r6, #-44]	; 0xffffffd4
 800ac7c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800ac80:	ed44 6a0f 	vstr	s13, [r4, #-60]	; 0xffffffc4
 800ac84:	ed55 6a0b 	vldr	s13, [r5, #-44]	; 0xffffffd4
 800ac88:	ee66 5a05 	vmul.f32	s11, s12, s10
 800ac8c:	ed44 3a0e 	vstr	s7, [r4, #-56]	; 0xffffffc8
 800ac90:	ee25 5a26 	vmul.f32	s10, s10, s13
 800ac94:	ed44 7a0d 	vstr	s15, [r4, #-52]	; 0xffffffcc
 800ac98:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ac9c:	ed56 7a0a 	vldr	s15, [r6, #-40]	; 0xffffffd8
 800aca0:	ed55 6a0a 	vldr	s13, [r5, #-40]	; 0xffffffd8
 800aca4:	ed16 6a09 	vldr	s12, [r6, #-36]	; 0xffffffdc
 800aca8:	ee34 5ac5 	vsub.f32	s10, s9, s10
 800acac:	ed15 4a09 	vldr	s8, [r5, #-36]	; 0xffffffdc
 800acb0:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800acb4:	ee66 6a86 	vmul.f32	s13, s13, s12
 800acb8:	ee67 7a84 	vmul.f32	s15, s15, s8
 800acbc:	ed04 5a0c 	vstr	s10, [r4, #-48]	; 0xffffffd0
 800acc0:	ee26 6a04 	vmul.f32	s12, s12, s8
 800acc4:	ee37 7a25 	vadd.f32	s14, s14, s11
 800acc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800accc:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800acd0:	ed04 7a0b 	vstr	s14, [r4, #-44]	; 0xffffffd4
 800acd4:	ed44 7a09 	vstr	s15, [r4, #-36]	; 0xffffffdc
 800acd8:	ed04 6a0a 	vstr	s12, [r4, #-40]	; 0xffffffd8
 800acdc:	d197      	bne.n	800ac0e <arm_cmplx_mult_cmplx_f32+0x16>
 800acde:	ea4f 144e 	mov.w	r4, lr, lsl #5
 800ace2:	4420      	add	r0, r4
 800ace4:	4421      	add	r1, r4
 800ace6:	4422      	add	r2, r4
 800ace8:	f013 0303 	ands.w	r3, r3, #3
 800acec:	d022      	beq.n	800ad34 <arm_cmplx_mult_cmplx_f32+0x13c>
 800acee:	3008      	adds	r0, #8
 800acf0:	3108      	adds	r1, #8
 800acf2:	3208      	adds	r2, #8
 800acf4:	ed50 7a02 	vldr	s15, [r0, #-8]
 800acf8:	3b01      	subs	r3, #1
 800acfa:	ed11 7a02 	vldr	s14, [r1, #-8]
 800acfe:	f100 0008 	add.w	r0, r0, #8
 800ad02:	ed50 6a03 	vldr	s13, [r0, #-12]
 800ad06:	f101 0108 	add.w	r1, r1, #8
 800ad0a:	ed51 5a03 	vldr	s11, [r1, #-12]
 800ad0e:	ee27 6a87 	vmul.f32	s12, s15, s14
 800ad12:	ee26 7a87 	vmul.f32	s14, s13, s14
 800ad16:	f102 0208 	add.w	r2, r2, #8
 800ad1a:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800ad1e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ad22:	ee76 6a66 	vsub.f32	s13, s12, s13
 800ad26:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ad2a:	ed42 6a04 	vstr	s13, [r2, #-16]
 800ad2e:	ed42 7a03 	vstr	s15, [r2, #-12]
 800ad32:	d1df      	bne.n	800acf4 <arm_cmplx_mult_cmplx_f32+0xfc>
 800ad34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad36:	bf00      	nop

0800ad38 <arm_radix8_butterfly_f32>:
 800ad38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad3c:	469e      	mov	lr, r3
 800ad3e:	4603      	mov	r3, r0
 800ad40:	468a      	mov	sl, r1
 800ad42:	468b      	mov	fp, r1
 800ad44:	3304      	adds	r3, #4
 800ad46:	ed2d 8b10 	vpush	{d8-d15}
 800ad4a:	469c      	mov	ip, r3
 800ad4c:	b09d      	sub	sp, #116	; 0x74
 800ad4e:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 800b05c <arm_radix8_butterfly_f32+0x324>
 800ad52:	9019      	str	r0, [sp, #100]	; 0x64
 800ad54:	921a      	str	r2, [sp, #104]	; 0x68
 800ad56:	931b      	str	r3, [sp, #108]	; 0x6c
 800ad58:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800ad5c:	f04f 0800 	mov.w	r8, #0
 800ad60:	461a      	mov	r2, r3
 800ad62:	9311      	str	r3, [sp, #68]	; 0x44
 800ad64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ad68:	4611      	mov	r1, r2
 800ad6a:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800ad6e:	9300      	str	r3, [sp, #0]
 800ad70:	0053      	lsls	r3, r2, #1
 800ad72:	18d5      	adds	r5, r2, r3
 800ad74:	9301      	str	r3, [sp, #4]
 800ad76:	0113      	lsls	r3, r2, #4
 800ad78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ad7a:	194c      	adds	r4, r1, r5
 800ad7c:	eb02 0609 	add.w	r6, r2, r9
 800ad80:	9302      	str	r3, [sp, #8]
 800ad82:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800ad86:	4613      	mov	r3, r2
 800ad88:	190a      	adds	r2, r1, r4
 800ad8a:	eb06 0709 	add.w	r7, r6, r9
 800ad8e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ad92:	1888      	adds	r0, r1, r2
 800ad94:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800ad98:	4401      	add	r1, r0
 800ad9a:	3204      	adds	r2, #4
 800ad9c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800ada0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ada4:	9b00      	ldr	r3, [sp, #0]
 800ada6:	3104      	adds	r1, #4
 800ada8:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800adac:	44d8      	add	r8, fp
 800adae:	ed90 7a00 	vldr	s14, [r0]
 800adb2:	ed94 5a00 	vldr	s10, [r4]
 800adb6:	45c2      	cmp	sl, r8
 800adb8:	edd7 3a00 	vldr	s7, [r7]
 800adbc:	ed96 6a00 	vldr	s12, [r6]
 800adc0:	ee37 1a85 	vadd.f32	s2, s15, s10
 800adc4:	ed52 6a01 	vldr	s13, [r2, #-4]
 800adc8:	ee73 4a87 	vadd.f32	s9, s7, s14
 800adcc:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800add0:	edd5 7a00 	vldr	s15, [r5]
 800add4:	ee73 3ac7 	vsub.f32	s7, s7, s14
 800add8:	ed11 7a01 	vldr	s14, [r1, #-4]
 800addc:	ee36 2a26 	vadd.f32	s4, s12, s13
 800ade0:	ee37 4a87 	vadd.f32	s8, s15, s14
 800ade4:	ee76 6a66 	vsub.f32	s13, s12, s13
 800ade8:	ee71 5a24 	vadd.f32	s11, s2, s9
 800adec:	ee32 6a04 	vadd.f32	s12, s4, s8
 800adf0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800adf4:	ee31 1a64 	vsub.f32	s2, s2, s9
 800adf8:	ee75 4a86 	vadd.f32	s9, s11, s12
 800adfc:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800ae00:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800ae04:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800ae08:	ee32 2a44 	vsub.f32	s4, s4, s8
 800ae0c:	ee67 7a89 	vmul.f32	s15, s15, s18
 800ae10:	ed94 0a01 	vldr	s0, [r4, #4]
 800ae14:	edc4 5a00 	vstr	s11, [r4]
 800ae18:	ee36 7a87 	vadd.f32	s14, s13, s14
 800ae1c:	edd6 5a01 	vldr	s11, [r6, #4]
 800ae20:	edd5 2a01 	vldr	s5, [r5, #4]
 800ae24:	ee75 1a27 	vadd.f32	s3, s10, s15
 800ae28:	ed92 4a00 	vldr	s8, [r2]
 800ae2c:	ee75 7a67 	vsub.f32	s15, s10, s15
 800ae30:	edd1 4a00 	vldr	s9, [r1]
 800ae34:	ee27 7a09 	vmul.f32	s14, s14, s18
 800ae38:	ee35 3ac4 	vsub.f32	s6, s11, s8
 800ae3c:	ed9c 6a00 	vldr	s12, [ip]
 800ae40:	ee72 6ae4 	vsub.f32	s13, s5, s9
 800ae44:	edd0 0a01 	vldr	s1, [r0, #4]
 800ae48:	ed97 5a01 	vldr	s10, [r7, #4]
 800ae4c:	ee35 4a84 	vadd.f32	s8, s11, s8
 800ae50:	ee72 4aa4 	vadd.f32	s9, s5, s9
 800ae54:	ee73 5a26 	vadd.f32	s11, s6, s13
 800ae58:	ee76 2a00 	vadd.f32	s5, s12, s0
 800ae5c:	ee73 6a66 	vsub.f32	s13, s6, s13
 800ae60:	ee36 6a40 	vsub.f32	s12, s12, s0
 800ae64:	ee35 0a20 	vadd.f32	s0, s10, s1
 800ae68:	ee65 5a89 	vmul.f32	s11, s11, s18
 800ae6c:	ee35 5a60 	vsub.f32	s10, s10, s1
 800ae70:	ee32 3a80 	vadd.f32	s6, s5, s0
 800ae74:	ee74 0a24 	vadd.f32	s1, s8, s9
 800ae78:	ee66 6a89 	vmul.f32	s13, s13, s18
 800ae7c:	ee74 4a64 	vsub.f32	s9, s8, s9
 800ae80:	ee32 4ac0 	vsub.f32	s8, s5, s0
 800ae84:	ee75 2a25 	vadd.f32	s5, s10, s11
 800ae88:	ee33 0a20 	vadd.f32	s0, s6, s1
 800ae8c:	ee75 5a65 	vsub.f32	s11, s10, s11
 800ae90:	ee33 3a60 	vsub.f32	s6, s6, s1
 800ae94:	ee36 5a26 	vadd.f32	s10, s12, s13
 800ae98:	ed8c 0a00 	vstr	s0, [ip]
 800ae9c:	ee76 6a66 	vsub.f32	s13, s12, s13
 800aea0:	449c      	add	ip, r3
 800aea2:	ee33 6a87 	vadd.f32	s12, s7, s14
 800aea6:	ed84 3a01 	vstr	s6, [r4, #4]
 800aeaa:	ee33 7ac7 	vsub.f32	s14, s7, s14
 800aeae:	441c      	add	r4, r3
 800aeb0:	ee71 3a24 	vadd.f32	s7, s2, s9
 800aeb4:	ee71 4a64 	vsub.f32	s9, s2, s9
 800aeb8:	ee31 3aa2 	vadd.f32	s6, s3, s5
 800aebc:	edc7 3a00 	vstr	s7, [r7]
 800aec0:	ee34 1a42 	vsub.f32	s2, s8, s4
 800aec4:	edc0 4a00 	vstr	s9, [r0]
 800aec8:	ee77 3aa5 	vadd.f32	s7, s15, s11
 800aecc:	ee75 4a46 	vsub.f32	s9, s10, s12
 800aed0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800aed4:	ed87 1a01 	vstr	s2, [r7, #4]
 800aed8:	ee76 5ac7 	vsub.f32	s11, s13, s14
 800aedc:	441f      	add	r7, r3
 800aede:	ee32 4a04 	vadd.f32	s8, s4, s8
 800aee2:	ee71 1ae2 	vsub.f32	s3, s3, s5
 800aee6:	ee36 6a05 	vadd.f32	s12, s12, s10
 800aeea:	ee37 7a26 	vadd.f32	s14, s14, s13
 800aeee:	ed80 4a01 	vstr	s8, [r0, #4]
 800aef2:	ed86 3a00 	vstr	s6, [r6]
 800aef6:	4418      	add	r0, r3
 800aef8:	ed41 1a01 	vstr	s3, [r1, #-4]
 800aefc:	ed42 3a01 	vstr	s7, [r2, #-4]
 800af00:	edc5 7a00 	vstr	s15, [r5]
 800af04:	edc6 4a01 	vstr	s9, [r6, #4]
 800af08:	441e      	add	r6, r3
 800af0a:	ed81 6a00 	vstr	s12, [r1]
 800af0e:	4419      	add	r1, r3
 800af10:	edc2 5a00 	vstr	s11, [r2]
 800af14:	441a      	add	r2, r3
 800af16:	ed85 7a01 	vstr	s14, [r5, #4]
 800af1a:	441d      	add	r5, r3
 800af1c:	f63f af44 	bhi.w	800ada8 <arm_radix8_butterfly_f32+0x70>
 800af20:	9300      	str	r3, [sp, #0]
 800af22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af24:	2b07      	cmp	r3, #7
 800af26:	f240 81f4 	bls.w	800b312 <arm_radix8_butterfly_f32+0x5da>
 800af2a:	9901      	ldr	r1, [sp, #4]
 800af2c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800af30:	9d02      	ldr	r5, [sp, #8]
 800af32:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 800af36:	3101      	adds	r1, #1
 800af38:	eb04 000e 	add.w	r0, r4, lr
 800af3c:	00e4      	lsls	r4, r4, #3
 800af3e:	3508      	adds	r5, #8
 800af40:	4419      	add	r1, r3
 800af42:	eb00 0c0e 	add.w	ip, r0, lr
 800af46:	9413      	str	r4, [sp, #76]	; 0x4c
 800af48:	00c0      	lsls	r0, r0, #3
 800af4a:	185e      	adds	r6, r3, r1
 800af4c:	4617      	mov	r7, r2
 800af4e:	9218      	str	r2, [sp, #96]	; 0x60
 800af50:	f109 0908 	add.w	r9, r9, #8
 800af54:	199c      	adds	r4, r3, r6
 800af56:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af58:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800af5a:	9012      	str	r0, [sp, #72]	; 0x48
 800af5c:	195d      	adds	r5, r3, r5
 800af5e:	9811      	ldr	r0, [sp, #68]	; 0x44
 800af60:	443a      	add	r2, r7
 800af62:	950c      	str	r5, [sp, #48]	; 0x30
 800af64:	4698      	mov	r8, r3
 800af66:	4420      	add	r0, r4
 800af68:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800af6a:	19d7      	adds	r7, r2, r7
 800af6c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800af70:	4405      	add	r5, r0
 800af72:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800af76:	9710      	str	r7, [sp, #64]	; 0x40
 800af78:	eb0c 070e 	add.w	r7, ip, lr
 800af7c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800af80:	3404      	adds	r4, #4
 800af82:	3004      	adds	r0, #4
 800af84:	44c8      	add	r8, r9
 800af86:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 800af8a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af8c:	940a      	str	r4, [sp, #40]	; 0x28
 800af8e:	9009      	str	r0, [sp, #36]	; 0x24
 800af90:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800af94:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800af96:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800af9a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800af9c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800afa0:	eb07 080e 	add.w	r8, r7, lr
 800afa4:	eb04 0900 	add.w	r9, r4, r0
 800afa8:	00f8      	lsls	r0, r7, #3
 800afaa:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 800afae:	3504      	adds	r5, #4
 800afb0:	4607      	mov	r7, r0
 800afb2:	9017      	str	r0, [sp, #92]	; 0x5c
 800afb4:	910b      	str	r1, [sp, #44]	; 0x2c
 800afb6:	4618      	mov	r0, r3
 800afb8:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 800afbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800afbe:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 800afc2:	18e3      	adds	r3, r4, r3
 800afc4:	9508      	str	r5, [sp, #32]
 800afc6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800afc8:	910e      	str	r1, [sp, #56]	; 0x38
 800afca:	4621      	mov	r1, r4
 800afcc:	eb04 0805 	add.w	r8, r4, r5
 800afd0:	9304      	str	r3, [sp, #16]
 800afd2:	19e5      	adds	r5, r4, r7
 800afd4:	ea4f 130e 	mov.w	r3, lr, lsl #4
 800afd8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800afda:	9316      	str	r3, [sp, #88]	; 0x58
 800afdc:	190b      	adds	r3, r1, r4
 800afde:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800afe0:	9505      	str	r5, [sp, #20]
 800afe2:	9303      	str	r3, [sp, #12]
 800afe4:	f100 0308 	add.w	r3, r0, #8
 800afe8:	9707      	str	r7, [sp, #28]
 800afea:	4638      	mov	r0, r7
 800afec:	930f      	str	r3, [sp, #60]	; 0x3c
 800afee:	2301      	movs	r3, #1
 800aff0:	9306      	str	r3, [sp, #24]
 800aff2:	9b00      	ldr	r3, [sp, #0]
 800aff4:	ed90 fa00 	vldr	s30, [r0]
 800aff8:	edd0 ba01 	vldr	s23, [r0, #4]
 800affc:	9803      	ldr	r0, [sp, #12]
 800affe:	9903      	ldr	r1, [sp, #12]
 800b000:	ed90 ba01 	vldr	s22, [r0, #4]
 800b004:	9804      	ldr	r0, [sp, #16]
 800b006:	edd1 ea00 	vldr	s29, [r1]
 800b00a:	edd0 aa01 	vldr	s21, [r0, #4]
 800b00e:	9805      	ldr	r0, [sp, #20]
 800b010:	9905      	ldr	r1, [sp, #20]
 800b012:	edd0 7a01 	vldr	s15, [r0, #4]
 800b016:	ed91 da00 	vldr	s26, [r1]
 800b01a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b01c:	9c04      	ldr	r4, [sp, #16]
 800b01e:	edcd 7a01 	vstr	s15, [sp, #4]
 800b022:	edd8 7a01 	vldr	s15, [r8, #4]
 800b026:	9100      	str	r1, [sp, #0]
 800b028:	edd2 fa00 	vldr	s31, [r2]
 800b02c:	ed94 ea00 	vldr	s28, [r4]
 800b030:	ed92 ca01 	vldr	s24, [r2, #4]
 800b034:	f8dd e020 	ldr.w	lr, [sp, #32]
 800b038:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b03a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b03c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b03e:	edd9 da00 	vldr	s27, [r9]
 800b042:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b044:	edd8 ca00 	vldr	s25, [r8]
 800b048:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b04a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b04c:	f8dd c018 	ldr.w	ip, [sp, #24]
 800b050:	ed99 aa01 	vldr	s20, [r9, #4]
 800b054:	edcd 7a02 	vstr	s15, [sp, #8]
 800b058:	9800      	ldr	r0, [sp, #0]
 800b05a:	e001      	b.n	800b060 <arm_radix8_butterfly_f32+0x328>
 800b05c:	3f3504f3 	.word	0x3f3504f3
 800b060:	edd5 3a00 	vldr	s7, [r5]
 800b064:	44dc      	add	ip, fp
 800b066:	ed91 7a00 	vldr	s14, [r1]
 800b06a:	edd4 8a00 	vldr	s17, [r4]
 800b06e:	45e2      	cmp	sl, ip
 800b070:	ed57 7a01 	vldr	s15, [r7, #-4]
 800b074:	ed90 5a00 	vldr	s10, [r0]
 800b078:	ed56 5a01 	vldr	s11, [r6, #-4]
 800b07c:	ee38 6aa7 	vadd.f32	s12, s17, s15
 800b080:	ed92 1a00 	vldr	s2, [r2]
 800b084:	ee78 4ae7 	vsub.f32	s9, s17, s15
 800b088:	ed1e 4a01 	vldr	s8, [lr, #-4]
 800b08c:	ee75 9a25 	vadd.f32	s19, s10, s11
 800b090:	ee31 3a07 	vadd.f32	s6, s2, s14
 800b094:	ed92 8a01 	vldr	s16, [r2, #4]
 800b098:	ee73 6a84 	vadd.f32	s13, s7, s8
 800b09c:	ee75 5a65 	vsub.f32	s11, s10, s11
 800b0a0:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800b0a4:	ee73 1a06 	vadd.f32	s3, s6, s12
 800b0a8:	ee39 5aa6 	vadd.f32	s10, s19, s13
 800b0ac:	ee75 7a84 	vadd.f32	s15, s11, s8
 800b0b0:	ee31 1a47 	vsub.f32	s2, s2, s14
 800b0b4:	ee31 7a85 	vadd.f32	s14, s3, s10
 800b0b8:	ee67 7a89 	vmul.f32	s15, s15, s18
 800b0bc:	ee33 3a46 	vsub.f32	s6, s6, s12
 800b0c0:	ed82 7a00 	vstr	s14, [r2]
 800b0c4:	ee79 9ae6 	vsub.f32	s19, s19, s13
 800b0c8:	ed96 6a00 	vldr	s12, [r6]
 800b0cc:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800b0d0:	edd5 3a01 	vldr	s7, [r5, #4]
 800b0d4:	ee74 8ae7 	vsub.f32	s17, s9, s15
 800b0d8:	ed90 7a01 	vldr	s14, [r0, #4]
 800b0dc:	ee35 4ac4 	vsub.f32	s8, s11, s8
 800b0e0:	edde 4a00 	vldr	s9, [lr]
 800b0e4:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800b0e8:	ee77 2a46 	vsub.f32	s5, s14, s12
 800b0ec:	edd1 6a01 	vldr	s13, [r1, #4]
 800b0f0:	ee73 7ae4 	vsub.f32	s15, s7, s9
 800b0f4:	edd7 0a00 	vldr	s1, [r7]
 800b0f8:	ee77 5a06 	vadd.f32	s11, s14, s12
 800b0fc:	ed94 7a01 	vldr	s14, [r4, #4]
 800b100:	ee33 6aa4 	vadd.f32	s12, s7, s9
 800b104:	ee32 0ae7 	vsub.f32	s0, s5, s15
 800b108:	ee78 4a66 	vsub.f32	s9, s16, s13
 800b10c:	ee78 3a26 	vadd.f32	s7, s16, s13
 800b110:	ee72 2aa7 	vadd.f32	s5, s5, s15
 800b114:	ee77 6a20 	vadd.f32	s13, s14, s1
 800b118:	ee24 4a09 	vmul.f32	s8, s8, s18
 800b11c:	ee37 7a60 	vsub.f32	s14, s14, s1
 800b120:	ee20 8a09 	vmul.f32	s16, s0, s18
 800b124:	ee75 0a86 	vadd.f32	s1, s11, s12
 800b128:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800b12c:	ee62 2a89 	vmul.f32	s5, s5, s18
 800b130:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800b134:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800b138:	ee77 7a62 	vsub.f32	s15, s14, s5
 800b13c:	ee74 5a88 	vadd.f32	s11, s9, s16
 800b140:	ee34 8ac8 	vsub.f32	s16, s9, s16
 800b144:	ee77 4a22 	vadd.f32	s9, s14, s5
 800b148:	ee71 2a04 	vadd.f32	s5, s2, s8
 800b14c:	ee31 7a44 	vsub.f32	s14, s2, s8
 800b150:	ee30 1a60 	vsub.f32	s2, s0, s1
 800b154:	ee73 1a06 	vadd.f32	s3, s6, s12
 800b158:	ee33 6a46 	vsub.f32	s12, s6, s12
 800b15c:	ee33 3ae9 	vsub.f32	s6, s7, s19
 800b160:	ee79 6aa3 	vadd.f32	s13, s19, s7
 800b164:	ee38 4a68 	vsub.f32	s8, s16, s17
 800b168:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800b16c:	ee72 5a25 	vadd.f32	s11, s4, s11
 800b170:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800b174:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800b178:	ee77 2a27 	vadd.f32	s5, s14, s15
 800b17c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b180:	ee78 7a88 	vadd.f32	s15, s17, s16
 800b184:	ee6e 8a05 	vmul.f32	s17, s28, s10
 800b188:	ee2a 8a81 	vmul.f32	s16, s21, s2
 800b18c:	ee2a 5a85 	vmul.f32	s10, s21, s10
 800b190:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800b194:	ee6f 9a21 	vmul.f32	s19, s30, s3
 800b198:	ee70 0a20 	vadd.f32	s1, s0, s1
 800b19c:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 800b1a0:	ee2b 0a83 	vmul.f32	s0, s23, s6
 800b1a4:	ee2f 3a03 	vmul.f32	s6, s30, s6
 800b1a8:	edc2 0a01 	vstr	s1, [r2, #4]
 800b1ac:	ee38 8a88 	vadd.f32	s16, s17, s16
 800b1b0:	441a      	add	r2, r3
 800b1b2:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800b1b6:	ee31 5a45 	vsub.f32	s10, s2, s10
 800b1ba:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 800b1be:	ed81 8a00 	vstr	s16, [r1]
 800b1c2:	ee39 0a80 	vadd.f32	s0, s19, s0
 800b1c6:	ee33 3a61 	vsub.f32	s6, s6, s3
 800b1ca:	ed81 5a01 	vstr	s10, [r1, #4]
 800b1ce:	ee6f 0a82 	vmul.f32	s1, s31, s4
 800b1d2:	edcd 3a00 	vstr	s7, [sp]
 800b1d6:	ed9d 5a02 	vldr	s10, [sp, #8]
 800b1da:	ee2d 8a06 	vmul.f32	s16, s26, s12
 800b1de:	eddd 3a01 	vldr	s7, [sp, #4]
 800b1e2:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800b1e6:	ed84 0a00 	vstr	s0, [r4]
 800b1ea:	ee65 4a24 	vmul.f32	s9, s10, s9
 800b1ee:	ed84 3a01 	vstr	s6, [r4, #4]
 800b1f2:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800b1f6:	ee23 6a86 	vmul.f32	s12, s7, s12
 800b1fa:	eddd 3a00 	vldr	s7, [sp]
 800b1fe:	ee25 5a25 	vmul.f32	s10, s10, s11
 800b202:	4419      	add	r1, r3
 800b204:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 800b208:	441c      	add	r4, r3
 800b20a:	ee6a 1a04 	vmul.f32	s3, s20, s8
 800b20e:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800b212:	ee2e 3a87 	vmul.f32	s6, s29, s14
 800b216:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800b21a:	ee2c 2a02 	vmul.f32	s4, s24, s4
 800b21e:	ee6d 6a26 	vmul.f32	s13, s26, s13
 800b222:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 800b226:	ee6a 2a22 	vmul.f32	s5, s20, s5
 800b22a:	ee2d 4a84 	vmul.f32	s8, s27, s8
 800b22e:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800b232:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 800b236:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800b23a:	ee38 8a01 	vadd.f32	s16, s16, s2
 800b23e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800b242:	ee39 5a85 	vadd.f32	s10, s19, s10
 800b246:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800b24a:	ed07 8a01 	vstr	s16, [r7, #-4]
 800b24e:	ee30 0a21 	vadd.f32	s0, s0, s3
 800b252:	ed87 6a00 	vstr	s12, [r7]
 800b256:	ee74 2a62 	vsub.f32	s5, s8, s5
 800b25a:	edc0 0a00 	vstr	s1, [r0]
 800b25e:	ee33 3a28 	vadd.f32	s6, s6, s17
 800b262:	edc0 3a01 	vstr	s7, [r0, #4]
 800b266:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b26a:	ed0e 5a01 	vstr	s10, [lr, #-4]
 800b26e:	edce 4a00 	vstr	s9, [lr]
 800b272:	4418      	add	r0, r3
 800b274:	ed06 0a01 	vstr	s0, [r6, #-4]
 800b278:	441f      	add	r7, r3
 800b27a:	edc6 2a00 	vstr	s5, [r6]
 800b27e:	449e      	add	lr, r3
 800b280:	ed85 3a00 	vstr	s6, [r5]
 800b284:	441e      	add	r6, r3
 800b286:	ed85 7a01 	vstr	s14, [r5, #4]
 800b28a:	441d      	add	r5, r3
 800b28c:	f63f aee8 	bhi.w	800b060 <arm_radix8_butterfly_f32+0x328>
 800b290:	9a06      	ldr	r2, [sp, #24]
 800b292:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b294:	3201      	adds	r2, #1
 800b296:	4611      	mov	r1, r2
 800b298:	9206      	str	r2, [sp, #24]
 800b29a:	9a07      	ldr	r2, [sp, #28]
 800b29c:	4402      	add	r2, r0
 800b29e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800b2a0:	9207      	str	r2, [sp, #28]
 800b2a2:	9a03      	ldr	r2, [sp, #12]
 800b2a4:	4402      	add	r2, r0
 800b2a6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b2a8:	9203      	str	r2, [sp, #12]
 800b2aa:	9a04      	ldr	r2, [sp, #16]
 800b2ac:	4402      	add	r2, r0
 800b2ae:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b2b0:	9204      	str	r2, [sp, #16]
 800b2b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b2b4:	4491      	add	r9, r2
 800b2b6:	9a05      	ldr	r2, [sp, #20]
 800b2b8:	4402      	add	r2, r0
 800b2ba:	9205      	str	r2, [sp, #20]
 800b2bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b2be:	4490      	add	r8, r2
 800b2c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b2c2:	3208      	adds	r2, #8
 800b2c4:	920f      	str	r2, [sp, #60]	; 0x3c
 800b2c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b2c8:	3208      	adds	r2, #8
 800b2ca:	920e      	str	r2, [sp, #56]	; 0x38
 800b2cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2ce:	3208      	adds	r2, #8
 800b2d0:	920d      	str	r2, [sp, #52]	; 0x34
 800b2d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b2d4:	3208      	adds	r2, #8
 800b2d6:	920c      	str	r2, [sp, #48]	; 0x30
 800b2d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b2da:	3208      	adds	r2, #8
 800b2dc:	920b      	str	r2, [sp, #44]	; 0x2c
 800b2de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2e0:	3208      	adds	r2, #8
 800b2e2:	920a      	str	r2, [sp, #40]	; 0x28
 800b2e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2e6:	3208      	adds	r2, #8
 800b2e8:	9209      	str	r2, [sp, #36]	; 0x24
 800b2ea:	9a08      	ldr	r2, [sp, #32]
 800b2ec:	3208      	adds	r2, #8
 800b2ee:	9208      	str	r2, [sp, #32]
 800b2f0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800b2f2:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b2f4:	4622      	mov	r2, r4
 800b2f6:	4288      	cmp	r0, r1
 800b2f8:	d005      	beq.n	800b306 <arm_radix8_butterfly_f32+0x5ce>
 800b2fa:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b2fc:	4621      	mov	r1, r4
 800b2fe:	4401      	add	r1, r0
 800b300:	9807      	ldr	r0, [sp, #28]
 800b302:	9110      	str	r1, [sp, #64]	; 0x40
 800b304:	e676      	b.n	800aff4 <arm_radix8_butterfly_f32+0x2bc>
 800b306:	4683      	mov	fp, r0
 800b308:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 800b30c:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 800b310:	e522      	b.n	800ad58 <arm_radix8_butterfly_f32+0x20>
 800b312:	b01d      	add	sp, #116	; 0x74
 800b314:	ecbd 8b10 	vpop	{d8-d15}
 800b318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b31c <__errno>:
 800b31c:	4b01      	ldr	r3, [pc, #4]	; (800b324 <__errno+0x8>)
 800b31e:	6818      	ldr	r0, [r3, #0]
 800b320:	4770      	bx	lr
 800b322:	bf00      	nop
 800b324:	24000208 	.word	0x24000208

0800b328 <__libc_init_array>:
 800b328:	b570      	push	{r4, r5, r6, lr}
 800b32a:	4e0d      	ldr	r6, [pc, #52]	; (800b360 <__libc_init_array+0x38>)
 800b32c:	4c0d      	ldr	r4, [pc, #52]	; (800b364 <__libc_init_array+0x3c>)
 800b32e:	1ba4      	subs	r4, r4, r6
 800b330:	10a4      	asrs	r4, r4, #2
 800b332:	2500      	movs	r5, #0
 800b334:	42a5      	cmp	r5, r4
 800b336:	d109      	bne.n	800b34c <__libc_init_array+0x24>
 800b338:	4e0b      	ldr	r6, [pc, #44]	; (800b368 <__libc_init_array+0x40>)
 800b33a:	4c0c      	ldr	r4, [pc, #48]	; (800b36c <__libc_init_array+0x44>)
 800b33c:	f003 fd5e 	bl	800edfc <_init>
 800b340:	1ba4      	subs	r4, r4, r6
 800b342:	10a4      	asrs	r4, r4, #2
 800b344:	2500      	movs	r5, #0
 800b346:	42a5      	cmp	r5, r4
 800b348:	d105      	bne.n	800b356 <__libc_init_array+0x2e>
 800b34a:	bd70      	pop	{r4, r5, r6, pc}
 800b34c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b350:	4798      	blx	r3
 800b352:	3501      	adds	r5, #1
 800b354:	e7ee      	b.n	800b334 <__libc_init_array+0xc>
 800b356:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b35a:	4798      	blx	r3
 800b35c:	3501      	adds	r5, #1
 800b35e:	e7f2      	b.n	800b346 <__libc_init_array+0x1e>
 800b360:	0801e218 	.word	0x0801e218
 800b364:	0801e218 	.word	0x0801e218
 800b368:	0801e218 	.word	0x0801e218
 800b36c:	0801e21c 	.word	0x0801e21c

0800b370 <memset>:
 800b370:	4402      	add	r2, r0
 800b372:	4603      	mov	r3, r0
 800b374:	4293      	cmp	r3, r2
 800b376:	d100      	bne.n	800b37a <memset+0xa>
 800b378:	4770      	bx	lr
 800b37a:	f803 1b01 	strb.w	r1, [r3], #1
 800b37e:	e7f9      	b.n	800b374 <memset+0x4>

0800b380 <__cvt>:
 800b380:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b382:	ed2d 8b02 	vpush	{d8}
 800b386:	eeb0 8b40 	vmov.f64	d8, d0
 800b38a:	b085      	sub	sp, #20
 800b38c:	4617      	mov	r7, r2
 800b38e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b390:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b392:	ee18 2a90 	vmov	r2, s17
 800b396:	f025 0520 	bic.w	r5, r5, #32
 800b39a:	2a00      	cmp	r2, #0
 800b39c:	bfb6      	itet	lt
 800b39e:	222d      	movlt	r2, #45	; 0x2d
 800b3a0:	2200      	movge	r2, #0
 800b3a2:	eeb1 8b40 	vneglt.f64	d8, d0
 800b3a6:	2d46      	cmp	r5, #70	; 0x46
 800b3a8:	460c      	mov	r4, r1
 800b3aa:	701a      	strb	r2, [r3, #0]
 800b3ac:	d004      	beq.n	800b3b8 <__cvt+0x38>
 800b3ae:	2d45      	cmp	r5, #69	; 0x45
 800b3b0:	d100      	bne.n	800b3b4 <__cvt+0x34>
 800b3b2:	3401      	adds	r4, #1
 800b3b4:	2102      	movs	r1, #2
 800b3b6:	e000      	b.n	800b3ba <__cvt+0x3a>
 800b3b8:	2103      	movs	r1, #3
 800b3ba:	ab03      	add	r3, sp, #12
 800b3bc:	9301      	str	r3, [sp, #4]
 800b3be:	ab02      	add	r3, sp, #8
 800b3c0:	9300      	str	r3, [sp, #0]
 800b3c2:	4622      	mov	r2, r4
 800b3c4:	4633      	mov	r3, r6
 800b3c6:	eeb0 0b48 	vmov.f64	d0, d8
 800b3ca:	f000 fcc9 	bl	800bd60 <_dtoa_r>
 800b3ce:	2d47      	cmp	r5, #71	; 0x47
 800b3d0:	d101      	bne.n	800b3d6 <__cvt+0x56>
 800b3d2:	07fb      	lsls	r3, r7, #31
 800b3d4:	d51e      	bpl.n	800b414 <__cvt+0x94>
 800b3d6:	2d46      	cmp	r5, #70	; 0x46
 800b3d8:	eb00 0304 	add.w	r3, r0, r4
 800b3dc:	d10c      	bne.n	800b3f8 <__cvt+0x78>
 800b3de:	7802      	ldrb	r2, [r0, #0]
 800b3e0:	2a30      	cmp	r2, #48	; 0x30
 800b3e2:	d107      	bne.n	800b3f4 <__cvt+0x74>
 800b3e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b3e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3ec:	bf1c      	itt	ne
 800b3ee:	f1c4 0401 	rsbne	r4, r4, #1
 800b3f2:	6034      	strne	r4, [r6, #0]
 800b3f4:	6832      	ldr	r2, [r6, #0]
 800b3f6:	4413      	add	r3, r2
 800b3f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b400:	d007      	beq.n	800b412 <__cvt+0x92>
 800b402:	2130      	movs	r1, #48	; 0x30
 800b404:	9a03      	ldr	r2, [sp, #12]
 800b406:	429a      	cmp	r2, r3
 800b408:	d204      	bcs.n	800b414 <__cvt+0x94>
 800b40a:	1c54      	adds	r4, r2, #1
 800b40c:	9403      	str	r4, [sp, #12]
 800b40e:	7011      	strb	r1, [r2, #0]
 800b410:	e7f8      	b.n	800b404 <__cvt+0x84>
 800b412:	9303      	str	r3, [sp, #12]
 800b414:	9b03      	ldr	r3, [sp, #12]
 800b416:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b418:	1a1b      	subs	r3, r3, r0
 800b41a:	6013      	str	r3, [r2, #0]
 800b41c:	b005      	add	sp, #20
 800b41e:	ecbd 8b02 	vpop	{d8}
 800b422:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b424 <__exponent>:
 800b424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b426:	2900      	cmp	r1, #0
 800b428:	4604      	mov	r4, r0
 800b42a:	bfba      	itte	lt
 800b42c:	4249      	neglt	r1, r1
 800b42e:	232d      	movlt	r3, #45	; 0x2d
 800b430:	232b      	movge	r3, #43	; 0x2b
 800b432:	2909      	cmp	r1, #9
 800b434:	f804 2b02 	strb.w	r2, [r4], #2
 800b438:	7043      	strb	r3, [r0, #1]
 800b43a:	dd20      	ble.n	800b47e <__exponent+0x5a>
 800b43c:	f10d 0307 	add.w	r3, sp, #7
 800b440:	461f      	mov	r7, r3
 800b442:	260a      	movs	r6, #10
 800b444:	fb91 f5f6 	sdiv	r5, r1, r6
 800b448:	fb06 1115 	mls	r1, r6, r5, r1
 800b44c:	3130      	adds	r1, #48	; 0x30
 800b44e:	2d09      	cmp	r5, #9
 800b450:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b454:	f103 32ff 	add.w	r2, r3, #4294967295
 800b458:	4629      	mov	r1, r5
 800b45a:	dc09      	bgt.n	800b470 <__exponent+0x4c>
 800b45c:	3130      	adds	r1, #48	; 0x30
 800b45e:	3b02      	subs	r3, #2
 800b460:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b464:	42bb      	cmp	r3, r7
 800b466:	4622      	mov	r2, r4
 800b468:	d304      	bcc.n	800b474 <__exponent+0x50>
 800b46a:	1a10      	subs	r0, r2, r0
 800b46c:	b003      	add	sp, #12
 800b46e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b470:	4613      	mov	r3, r2
 800b472:	e7e7      	b.n	800b444 <__exponent+0x20>
 800b474:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b478:	f804 2b01 	strb.w	r2, [r4], #1
 800b47c:	e7f2      	b.n	800b464 <__exponent+0x40>
 800b47e:	2330      	movs	r3, #48	; 0x30
 800b480:	4419      	add	r1, r3
 800b482:	7083      	strb	r3, [r0, #2]
 800b484:	1d02      	adds	r2, r0, #4
 800b486:	70c1      	strb	r1, [r0, #3]
 800b488:	e7ef      	b.n	800b46a <__exponent+0x46>
 800b48a:	0000      	movs	r0, r0
 800b48c:	0000      	movs	r0, r0
	...

0800b490 <_printf_float>:
 800b490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b494:	b08d      	sub	sp, #52	; 0x34
 800b496:	460c      	mov	r4, r1
 800b498:	4616      	mov	r6, r2
 800b49a:	461f      	mov	r7, r3
 800b49c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b4a0:	4605      	mov	r5, r0
 800b4a2:	f001 f9a9 	bl	800c7f8 <_localeconv_r>
 800b4a6:	f8d0 b000 	ldr.w	fp, [r0]
 800b4aa:	4658      	mov	r0, fp
 800b4ac:	f7f4 ff78 	bl	80003a0 <strlen>
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	930a      	str	r3, [sp, #40]	; 0x28
 800b4b4:	f8d8 3000 	ldr.w	r3, [r8]
 800b4b8:	9005      	str	r0, [sp, #20]
 800b4ba:	3307      	adds	r3, #7
 800b4bc:	f023 0307 	bic.w	r3, r3, #7
 800b4c0:	f103 0108 	add.w	r1, r3, #8
 800b4c4:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b4c8:	6822      	ldr	r2, [r4, #0]
 800b4ca:	f8c8 1000 	str.w	r1, [r8]
 800b4ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b4d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800b4d6:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800b760 <_printf_float+0x2d0>
 800b4da:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800b4de:	eeb0 6bc0 	vabs.f64	d6, d0
 800b4e2:	eeb4 6b47 	vcmp.f64	d6, d7
 800b4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ea:	dd24      	ble.n	800b536 <_printf_float+0xa6>
 800b4ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b4f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4f4:	d502      	bpl.n	800b4fc <_printf_float+0x6c>
 800b4f6:	232d      	movs	r3, #45	; 0x2d
 800b4f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4fc:	499a      	ldr	r1, [pc, #616]	; (800b768 <_printf_float+0x2d8>)
 800b4fe:	4b9b      	ldr	r3, [pc, #620]	; (800b76c <_printf_float+0x2dc>)
 800b500:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b504:	bf8c      	ite	hi
 800b506:	4688      	movhi	r8, r1
 800b508:	4698      	movls	r8, r3
 800b50a:	f022 0204 	bic.w	r2, r2, #4
 800b50e:	2303      	movs	r3, #3
 800b510:	6123      	str	r3, [r4, #16]
 800b512:	6022      	str	r2, [r4, #0]
 800b514:	f04f 0a00 	mov.w	sl, #0
 800b518:	9700      	str	r7, [sp, #0]
 800b51a:	4633      	mov	r3, r6
 800b51c:	aa0b      	add	r2, sp, #44	; 0x2c
 800b51e:	4621      	mov	r1, r4
 800b520:	4628      	mov	r0, r5
 800b522:	f000 f9e1 	bl	800b8e8 <_printf_common>
 800b526:	3001      	adds	r0, #1
 800b528:	f040 8089 	bne.w	800b63e <_printf_float+0x1ae>
 800b52c:	f04f 30ff 	mov.w	r0, #4294967295
 800b530:	b00d      	add	sp, #52	; 0x34
 800b532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b536:	eeb4 0b40 	vcmp.f64	d0, d0
 800b53a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b53e:	d702      	bvc.n	800b546 <_printf_float+0xb6>
 800b540:	498b      	ldr	r1, [pc, #556]	; (800b770 <_printf_float+0x2e0>)
 800b542:	4b8c      	ldr	r3, [pc, #560]	; (800b774 <_printf_float+0x2e4>)
 800b544:	e7dc      	b.n	800b500 <_printf_float+0x70>
 800b546:	6861      	ldr	r1, [r4, #4]
 800b548:	1c4b      	adds	r3, r1, #1
 800b54a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b54e:	ab0a      	add	r3, sp, #40	; 0x28
 800b550:	a809      	add	r0, sp, #36	; 0x24
 800b552:	d13b      	bne.n	800b5cc <_printf_float+0x13c>
 800b554:	2106      	movs	r1, #6
 800b556:	6061      	str	r1, [r4, #4]
 800b558:	f04f 0c00 	mov.w	ip, #0
 800b55c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800b560:	e9cd 0900 	strd	r0, r9, [sp]
 800b564:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b568:	6022      	str	r2, [r4, #0]
 800b56a:	6861      	ldr	r1, [r4, #4]
 800b56c:	4628      	mov	r0, r5
 800b56e:	f7ff ff07 	bl	800b380 <__cvt>
 800b572:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800b576:	2b47      	cmp	r3, #71	; 0x47
 800b578:	4680      	mov	r8, r0
 800b57a:	d109      	bne.n	800b590 <_printf_float+0x100>
 800b57c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b57e:	1cd8      	adds	r0, r3, #3
 800b580:	db02      	blt.n	800b588 <_printf_float+0xf8>
 800b582:	6862      	ldr	r2, [r4, #4]
 800b584:	4293      	cmp	r3, r2
 800b586:	dd47      	ble.n	800b618 <_printf_float+0x188>
 800b588:	f1a9 0902 	sub.w	r9, r9, #2
 800b58c:	fa5f f989 	uxtb.w	r9, r9
 800b590:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b594:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b596:	d824      	bhi.n	800b5e2 <_printf_float+0x152>
 800b598:	3901      	subs	r1, #1
 800b59a:	464a      	mov	r2, r9
 800b59c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b5a0:	9109      	str	r1, [sp, #36]	; 0x24
 800b5a2:	f7ff ff3f 	bl	800b424 <__exponent>
 800b5a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5a8:	1813      	adds	r3, r2, r0
 800b5aa:	2a01      	cmp	r2, #1
 800b5ac:	4682      	mov	sl, r0
 800b5ae:	6123      	str	r3, [r4, #16]
 800b5b0:	dc02      	bgt.n	800b5b8 <_printf_float+0x128>
 800b5b2:	6822      	ldr	r2, [r4, #0]
 800b5b4:	07d1      	lsls	r1, r2, #31
 800b5b6:	d501      	bpl.n	800b5bc <_printf_float+0x12c>
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	6123      	str	r3, [r4, #16]
 800b5bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d0a9      	beq.n	800b518 <_printf_float+0x88>
 800b5c4:	232d      	movs	r3, #45	; 0x2d
 800b5c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5ca:	e7a5      	b.n	800b518 <_printf_float+0x88>
 800b5cc:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800b5d0:	f000 8178 	beq.w	800b8c4 <_printf_float+0x434>
 800b5d4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b5d8:	d1be      	bne.n	800b558 <_printf_float+0xc8>
 800b5da:	2900      	cmp	r1, #0
 800b5dc:	d1bc      	bne.n	800b558 <_printf_float+0xc8>
 800b5de:	2101      	movs	r1, #1
 800b5e0:	e7b9      	b.n	800b556 <_printf_float+0xc6>
 800b5e2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b5e6:	d119      	bne.n	800b61c <_printf_float+0x18c>
 800b5e8:	2900      	cmp	r1, #0
 800b5ea:	6863      	ldr	r3, [r4, #4]
 800b5ec:	dd0c      	ble.n	800b608 <_printf_float+0x178>
 800b5ee:	6121      	str	r1, [r4, #16]
 800b5f0:	b913      	cbnz	r3, 800b5f8 <_printf_float+0x168>
 800b5f2:	6822      	ldr	r2, [r4, #0]
 800b5f4:	07d2      	lsls	r2, r2, #31
 800b5f6:	d502      	bpl.n	800b5fe <_printf_float+0x16e>
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	440b      	add	r3, r1
 800b5fc:	6123      	str	r3, [r4, #16]
 800b5fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b600:	65a3      	str	r3, [r4, #88]	; 0x58
 800b602:	f04f 0a00 	mov.w	sl, #0
 800b606:	e7d9      	b.n	800b5bc <_printf_float+0x12c>
 800b608:	b913      	cbnz	r3, 800b610 <_printf_float+0x180>
 800b60a:	6822      	ldr	r2, [r4, #0]
 800b60c:	07d0      	lsls	r0, r2, #31
 800b60e:	d501      	bpl.n	800b614 <_printf_float+0x184>
 800b610:	3302      	adds	r3, #2
 800b612:	e7f3      	b.n	800b5fc <_printf_float+0x16c>
 800b614:	2301      	movs	r3, #1
 800b616:	e7f1      	b.n	800b5fc <_printf_float+0x16c>
 800b618:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b61c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b620:	4293      	cmp	r3, r2
 800b622:	db05      	blt.n	800b630 <_printf_float+0x1a0>
 800b624:	6822      	ldr	r2, [r4, #0]
 800b626:	6123      	str	r3, [r4, #16]
 800b628:	07d1      	lsls	r1, r2, #31
 800b62a:	d5e8      	bpl.n	800b5fe <_printf_float+0x16e>
 800b62c:	3301      	adds	r3, #1
 800b62e:	e7e5      	b.n	800b5fc <_printf_float+0x16c>
 800b630:	2b00      	cmp	r3, #0
 800b632:	bfd4      	ite	le
 800b634:	f1c3 0302 	rsble	r3, r3, #2
 800b638:	2301      	movgt	r3, #1
 800b63a:	4413      	add	r3, r2
 800b63c:	e7de      	b.n	800b5fc <_printf_float+0x16c>
 800b63e:	6823      	ldr	r3, [r4, #0]
 800b640:	055a      	lsls	r2, r3, #21
 800b642:	d407      	bmi.n	800b654 <_printf_float+0x1c4>
 800b644:	6923      	ldr	r3, [r4, #16]
 800b646:	4642      	mov	r2, r8
 800b648:	4631      	mov	r1, r6
 800b64a:	4628      	mov	r0, r5
 800b64c:	47b8      	blx	r7
 800b64e:	3001      	adds	r0, #1
 800b650:	d12a      	bne.n	800b6a8 <_printf_float+0x218>
 800b652:	e76b      	b.n	800b52c <_printf_float+0x9c>
 800b654:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b658:	f240 80de 	bls.w	800b818 <_printf_float+0x388>
 800b65c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b660:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b668:	d133      	bne.n	800b6d2 <_printf_float+0x242>
 800b66a:	2301      	movs	r3, #1
 800b66c:	4a42      	ldr	r2, [pc, #264]	; (800b778 <_printf_float+0x2e8>)
 800b66e:	4631      	mov	r1, r6
 800b670:	4628      	mov	r0, r5
 800b672:	47b8      	blx	r7
 800b674:	3001      	adds	r0, #1
 800b676:	f43f af59 	beq.w	800b52c <_printf_float+0x9c>
 800b67a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b67e:	429a      	cmp	r2, r3
 800b680:	db02      	blt.n	800b688 <_printf_float+0x1f8>
 800b682:	6823      	ldr	r3, [r4, #0]
 800b684:	07d8      	lsls	r0, r3, #31
 800b686:	d50f      	bpl.n	800b6a8 <_printf_float+0x218>
 800b688:	9b05      	ldr	r3, [sp, #20]
 800b68a:	465a      	mov	r2, fp
 800b68c:	4631      	mov	r1, r6
 800b68e:	4628      	mov	r0, r5
 800b690:	47b8      	blx	r7
 800b692:	3001      	adds	r0, #1
 800b694:	f43f af4a 	beq.w	800b52c <_printf_float+0x9c>
 800b698:	f04f 0800 	mov.w	r8, #0
 800b69c:	f104 091a 	add.w	r9, r4, #26
 800b6a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6a2:	3b01      	subs	r3, #1
 800b6a4:	4543      	cmp	r3, r8
 800b6a6:	dc09      	bgt.n	800b6bc <_printf_float+0x22c>
 800b6a8:	6823      	ldr	r3, [r4, #0]
 800b6aa:	079b      	lsls	r3, r3, #30
 800b6ac:	f100 8105 	bmi.w	800b8ba <_printf_float+0x42a>
 800b6b0:	68e0      	ldr	r0, [r4, #12]
 800b6b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6b4:	4298      	cmp	r0, r3
 800b6b6:	bfb8      	it	lt
 800b6b8:	4618      	movlt	r0, r3
 800b6ba:	e739      	b.n	800b530 <_printf_float+0xa0>
 800b6bc:	2301      	movs	r3, #1
 800b6be:	464a      	mov	r2, r9
 800b6c0:	4631      	mov	r1, r6
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	47b8      	blx	r7
 800b6c6:	3001      	adds	r0, #1
 800b6c8:	f43f af30 	beq.w	800b52c <_printf_float+0x9c>
 800b6cc:	f108 0801 	add.w	r8, r8, #1
 800b6d0:	e7e6      	b.n	800b6a0 <_printf_float+0x210>
 800b6d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	dc2b      	bgt.n	800b730 <_printf_float+0x2a0>
 800b6d8:	2301      	movs	r3, #1
 800b6da:	4a27      	ldr	r2, [pc, #156]	; (800b778 <_printf_float+0x2e8>)
 800b6dc:	4631      	mov	r1, r6
 800b6de:	4628      	mov	r0, r5
 800b6e0:	47b8      	blx	r7
 800b6e2:	3001      	adds	r0, #1
 800b6e4:	f43f af22 	beq.w	800b52c <_printf_float+0x9c>
 800b6e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6ea:	b923      	cbnz	r3, 800b6f6 <_printf_float+0x266>
 800b6ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6ee:	b913      	cbnz	r3, 800b6f6 <_printf_float+0x266>
 800b6f0:	6823      	ldr	r3, [r4, #0]
 800b6f2:	07d9      	lsls	r1, r3, #31
 800b6f4:	d5d8      	bpl.n	800b6a8 <_printf_float+0x218>
 800b6f6:	9b05      	ldr	r3, [sp, #20]
 800b6f8:	465a      	mov	r2, fp
 800b6fa:	4631      	mov	r1, r6
 800b6fc:	4628      	mov	r0, r5
 800b6fe:	47b8      	blx	r7
 800b700:	3001      	adds	r0, #1
 800b702:	f43f af13 	beq.w	800b52c <_printf_float+0x9c>
 800b706:	f04f 0900 	mov.w	r9, #0
 800b70a:	f104 0a1a 	add.w	sl, r4, #26
 800b70e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b710:	425b      	negs	r3, r3
 800b712:	454b      	cmp	r3, r9
 800b714:	dc01      	bgt.n	800b71a <_printf_float+0x28a>
 800b716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b718:	e795      	b.n	800b646 <_printf_float+0x1b6>
 800b71a:	2301      	movs	r3, #1
 800b71c:	4652      	mov	r2, sl
 800b71e:	4631      	mov	r1, r6
 800b720:	4628      	mov	r0, r5
 800b722:	47b8      	blx	r7
 800b724:	3001      	adds	r0, #1
 800b726:	f43f af01 	beq.w	800b52c <_printf_float+0x9c>
 800b72a:	f109 0901 	add.w	r9, r9, #1
 800b72e:	e7ee      	b.n	800b70e <_printf_float+0x27e>
 800b730:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b732:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b734:	429a      	cmp	r2, r3
 800b736:	bfa8      	it	ge
 800b738:	461a      	movge	r2, r3
 800b73a:	2a00      	cmp	r2, #0
 800b73c:	4691      	mov	r9, r2
 800b73e:	dd07      	ble.n	800b750 <_printf_float+0x2c0>
 800b740:	4613      	mov	r3, r2
 800b742:	4631      	mov	r1, r6
 800b744:	4642      	mov	r2, r8
 800b746:	4628      	mov	r0, r5
 800b748:	47b8      	blx	r7
 800b74a:	3001      	adds	r0, #1
 800b74c:	f43f aeee 	beq.w	800b52c <_printf_float+0x9c>
 800b750:	f104 031a 	add.w	r3, r4, #26
 800b754:	f04f 0a00 	mov.w	sl, #0
 800b758:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b75c:	9307      	str	r3, [sp, #28]
 800b75e:	e017      	b.n	800b790 <_printf_float+0x300>
 800b760:	ffffffff 	.word	0xffffffff
 800b764:	7fefffff 	.word	0x7fefffff
 800b768:	0801dd90 	.word	0x0801dd90
 800b76c:	0801dd8c 	.word	0x0801dd8c
 800b770:	0801dd98 	.word	0x0801dd98
 800b774:	0801dd94 	.word	0x0801dd94
 800b778:	0801dfec 	.word	0x0801dfec
 800b77c:	2301      	movs	r3, #1
 800b77e:	9a07      	ldr	r2, [sp, #28]
 800b780:	4631      	mov	r1, r6
 800b782:	4628      	mov	r0, r5
 800b784:	47b8      	blx	r7
 800b786:	3001      	adds	r0, #1
 800b788:	f43f aed0 	beq.w	800b52c <_printf_float+0x9c>
 800b78c:	f10a 0a01 	add.w	sl, sl, #1
 800b790:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b792:	9306      	str	r3, [sp, #24]
 800b794:	eba3 0309 	sub.w	r3, r3, r9
 800b798:	4553      	cmp	r3, sl
 800b79a:	dcef      	bgt.n	800b77c <_printf_float+0x2ec>
 800b79c:	9b06      	ldr	r3, [sp, #24]
 800b79e:	4498      	add	r8, r3
 800b7a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	db15      	blt.n	800b7d4 <_printf_float+0x344>
 800b7a8:	6823      	ldr	r3, [r4, #0]
 800b7aa:	07da      	lsls	r2, r3, #31
 800b7ac:	d412      	bmi.n	800b7d4 <_printf_float+0x344>
 800b7ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7b0:	9a06      	ldr	r2, [sp, #24]
 800b7b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7b4:	1a9a      	subs	r2, r3, r2
 800b7b6:	eba3 0a01 	sub.w	sl, r3, r1
 800b7ba:	4592      	cmp	sl, r2
 800b7bc:	bfa8      	it	ge
 800b7be:	4692      	movge	sl, r2
 800b7c0:	f1ba 0f00 	cmp.w	sl, #0
 800b7c4:	dc0e      	bgt.n	800b7e4 <_printf_float+0x354>
 800b7c6:	f04f 0800 	mov.w	r8, #0
 800b7ca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b7ce:	f104 091a 	add.w	r9, r4, #26
 800b7d2:	e019      	b.n	800b808 <_printf_float+0x378>
 800b7d4:	9b05      	ldr	r3, [sp, #20]
 800b7d6:	465a      	mov	r2, fp
 800b7d8:	4631      	mov	r1, r6
 800b7da:	4628      	mov	r0, r5
 800b7dc:	47b8      	blx	r7
 800b7de:	3001      	adds	r0, #1
 800b7e0:	d1e5      	bne.n	800b7ae <_printf_float+0x31e>
 800b7e2:	e6a3      	b.n	800b52c <_printf_float+0x9c>
 800b7e4:	4653      	mov	r3, sl
 800b7e6:	4642      	mov	r2, r8
 800b7e8:	4631      	mov	r1, r6
 800b7ea:	4628      	mov	r0, r5
 800b7ec:	47b8      	blx	r7
 800b7ee:	3001      	adds	r0, #1
 800b7f0:	d1e9      	bne.n	800b7c6 <_printf_float+0x336>
 800b7f2:	e69b      	b.n	800b52c <_printf_float+0x9c>
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	464a      	mov	r2, r9
 800b7f8:	4631      	mov	r1, r6
 800b7fa:	4628      	mov	r0, r5
 800b7fc:	47b8      	blx	r7
 800b7fe:	3001      	adds	r0, #1
 800b800:	f43f ae94 	beq.w	800b52c <_printf_float+0x9c>
 800b804:	f108 0801 	add.w	r8, r8, #1
 800b808:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b80c:	1a9b      	subs	r3, r3, r2
 800b80e:	eba3 030a 	sub.w	r3, r3, sl
 800b812:	4543      	cmp	r3, r8
 800b814:	dcee      	bgt.n	800b7f4 <_printf_float+0x364>
 800b816:	e747      	b.n	800b6a8 <_printf_float+0x218>
 800b818:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b81a:	2a01      	cmp	r2, #1
 800b81c:	dc01      	bgt.n	800b822 <_printf_float+0x392>
 800b81e:	07db      	lsls	r3, r3, #31
 800b820:	d539      	bpl.n	800b896 <_printf_float+0x406>
 800b822:	2301      	movs	r3, #1
 800b824:	4642      	mov	r2, r8
 800b826:	4631      	mov	r1, r6
 800b828:	4628      	mov	r0, r5
 800b82a:	47b8      	blx	r7
 800b82c:	3001      	adds	r0, #1
 800b82e:	f43f ae7d 	beq.w	800b52c <_printf_float+0x9c>
 800b832:	9b05      	ldr	r3, [sp, #20]
 800b834:	465a      	mov	r2, fp
 800b836:	4631      	mov	r1, r6
 800b838:	4628      	mov	r0, r5
 800b83a:	47b8      	blx	r7
 800b83c:	3001      	adds	r0, #1
 800b83e:	f108 0801 	add.w	r8, r8, #1
 800b842:	f43f ae73 	beq.w	800b52c <_printf_float+0x9c>
 800b846:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b84a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b84c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b854:	f103 33ff 	add.w	r3, r3, #4294967295
 800b858:	d018      	beq.n	800b88c <_printf_float+0x3fc>
 800b85a:	4642      	mov	r2, r8
 800b85c:	4631      	mov	r1, r6
 800b85e:	4628      	mov	r0, r5
 800b860:	47b8      	blx	r7
 800b862:	3001      	adds	r0, #1
 800b864:	d10e      	bne.n	800b884 <_printf_float+0x3f4>
 800b866:	e661      	b.n	800b52c <_printf_float+0x9c>
 800b868:	2301      	movs	r3, #1
 800b86a:	464a      	mov	r2, r9
 800b86c:	4631      	mov	r1, r6
 800b86e:	4628      	mov	r0, r5
 800b870:	47b8      	blx	r7
 800b872:	3001      	adds	r0, #1
 800b874:	f43f ae5a 	beq.w	800b52c <_printf_float+0x9c>
 800b878:	f108 0801 	add.w	r8, r8, #1
 800b87c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b87e:	3b01      	subs	r3, #1
 800b880:	4543      	cmp	r3, r8
 800b882:	dcf1      	bgt.n	800b868 <_printf_float+0x3d8>
 800b884:	4653      	mov	r3, sl
 800b886:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b88a:	e6dd      	b.n	800b648 <_printf_float+0x1b8>
 800b88c:	f04f 0800 	mov.w	r8, #0
 800b890:	f104 091a 	add.w	r9, r4, #26
 800b894:	e7f2      	b.n	800b87c <_printf_float+0x3ec>
 800b896:	2301      	movs	r3, #1
 800b898:	e7df      	b.n	800b85a <_printf_float+0x3ca>
 800b89a:	2301      	movs	r3, #1
 800b89c:	464a      	mov	r2, r9
 800b89e:	4631      	mov	r1, r6
 800b8a0:	4628      	mov	r0, r5
 800b8a2:	47b8      	blx	r7
 800b8a4:	3001      	adds	r0, #1
 800b8a6:	f43f ae41 	beq.w	800b52c <_printf_float+0x9c>
 800b8aa:	f108 0801 	add.w	r8, r8, #1
 800b8ae:	68e3      	ldr	r3, [r4, #12]
 800b8b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b8b2:	1a9b      	subs	r3, r3, r2
 800b8b4:	4543      	cmp	r3, r8
 800b8b6:	dcf0      	bgt.n	800b89a <_printf_float+0x40a>
 800b8b8:	e6fa      	b.n	800b6b0 <_printf_float+0x220>
 800b8ba:	f04f 0800 	mov.w	r8, #0
 800b8be:	f104 0919 	add.w	r9, r4, #25
 800b8c2:	e7f4      	b.n	800b8ae <_printf_float+0x41e>
 800b8c4:	2900      	cmp	r1, #0
 800b8c6:	f43f ae8a 	beq.w	800b5de <_printf_float+0x14e>
 800b8ca:	f04f 0c00 	mov.w	ip, #0
 800b8ce:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800b8d2:	e9cd 0900 	strd	r0, r9, [sp]
 800b8d6:	6022      	str	r2, [r4, #0]
 800b8d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b8dc:	4628      	mov	r0, r5
 800b8de:	f7ff fd4f 	bl	800b380 <__cvt>
 800b8e2:	4680      	mov	r8, r0
 800b8e4:	e64a      	b.n	800b57c <_printf_float+0xec>
 800b8e6:	bf00      	nop

0800b8e8 <_printf_common>:
 800b8e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8ec:	4691      	mov	r9, r2
 800b8ee:	461f      	mov	r7, r3
 800b8f0:	688a      	ldr	r2, [r1, #8]
 800b8f2:	690b      	ldr	r3, [r1, #16]
 800b8f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	bfb8      	it	lt
 800b8fc:	4613      	movlt	r3, r2
 800b8fe:	f8c9 3000 	str.w	r3, [r9]
 800b902:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b906:	4606      	mov	r6, r0
 800b908:	460c      	mov	r4, r1
 800b90a:	b112      	cbz	r2, 800b912 <_printf_common+0x2a>
 800b90c:	3301      	adds	r3, #1
 800b90e:	f8c9 3000 	str.w	r3, [r9]
 800b912:	6823      	ldr	r3, [r4, #0]
 800b914:	0699      	lsls	r1, r3, #26
 800b916:	bf42      	ittt	mi
 800b918:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b91c:	3302      	addmi	r3, #2
 800b91e:	f8c9 3000 	strmi.w	r3, [r9]
 800b922:	6825      	ldr	r5, [r4, #0]
 800b924:	f015 0506 	ands.w	r5, r5, #6
 800b928:	d107      	bne.n	800b93a <_printf_common+0x52>
 800b92a:	f104 0a19 	add.w	sl, r4, #25
 800b92e:	68e3      	ldr	r3, [r4, #12]
 800b930:	f8d9 2000 	ldr.w	r2, [r9]
 800b934:	1a9b      	subs	r3, r3, r2
 800b936:	42ab      	cmp	r3, r5
 800b938:	dc28      	bgt.n	800b98c <_printf_common+0xa4>
 800b93a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b93e:	6822      	ldr	r2, [r4, #0]
 800b940:	3300      	adds	r3, #0
 800b942:	bf18      	it	ne
 800b944:	2301      	movne	r3, #1
 800b946:	0692      	lsls	r2, r2, #26
 800b948:	d42d      	bmi.n	800b9a6 <_printf_common+0xbe>
 800b94a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b94e:	4639      	mov	r1, r7
 800b950:	4630      	mov	r0, r6
 800b952:	47c0      	blx	r8
 800b954:	3001      	adds	r0, #1
 800b956:	d020      	beq.n	800b99a <_printf_common+0xb2>
 800b958:	6823      	ldr	r3, [r4, #0]
 800b95a:	68e5      	ldr	r5, [r4, #12]
 800b95c:	f8d9 2000 	ldr.w	r2, [r9]
 800b960:	f003 0306 	and.w	r3, r3, #6
 800b964:	2b04      	cmp	r3, #4
 800b966:	bf08      	it	eq
 800b968:	1aad      	subeq	r5, r5, r2
 800b96a:	68a3      	ldr	r3, [r4, #8]
 800b96c:	6922      	ldr	r2, [r4, #16]
 800b96e:	bf0c      	ite	eq
 800b970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b974:	2500      	movne	r5, #0
 800b976:	4293      	cmp	r3, r2
 800b978:	bfc4      	itt	gt
 800b97a:	1a9b      	subgt	r3, r3, r2
 800b97c:	18ed      	addgt	r5, r5, r3
 800b97e:	f04f 0900 	mov.w	r9, #0
 800b982:	341a      	adds	r4, #26
 800b984:	454d      	cmp	r5, r9
 800b986:	d11a      	bne.n	800b9be <_printf_common+0xd6>
 800b988:	2000      	movs	r0, #0
 800b98a:	e008      	b.n	800b99e <_printf_common+0xb6>
 800b98c:	2301      	movs	r3, #1
 800b98e:	4652      	mov	r2, sl
 800b990:	4639      	mov	r1, r7
 800b992:	4630      	mov	r0, r6
 800b994:	47c0      	blx	r8
 800b996:	3001      	adds	r0, #1
 800b998:	d103      	bne.n	800b9a2 <_printf_common+0xba>
 800b99a:	f04f 30ff 	mov.w	r0, #4294967295
 800b99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9a2:	3501      	adds	r5, #1
 800b9a4:	e7c3      	b.n	800b92e <_printf_common+0x46>
 800b9a6:	18e1      	adds	r1, r4, r3
 800b9a8:	1c5a      	adds	r2, r3, #1
 800b9aa:	2030      	movs	r0, #48	; 0x30
 800b9ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b9b0:	4422      	add	r2, r4
 800b9b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b9b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b9ba:	3302      	adds	r3, #2
 800b9bc:	e7c5      	b.n	800b94a <_printf_common+0x62>
 800b9be:	2301      	movs	r3, #1
 800b9c0:	4622      	mov	r2, r4
 800b9c2:	4639      	mov	r1, r7
 800b9c4:	4630      	mov	r0, r6
 800b9c6:	47c0      	blx	r8
 800b9c8:	3001      	adds	r0, #1
 800b9ca:	d0e6      	beq.n	800b99a <_printf_common+0xb2>
 800b9cc:	f109 0901 	add.w	r9, r9, #1
 800b9d0:	e7d8      	b.n	800b984 <_printf_common+0x9c>
	...

0800b9d4 <_printf_i>:
 800b9d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9d8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b9dc:	460c      	mov	r4, r1
 800b9de:	7e09      	ldrb	r1, [r1, #24]
 800b9e0:	b085      	sub	sp, #20
 800b9e2:	296e      	cmp	r1, #110	; 0x6e
 800b9e4:	4617      	mov	r7, r2
 800b9e6:	4606      	mov	r6, r0
 800b9e8:	4698      	mov	r8, r3
 800b9ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9ec:	f000 80b3 	beq.w	800bb56 <_printf_i+0x182>
 800b9f0:	d822      	bhi.n	800ba38 <_printf_i+0x64>
 800b9f2:	2963      	cmp	r1, #99	; 0x63
 800b9f4:	d036      	beq.n	800ba64 <_printf_i+0x90>
 800b9f6:	d80a      	bhi.n	800ba0e <_printf_i+0x3a>
 800b9f8:	2900      	cmp	r1, #0
 800b9fa:	f000 80b9 	beq.w	800bb70 <_printf_i+0x19c>
 800b9fe:	2958      	cmp	r1, #88	; 0x58
 800ba00:	f000 8083 	beq.w	800bb0a <_printf_i+0x136>
 800ba04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba08:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ba0c:	e032      	b.n	800ba74 <_printf_i+0xa0>
 800ba0e:	2964      	cmp	r1, #100	; 0x64
 800ba10:	d001      	beq.n	800ba16 <_printf_i+0x42>
 800ba12:	2969      	cmp	r1, #105	; 0x69
 800ba14:	d1f6      	bne.n	800ba04 <_printf_i+0x30>
 800ba16:	6820      	ldr	r0, [r4, #0]
 800ba18:	6813      	ldr	r3, [r2, #0]
 800ba1a:	0605      	lsls	r5, r0, #24
 800ba1c:	f103 0104 	add.w	r1, r3, #4
 800ba20:	d52a      	bpl.n	800ba78 <_printf_i+0xa4>
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	6011      	str	r1, [r2, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	da03      	bge.n	800ba32 <_printf_i+0x5e>
 800ba2a:	222d      	movs	r2, #45	; 0x2d
 800ba2c:	425b      	negs	r3, r3
 800ba2e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ba32:	486f      	ldr	r0, [pc, #444]	; (800bbf0 <_printf_i+0x21c>)
 800ba34:	220a      	movs	r2, #10
 800ba36:	e039      	b.n	800baac <_printf_i+0xd8>
 800ba38:	2973      	cmp	r1, #115	; 0x73
 800ba3a:	f000 809d 	beq.w	800bb78 <_printf_i+0x1a4>
 800ba3e:	d808      	bhi.n	800ba52 <_printf_i+0x7e>
 800ba40:	296f      	cmp	r1, #111	; 0x6f
 800ba42:	d020      	beq.n	800ba86 <_printf_i+0xb2>
 800ba44:	2970      	cmp	r1, #112	; 0x70
 800ba46:	d1dd      	bne.n	800ba04 <_printf_i+0x30>
 800ba48:	6823      	ldr	r3, [r4, #0]
 800ba4a:	f043 0320 	orr.w	r3, r3, #32
 800ba4e:	6023      	str	r3, [r4, #0]
 800ba50:	e003      	b.n	800ba5a <_printf_i+0x86>
 800ba52:	2975      	cmp	r1, #117	; 0x75
 800ba54:	d017      	beq.n	800ba86 <_printf_i+0xb2>
 800ba56:	2978      	cmp	r1, #120	; 0x78
 800ba58:	d1d4      	bne.n	800ba04 <_printf_i+0x30>
 800ba5a:	2378      	movs	r3, #120	; 0x78
 800ba5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ba60:	4864      	ldr	r0, [pc, #400]	; (800bbf4 <_printf_i+0x220>)
 800ba62:	e055      	b.n	800bb10 <_printf_i+0x13c>
 800ba64:	6813      	ldr	r3, [r2, #0]
 800ba66:	1d19      	adds	r1, r3, #4
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	6011      	str	r1, [r2, #0]
 800ba6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba74:	2301      	movs	r3, #1
 800ba76:	e08c      	b.n	800bb92 <_printf_i+0x1be>
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	6011      	str	r1, [r2, #0]
 800ba7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ba80:	bf18      	it	ne
 800ba82:	b21b      	sxthne	r3, r3
 800ba84:	e7cf      	b.n	800ba26 <_printf_i+0x52>
 800ba86:	6813      	ldr	r3, [r2, #0]
 800ba88:	6825      	ldr	r5, [r4, #0]
 800ba8a:	1d18      	adds	r0, r3, #4
 800ba8c:	6010      	str	r0, [r2, #0]
 800ba8e:	0628      	lsls	r0, r5, #24
 800ba90:	d501      	bpl.n	800ba96 <_printf_i+0xc2>
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	e002      	b.n	800ba9c <_printf_i+0xc8>
 800ba96:	0668      	lsls	r0, r5, #25
 800ba98:	d5fb      	bpl.n	800ba92 <_printf_i+0xbe>
 800ba9a:	881b      	ldrh	r3, [r3, #0]
 800ba9c:	4854      	ldr	r0, [pc, #336]	; (800bbf0 <_printf_i+0x21c>)
 800ba9e:	296f      	cmp	r1, #111	; 0x6f
 800baa0:	bf14      	ite	ne
 800baa2:	220a      	movne	r2, #10
 800baa4:	2208      	moveq	r2, #8
 800baa6:	2100      	movs	r1, #0
 800baa8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800baac:	6865      	ldr	r5, [r4, #4]
 800baae:	60a5      	str	r5, [r4, #8]
 800bab0:	2d00      	cmp	r5, #0
 800bab2:	f2c0 8095 	blt.w	800bbe0 <_printf_i+0x20c>
 800bab6:	6821      	ldr	r1, [r4, #0]
 800bab8:	f021 0104 	bic.w	r1, r1, #4
 800babc:	6021      	str	r1, [r4, #0]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d13d      	bne.n	800bb3e <_printf_i+0x16a>
 800bac2:	2d00      	cmp	r5, #0
 800bac4:	f040 808e 	bne.w	800bbe4 <_printf_i+0x210>
 800bac8:	4665      	mov	r5, ip
 800baca:	2a08      	cmp	r2, #8
 800bacc:	d10b      	bne.n	800bae6 <_printf_i+0x112>
 800bace:	6823      	ldr	r3, [r4, #0]
 800bad0:	07db      	lsls	r3, r3, #31
 800bad2:	d508      	bpl.n	800bae6 <_printf_i+0x112>
 800bad4:	6923      	ldr	r3, [r4, #16]
 800bad6:	6862      	ldr	r2, [r4, #4]
 800bad8:	429a      	cmp	r2, r3
 800bada:	bfde      	ittt	le
 800badc:	2330      	movle	r3, #48	; 0x30
 800bade:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bae2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bae6:	ebac 0305 	sub.w	r3, ip, r5
 800baea:	6123      	str	r3, [r4, #16]
 800baec:	f8cd 8000 	str.w	r8, [sp]
 800baf0:	463b      	mov	r3, r7
 800baf2:	aa03      	add	r2, sp, #12
 800baf4:	4621      	mov	r1, r4
 800baf6:	4630      	mov	r0, r6
 800baf8:	f7ff fef6 	bl	800b8e8 <_printf_common>
 800bafc:	3001      	adds	r0, #1
 800bafe:	d14d      	bne.n	800bb9c <_printf_i+0x1c8>
 800bb00:	f04f 30ff 	mov.w	r0, #4294967295
 800bb04:	b005      	add	sp, #20
 800bb06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb0a:	4839      	ldr	r0, [pc, #228]	; (800bbf0 <_printf_i+0x21c>)
 800bb0c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bb10:	6813      	ldr	r3, [r2, #0]
 800bb12:	6821      	ldr	r1, [r4, #0]
 800bb14:	1d1d      	adds	r5, r3, #4
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	6015      	str	r5, [r2, #0]
 800bb1a:	060a      	lsls	r2, r1, #24
 800bb1c:	d50b      	bpl.n	800bb36 <_printf_i+0x162>
 800bb1e:	07ca      	lsls	r2, r1, #31
 800bb20:	bf44      	itt	mi
 800bb22:	f041 0120 	orrmi.w	r1, r1, #32
 800bb26:	6021      	strmi	r1, [r4, #0]
 800bb28:	b91b      	cbnz	r3, 800bb32 <_printf_i+0x15e>
 800bb2a:	6822      	ldr	r2, [r4, #0]
 800bb2c:	f022 0220 	bic.w	r2, r2, #32
 800bb30:	6022      	str	r2, [r4, #0]
 800bb32:	2210      	movs	r2, #16
 800bb34:	e7b7      	b.n	800baa6 <_printf_i+0xd2>
 800bb36:	064d      	lsls	r5, r1, #25
 800bb38:	bf48      	it	mi
 800bb3a:	b29b      	uxthmi	r3, r3
 800bb3c:	e7ef      	b.n	800bb1e <_printf_i+0x14a>
 800bb3e:	4665      	mov	r5, ip
 800bb40:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb44:	fb02 3311 	mls	r3, r2, r1, r3
 800bb48:	5cc3      	ldrb	r3, [r0, r3]
 800bb4a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bb4e:	460b      	mov	r3, r1
 800bb50:	2900      	cmp	r1, #0
 800bb52:	d1f5      	bne.n	800bb40 <_printf_i+0x16c>
 800bb54:	e7b9      	b.n	800baca <_printf_i+0xf6>
 800bb56:	6813      	ldr	r3, [r2, #0]
 800bb58:	6825      	ldr	r5, [r4, #0]
 800bb5a:	6961      	ldr	r1, [r4, #20]
 800bb5c:	1d18      	adds	r0, r3, #4
 800bb5e:	6010      	str	r0, [r2, #0]
 800bb60:	0628      	lsls	r0, r5, #24
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	d501      	bpl.n	800bb6a <_printf_i+0x196>
 800bb66:	6019      	str	r1, [r3, #0]
 800bb68:	e002      	b.n	800bb70 <_printf_i+0x19c>
 800bb6a:	066a      	lsls	r2, r5, #25
 800bb6c:	d5fb      	bpl.n	800bb66 <_printf_i+0x192>
 800bb6e:	8019      	strh	r1, [r3, #0]
 800bb70:	2300      	movs	r3, #0
 800bb72:	6123      	str	r3, [r4, #16]
 800bb74:	4665      	mov	r5, ip
 800bb76:	e7b9      	b.n	800baec <_printf_i+0x118>
 800bb78:	6813      	ldr	r3, [r2, #0]
 800bb7a:	1d19      	adds	r1, r3, #4
 800bb7c:	6011      	str	r1, [r2, #0]
 800bb7e:	681d      	ldr	r5, [r3, #0]
 800bb80:	6862      	ldr	r2, [r4, #4]
 800bb82:	2100      	movs	r1, #0
 800bb84:	4628      	mov	r0, r5
 800bb86:	f7f4 fc13 	bl	80003b0 <memchr>
 800bb8a:	b108      	cbz	r0, 800bb90 <_printf_i+0x1bc>
 800bb8c:	1b40      	subs	r0, r0, r5
 800bb8e:	6060      	str	r0, [r4, #4]
 800bb90:	6863      	ldr	r3, [r4, #4]
 800bb92:	6123      	str	r3, [r4, #16]
 800bb94:	2300      	movs	r3, #0
 800bb96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb9a:	e7a7      	b.n	800baec <_printf_i+0x118>
 800bb9c:	6923      	ldr	r3, [r4, #16]
 800bb9e:	462a      	mov	r2, r5
 800bba0:	4639      	mov	r1, r7
 800bba2:	4630      	mov	r0, r6
 800bba4:	47c0      	blx	r8
 800bba6:	3001      	adds	r0, #1
 800bba8:	d0aa      	beq.n	800bb00 <_printf_i+0x12c>
 800bbaa:	6823      	ldr	r3, [r4, #0]
 800bbac:	079b      	lsls	r3, r3, #30
 800bbae:	d413      	bmi.n	800bbd8 <_printf_i+0x204>
 800bbb0:	68e0      	ldr	r0, [r4, #12]
 800bbb2:	9b03      	ldr	r3, [sp, #12]
 800bbb4:	4298      	cmp	r0, r3
 800bbb6:	bfb8      	it	lt
 800bbb8:	4618      	movlt	r0, r3
 800bbba:	e7a3      	b.n	800bb04 <_printf_i+0x130>
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	464a      	mov	r2, r9
 800bbc0:	4639      	mov	r1, r7
 800bbc2:	4630      	mov	r0, r6
 800bbc4:	47c0      	blx	r8
 800bbc6:	3001      	adds	r0, #1
 800bbc8:	d09a      	beq.n	800bb00 <_printf_i+0x12c>
 800bbca:	3501      	adds	r5, #1
 800bbcc:	68e3      	ldr	r3, [r4, #12]
 800bbce:	9a03      	ldr	r2, [sp, #12]
 800bbd0:	1a9b      	subs	r3, r3, r2
 800bbd2:	42ab      	cmp	r3, r5
 800bbd4:	dcf2      	bgt.n	800bbbc <_printf_i+0x1e8>
 800bbd6:	e7eb      	b.n	800bbb0 <_printf_i+0x1dc>
 800bbd8:	2500      	movs	r5, #0
 800bbda:	f104 0919 	add.w	r9, r4, #25
 800bbde:	e7f5      	b.n	800bbcc <_printf_i+0x1f8>
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d1ac      	bne.n	800bb3e <_printf_i+0x16a>
 800bbe4:	7803      	ldrb	r3, [r0, #0]
 800bbe6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bbea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbee:	e76c      	b.n	800baca <_printf_i+0xf6>
 800bbf0:	0801dd9c 	.word	0x0801dd9c
 800bbf4:	0801ddad 	.word	0x0801ddad

0800bbf8 <siprintf>:
 800bbf8:	b40e      	push	{r1, r2, r3}
 800bbfa:	b500      	push	{lr}
 800bbfc:	b09c      	sub	sp, #112	; 0x70
 800bbfe:	ab1d      	add	r3, sp, #116	; 0x74
 800bc00:	9002      	str	r0, [sp, #8]
 800bc02:	9006      	str	r0, [sp, #24]
 800bc04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bc08:	4809      	ldr	r0, [pc, #36]	; (800bc30 <siprintf+0x38>)
 800bc0a:	9107      	str	r1, [sp, #28]
 800bc0c:	9104      	str	r1, [sp, #16]
 800bc0e:	4909      	ldr	r1, [pc, #36]	; (800bc34 <siprintf+0x3c>)
 800bc10:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc14:	9105      	str	r1, [sp, #20]
 800bc16:	6800      	ldr	r0, [r0, #0]
 800bc18:	9301      	str	r3, [sp, #4]
 800bc1a:	a902      	add	r1, sp, #8
 800bc1c:	f001 f9f8 	bl	800d010 <_svfiprintf_r>
 800bc20:	9b02      	ldr	r3, [sp, #8]
 800bc22:	2200      	movs	r2, #0
 800bc24:	701a      	strb	r2, [r3, #0]
 800bc26:	b01c      	add	sp, #112	; 0x70
 800bc28:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc2c:	b003      	add	sp, #12
 800bc2e:	4770      	bx	lr
 800bc30:	24000208 	.word	0x24000208
 800bc34:	ffff0208 	.word	0xffff0208

0800bc38 <strcpy>:
 800bc38:	4603      	mov	r3, r0
 800bc3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc3e:	f803 2b01 	strb.w	r2, [r3], #1
 800bc42:	2a00      	cmp	r2, #0
 800bc44:	d1f9      	bne.n	800bc3a <strcpy+0x2>
 800bc46:	4770      	bx	lr

0800bc48 <quorem>:
 800bc48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc4c:	6903      	ldr	r3, [r0, #16]
 800bc4e:	690c      	ldr	r4, [r1, #16]
 800bc50:	42a3      	cmp	r3, r4
 800bc52:	4680      	mov	r8, r0
 800bc54:	f2c0 8082 	blt.w	800bd5c <quorem+0x114>
 800bc58:	3c01      	subs	r4, #1
 800bc5a:	f101 0714 	add.w	r7, r1, #20
 800bc5e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800bc62:	f100 0614 	add.w	r6, r0, #20
 800bc66:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800bc6a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800bc6e:	eb06 030c 	add.w	r3, r6, ip
 800bc72:	3501      	adds	r5, #1
 800bc74:	eb07 090c 	add.w	r9, r7, ip
 800bc78:	9301      	str	r3, [sp, #4]
 800bc7a:	fbb0 f5f5 	udiv	r5, r0, r5
 800bc7e:	b395      	cbz	r5, 800bce6 <quorem+0x9e>
 800bc80:	f04f 0a00 	mov.w	sl, #0
 800bc84:	4638      	mov	r0, r7
 800bc86:	46b6      	mov	lr, r6
 800bc88:	46d3      	mov	fp, sl
 800bc8a:	f850 2b04 	ldr.w	r2, [r0], #4
 800bc8e:	b293      	uxth	r3, r2
 800bc90:	fb05 a303 	mla	r3, r5, r3, sl
 800bc94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	ebab 0303 	sub.w	r3, fp, r3
 800bc9e:	0c12      	lsrs	r2, r2, #16
 800bca0:	f8de b000 	ldr.w	fp, [lr]
 800bca4:	fb05 a202 	mla	r2, r5, r2, sl
 800bca8:	fa13 f38b 	uxtah	r3, r3, fp
 800bcac:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800bcb0:	fa1f fb82 	uxth.w	fp, r2
 800bcb4:	f8de 2000 	ldr.w	r2, [lr]
 800bcb8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800bcbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bcc0:	b29b      	uxth	r3, r3
 800bcc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcc6:	4581      	cmp	r9, r0
 800bcc8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800bccc:	f84e 3b04 	str.w	r3, [lr], #4
 800bcd0:	d2db      	bcs.n	800bc8a <quorem+0x42>
 800bcd2:	f856 300c 	ldr.w	r3, [r6, ip]
 800bcd6:	b933      	cbnz	r3, 800bce6 <quorem+0x9e>
 800bcd8:	9b01      	ldr	r3, [sp, #4]
 800bcda:	3b04      	subs	r3, #4
 800bcdc:	429e      	cmp	r6, r3
 800bcde:	461a      	mov	r2, r3
 800bce0:	d330      	bcc.n	800bd44 <quorem+0xfc>
 800bce2:	f8c8 4010 	str.w	r4, [r8, #16]
 800bce6:	4640      	mov	r0, r8
 800bce8:	f000 ffbc 	bl	800cc64 <__mcmp>
 800bcec:	2800      	cmp	r0, #0
 800bcee:	db25      	blt.n	800bd3c <quorem+0xf4>
 800bcf0:	3501      	adds	r5, #1
 800bcf2:	4630      	mov	r0, r6
 800bcf4:	f04f 0c00 	mov.w	ip, #0
 800bcf8:	f857 2b04 	ldr.w	r2, [r7], #4
 800bcfc:	f8d0 e000 	ldr.w	lr, [r0]
 800bd00:	b293      	uxth	r3, r2
 800bd02:	ebac 0303 	sub.w	r3, ip, r3
 800bd06:	0c12      	lsrs	r2, r2, #16
 800bd08:	fa13 f38e 	uxtah	r3, r3, lr
 800bd0c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bd10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd14:	b29b      	uxth	r3, r3
 800bd16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd1a:	45b9      	cmp	r9, r7
 800bd1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bd20:	f840 3b04 	str.w	r3, [r0], #4
 800bd24:	d2e8      	bcs.n	800bcf8 <quorem+0xb0>
 800bd26:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800bd2a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800bd2e:	b92a      	cbnz	r2, 800bd3c <quorem+0xf4>
 800bd30:	3b04      	subs	r3, #4
 800bd32:	429e      	cmp	r6, r3
 800bd34:	461a      	mov	r2, r3
 800bd36:	d30b      	bcc.n	800bd50 <quorem+0x108>
 800bd38:	f8c8 4010 	str.w	r4, [r8, #16]
 800bd3c:	4628      	mov	r0, r5
 800bd3e:	b003      	add	sp, #12
 800bd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd44:	6812      	ldr	r2, [r2, #0]
 800bd46:	3b04      	subs	r3, #4
 800bd48:	2a00      	cmp	r2, #0
 800bd4a:	d1ca      	bne.n	800bce2 <quorem+0x9a>
 800bd4c:	3c01      	subs	r4, #1
 800bd4e:	e7c5      	b.n	800bcdc <quorem+0x94>
 800bd50:	6812      	ldr	r2, [r2, #0]
 800bd52:	3b04      	subs	r3, #4
 800bd54:	2a00      	cmp	r2, #0
 800bd56:	d1ef      	bne.n	800bd38 <quorem+0xf0>
 800bd58:	3c01      	subs	r4, #1
 800bd5a:	e7ea      	b.n	800bd32 <quorem+0xea>
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	e7ee      	b.n	800bd3e <quorem+0xf6>

0800bd60 <_dtoa_r>:
 800bd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd64:	ec57 6b10 	vmov	r6, r7, d0
 800bd68:	b095      	sub	sp, #84	; 0x54
 800bd6a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bd6c:	9108      	str	r1, [sp, #32]
 800bd6e:	4604      	mov	r4, r0
 800bd70:	920a      	str	r2, [sp, #40]	; 0x28
 800bd72:	9311      	str	r3, [sp, #68]	; 0x44
 800bd74:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800bd78:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800bd7c:	b93d      	cbnz	r5, 800bd8e <_dtoa_r+0x2e>
 800bd7e:	2010      	movs	r0, #16
 800bd80:	f000 fd48 	bl	800c814 <malloc>
 800bd84:	6260      	str	r0, [r4, #36]	; 0x24
 800bd86:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bd8a:	6005      	str	r5, [r0, #0]
 800bd8c:	60c5      	str	r5, [r0, #12]
 800bd8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd90:	6819      	ldr	r1, [r3, #0]
 800bd92:	b151      	cbz	r1, 800bdaa <_dtoa_r+0x4a>
 800bd94:	685a      	ldr	r2, [r3, #4]
 800bd96:	604a      	str	r2, [r1, #4]
 800bd98:	2301      	movs	r3, #1
 800bd9a:	4093      	lsls	r3, r2
 800bd9c:	608b      	str	r3, [r1, #8]
 800bd9e:	4620      	mov	r0, r4
 800bda0:	f000 fd7f 	bl	800c8a2 <_Bfree>
 800bda4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bda6:	2200      	movs	r2, #0
 800bda8:	601a      	str	r2, [r3, #0]
 800bdaa:	1e3b      	subs	r3, r7, #0
 800bdac:	bfb9      	ittee	lt
 800bdae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bdb2:	9303      	strlt	r3, [sp, #12]
 800bdb4:	2300      	movge	r3, #0
 800bdb6:	f8c8 3000 	strge.w	r3, [r8]
 800bdba:	9d03      	ldr	r5, [sp, #12]
 800bdbc:	4bac      	ldr	r3, [pc, #688]	; (800c070 <_dtoa_r+0x310>)
 800bdbe:	bfbc      	itt	lt
 800bdc0:	2201      	movlt	r2, #1
 800bdc2:	f8c8 2000 	strlt.w	r2, [r8]
 800bdc6:	43ab      	bics	r3, r5
 800bdc8:	d11b      	bne.n	800be02 <_dtoa_r+0xa2>
 800bdca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bdcc:	f242 730f 	movw	r3, #9999	; 0x270f
 800bdd0:	6013      	str	r3, [r2, #0]
 800bdd2:	9b02      	ldr	r3, [sp, #8]
 800bdd4:	b923      	cbnz	r3, 800bde0 <_dtoa_r+0x80>
 800bdd6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800bdda:	2d00      	cmp	r5, #0
 800bddc:	f000 84dd 	beq.w	800c79a <_dtoa_r+0xa3a>
 800bde0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bde2:	b953      	cbnz	r3, 800bdfa <_dtoa_r+0x9a>
 800bde4:	4ba3      	ldr	r3, [pc, #652]	; (800c074 <_dtoa_r+0x314>)
 800bde6:	e020      	b.n	800be2a <_dtoa_r+0xca>
 800bde8:	4ba3      	ldr	r3, [pc, #652]	; (800c078 <_dtoa_r+0x318>)
 800bdea:	9304      	str	r3, [sp, #16]
 800bdec:	3308      	adds	r3, #8
 800bdee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800bdf0:	6013      	str	r3, [r2, #0]
 800bdf2:	9804      	ldr	r0, [sp, #16]
 800bdf4:	b015      	add	sp, #84	; 0x54
 800bdf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdfa:	4b9e      	ldr	r3, [pc, #632]	; (800c074 <_dtoa_r+0x314>)
 800bdfc:	9304      	str	r3, [sp, #16]
 800bdfe:	3303      	adds	r3, #3
 800be00:	e7f5      	b.n	800bdee <_dtoa_r+0x8e>
 800be02:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be06:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800be0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be0e:	ed8d 7b04 	vstr	d7, [sp, #16]
 800be12:	d10c      	bne.n	800be2e <_dtoa_r+0xce>
 800be14:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800be16:	2301      	movs	r3, #1
 800be18:	6013      	str	r3, [r2, #0]
 800be1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	f000 84b9 	beq.w	800c794 <_dtoa_r+0xa34>
 800be22:	4b96      	ldr	r3, [pc, #600]	; (800c07c <_dtoa_r+0x31c>)
 800be24:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800be26:	6013      	str	r3, [r2, #0]
 800be28:	3b01      	subs	r3, #1
 800be2a:	9304      	str	r3, [sp, #16]
 800be2c:	e7e1      	b.n	800bdf2 <_dtoa_r+0x92>
 800be2e:	a913      	add	r1, sp, #76	; 0x4c
 800be30:	aa12      	add	r2, sp, #72	; 0x48
 800be32:	ed9d 0b04 	vldr	d0, [sp, #16]
 800be36:	4620      	mov	r0, r4
 800be38:	f000 ff8b 	bl	800cd52 <__d2b>
 800be3c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800be40:	9001      	str	r0, [sp, #4]
 800be42:	9912      	ldr	r1, [sp, #72]	; 0x48
 800be44:	2e00      	cmp	r6, #0
 800be46:	d046      	beq.n	800bed6 <_dtoa_r+0x176>
 800be48:	9805      	ldr	r0, [sp, #20]
 800be4a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800be4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be52:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800be56:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800be5a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800be5e:	2700      	movs	r7, #0
 800be60:	ee07 aa90 	vmov	s15, sl
 800be64:	ec43 2b16 	vmov	d6, r2, r3
 800be68:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800be6c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800c058 <_dtoa_r+0x2f8>
 800be70:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800be74:	ee36 7b47 	vsub.f64	d7, d6, d7
 800be78:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800c060 <_dtoa_r+0x300>
 800be7c:	eea7 6b04 	vfma.f64	d6, d7, d4
 800be80:	eeb0 7b46 	vmov.f64	d7, d6
 800be84:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800c068 <_dtoa_r+0x308>
 800be88:	eea5 7b06 	vfma.f64	d7, d5, d6
 800be8c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800be90:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800be94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be98:	ee16 ba90 	vmov	fp, s13
 800be9c:	d508      	bpl.n	800beb0 <_dtoa_r+0x150>
 800be9e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800bea2:	eeb4 6b47 	vcmp.f64	d6, d7
 800bea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beaa:	bf18      	it	ne
 800beac:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800beb0:	f1bb 0f16 	cmp.w	fp, #22
 800beb4:	d834      	bhi.n	800bf20 <_dtoa_r+0x1c0>
 800beb6:	4b72      	ldr	r3, [pc, #456]	; (800c080 <_dtoa_r+0x320>)
 800beb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bebc:	ed93 7b00 	vldr	d7, [r3]
 800bec0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bec4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800becc:	dd01      	ble.n	800bed2 <_dtoa_r+0x172>
 800bece:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bed2:	2300      	movs	r3, #0
 800bed4:	e025      	b.n	800bf22 <_dtoa_r+0x1c2>
 800bed6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bed8:	eb01 0a03 	add.w	sl, r1, r3
 800bedc:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800bee0:	2b20      	cmp	r3, #32
 800bee2:	dd17      	ble.n	800bf14 <_dtoa_r+0x1b4>
 800bee4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800bee8:	9a02      	ldr	r2, [sp, #8]
 800beea:	409d      	lsls	r5, r3
 800beec:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800bef0:	fa22 f303 	lsr.w	r3, r2, r3
 800bef4:	432b      	orrs	r3, r5
 800bef6:	ee07 3a90 	vmov	s15, r3
 800befa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800befe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf02:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bf06:	9805      	ldr	r0, [sp, #20]
 800bf08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf0c:	2701      	movs	r7, #1
 800bf0e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800bf12:	e7a5      	b.n	800be60 <_dtoa_r+0x100>
 800bf14:	9a02      	ldr	r2, [sp, #8]
 800bf16:	f1c3 0320 	rsb	r3, r3, #32
 800bf1a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf1e:	e7ea      	b.n	800bef6 <_dtoa_r+0x196>
 800bf20:	2301      	movs	r3, #1
 800bf22:	eba1 0a0a 	sub.w	sl, r1, sl
 800bf26:	9310      	str	r3, [sp, #64]	; 0x40
 800bf28:	f1ba 0301 	subs.w	r3, sl, #1
 800bf2c:	9307      	str	r3, [sp, #28]
 800bf2e:	bf43      	ittte	mi
 800bf30:	2300      	movmi	r3, #0
 800bf32:	f1ca 0a01 	rsbmi	sl, sl, #1
 800bf36:	9307      	strmi	r3, [sp, #28]
 800bf38:	f04f 0a00 	movpl.w	sl, #0
 800bf3c:	f1bb 0f00 	cmp.w	fp, #0
 800bf40:	db19      	blt.n	800bf76 <_dtoa_r+0x216>
 800bf42:	9b07      	ldr	r3, [sp, #28]
 800bf44:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800bf48:	445b      	add	r3, fp
 800bf4a:	9307      	str	r3, [sp, #28]
 800bf4c:	f04f 0800 	mov.w	r8, #0
 800bf50:	9b08      	ldr	r3, [sp, #32]
 800bf52:	2b09      	cmp	r3, #9
 800bf54:	d866      	bhi.n	800c024 <_dtoa_r+0x2c4>
 800bf56:	2b05      	cmp	r3, #5
 800bf58:	bfc4      	itt	gt
 800bf5a:	3b04      	subgt	r3, #4
 800bf5c:	9308      	strgt	r3, [sp, #32]
 800bf5e:	9b08      	ldr	r3, [sp, #32]
 800bf60:	f1a3 0302 	sub.w	r3, r3, #2
 800bf64:	bfcc      	ite	gt
 800bf66:	2500      	movgt	r5, #0
 800bf68:	2501      	movle	r5, #1
 800bf6a:	2b03      	cmp	r3, #3
 800bf6c:	d866      	bhi.n	800c03c <_dtoa_r+0x2dc>
 800bf6e:	e8df f003 	tbb	[pc, r3]
 800bf72:	5755      	.short	0x5755
 800bf74:	4909      	.short	0x4909
 800bf76:	2300      	movs	r3, #0
 800bf78:	ebaa 0a0b 	sub.w	sl, sl, fp
 800bf7c:	f1cb 0800 	rsb	r8, fp, #0
 800bf80:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf82:	e7e5      	b.n	800bf50 <_dtoa_r+0x1f0>
 800bf84:	2301      	movs	r3, #1
 800bf86:	9309      	str	r3, [sp, #36]	; 0x24
 800bf88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	dd59      	ble.n	800c042 <_dtoa_r+0x2e2>
 800bf8e:	9306      	str	r3, [sp, #24]
 800bf90:	4699      	mov	r9, r3
 800bf92:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf94:	2200      	movs	r2, #0
 800bf96:	6072      	str	r2, [r6, #4]
 800bf98:	2204      	movs	r2, #4
 800bf9a:	f102 0014 	add.w	r0, r2, #20
 800bf9e:	4298      	cmp	r0, r3
 800bfa0:	6871      	ldr	r1, [r6, #4]
 800bfa2:	d953      	bls.n	800c04c <_dtoa_r+0x2ec>
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	f000 fc48 	bl	800c83a <_Balloc>
 800bfaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfac:	6030      	str	r0, [r6, #0]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	9304      	str	r3, [sp, #16]
 800bfb2:	f1b9 0f0e 	cmp.w	r9, #14
 800bfb6:	f200 80c2 	bhi.w	800c13e <_dtoa_r+0x3de>
 800bfba:	2d00      	cmp	r5, #0
 800bfbc:	f000 80bf 	beq.w	800c13e <_dtoa_r+0x3de>
 800bfc0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bfc4:	f1bb 0f00 	cmp.w	fp, #0
 800bfc8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800bfcc:	f340 80e6 	ble.w	800c19c <_dtoa_r+0x43c>
 800bfd0:	4a2b      	ldr	r2, [pc, #172]	; (800c080 <_dtoa_r+0x320>)
 800bfd2:	f00b 030f 	and.w	r3, fp, #15
 800bfd6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bfda:	ed93 7b00 	vldr	d7, [r3]
 800bfde:	ea4f 132b 	mov.w	r3, fp, asr #4
 800bfe2:	06da      	lsls	r2, r3, #27
 800bfe4:	f140 80d8 	bpl.w	800c198 <_dtoa_r+0x438>
 800bfe8:	4a26      	ldr	r2, [pc, #152]	; (800c084 <_dtoa_r+0x324>)
 800bfea:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800bfee:	ed92 6b08 	vldr	d6, [r2, #32]
 800bff2:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800bff6:	ed8d 6b02 	vstr	d6, [sp, #8]
 800bffa:	f003 030f 	and.w	r3, r3, #15
 800bffe:	2203      	movs	r2, #3
 800c000:	4920      	ldr	r1, [pc, #128]	; (800c084 <_dtoa_r+0x324>)
 800c002:	e04a      	b.n	800c09a <_dtoa_r+0x33a>
 800c004:	2301      	movs	r3, #1
 800c006:	9309      	str	r3, [sp, #36]	; 0x24
 800c008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c00a:	445b      	add	r3, fp
 800c00c:	f103 0901 	add.w	r9, r3, #1
 800c010:	9306      	str	r3, [sp, #24]
 800c012:	464b      	mov	r3, r9
 800c014:	2b01      	cmp	r3, #1
 800c016:	bfb8      	it	lt
 800c018:	2301      	movlt	r3, #1
 800c01a:	e7ba      	b.n	800bf92 <_dtoa_r+0x232>
 800c01c:	2300      	movs	r3, #0
 800c01e:	e7b2      	b.n	800bf86 <_dtoa_r+0x226>
 800c020:	2300      	movs	r3, #0
 800c022:	e7f0      	b.n	800c006 <_dtoa_r+0x2a6>
 800c024:	2501      	movs	r5, #1
 800c026:	2300      	movs	r3, #0
 800c028:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800c02c:	f04f 33ff 	mov.w	r3, #4294967295
 800c030:	9306      	str	r3, [sp, #24]
 800c032:	4699      	mov	r9, r3
 800c034:	2200      	movs	r2, #0
 800c036:	2312      	movs	r3, #18
 800c038:	920a      	str	r2, [sp, #40]	; 0x28
 800c03a:	e7aa      	b.n	800bf92 <_dtoa_r+0x232>
 800c03c:	2301      	movs	r3, #1
 800c03e:	9309      	str	r3, [sp, #36]	; 0x24
 800c040:	e7f4      	b.n	800c02c <_dtoa_r+0x2cc>
 800c042:	2301      	movs	r3, #1
 800c044:	9306      	str	r3, [sp, #24]
 800c046:	4699      	mov	r9, r3
 800c048:	461a      	mov	r2, r3
 800c04a:	e7f5      	b.n	800c038 <_dtoa_r+0x2d8>
 800c04c:	3101      	adds	r1, #1
 800c04e:	6071      	str	r1, [r6, #4]
 800c050:	0052      	lsls	r2, r2, #1
 800c052:	e7a2      	b.n	800bf9a <_dtoa_r+0x23a>
 800c054:	f3af 8000 	nop.w
 800c058:	636f4361 	.word	0x636f4361
 800c05c:	3fd287a7 	.word	0x3fd287a7
 800c060:	8b60c8b3 	.word	0x8b60c8b3
 800c064:	3fc68a28 	.word	0x3fc68a28
 800c068:	509f79fb 	.word	0x509f79fb
 800c06c:	3fd34413 	.word	0x3fd34413
 800c070:	7ff00000 	.word	0x7ff00000
 800c074:	0801ddc7 	.word	0x0801ddc7
 800c078:	0801ddbe 	.word	0x0801ddbe
 800c07c:	0801dfed 	.word	0x0801dfed
 800c080:	0801ddf8 	.word	0x0801ddf8
 800c084:	0801ddd0 	.word	0x0801ddd0
 800c088:	07de      	lsls	r6, r3, #31
 800c08a:	d504      	bpl.n	800c096 <_dtoa_r+0x336>
 800c08c:	ed91 6b00 	vldr	d6, [r1]
 800c090:	3201      	adds	r2, #1
 800c092:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c096:	105b      	asrs	r3, r3, #1
 800c098:	3108      	adds	r1, #8
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d1f4      	bne.n	800c088 <_dtoa_r+0x328>
 800c09e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c0a2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c0a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c0aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	f000 80a7 	beq.w	800c200 <_dtoa_r+0x4a0>
 800c0b2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c0b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c0ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c0be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0c2:	f140 809d 	bpl.w	800c200 <_dtoa_r+0x4a0>
 800c0c6:	f1b9 0f00 	cmp.w	r9, #0
 800c0ca:	f000 8099 	beq.w	800c200 <_dtoa_r+0x4a0>
 800c0ce:	9b06      	ldr	r3, [sp, #24]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	dd30      	ble.n	800c136 <_dtoa_r+0x3d6>
 800c0d4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800c0d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c0dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c0e0:	9d06      	ldr	r5, [sp, #24]
 800c0e2:	f10b 33ff 	add.w	r3, fp, #4294967295
 800c0e6:	3201      	adds	r2, #1
 800c0e8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c0ec:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800c0f0:	ee07 2a90 	vmov	s15, r2
 800c0f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c0f8:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c0fc:	ed8d 5b02 	vstr	d5, [sp, #8]
 800c100:	9a03      	ldr	r2, [sp, #12]
 800c102:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c106:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800c10a:	2d00      	cmp	r5, #0
 800c10c:	d17b      	bne.n	800c206 <_dtoa_r+0x4a6>
 800c10e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c112:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c116:	ec41 0b17 	vmov	d7, r0, r1
 800c11a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c11e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c122:	f300 8253 	bgt.w	800c5cc <_dtoa_r+0x86c>
 800c126:	eeb1 7b47 	vneg.f64	d7, d7
 800c12a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c12e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c132:	f100 8249 	bmi.w	800c5c8 <_dtoa_r+0x868>
 800c136:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c13a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c13e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c140:	2b00      	cmp	r3, #0
 800c142:	f2c0 8119 	blt.w	800c378 <_dtoa_r+0x618>
 800c146:	f1bb 0f0e 	cmp.w	fp, #14
 800c14a:	f300 8115 	bgt.w	800c378 <_dtoa_r+0x618>
 800c14e:	4bc3      	ldr	r3, [pc, #780]	; (800c45c <_dtoa_r+0x6fc>)
 800c150:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c154:	ed93 6b00 	vldr	d6, [r3]
 800c158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	f280 80ba 	bge.w	800c2d4 <_dtoa_r+0x574>
 800c160:	f1b9 0f00 	cmp.w	r9, #0
 800c164:	f300 80b6 	bgt.w	800c2d4 <_dtoa_r+0x574>
 800c168:	f040 822d 	bne.w	800c5c6 <_dtoa_r+0x866>
 800c16c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c170:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c174:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c178:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c180:	464d      	mov	r5, r9
 800c182:	464f      	mov	r7, r9
 800c184:	f280 8204 	bge.w	800c590 <_dtoa_r+0x830>
 800c188:	9b04      	ldr	r3, [sp, #16]
 800c18a:	9a04      	ldr	r2, [sp, #16]
 800c18c:	1c5e      	adds	r6, r3, #1
 800c18e:	2331      	movs	r3, #49	; 0x31
 800c190:	7013      	strb	r3, [r2, #0]
 800c192:	f10b 0b01 	add.w	fp, fp, #1
 800c196:	e1ff      	b.n	800c598 <_dtoa_r+0x838>
 800c198:	2202      	movs	r2, #2
 800c19a:	e731      	b.n	800c000 <_dtoa_r+0x2a0>
 800c19c:	d02e      	beq.n	800c1fc <_dtoa_r+0x49c>
 800c19e:	f1cb 0300 	rsb	r3, fp, #0
 800c1a2:	4aae      	ldr	r2, [pc, #696]	; (800c45c <_dtoa_r+0x6fc>)
 800c1a4:	f003 010f 	and.w	r1, r3, #15
 800c1a8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c1ac:	ed92 7b00 	vldr	d7, [r2]
 800c1b0:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800c1b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c1b8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800c1bc:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800c1c0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800c1c4:	49a6      	ldr	r1, [pc, #664]	; (800c460 <_dtoa_r+0x700>)
 800c1c6:	111b      	asrs	r3, r3, #4
 800c1c8:	2000      	movs	r0, #0
 800c1ca:	2202      	movs	r2, #2
 800c1cc:	b93b      	cbnz	r3, 800c1de <_dtoa_r+0x47e>
 800c1ce:	2800      	cmp	r0, #0
 800c1d0:	f43f af6b 	beq.w	800c0aa <_dtoa_r+0x34a>
 800c1d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c1d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1dc:	e765      	b.n	800c0aa <_dtoa_r+0x34a>
 800c1de:	07dd      	lsls	r5, r3, #31
 800c1e0:	d509      	bpl.n	800c1f6 <_dtoa_r+0x496>
 800c1e2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800c1e6:	ed91 7b00 	vldr	d7, [r1]
 800c1ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c1ee:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800c1f2:	3201      	adds	r2, #1
 800c1f4:	2001      	movs	r0, #1
 800c1f6:	105b      	asrs	r3, r3, #1
 800c1f8:	3108      	adds	r1, #8
 800c1fa:	e7e7      	b.n	800c1cc <_dtoa_r+0x46c>
 800c1fc:	2202      	movs	r2, #2
 800c1fe:	e754      	b.n	800c0aa <_dtoa_r+0x34a>
 800c200:	465b      	mov	r3, fp
 800c202:	464d      	mov	r5, r9
 800c204:	e770      	b.n	800c0e8 <_dtoa_r+0x388>
 800c206:	4a95      	ldr	r2, [pc, #596]	; (800c45c <_dtoa_r+0x6fc>)
 800c208:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800c20c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800c210:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c212:	ec41 0b17 	vmov	d7, r0, r1
 800c216:	b35a      	cbz	r2, 800c270 <_dtoa_r+0x510>
 800c218:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800c21c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800c220:	9e04      	ldr	r6, [sp, #16]
 800c222:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c226:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c22a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c22e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c232:	ee14 2a90 	vmov	r2, s9
 800c236:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c23a:	3230      	adds	r2, #48	; 0x30
 800c23c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c240:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c248:	f806 2b01 	strb.w	r2, [r6], #1
 800c24c:	d43b      	bmi.n	800c2c6 <_dtoa_r+0x566>
 800c24e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c252:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c25a:	d472      	bmi.n	800c342 <_dtoa_r+0x5e2>
 800c25c:	9a04      	ldr	r2, [sp, #16]
 800c25e:	1ab2      	subs	r2, r6, r2
 800c260:	4295      	cmp	r5, r2
 800c262:	f77f af68 	ble.w	800c136 <_dtoa_r+0x3d6>
 800c266:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c26a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c26e:	e7de      	b.n	800c22e <_dtoa_r+0x4ce>
 800c270:	9a04      	ldr	r2, [sp, #16]
 800c272:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c276:	1956      	adds	r6, r2, r5
 800c278:	4611      	mov	r1, r2
 800c27a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c27e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c282:	ee14 2a90 	vmov	r2, s9
 800c286:	3230      	adds	r2, #48	; 0x30
 800c288:	f801 2b01 	strb.w	r2, [r1], #1
 800c28c:	42b1      	cmp	r1, r6
 800c28e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c292:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c296:	d11a      	bne.n	800c2ce <_dtoa_r+0x56e>
 800c298:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c29c:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c2a0:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c2a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2a8:	dc4b      	bgt.n	800c342 <_dtoa_r+0x5e2>
 800c2aa:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c2ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2b6:	f57f af3e 	bpl.w	800c136 <_dtoa_r+0x3d6>
 800c2ba:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c2be:	2a30      	cmp	r2, #48	; 0x30
 800c2c0:	f106 31ff 	add.w	r1, r6, #4294967295
 800c2c4:	d001      	beq.n	800c2ca <_dtoa_r+0x56a>
 800c2c6:	469b      	mov	fp, r3
 800c2c8:	e02a      	b.n	800c320 <_dtoa_r+0x5c0>
 800c2ca:	460e      	mov	r6, r1
 800c2cc:	e7f5      	b.n	800c2ba <_dtoa_r+0x55a>
 800c2ce:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c2d2:	e7d4      	b.n	800c27e <_dtoa_r+0x51e>
 800c2d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c2d8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800c2dc:	9e04      	ldr	r6, [sp, #16]
 800c2de:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c2e2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c2e6:	ee15 3a10 	vmov	r3, s10
 800c2ea:	3330      	adds	r3, #48	; 0x30
 800c2ec:	f806 3b01 	strb.w	r3, [r6], #1
 800c2f0:	9b04      	ldr	r3, [sp, #16]
 800c2f2:	1af3      	subs	r3, r6, r3
 800c2f4:	4599      	cmp	r9, r3
 800c2f6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c2fa:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c2fe:	d133      	bne.n	800c368 <_dtoa_r+0x608>
 800c300:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c304:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c30c:	dc18      	bgt.n	800c340 <_dtoa_r+0x5e0>
 800c30e:	eeb4 7b46 	vcmp.f64	d7, d6
 800c312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c316:	d103      	bne.n	800c320 <_dtoa_r+0x5c0>
 800c318:	ee15 3a10 	vmov	r3, s10
 800c31c:	07db      	lsls	r3, r3, #31
 800c31e:	d40f      	bmi.n	800c340 <_dtoa_r+0x5e0>
 800c320:	9901      	ldr	r1, [sp, #4]
 800c322:	4620      	mov	r0, r4
 800c324:	f000 fabd 	bl	800c8a2 <_Bfree>
 800c328:	2300      	movs	r3, #0
 800c32a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c32c:	7033      	strb	r3, [r6, #0]
 800c32e:	f10b 0301 	add.w	r3, fp, #1
 800c332:	6013      	str	r3, [r2, #0]
 800c334:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c336:	2b00      	cmp	r3, #0
 800c338:	f43f ad5b 	beq.w	800bdf2 <_dtoa_r+0x92>
 800c33c:	601e      	str	r6, [r3, #0]
 800c33e:	e558      	b.n	800bdf2 <_dtoa_r+0x92>
 800c340:	465b      	mov	r3, fp
 800c342:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c346:	2939      	cmp	r1, #57	; 0x39
 800c348:	f106 32ff 	add.w	r2, r6, #4294967295
 800c34c:	d106      	bne.n	800c35c <_dtoa_r+0x5fc>
 800c34e:	9904      	ldr	r1, [sp, #16]
 800c350:	4291      	cmp	r1, r2
 800c352:	d107      	bne.n	800c364 <_dtoa_r+0x604>
 800c354:	2230      	movs	r2, #48	; 0x30
 800c356:	700a      	strb	r2, [r1, #0]
 800c358:	3301      	adds	r3, #1
 800c35a:	460a      	mov	r2, r1
 800c35c:	7811      	ldrb	r1, [r2, #0]
 800c35e:	3101      	adds	r1, #1
 800c360:	7011      	strb	r1, [r2, #0]
 800c362:	e7b0      	b.n	800c2c6 <_dtoa_r+0x566>
 800c364:	4616      	mov	r6, r2
 800c366:	e7ec      	b.n	800c342 <_dtoa_r+0x5e2>
 800c368:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c36c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c374:	d1b3      	bne.n	800c2de <_dtoa_r+0x57e>
 800c376:	e7d3      	b.n	800c320 <_dtoa_r+0x5c0>
 800c378:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c37a:	2a00      	cmp	r2, #0
 800c37c:	f000 808d 	beq.w	800c49a <_dtoa_r+0x73a>
 800c380:	9a08      	ldr	r2, [sp, #32]
 800c382:	2a01      	cmp	r2, #1
 800c384:	dc72      	bgt.n	800c46c <_dtoa_r+0x70c>
 800c386:	2f00      	cmp	r7, #0
 800c388:	d06c      	beq.n	800c464 <_dtoa_r+0x704>
 800c38a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c38e:	4645      	mov	r5, r8
 800c390:	4656      	mov	r6, sl
 800c392:	9a07      	ldr	r2, [sp, #28]
 800c394:	2101      	movs	r1, #1
 800c396:	441a      	add	r2, r3
 800c398:	4620      	mov	r0, r4
 800c39a:	449a      	add	sl, r3
 800c39c:	9207      	str	r2, [sp, #28]
 800c39e:	f000 fb20 	bl	800c9e2 <__i2b>
 800c3a2:	4607      	mov	r7, r0
 800c3a4:	2e00      	cmp	r6, #0
 800c3a6:	dd0b      	ble.n	800c3c0 <_dtoa_r+0x660>
 800c3a8:	9b07      	ldr	r3, [sp, #28]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	dd08      	ble.n	800c3c0 <_dtoa_r+0x660>
 800c3ae:	42b3      	cmp	r3, r6
 800c3b0:	9a07      	ldr	r2, [sp, #28]
 800c3b2:	bfa8      	it	ge
 800c3b4:	4633      	movge	r3, r6
 800c3b6:	ebaa 0a03 	sub.w	sl, sl, r3
 800c3ba:	1af6      	subs	r6, r6, r3
 800c3bc:	1ad3      	subs	r3, r2, r3
 800c3be:	9307      	str	r3, [sp, #28]
 800c3c0:	f1b8 0f00 	cmp.w	r8, #0
 800c3c4:	d01d      	beq.n	800c402 <_dtoa_r+0x6a2>
 800c3c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d06a      	beq.n	800c4a2 <_dtoa_r+0x742>
 800c3cc:	b18d      	cbz	r5, 800c3f2 <_dtoa_r+0x692>
 800c3ce:	4639      	mov	r1, r7
 800c3d0:	462a      	mov	r2, r5
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	f000 fba4 	bl	800cb20 <__pow5mult>
 800c3d8:	9a01      	ldr	r2, [sp, #4]
 800c3da:	4601      	mov	r1, r0
 800c3dc:	4607      	mov	r7, r0
 800c3de:	4620      	mov	r0, r4
 800c3e0:	f000 fb08 	bl	800c9f4 <__multiply>
 800c3e4:	9901      	ldr	r1, [sp, #4]
 800c3e6:	900c      	str	r0, [sp, #48]	; 0x30
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	f000 fa5a 	bl	800c8a2 <_Bfree>
 800c3ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3f0:	9301      	str	r3, [sp, #4]
 800c3f2:	ebb8 0205 	subs.w	r2, r8, r5
 800c3f6:	d004      	beq.n	800c402 <_dtoa_r+0x6a2>
 800c3f8:	9901      	ldr	r1, [sp, #4]
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	f000 fb90 	bl	800cb20 <__pow5mult>
 800c400:	9001      	str	r0, [sp, #4]
 800c402:	2101      	movs	r1, #1
 800c404:	4620      	mov	r0, r4
 800c406:	f000 faec 	bl	800c9e2 <__i2b>
 800c40a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c40c:	4605      	mov	r5, r0
 800c40e:	2b00      	cmp	r3, #0
 800c410:	f000 81ca 	beq.w	800c7a8 <_dtoa_r+0xa48>
 800c414:	461a      	mov	r2, r3
 800c416:	4601      	mov	r1, r0
 800c418:	4620      	mov	r0, r4
 800c41a:	f000 fb81 	bl	800cb20 <__pow5mult>
 800c41e:	9b08      	ldr	r3, [sp, #32]
 800c420:	2b01      	cmp	r3, #1
 800c422:	4605      	mov	r5, r0
 800c424:	dc44      	bgt.n	800c4b0 <_dtoa_r+0x750>
 800c426:	9b02      	ldr	r3, [sp, #8]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d13c      	bne.n	800c4a6 <_dtoa_r+0x746>
 800c42c:	9b03      	ldr	r3, [sp, #12]
 800c42e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c432:	2b00      	cmp	r3, #0
 800c434:	d137      	bne.n	800c4a6 <_dtoa_r+0x746>
 800c436:	9b03      	ldr	r3, [sp, #12]
 800c438:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c43c:	0d1b      	lsrs	r3, r3, #20
 800c43e:	051b      	lsls	r3, r3, #20
 800c440:	2b00      	cmp	r3, #0
 800c442:	d033      	beq.n	800c4ac <_dtoa_r+0x74c>
 800c444:	9b07      	ldr	r3, [sp, #28]
 800c446:	3301      	adds	r3, #1
 800c448:	f10a 0a01 	add.w	sl, sl, #1
 800c44c:	9307      	str	r3, [sp, #28]
 800c44e:	f04f 0801 	mov.w	r8, #1
 800c452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c454:	bb73      	cbnz	r3, 800c4b4 <_dtoa_r+0x754>
 800c456:	2001      	movs	r0, #1
 800c458:	e034      	b.n	800c4c4 <_dtoa_r+0x764>
 800c45a:	bf00      	nop
 800c45c:	0801ddf8 	.word	0x0801ddf8
 800c460:	0801ddd0 	.word	0x0801ddd0
 800c464:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c466:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c46a:	e790      	b.n	800c38e <_dtoa_r+0x62e>
 800c46c:	f109 35ff 	add.w	r5, r9, #4294967295
 800c470:	45a8      	cmp	r8, r5
 800c472:	bfbf      	itttt	lt
 800c474:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800c476:	eba5 0808 	sublt.w	r8, r5, r8
 800c47a:	4443      	addlt	r3, r8
 800c47c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800c47e:	bfb6      	itet	lt
 800c480:	46a8      	movlt	r8, r5
 800c482:	eba8 0505 	subge.w	r5, r8, r5
 800c486:	2500      	movlt	r5, #0
 800c488:	f1b9 0f00 	cmp.w	r9, #0
 800c48c:	bfb9      	ittee	lt
 800c48e:	ebaa 0609 	sublt.w	r6, sl, r9
 800c492:	2300      	movlt	r3, #0
 800c494:	4656      	movge	r6, sl
 800c496:	464b      	movge	r3, r9
 800c498:	e77b      	b.n	800c392 <_dtoa_r+0x632>
 800c49a:	4645      	mov	r5, r8
 800c49c:	4656      	mov	r6, sl
 800c49e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c4a0:	e780      	b.n	800c3a4 <_dtoa_r+0x644>
 800c4a2:	4642      	mov	r2, r8
 800c4a4:	e7a8      	b.n	800c3f8 <_dtoa_r+0x698>
 800c4a6:	f04f 0800 	mov.w	r8, #0
 800c4aa:	e7d2      	b.n	800c452 <_dtoa_r+0x6f2>
 800c4ac:	4698      	mov	r8, r3
 800c4ae:	e7d0      	b.n	800c452 <_dtoa_r+0x6f2>
 800c4b0:	f04f 0800 	mov.w	r8, #0
 800c4b4:	692b      	ldr	r3, [r5, #16]
 800c4b6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c4ba:	6918      	ldr	r0, [r3, #16]
 800c4bc:	f000 fa43 	bl	800c946 <__hi0bits>
 800c4c0:	f1c0 0020 	rsb	r0, r0, #32
 800c4c4:	9b07      	ldr	r3, [sp, #28]
 800c4c6:	4418      	add	r0, r3
 800c4c8:	f010 001f 	ands.w	r0, r0, #31
 800c4cc:	d047      	beq.n	800c55e <_dtoa_r+0x7fe>
 800c4ce:	f1c0 0320 	rsb	r3, r0, #32
 800c4d2:	2b04      	cmp	r3, #4
 800c4d4:	dd3b      	ble.n	800c54e <_dtoa_r+0x7ee>
 800c4d6:	9b07      	ldr	r3, [sp, #28]
 800c4d8:	f1c0 001c 	rsb	r0, r0, #28
 800c4dc:	4482      	add	sl, r0
 800c4de:	4406      	add	r6, r0
 800c4e0:	4403      	add	r3, r0
 800c4e2:	9307      	str	r3, [sp, #28]
 800c4e4:	f1ba 0f00 	cmp.w	sl, #0
 800c4e8:	dd05      	ble.n	800c4f6 <_dtoa_r+0x796>
 800c4ea:	4652      	mov	r2, sl
 800c4ec:	9901      	ldr	r1, [sp, #4]
 800c4ee:	4620      	mov	r0, r4
 800c4f0:	f000 fb64 	bl	800cbbc <__lshift>
 800c4f4:	9001      	str	r0, [sp, #4]
 800c4f6:	9b07      	ldr	r3, [sp, #28]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	dd05      	ble.n	800c508 <_dtoa_r+0x7a8>
 800c4fc:	4629      	mov	r1, r5
 800c4fe:	461a      	mov	r2, r3
 800c500:	4620      	mov	r0, r4
 800c502:	f000 fb5b 	bl	800cbbc <__lshift>
 800c506:	4605      	mov	r5, r0
 800c508:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c50a:	b353      	cbz	r3, 800c562 <_dtoa_r+0x802>
 800c50c:	4629      	mov	r1, r5
 800c50e:	9801      	ldr	r0, [sp, #4]
 800c510:	f000 fba8 	bl	800cc64 <__mcmp>
 800c514:	2800      	cmp	r0, #0
 800c516:	da24      	bge.n	800c562 <_dtoa_r+0x802>
 800c518:	2300      	movs	r3, #0
 800c51a:	220a      	movs	r2, #10
 800c51c:	9901      	ldr	r1, [sp, #4]
 800c51e:	4620      	mov	r0, r4
 800c520:	f000 f9d6 	bl	800c8d0 <__multadd>
 800c524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c526:	9001      	str	r0, [sp, #4]
 800c528:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	f000 8142 	beq.w	800c7b6 <_dtoa_r+0xa56>
 800c532:	2300      	movs	r3, #0
 800c534:	4639      	mov	r1, r7
 800c536:	220a      	movs	r2, #10
 800c538:	4620      	mov	r0, r4
 800c53a:	f000 f9c9 	bl	800c8d0 <__multadd>
 800c53e:	9b06      	ldr	r3, [sp, #24]
 800c540:	2b00      	cmp	r3, #0
 800c542:	4607      	mov	r7, r0
 800c544:	dc4b      	bgt.n	800c5de <_dtoa_r+0x87e>
 800c546:	9b08      	ldr	r3, [sp, #32]
 800c548:	2b02      	cmp	r3, #2
 800c54a:	dd48      	ble.n	800c5de <_dtoa_r+0x87e>
 800c54c:	e011      	b.n	800c572 <_dtoa_r+0x812>
 800c54e:	d0c9      	beq.n	800c4e4 <_dtoa_r+0x784>
 800c550:	9a07      	ldr	r2, [sp, #28]
 800c552:	331c      	adds	r3, #28
 800c554:	441a      	add	r2, r3
 800c556:	449a      	add	sl, r3
 800c558:	441e      	add	r6, r3
 800c55a:	4613      	mov	r3, r2
 800c55c:	e7c1      	b.n	800c4e2 <_dtoa_r+0x782>
 800c55e:	4603      	mov	r3, r0
 800c560:	e7f6      	b.n	800c550 <_dtoa_r+0x7f0>
 800c562:	f1b9 0f00 	cmp.w	r9, #0
 800c566:	dc34      	bgt.n	800c5d2 <_dtoa_r+0x872>
 800c568:	9b08      	ldr	r3, [sp, #32]
 800c56a:	2b02      	cmp	r3, #2
 800c56c:	dd31      	ble.n	800c5d2 <_dtoa_r+0x872>
 800c56e:	f8cd 9018 	str.w	r9, [sp, #24]
 800c572:	9b06      	ldr	r3, [sp, #24]
 800c574:	b963      	cbnz	r3, 800c590 <_dtoa_r+0x830>
 800c576:	4629      	mov	r1, r5
 800c578:	2205      	movs	r2, #5
 800c57a:	4620      	mov	r0, r4
 800c57c:	f000 f9a8 	bl	800c8d0 <__multadd>
 800c580:	4601      	mov	r1, r0
 800c582:	4605      	mov	r5, r0
 800c584:	9801      	ldr	r0, [sp, #4]
 800c586:	f000 fb6d 	bl	800cc64 <__mcmp>
 800c58a:	2800      	cmp	r0, #0
 800c58c:	f73f adfc 	bgt.w	800c188 <_dtoa_r+0x428>
 800c590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c592:	9e04      	ldr	r6, [sp, #16]
 800c594:	ea6f 0b03 	mvn.w	fp, r3
 800c598:	f04f 0900 	mov.w	r9, #0
 800c59c:	4629      	mov	r1, r5
 800c59e:	4620      	mov	r0, r4
 800c5a0:	f000 f97f 	bl	800c8a2 <_Bfree>
 800c5a4:	2f00      	cmp	r7, #0
 800c5a6:	f43f aebb 	beq.w	800c320 <_dtoa_r+0x5c0>
 800c5aa:	f1b9 0f00 	cmp.w	r9, #0
 800c5ae:	d005      	beq.n	800c5bc <_dtoa_r+0x85c>
 800c5b0:	45b9      	cmp	r9, r7
 800c5b2:	d003      	beq.n	800c5bc <_dtoa_r+0x85c>
 800c5b4:	4649      	mov	r1, r9
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	f000 f973 	bl	800c8a2 <_Bfree>
 800c5bc:	4639      	mov	r1, r7
 800c5be:	4620      	mov	r0, r4
 800c5c0:	f000 f96f 	bl	800c8a2 <_Bfree>
 800c5c4:	e6ac      	b.n	800c320 <_dtoa_r+0x5c0>
 800c5c6:	2500      	movs	r5, #0
 800c5c8:	462f      	mov	r7, r5
 800c5ca:	e7e1      	b.n	800c590 <_dtoa_r+0x830>
 800c5cc:	469b      	mov	fp, r3
 800c5ce:	462f      	mov	r7, r5
 800c5d0:	e5da      	b.n	800c188 <_dtoa_r+0x428>
 800c5d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5d4:	f8cd 9018 	str.w	r9, [sp, #24]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	f000 80f3 	beq.w	800c7c4 <_dtoa_r+0xa64>
 800c5de:	2e00      	cmp	r6, #0
 800c5e0:	dd05      	ble.n	800c5ee <_dtoa_r+0x88e>
 800c5e2:	4639      	mov	r1, r7
 800c5e4:	4632      	mov	r2, r6
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	f000 fae8 	bl	800cbbc <__lshift>
 800c5ec:	4607      	mov	r7, r0
 800c5ee:	f1b8 0f00 	cmp.w	r8, #0
 800c5f2:	d04c      	beq.n	800c68e <_dtoa_r+0x92e>
 800c5f4:	6879      	ldr	r1, [r7, #4]
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	f000 f91f 	bl	800c83a <_Balloc>
 800c5fc:	693a      	ldr	r2, [r7, #16]
 800c5fe:	3202      	adds	r2, #2
 800c600:	4606      	mov	r6, r0
 800c602:	0092      	lsls	r2, r2, #2
 800c604:	f107 010c 	add.w	r1, r7, #12
 800c608:	300c      	adds	r0, #12
 800c60a:	f000 f90b 	bl	800c824 <memcpy>
 800c60e:	2201      	movs	r2, #1
 800c610:	4631      	mov	r1, r6
 800c612:	4620      	mov	r0, r4
 800c614:	f000 fad2 	bl	800cbbc <__lshift>
 800c618:	9b02      	ldr	r3, [sp, #8]
 800c61a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c61e:	f003 0301 	and.w	r3, r3, #1
 800c622:	46b9      	mov	r9, r7
 800c624:	9307      	str	r3, [sp, #28]
 800c626:	4607      	mov	r7, r0
 800c628:	4629      	mov	r1, r5
 800c62a:	9801      	ldr	r0, [sp, #4]
 800c62c:	f7ff fb0c 	bl	800bc48 <quorem>
 800c630:	4649      	mov	r1, r9
 800c632:	4606      	mov	r6, r0
 800c634:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c638:	9801      	ldr	r0, [sp, #4]
 800c63a:	f000 fb13 	bl	800cc64 <__mcmp>
 800c63e:	463a      	mov	r2, r7
 800c640:	9002      	str	r0, [sp, #8]
 800c642:	4629      	mov	r1, r5
 800c644:	4620      	mov	r0, r4
 800c646:	f000 fb27 	bl	800cc98 <__mdiff>
 800c64a:	68c3      	ldr	r3, [r0, #12]
 800c64c:	4602      	mov	r2, r0
 800c64e:	bb03      	cbnz	r3, 800c692 <_dtoa_r+0x932>
 800c650:	4601      	mov	r1, r0
 800c652:	9009      	str	r0, [sp, #36]	; 0x24
 800c654:	9801      	ldr	r0, [sp, #4]
 800c656:	f000 fb05 	bl	800cc64 <__mcmp>
 800c65a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c65c:	4603      	mov	r3, r0
 800c65e:	4611      	mov	r1, r2
 800c660:	4620      	mov	r0, r4
 800c662:	9309      	str	r3, [sp, #36]	; 0x24
 800c664:	f000 f91d 	bl	800c8a2 <_Bfree>
 800c668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c66a:	b9a3      	cbnz	r3, 800c696 <_dtoa_r+0x936>
 800c66c:	9a08      	ldr	r2, [sp, #32]
 800c66e:	b992      	cbnz	r2, 800c696 <_dtoa_r+0x936>
 800c670:	9a07      	ldr	r2, [sp, #28]
 800c672:	b982      	cbnz	r2, 800c696 <_dtoa_r+0x936>
 800c674:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c678:	d029      	beq.n	800c6ce <_dtoa_r+0x96e>
 800c67a:	9b02      	ldr	r3, [sp, #8]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	dd01      	ble.n	800c684 <_dtoa_r+0x924>
 800c680:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800c684:	f10a 0601 	add.w	r6, sl, #1
 800c688:	f88a 8000 	strb.w	r8, [sl]
 800c68c:	e786      	b.n	800c59c <_dtoa_r+0x83c>
 800c68e:	4638      	mov	r0, r7
 800c690:	e7c2      	b.n	800c618 <_dtoa_r+0x8b8>
 800c692:	2301      	movs	r3, #1
 800c694:	e7e3      	b.n	800c65e <_dtoa_r+0x8fe>
 800c696:	9a02      	ldr	r2, [sp, #8]
 800c698:	2a00      	cmp	r2, #0
 800c69a:	db04      	blt.n	800c6a6 <_dtoa_r+0x946>
 800c69c:	d124      	bne.n	800c6e8 <_dtoa_r+0x988>
 800c69e:	9a08      	ldr	r2, [sp, #32]
 800c6a0:	bb12      	cbnz	r2, 800c6e8 <_dtoa_r+0x988>
 800c6a2:	9a07      	ldr	r2, [sp, #28]
 800c6a4:	bb02      	cbnz	r2, 800c6e8 <_dtoa_r+0x988>
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	ddec      	ble.n	800c684 <_dtoa_r+0x924>
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	9901      	ldr	r1, [sp, #4]
 800c6ae:	4620      	mov	r0, r4
 800c6b0:	f000 fa84 	bl	800cbbc <__lshift>
 800c6b4:	4629      	mov	r1, r5
 800c6b6:	9001      	str	r0, [sp, #4]
 800c6b8:	f000 fad4 	bl	800cc64 <__mcmp>
 800c6bc:	2800      	cmp	r0, #0
 800c6be:	dc03      	bgt.n	800c6c8 <_dtoa_r+0x968>
 800c6c0:	d1e0      	bne.n	800c684 <_dtoa_r+0x924>
 800c6c2:	f018 0f01 	tst.w	r8, #1
 800c6c6:	d0dd      	beq.n	800c684 <_dtoa_r+0x924>
 800c6c8:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c6cc:	d1d8      	bne.n	800c680 <_dtoa_r+0x920>
 800c6ce:	2339      	movs	r3, #57	; 0x39
 800c6d0:	f10a 0601 	add.w	r6, sl, #1
 800c6d4:	f88a 3000 	strb.w	r3, [sl]
 800c6d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c6dc:	2b39      	cmp	r3, #57	; 0x39
 800c6de:	f106 32ff 	add.w	r2, r6, #4294967295
 800c6e2:	d04c      	beq.n	800c77e <_dtoa_r+0xa1e>
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	e051      	b.n	800c78c <_dtoa_r+0xa2c>
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	f10a 0601 	add.w	r6, sl, #1
 800c6ee:	dd05      	ble.n	800c6fc <_dtoa_r+0x99c>
 800c6f0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c6f4:	d0eb      	beq.n	800c6ce <_dtoa_r+0x96e>
 800c6f6:	f108 0801 	add.w	r8, r8, #1
 800c6fa:	e7c5      	b.n	800c688 <_dtoa_r+0x928>
 800c6fc:	9b04      	ldr	r3, [sp, #16]
 800c6fe:	9a06      	ldr	r2, [sp, #24]
 800c700:	f806 8c01 	strb.w	r8, [r6, #-1]
 800c704:	1af3      	subs	r3, r6, r3
 800c706:	4293      	cmp	r3, r2
 800c708:	d021      	beq.n	800c74e <_dtoa_r+0x9ee>
 800c70a:	2300      	movs	r3, #0
 800c70c:	220a      	movs	r2, #10
 800c70e:	9901      	ldr	r1, [sp, #4]
 800c710:	4620      	mov	r0, r4
 800c712:	f000 f8dd 	bl	800c8d0 <__multadd>
 800c716:	45b9      	cmp	r9, r7
 800c718:	9001      	str	r0, [sp, #4]
 800c71a:	f04f 0300 	mov.w	r3, #0
 800c71e:	f04f 020a 	mov.w	r2, #10
 800c722:	4649      	mov	r1, r9
 800c724:	4620      	mov	r0, r4
 800c726:	d105      	bne.n	800c734 <_dtoa_r+0x9d4>
 800c728:	f000 f8d2 	bl	800c8d0 <__multadd>
 800c72c:	4681      	mov	r9, r0
 800c72e:	4607      	mov	r7, r0
 800c730:	46b2      	mov	sl, r6
 800c732:	e779      	b.n	800c628 <_dtoa_r+0x8c8>
 800c734:	f000 f8cc 	bl	800c8d0 <__multadd>
 800c738:	4639      	mov	r1, r7
 800c73a:	4681      	mov	r9, r0
 800c73c:	2300      	movs	r3, #0
 800c73e:	220a      	movs	r2, #10
 800c740:	4620      	mov	r0, r4
 800c742:	f000 f8c5 	bl	800c8d0 <__multadd>
 800c746:	4607      	mov	r7, r0
 800c748:	e7f2      	b.n	800c730 <_dtoa_r+0x9d0>
 800c74a:	f04f 0900 	mov.w	r9, #0
 800c74e:	2201      	movs	r2, #1
 800c750:	9901      	ldr	r1, [sp, #4]
 800c752:	4620      	mov	r0, r4
 800c754:	f000 fa32 	bl	800cbbc <__lshift>
 800c758:	4629      	mov	r1, r5
 800c75a:	9001      	str	r0, [sp, #4]
 800c75c:	f000 fa82 	bl	800cc64 <__mcmp>
 800c760:	2800      	cmp	r0, #0
 800c762:	dcb9      	bgt.n	800c6d8 <_dtoa_r+0x978>
 800c764:	d102      	bne.n	800c76c <_dtoa_r+0xa0c>
 800c766:	f018 0f01 	tst.w	r8, #1
 800c76a:	d1b5      	bne.n	800c6d8 <_dtoa_r+0x978>
 800c76c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c770:	2b30      	cmp	r3, #48	; 0x30
 800c772:	f106 32ff 	add.w	r2, r6, #4294967295
 800c776:	f47f af11 	bne.w	800c59c <_dtoa_r+0x83c>
 800c77a:	4616      	mov	r6, r2
 800c77c:	e7f6      	b.n	800c76c <_dtoa_r+0xa0c>
 800c77e:	9b04      	ldr	r3, [sp, #16]
 800c780:	4293      	cmp	r3, r2
 800c782:	d105      	bne.n	800c790 <_dtoa_r+0xa30>
 800c784:	9a04      	ldr	r2, [sp, #16]
 800c786:	f10b 0b01 	add.w	fp, fp, #1
 800c78a:	2331      	movs	r3, #49	; 0x31
 800c78c:	7013      	strb	r3, [r2, #0]
 800c78e:	e705      	b.n	800c59c <_dtoa_r+0x83c>
 800c790:	4616      	mov	r6, r2
 800c792:	e7a1      	b.n	800c6d8 <_dtoa_r+0x978>
 800c794:	4b16      	ldr	r3, [pc, #88]	; (800c7f0 <_dtoa_r+0xa90>)
 800c796:	f7ff bb48 	b.w	800be2a <_dtoa_r+0xca>
 800c79a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	f47f ab23 	bne.w	800bde8 <_dtoa_r+0x88>
 800c7a2:	4b14      	ldr	r3, [pc, #80]	; (800c7f4 <_dtoa_r+0xa94>)
 800c7a4:	f7ff bb41 	b.w	800be2a <_dtoa_r+0xca>
 800c7a8:	9b08      	ldr	r3, [sp, #32]
 800c7aa:	2b01      	cmp	r3, #1
 800c7ac:	f77f ae3b 	ble.w	800c426 <_dtoa_r+0x6c6>
 800c7b0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800c7b4:	e64f      	b.n	800c456 <_dtoa_r+0x6f6>
 800c7b6:	9b06      	ldr	r3, [sp, #24]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	dc03      	bgt.n	800c7c4 <_dtoa_r+0xa64>
 800c7bc:	9b08      	ldr	r3, [sp, #32]
 800c7be:	2b02      	cmp	r3, #2
 800c7c0:	f73f aed7 	bgt.w	800c572 <_dtoa_r+0x812>
 800c7c4:	9e04      	ldr	r6, [sp, #16]
 800c7c6:	9801      	ldr	r0, [sp, #4]
 800c7c8:	4629      	mov	r1, r5
 800c7ca:	f7ff fa3d 	bl	800bc48 <quorem>
 800c7ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c7d2:	f806 8b01 	strb.w	r8, [r6], #1
 800c7d6:	9b04      	ldr	r3, [sp, #16]
 800c7d8:	9a06      	ldr	r2, [sp, #24]
 800c7da:	1af3      	subs	r3, r6, r3
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	ddb4      	ble.n	800c74a <_dtoa_r+0x9ea>
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	220a      	movs	r2, #10
 800c7e4:	9901      	ldr	r1, [sp, #4]
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	f000 f872 	bl	800c8d0 <__multadd>
 800c7ec:	9001      	str	r0, [sp, #4]
 800c7ee:	e7ea      	b.n	800c7c6 <_dtoa_r+0xa66>
 800c7f0:	0801dfec 	.word	0x0801dfec
 800c7f4:	0801ddbe 	.word	0x0801ddbe

0800c7f8 <_localeconv_r>:
 800c7f8:	4b04      	ldr	r3, [pc, #16]	; (800c80c <_localeconv_r+0x14>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	6a18      	ldr	r0, [r3, #32]
 800c7fe:	4b04      	ldr	r3, [pc, #16]	; (800c810 <_localeconv_r+0x18>)
 800c800:	2800      	cmp	r0, #0
 800c802:	bf08      	it	eq
 800c804:	4618      	moveq	r0, r3
 800c806:	30f0      	adds	r0, #240	; 0xf0
 800c808:	4770      	bx	lr
 800c80a:	bf00      	nop
 800c80c:	24000208 	.word	0x24000208
 800c810:	2400026c 	.word	0x2400026c

0800c814 <malloc>:
 800c814:	4b02      	ldr	r3, [pc, #8]	; (800c820 <malloc+0xc>)
 800c816:	4601      	mov	r1, r0
 800c818:	6818      	ldr	r0, [r3, #0]
 800c81a:	f000 bb45 	b.w	800cea8 <_malloc_r>
 800c81e:	bf00      	nop
 800c820:	24000208 	.word	0x24000208

0800c824 <memcpy>:
 800c824:	b510      	push	{r4, lr}
 800c826:	1e43      	subs	r3, r0, #1
 800c828:	440a      	add	r2, r1
 800c82a:	4291      	cmp	r1, r2
 800c82c:	d100      	bne.n	800c830 <memcpy+0xc>
 800c82e:	bd10      	pop	{r4, pc}
 800c830:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c834:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c838:	e7f7      	b.n	800c82a <memcpy+0x6>

0800c83a <_Balloc>:
 800c83a:	b570      	push	{r4, r5, r6, lr}
 800c83c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c83e:	4604      	mov	r4, r0
 800c840:	460e      	mov	r6, r1
 800c842:	b93d      	cbnz	r5, 800c854 <_Balloc+0x1a>
 800c844:	2010      	movs	r0, #16
 800c846:	f7ff ffe5 	bl	800c814 <malloc>
 800c84a:	6260      	str	r0, [r4, #36]	; 0x24
 800c84c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c850:	6005      	str	r5, [r0, #0]
 800c852:	60c5      	str	r5, [r0, #12]
 800c854:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c856:	68eb      	ldr	r3, [r5, #12]
 800c858:	b183      	cbz	r3, 800c87c <_Balloc+0x42>
 800c85a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c85c:	68db      	ldr	r3, [r3, #12]
 800c85e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c862:	b9b8      	cbnz	r0, 800c894 <_Balloc+0x5a>
 800c864:	2101      	movs	r1, #1
 800c866:	fa01 f506 	lsl.w	r5, r1, r6
 800c86a:	1d6a      	adds	r2, r5, #5
 800c86c:	0092      	lsls	r2, r2, #2
 800c86e:	4620      	mov	r0, r4
 800c870:	f000 fabe 	bl	800cdf0 <_calloc_r>
 800c874:	b160      	cbz	r0, 800c890 <_Balloc+0x56>
 800c876:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c87a:	e00e      	b.n	800c89a <_Balloc+0x60>
 800c87c:	2221      	movs	r2, #33	; 0x21
 800c87e:	2104      	movs	r1, #4
 800c880:	4620      	mov	r0, r4
 800c882:	f000 fab5 	bl	800cdf0 <_calloc_r>
 800c886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c888:	60e8      	str	r0, [r5, #12]
 800c88a:	68db      	ldr	r3, [r3, #12]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d1e4      	bne.n	800c85a <_Balloc+0x20>
 800c890:	2000      	movs	r0, #0
 800c892:	bd70      	pop	{r4, r5, r6, pc}
 800c894:	6802      	ldr	r2, [r0, #0]
 800c896:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c89a:	2300      	movs	r3, #0
 800c89c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c8a0:	e7f7      	b.n	800c892 <_Balloc+0x58>

0800c8a2 <_Bfree>:
 800c8a2:	b570      	push	{r4, r5, r6, lr}
 800c8a4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c8a6:	4606      	mov	r6, r0
 800c8a8:	460d      	mov	r5, r1
 800c8aa:	b93c      	cbnz	r4, 800c8bc <_Bfree+0x1a>
 800c8ac:	2010      	movs	r0, #16
 800c8ae:	f7ff ffb1 	bl	800c814 <malloc>
 800c8b2:	6270      	str	r0, [r6, #36]	; 0x24
 800c8b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c8b8:	6004      	str	r4, [r0, #0]
 800c8ba:	60c4      	str	r4, [r0, #12]
 800c8bc:	b13d      	cbz	r5, 800c8ce <_Bfree+0x2c>
 800c8be:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c8c0:	686a      	ldr	r2, [r5, #4]
 800c8c2:	68db      	ldr	r3, [r3, #12]
 800c8c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c8c8:	6029      	str	r1, [r5, #0]
 800c8ca:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c8ce:	bd70      	pop	{r4, r5, r6, pc}

0800c8d0 <__multadd>:
 800c8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8d4:	690d      	ldr	r5, [r1, #16]
 800c8d6:	461f      	mov	r7, r3
 800c8d8:	4606      	mov	r6, r0
 800c8da:	460c      	mov	r4, r1
 800c8dc:	f101 0c14 	add.w	ip, r1, #20
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	f8dc 0000 	ldr.w	r0, [ip]
 800c8e6:	b281      	uxth	r1, r0
 800c8e8:	fb02 7101 	mla	r1, r2, r1, r7
 800c8ec:	0c0f      	lsrs	r7, r1, #16
 800c8ee:	0c00      	lsrs	r0, r0, #16
 800c8f0:	fb02 7000 	mla	r0, r2, r0, r7
 800c8f4:	b289      	uxth	r1, r1
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c8fc:	429d      	cmp	r5, r3
 800c8fe:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c902:	f84c 1b04 	str.w	r1, [ip], #4
 800c906:	dcec      	bgt.n	800c8e2 <__multadd+0x12>
 800c908:	b1d7      	cbz	r7, 800c940 <__multadd+0x70>
 800c90a:	68a3      	ldr	r3, [r4, #8]
 800c90c:	42ab      	cmp	r3, r5
 800c90e:	dc12      	bgt.n	800c936 <__multadd+0x66>
 800c910:	6861      	ldr	r1, [r4, #4]
 800c912:	4630      	mov	r0, r6
 800c914:	3101      	adds	r1, #1
 800c916:	f7ff ff90 	bl	800c83a <_Balloc>
 800c91a:	6922      	ldr	r2, [r4, #16]
 800c91c:	3202      	adds	r2, #2
 800c91e:	f104 010c 	add.w	r1, r4, #12
 800c922:	4680      	mov	r8, r0
 800c924:	0092      	lsls	r2, r2, #2
 800c926:	300c      	adds	r0, #12
 800c928:	f7ff ff7c 	bl	800c824 <memcpy>
 800c92c:	4621      	mov	r1, r4
 800c92e:	4630      	mov	r0, r6
 800c930:	f7ff ffb7 	bl	800c8a2 <_Bfree>
 800c934:	4644      	mov	r4, r8
 800c936:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c93a:	3501      	adds	r5, #1
 800c93c:	615f      	str	r7, [r3, #20]
 800c93e:	6125      	str	r5, [r4, #16]
 800c940:	4620      	mov	r0, r4
 800c942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c946 <__hi0bits>:
 800c946:	0c02      	lsrs	r2, r0, #16
 800c948:	0412      	lsls	r2, r2, #16
 800c94a:	4603      	mov	r3, r0
 800c94c:	b9b2      	cbnz	r2, 800c97c <__hi0bits+0x36>
 800c94e:	0403      	lsls	r3, r0, #16
 800c950:	2010      	movs	r0, #16
 800c952:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c956:	bf04      	itt	eq
 800c958:	021b      	lsleq	r3, r3, #8
 800c95a:	3008      	addeq	r0, #8
 800c95c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c960:	bf04      	itt	eq
 800c962:	011b      	lsleq	r3, r3, #4
 800c964:	3004      	addeq	r0, #4
 800c966:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c96a:	bf04      	itt	eq
 800c96c:	009b      	lsleq	r3, r3, #2
 800c96e:	3002      	addeq	r0, #2
 800c970:	2b00      	cmp	r3, #0
 800c972:	db06      	blt.n	800c982 <__hi0bits+0x3c>
 800c974:	005b      	lsls	r3, r3, #1
 800c976:	d503      	bpl.n	800c980 <__hi0bits+0x3a>
 800c978:	3001      	adds	r0, #1
 800c97a:	4770      	bx	lr
 800c97c:	2000      	movs	r0, #0
 800c97e:	e7e8      	b.n	800c952 <__hi0bits+0xc>
 800c980:	2020      	movs	r0, #32
 800c982:	4770      	bx	lr

0800c984 <__lo0bits>:
 800c984:	6803      	ldr	r3, [r0, #0]
 800c986:	f013 0207 	ands.w	r2, r3, #7
 800c98a:	4601      	mov	r1, r0
 800c98c:	d00b      	beq.n	800c9a6 <__lo0bits+0x22>
 800c98e:	07da      	lsls	r2, r3, #31
 800c990:	d423      	bmi.n	800c9da <__lo0bits+0x56>
 800c992:	0798      	lsls	r0, r3, #30
 800c994:	bf49      	itett	mi
 800c996:	085b      	lsrmi	r3, r3, #1
 800c998:	089b      	lsrpl	r3, r3, #2
 800c99a:	2001      	movmi	r0, #1
 800c99c:	600b      	strmi	r3, [r1, #0]
 800c99e:	bf5c      	itt	pl
 800c9a0:	600b      	strpl	r3, [r1, #0]
 800c9a2:	2002      	movpl	r0, #2
 800c9a4:	4770      	bx	lr
 800c9a6:	b298      	uxth	r0, r3
 800c9a8:	b9a8      	cbnz	r0, 800c9d6 <__lo0bits+0x52>
 800c9aa:	0c1b      	lsrs	r3, r3, #16
 800c9ac:	2010      	movs	r0, #16
 800c9ae:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c9b2:	bf04      	itt	eq
 800c9b4:	0a1b      	lsreq	r3, r3, #8
 800c9b6:	3008      	addeq	r0, #8
 800c9b8:	071a      	lsls	r2, r3, #28
 800c9ba:	bf04      	itt	eq
 800c9bc:	091b      	lsreq	r3, r3, #4
 800c9be:	3004      	addeq	r0, #4
 800c9c0:	079a      	lsls	r2, r3, #30
 800c9c2:	bf04      	itt	eq
 800c9c4:	089b      	lsreq	r3, r3, #2
 800c9c6:	3002      	addeq	r0, #2
 800c9c8:	07da      	lsls	r2, r3, #31
 800c9ca:	d402      	bmi.n	800c9d2 <__lo0bits+0x4e>
 800c9cc:	085b      	lsrs	r3, r3, #1
 800c9ce:	d006      	beq.n	800c9de <__lo0bits+0x5a>
 800c9d0:	3001      	adds	r0, #1
 800c9d2:	600b      	str	r3, [r1, #0]
 800c9d4:	4770      	bx	lr
 800c9d6:	4610      	mov	r0, r2
 800c9d8:	e7e9      	b.n	800c9ae <__lo0bits+0x2a>
 800c9da:	2000      	movs	r0, #0
 800c9dc:	4770      	bx	lr
 800c9de:	2020      	movs	r0, #32
 800c9e0:	4770      	bx	lr

0800c9e2 <__i2b>:
 800c9e2:	b510      	push	{r4, lr}
 800c9e4:	460c      	mov	r4, r1
 800c9e6:	2101      	movs	r1, #1
 800c9e8:	f7ff ff27 	bl	800c83a <_Balloc>
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	6144      	str	r4, [r0, #20]
 800c9f0:	6102      	str	r2, [r0, #16]
 800c9f2:	bd10      	pop	{r4, pc}

0800c9f4 <__multiply>:
 800c9f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9f8:	4614      	mov	r4, r2
 800c9fa:	690a      	ldr	r2, [r1, #16]
 800c9fc:	6923      	ldr	r3, [r4, #16]
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	bfb8      	it	lt
 800ca02:	460b      	movlt	r3, r1
 800ca04:	4688      	mov	r8, r1
 800ca06:	bfbc      	itt	lt
 800ca08:	46a0      	movlt	r8, r4
 800ca0a:	461c      	movlt	r4, r3
 800ca0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ca10:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ca14:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ca1c:	eb07 0609 	add.w	r6, r7, r9
 800ca20:	42b3      	cmp	r3, r6
 800ca22:	bfb8      	it	lt
 800ca24:	3101      	addlt	r1, #1
 800ca26:	f7ff ff08 	bl	800c83a <_Balloc>
 800ca2a:	f100 0514 	add.w	r5, r0, #20
 800ca2e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ca32:	462b      	mov	r3, r5
 800ca34:	2200      	movs	r2, #0
 800ca36:	4573      	cmp	r3, lr
 800ca38:	d316      	bcc.n	800ca68 <__multiply+0x74>
 800ca3a:	f104 0214 	add.w	r2, r4, #20
 800ca3e:	f108 0114 	add.w	r1, r8, #20
 800ca42:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ca46:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ca4a:	9300      	str	r3, [sp, #0]
 800ca4c:	9b00      	ldr	r3, [sp, #0]
 800ca4e:	9201      	str	r2, [sp, #4]
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d80c      	bhi.n	800ca6e <__multiply+0x7a>
 800ca54:	2e00      	cmp	r6, #0
 800ca56:	dd03      	ble.n	800ca60 <__multiply+0x6c>
 800ca58:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d05d      	beq.n	800cb1c <__multiply+0x128>
 800ca60:	6106      	str	r6, [r0, #16]
 800ca62:	b003      	add	sp, #12
 800ca64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca68:	f843 2b04 	str.w	r2, [r3], #4
 800ca6c:	e7e3      	b.n	800ca36 <__multiply+0x42>
 800ca6e:	f8b2 b000 	ldrh.w	fp, [r2]
 800ca72:	f1bb 0f00 	cmp.w	fp, #0
 800ca76:	d023      	beq.n	800cac0 <__multiply+0xcc>
 800ca78:	4689      	mov	r9, r1
 800ca7a:	46ac      	mov	ip, r5
 800ca7c:	f04f 0800 	mov.w	r8, #0
 800ca80:	f859 4b04 	ldr.w	r4, [r9], #4
 800ca84:	f8dc a000 	ldr.w	sl, [ip]
 800ca88:	b2a3      	uxth	r3, r4
 800ca8a:	fa1f fa8a 	uxth.w	sl, sl
 800ca8e:	fb0b a303 	mla	r3, fp, r3, sl
 800ca92:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ca96:	f8dc 4000 	ldr.w	r4, [ip]
 800ca9a:	4443      	add	r3, r8
 800ca9c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800caa0:	fb0b 840a 	mla	r4, fp, sl, r8
 800caa4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800caa8:	46e2      	mov	sl, ip
 800caaa:	b29b      	uxth	r3, r3
 800caac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cab0:	454f      	cmp	r7, r9
 800cab2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800cab6:	f84a 3b04 	str.w	r3, [sl], #4
 800caba:	d82b      	bhi.n	800cb14 <__multiply+0x120>
 800cabc:	f8cc 8004 	str.w	r8, [ip, #4]
 800cac0:	9b01      	ldr	r3, [sp, #4]
 800cac2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800cac6:	3204      	adds	r2, #4
 800cac8:	f1ba 0f00 	cmp.w	sl, #0
 800cacc:	d020      	beq.n	800cb10 <__multiply+0x11c>
 800cace:	682b      	ldr	r3, [r5, #0]
 800cad0:	4689      	mov	r9, r1
 800cad2:	46a8      	mov	r8, r5
 800cad4:	f04f 0b00 	mov.w	fp, #0
 800cad8:	f8b9 c000 	ldrh.w	ip, [r9]
 800cadc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800cae0:	fb0a 440c 	mla	r4, sl, ip, r4
 800cae4:	445c      	add	r4, fp
 800cae6:	46c4      	mov	ip, r8
 800cae8:	b29b      	uxth	r3, r3
 800caea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800caee:	f84c 3b04 	str.w	r3, [ip], #4
 800caf2:	f859 3b04 	ldr.w	r3, [r9], #4
 800caf6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800cafa:	0c1b      	lsrs	r3, r3, #16
 800cafc:	fb0a b303 	mla	r3, sl, r3, fp
 800cb00:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800cb04:	454f      	cmp	r7, r9
 800cb06:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800cb0a:	d805      	bhi.n	800cb18 <__multiply+0x124>
 800cb0c:	f8c8 3004 	str.w	r3, [r8, #4]
 800cb10:	3504      	adds	r5, #4
 800cb12:	e79b      	b.n	800ca4c <__multiply+0x58>
 800cb14:	46d4      	mov	ip, sl
 800cb16:	e7b3      	b.n	800ca80 <__multiply+0x8c>
 800cb18:	46e0      	mov	r8, ip
 800cb1a:	e7dd      	b.n	800cad8 <__multiply+0xe4>
 800cb1c:	3e01      	subs	r6, #1
 800cb1e:	e799      	b.n	800ca54 <__multiply+0x60>

0800cb20 <__pow5mult>:
 800cb20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb24:	4615      	mov	r5, r2
 800cb26:	f012 0203 	ands.w	r2, r2, #3
 800cb2a:	4606      	mov	r6, r0
 800cb2c:	460f      	mov	r7, r1
 800cb2e:	d007      	beq.n	800cb40 <__pow5mult+0x20>
 800cb30:	3a01      	subs	r2, #1
 800cb32:	4c21      	ldr	r4, [pc, #132]	; (800cbb8 <__pow5mult+0x98>)
 800cb34:	2300      	movs	r3, #0
 800cb36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cb3a:	f7ff fec9 	bl	800c8d0 <__multadd>
 800cb3e:	4607      	mov	r7, r0
 800cb40:	10ad      	asrs	r5, r5, #2
 800cb42:	d035      	beq.n	800cbb0 <__pow5mult+0x90>
 800cb44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cb46:	b93c      	cbnz	r4, 800cb58 <__pow5mult+0x38>
 800cb48:	2010      	movs	r0, #16
 800cb4a:	f7ff fe63 	bl	800c814 <malloc>
 800cb4e:	6270      	str	r0, [r6, #36]	; 0x24
 800cb50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cb54:	6004      	str	r4, [r0, #0]
 800cb56:	60c4      	str	r4, [r0, #12]
 800cb58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cb5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cb60:	b94c      	cbnz	r4, 800cb76 <__pow5mult+0x56>
 800cb62:	f240 2171 	movw	r1, #625	; 0x271
 800cb66:	4630      	mov	r0, r6
 800cb68:	f7ff ff3b 	bl	800c9e2 <__i2b>
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	f8c8 0008 	str.w	r0, [r8, #8]
 800cb72:	4604      	mov	r4, r0
 800cb74:	6003      	str	r3, [r0, #0]
 800cb76:	f04f 0800 	mov.w	r8, #0
 800cb7a:	07eb      	lsls	r3, r5, #31
 800cb7c:	d50a      	bpl.n	800cb94 <__pow5mult+0x74>
 800cb7e:	4639      	mov	r1, r7
 800cb80:	4622      	mov	r2, r4
 800cb82:	4630      	mov	r0, r6
 800cb84:	f7ff ff36 	bl	800c9f4 <__multiply>
 800cb88:	4639      	mov	r1, r7
 800cb8a:	4681      	mov	r9, r0
 800cb8c:	4630      	mov	r0, r6
 800cb8e:	f7ff fe88 	bl	800c8a2 <_Bfree>
 800cb92:	464f      	mov	r7, r9
 800cb94:	106d      	asrs	r5, r5, #1
 800cb96:	d00b      	beq.n	800cbb0 <__pow5mult+0x90>
 800cb98:	6820      	ldr	r0, [r4, #0]
 800cb9a:	b938      	cbnz	r0, 800cbac <__pow5mult+0x8c>
 800cb9c:	4622      	mov	r2, r4
 800cb9e:	4621      	mov	r1, r4
 800cba0:	4630      	mov	r0, r6
 800cba2:	f7ff ff27 	bl	800c9f4 <__multiply>
 800cba6:	6020      	str	r0, [r4, #0]
 800cba8:	f8c0 8000 	str.w	r8, [r0]
 800cbac:	4604      	mov	r4, r0
 800cbae:	e7e4      	b.n	800cb7a <__pow5mult+0x5a>
 800cbb0:	4638      	mov	r0, r7
 800cbb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbb6:	bf00      	nop
 800cbb8:	0801dec0 	.word	0x0801dec0

0800cbbc <__lshift>:
 800cbbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbc0:	460c      	mov	r4, r1
 800cbc2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cbc6:	6923      	ldr	r3, [r4, #16]
 800cbc8:	6849      	ldr	r1, [r1, #4]
 800cbca:	eb0a 0903 	add.w	r9, sl, r3
 800cbce:	68a3      	ldr	r3, [r4, #8]
 800cbd0:	4607      	mov	r7, r0
 800cbd2:	4616      	mov	r6, r2
 800cbd4:	f109 0501 	add.w	r5, r9, #1
 800cbd8:	42ab      	cmp	r3, r5
 800cbda:	db32      	blt.n	800cc42 <__lshift+0x86>
 800cbdc:	4638      	mov	r0, r7
 800cbde:	f7ff fe2c 	bl	800c83a <_Balloc>
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	4680      	mov	r8, r0
 800cbe6:	f100 0114 	add.w	r1, r0, #20
 800cbea:	461a      	mov	r2, r3
 800cbec:	4553      	cmp	r3, sl
 800cbee:	db2b      	blt.n	800cc48 <__lshift+0x8c>
 800cbf0:	6920      	ldr	r0, [r4, #16]
 800cbf2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cbf6:	f104 0314 	add.w	r3, r4, #20
 800cbfa:	f016 021f 	ands.w	r2, r6, #31
 800cbfe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cc02:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cc06:	d025      	beq.n	800cc54 <__lshift+0x98>
 800cc08:	f1c2 0e20 	rsb	lr, r2, #32
 800cc0c:	2000      	movs	r0, #0
 800cc0e:	681e      	ldr	r6, [r3, #0]
 800cc10:	468a      	mov	sl, r1
 800cc12:	4096      	lsls	r6, r2
 800cc14:	4330      	orrs	r0, r6
 800cc16:	f84a 0b04 	str.w	r0, [sl], #4
 800cc1a:	f853 0b04 	ldr.w	r0, [r3], #4
 800cc1e:	459c      	cmp	ip, r3
 800cc20:	fa20 f00e 	lsr.w	r0, r0, lr
 800cc24:	d814      	bhi.n	800cc50 <__lshift+0x94>
 800cc26:	6048      	str	r0, [r1, #4]
 800cc28:	b108      	cbz	r0, 800cc2e <__lshift+0x72>
 800cc2a:	f109 0502 	add.w	r5, r9, #2
 800cc2e:	3d01      	subs	r5, #1
 800cc30:	4638      	mov	r0, r7
 800cc32:	f8c8 5010 	str.w	r5, [r8, #16]
 800cc36:	4621      	mov	r1, r4
 800cc38:	f7ff fe33 	bl	800c8a2 <_Bfree>
 800cc3c:	4640      	mov	r0, r8
 800cc3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc42:	3101      	adds	r1, #1
 800cc44:	005b      	lsls	r3, r3, #1
 800cc46:	e7c7      	b.n	800cbd8 <__lshift+0x1c>
 800cc48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	e7cd      	b.n	800cbec <__lshift+0x30>
 800cc50:	4651      	mov	r1, sl
 800cc52:	e7dc      	b.n	800cc0e <__lshift+0x52>
 800cc54:	3904      	subs	r1, #4
 800cc56:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc5a:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc5e:	459c      	cmp	ip, r3
 800cc60:	d8f9      	bhi.n	800cc56 <__lshift+0x9a>
 800cc62:	e7e4      	b.n	800cc2e <__lshift+0x72>

0800cc64 <__mcmp>:
 800cc64:	6903      	ldr	r3, [r0, #16]
 800cc66:	690a      	ldr	r2, [r1, #16]
 800cc68:	1a9b      	subs	r3, r3, r2
 800cc6a:	b530      	push	{r4, r5, lr}
 800cc6c:	d10c      	bne.n	800cc88 <__mcmp+0x24>
 800cc6e:	0092      	lsls	r2, r2, #2
 800cc70:	3014      	adds	r0, #20
 800cc72:	3114      	adds	r1, #20
 800cc74:	1884      	adds	r4, r0, r2
 800cc76:	4411      	add	r1, r2
 800cc78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cc7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cc80:	4295      	cmp	r5, r2
 800cc82:	d003      	beq.n	800cc8c <__mcmp+0x28>
 800cc84:	d305      	bcc.n	800cc92 <__mcmp+0x2e>
 800cc86:	2301      	movs	r3, #1
 800cc88:	4618      	mov	r0, r3
 800cc8a:	bd30      	pop	{r4, r5, pc}
 800cc8c:	42a0      	cmp	r0, r4
 800cc8e:	d3f3      	bcc.n	800cc78 <__mcmp+0x14>
 800cc90:	e7fa      	b.n	800cc88 <__mcmp+0x24>
 800cc92:	f04f 33ff 	mov.w	r3, #4294967295
 800cc96:	e7f7      	b.n	800cc88 <__mcmp+0x24>

0800cc98 <__mdiff>:
 800cc98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc9c:	460d      	mov	r5, r1
 800cc9e:	4607      	mov	r7, r0
 800cca0:	4611      	mov	r1, r2
 800cca2:	4628      	mov	r0, r5
 800cca4:	4614      	mov	r4, r2
 800cca6:	f7ff ffdd 	bl	800cc64 <__mcmp>
 800ccaa:	1e06      	subs	r6, r0, #0
 800ccac:	d108      	bne.n	800ccc0 <__mdiff+0x28>
 800ccae:	4631      	mov	r1, r6
 800ccb0:	4638      	mov	r0, r7
 800ccb2:	f7ff fdc2 	bl	800c83a <_Balloc>
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ccbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccc0:	bfa4      	itt	ge
 800ccc2:	4623      	movge	r3, r4
 800ccc4:	462c      	movge	r4, r5
 800ccc6:	4638      	mov	r0, r7
 800ccc8:	6861      	ldr	r1, [r4, #4]
 800ccca:	bfa6      	itte	ge
 800cccc:	461d      	movge	r5, r3
 800ccce:	2600      	movge	r6, #0
 800ccd0:	2601      	movlt	r6, #1
 800ccd2:	f7ff fdb2 	bl	800c83a <_Balloc>
 800ccd6:	692b      	ldr	r3, [r5, #16]
 800ccd8:	60c6      	str	r6, [r0, #12]
 800ccda:	6926      	ldr	r6, [r4, #16]
 800ccdc:	f105 0914 	add.w	r9, r5, #20
 800cce0:	f104 0214 	add.w	r2, r4, #20
 800cce4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800cce8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ccec:	f100 0514 	add.w	r5, r0, #20
 800ccf0:	f04f 0e00 	mov.w	lr, #0
 800ccf4:	f852 ab04 	ldr.w	sl, [r2], #4
 800ccf8:	f859 4b04 	ldr.w	r4, [r9], #4
 800ccfc:	fa1e f18a 	uxtah	r1, lr, sl
 800cd00:	b2a3      	uxth	r3, r4
 800cd02:	1ac9      	subs	r1, r1, r3
 800cd04:	0c23      	lsrs	r3, r4, #16
 800cd06:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800cd0a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800cd0e:	b289      	uxth	r1, r1
 800cd10:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800cd14:	45c8      	cmp	r8, r9
 800cd16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800cd1a:	4694      	mov	ip, r2
 800cd1c:	f845 3b04 	str.w	r3, [r5], #4
 800cd20:	d8e8      	bhi.n	800ccf4 <__mdiff+0x5c>
 800cd22:	45bc      	cmp	ip, r7
 800cd24:	d304      	bcc.n	800cd30 <__mdiff+0x98>
 800cd26:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800cd2a:	b183      	cbz	r3, 800cd4e <__mdiff+0xb6>
 800cd2c:	6106      	str	r6, [r0, #16]
 800cd2e:	e7c5      	b.n	800ccbc <__mdiff+0x24>
 800cd30:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cd34:	fa1e f381 	uxtah	r3, lr, r1
 800cd38:	141a      	asrs	r2, r3, #16
 800cd3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cd3e:	b29b      	uxth	r3, r3
 800cd40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd44:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800cd48:	f845 3b04 	str.w	r3, [r5], #4
 800cd4c:	e7e9      	b.n	800cd22 <__mdiff+0x8a>
 800cd4e:	3e01      	subs	r6, #1
 800cd50:	e7e9      	b.n	800cd26 <__mdiff+0x8e>

0800cd52 <__d2b>:
 800cd52:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cd56:	460e      	mov	r6, r1
 800cd58:	2101      	movs	r1, #1
 800cd5a:	ec59 8b10 	vmov	r8, r9, d0
 800cd5e:	4615      	mov	r5, r2
 800cd60:	f7ff fd6b 	bl	800c83a <_Balloc>
 800cd64:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800cd68:	4607      	mov	r7, r0
 800cd6a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cd6e:	bb34      	cbnz	r4, 800cdbe <__d2b+0x6c>
 800cd70:	9301      	str	r3, [sp, #4]
 800cd72:	f1b8 0300 	subs.w	r3, r8, #0
 800cd76:	d027      	beq.n	800cdc8 <__d2b+0x76>
 800cd78:	a802      	add	r0, sp, #8
 800cd7a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800cd7e:	f7ff fe01 	bl	800c984 <__lo0bits>
 800cd82:	9900      	ldr	r1, [sp, #0]
 800cd84:	b1f0      	cbz	r0, 800cdc4 <__d2b+0x72>
 800cd86:	9a01      	ldr	r2, [sp, #4]
 800cd88:	f1c0 0320 	rsb	r3, r0, #32
 800cd8c:	fa02 f303 	lsl.w	r3, r2, r3
 800cd90:	430b      	orrs	r3, r1
 800cd92:	40c2      	lsrs	r2, r0
 800cd94:	617b      	str	r3, [r7, #20]
 800cd96:	9201      	str	r2, [sp, #4]
 800cd98:	9b01      	ldr	r3, [sp, #4]
 800cd9a:	61bb      	str	r3, [r7, #24]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	bf14      	ite	ne
 800cda0:	2102      	movne	r1, #2
 800cda2:	2101      	moveq	r1, #1
 800cda4:	6139      	str	r1, [r7, #16]
 800cda6:	b1c4      	cbz	r4, 800cdda <__d2b+0x88>
 800cda8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800cdac:	4404      	add	r4, r0
 800cdae:	6034      	str	r4, [r6, #0]
 800cdb0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cdb4:	6028      	str	r0, [r5, #0]
 800cdb6:	4638      	mov	r0, r7
 800cdb8:	b003      	add	sp, #12
 800cdba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cdc2:	e7d5      	b.n	800cd70 <__d2b+0x1e>
 800cdc4:	6179      	str	r1, [r7, #20]
 800cdc6:	e7e7      	b.n	800cd98 <__d2b+0x46>
 800cdc8:	a801      	add	r0, sp, #4
 800cdca:	f7ff fddb 	bl	800c984 <__lo0bits>
 800cdce:	9b01      	ldr	r3, [sp, #4]
 800cdd0:	617b      	str	r3, [r7, #20]
 800cdd2:	2101      	movs	r1, #1
 800cdd4:	6139      	str	r1, [r7, #16]
 800cdd6:	3020      	adds	r0, #32
 800cdd8:	e7e5      	b.n	800cda6 <__d2b+0x54>
 800cdda:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800cdde:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cde2:	6030      	str	r0, [r6, #0]
 800cde4:	6918      	ldr	r0, [r3, #16]
 800cde6:	f7ff fdae 	bl	800c946 <__hi0bits>
 800cdea:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800cdee:	e7e1      	b.n	800cdb4 <__d2b+0x62>

0800cdf0 <_calloc_r>:
 800cdf0:	b538      	push	{r3, r4, r5, lr}
 800cdf2:	fb02 f401 	mul.w	r4, r2, r1
 800cdf6:	4621      	mov	r1, r4
 800cdf8:	f000 f856 	bl	800cea8 <_malloc_r>
 800cdfc:	4605      	mov	r5, r0
 800cdfe:	b118      	cbz	r0, 800ce08 <_calloc_r+0x18>
 800ce00:	4622      	mov	r2, r4
 800ce02:	2100      	movs	r1, #0
 800ce04:	f7fe fab4 	bl	800b370 <memset>
 800ce08:	4628      	mov	r0, r5
 800ce0a:	bd38      	pop	{r3, r4, r5, pc}

0800ce0c <_free_r>:
 800ce0c:	b538      	push	{r3, r4, r5, lr}
 800ce0e:	4605      	mov	r5, r0
 800ce10:	2900      	cmp	r1, #0
 800ce12:	d045      	beq.n	800cea0 <_free_r+0x94>
 800ce14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce18:	1f0c      	subs	r4, r1, #4
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	bfb8      	it	lt
 800ce1e:	18e4      	addlt	r4, r4, r3
 800ce20:	f000 fa29 	bl	800d276 <__malloc_lock>
 800ce24:	4a1f      	ldr	r2, [pc, #124]	; (800cea4 <_free_r+0x98>)
 800ce26:	6813      	ldr	r3, [r2, #0]
 800ce28:	4610      	mov	r0, r2
 800ce2a:	b933      	cbnz	r3, 800ce3a <_free_r+0x2e>
 800ce2c:	6063      	str	r3, [r4, #4]
 800ce2e:	6014      	str	r4, [r2, #0]
 800ce30:	4628      	mov	r0, r5
 800ce32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce36:	f000 ba1f 	b.w	800d278 <__malloc_unlock>
 800ce3a:	42a3      	cmp	r3, r4
 800ce3c:	d90c      	bls.n	800ce58 <_free_r+0x4c>
 800ce3e:	6821      	ldr	r1, [r4, #0]
 800ce40:	1862      	adds	r2, r4, r1
 800ce42:	4293      	cmp	r3, r2
 800ce44:	bf04      	itt	eq
 800ce46:	681a      	ldreq	r2, [r3, #0]
 800ce48:	685b      	ldreq	r3, [r3, #4]
 800ce4a:	6063      	str	r3, [r4, #4]
 800ce4c:	bf04      	itt	eq
 800ce4e:	1852      	addeq	r2, r2, r1
 800ce50:	6022      	streq	r2, [r4, #0]
 800ce52:	6004      	str	r4, [r0, #0]
 800ce54:	e7ec      	b.n	800ce30 <_free_r+0x24>
 800ce56:	4613      	mov	r3, r2
 800ce58:	685a      	ldr	r2, [r3, #4]
 800ce5a:	b10a      	cbz	r2, 800ce60 <_free_r+0x54>
 800ce5c:	42a2      	cmp	r2, r4
 800ce5e:	d9fa      	bls.n	800ce56 <_free_r+0x4a>
 800ce60:	6819      	ldr	r1, [r3, #0]
 800ce62:	1858      	adds	r0, r3, r1
 800ce64:	42a0      	cmp	r0, r4
 800ce66:	d10b      	bne.n	800ce80 <_free_r+0x74>
 800ce68:	6820      	ldr	r0, [r4, #0]
 800ce6a:	4401      	add	r1, r0
 800ce6c:	1858      	adds	r0, r3, r1
 800ce6e:	4282      	cmp	r2, r0
 800ce70:	6019      	str	r1, [r3, #0]
 800ce72:	d1dd      	bne.n	800ce30 <_free_r+0x24>
 800ce74:	6810      	ldr	r0, [r2, #0]
 800ce76:	6852      	ldr	r2, [r2, #4]
 800ce78:	605a      	str	r2, [r3, #4]
 800ce7a:	4401      	add	r1, r0
 800ce7c:	6019      	str	r1, [r3, #0]
 800ce7e:	e7d7      	b.n	800ce30 <_free_r+0x24>
 800ce80:	d902      	bls.n	800ce88 <_free_r+0x7c>
 800ce82:	230c      	movs	r3, #12
 800ce84:	602b      	str	r3, [r5, #0]
 800ce86:	e7d3      	b.n	800ce30 <_free_r+0x24>
 800ce88:	6820      	ldr	r0, [r4, #0]
 800ce8a:	1821      	adds	r1, r4, r0
 800ce8c:	428a      	cmp	r2, r1
 800ce8e:	bf04      	itt	eq
 800ce90:	6811      	ldreq	r1, [r2, #0]
 800ce92:	6852      	ldreq	r2, [r2, #4]
 800ce94:	6062      	str	r2, [r4, #4]
 800ce96:	bf04      	itt	eq
 800ce98:	1809      	addeq	r1, r1, r0
 800ce9a:	6021      	streq	r1, [r4, #0]
 800ce9c:	605c      	str	r4, [r3, #4]
 800ce9e:	e7c7      	b.n	800ce30 <_free_r+0x24>
 800cea0:	bd38      	pop	{r3, r4, r5, pc}
 800cea2:	bf00      	nop
 800cea4:	240004f4 	.word	0x240004f4

0800cea8 <_malloc_r>:
 800cea8:	b570      	push	{r4, r5, r6, lr}
 800ceaa:	1ccd      	adds	r5, r1, #3
 800ceac:	f025 0503 	bic.w	r5, r5, #3
 800ceb0:	3508      	adds	r5, #8
 800ceb2:	2d0c      	cmp	r5, #12
 800ceb4:	bf38      	it	cc
 800ceb6:	250c      	movcc	r5, #12
 800ceb8:	2d00      	cmp	r5, #0
 800ceba:	4606      	mov	r6, r0
 800cebc:	db01      	blt.n	800cec2 <_malloc_r+0x1a>
 800cebe:	42a9      	cmp	r1, r5
 800cec0:	d903      	bls.n	800ceca <_malloc_r+0x22>
 800cec2:	230c      	movs	r3, #12
 800cec4:	6033      	str	r3, [r6, #0]
 800cec6:	2000      	movs	r0, #0
 800cec8:	bd70      	pop	{r4, r5, r6, pc}
 800ceca:	f000 f9d4 	bl	800d276 <__malloc_lock>
 800cece:	4a21      	ldr	r2, [pc, #132]	; (800cf54 <_malloc_r+0xac>)
 800ced0:	6814      	ldr	r4, [r2, #0]
 800ced2:	4621      	mov	r1, r4
 800ced4:	b991      	cbnz	r1, 800cefc <_malloc_r+0x54>
 800ced6:	4c20      	ldr	r4, [pc, #128]	; (800cf58 <_malloc_r+0xb0>)
 800ced8:	6823      	ldr	r3, [r4, #0]
 800ceda:	b91b      	cbnz	r3, 800cee4 <_malloc_r+0x3c>
 800cedc:	4630      	mov	r0, r6
 800cede:	f000 f98f 	bl	800d200 <_sbrk_r>
 800cee2:	6020      	str	r0, [r4, #0]
 800cee4:	4629      	mov	r1, r5
 800cee6:	4630      	mov	r0, r6
 800cee8:	f000 f98a 	bl	800d200 <_sbrk_r>
 800ceec:	1c43      	adds	r3, r0, #1
 800ceee:	d124      	bne.n	800cf3a <_malloc_r+0x92>
 800cef0:	230c      	movs	r3, #12
 800cef2:	6033      	str	r3, [r6, #0]
 800cef4:	4630      	mov	r0, r6
 800cef6:	f000 f9bf 	bl	800d278 <__malloc_unlock>
 800cefa:	e7e4      	b.n	800cec6 <_malloc_r+0x1e>
 800cefc:	680b      	ldr	r3, [r1, #0]
 800cefe:	1b5b      	subs	r3, r3, r5
 800cf00:	d418      	bmi.n	800cf34 <_malloc_r+0x8c>
 800cf02:	2b0b      	cmp	r3, #11
 800cf04:	d90f      	bls.n	800cf26 <_malloc_r+0x7e>
 800cf06:	600b      	str	r3, [r1, #0]
 800cf08:	50cd      	str	r5, [r1, r3]
 800cf0a:	18cc      	adds	r4, r1, r3
 800cf0c:	4630      	mov	r0, r6
 800cf0e:	f000 f9b3 	bl	800d278 <__malloc_unlock>
 800cf12:	f104 000b 	add.w	r0, r4, #11
 800cf16:	1d23      	adds	r3, r4, #4
 800cf18:	f020 0007 	bic.w	r0, r0, #7
 800cf1c:	1ac3      	subs	r3, r0, r3
 800cf1e:	d0d3      	beq.n	800cec8 <_malloc_r+0x20>
 800cf20:	425a      	negs	r2, r3
 800cf22:	50e2      	str	r2, [r4, r3]
 800cf24:	e7d0      	b.n	800cec8 <_malloc_r+0x20>
 800cf26:	428c      	cmp	r4, r1
 800cf28:	684b      	ldr	r3, [r1, #4]
 800cf2a:	bf16      	itet	ne
 800cf2c:	6063      	strne	r3, [r4, #4]
 800cf2e:	6013      	streq	r3, [r2, #0]
 800cf30:	460c      	movne	r4, r1
 800cf32:	e7eb      	b.n	800cf0c <_malloc_r+0x64>
 800cf34:	460c      	mov	r4, r1
 800cf36:	6849      	ldr	r1, [r1, #4]
 800cf38:	e7cc      	b.n	800ced4 <_malloc_r+0x2c>
 800cf3a:	1cc4      	adds	r4, r0, #3
 800cf3c:	f024 0403 	bic.w	r4, r4, #3
 800cf40:	42a0      	cmp	r0, r4
 800cf42:	d005      	beq.n	800cf50 <_malloc_r+0xa8>
 800cf44:	1a21      	subs	r1, r4, r0
 800cf46:	4630      	mov	r0, r6
 800cf48:	f000 f95a 	bl	800d200 <_sbrk_r>
 800cf4c:	3001      	adds	r0, #1
 800cf4e:	d0cf      	beq.n	800cef0 <_malloc_r+0x48>
 800cf50:	6025      	str	r5, [r4, #0]
 800cf52:	e7db      	b.n	800cf0c <_malloc_r+0x64>
 800cf54:	240004f4 	.word	0x240004f4
 800cf58:	240004f8 	.word	0x240004f8

0800cf5c <__ssputs_r>:
 800cf5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf60:	688e      	ldr	r6, [r1, #8]
 800cf62:	429e      	cmp	r6, r3
 800cf64:	4682      	mov	sl, r0
 800cf66:	460c      	mov	r4, r1
 800cf68:	4690      	mov	r8, r2
 800cf6a:	4699      	mov	r9, r3
 800cf6c:	d837      	bhi.n	800cfde <__ssputs_r+0x82>
 800cf6e:	898a      	ldrh	r2, [r1, #12]
 800cf70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf74:	d031      	beq.n	800cfda <__ssputs_r+0x7e>
 800cf76:	6825      	ldr	r5, [r4, #0]
 800cf78:	6909      	ldr	r1, [r1, #16]
 800cf7a:	1a6f      	subs	r7, r5, r1
 800cf7c:	6965      	ldr	r5, [r4, #20]
 800cf7e:	2302      	movs	r3, #2
 800cf80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf84:	fb95 f5f3 	sdiv	r5, r5, r3
 800cf88:	f109 0301 	add.w	r3, r9, #1
 800cf8c:	443b      	add	r3, r7
 800cf8e:	429d      	cmp	r5, r3
 800cf90:	bf38      	it	cc
 800cf92:	461d      	movcc	r5, r3
 800cf94:	0553      	lsls	r3, r2, #21
 800cf96:	d530      	bpl.n	800cffa <__ssputs_r+0x9e>
 800cf98:	4629      	mov	r1, r5
 800cf9a:	f7ff ff85 	bl	800cea8 <_malloc_r>
 800cf9e:	4606      	mov	r6, r0
 800cfa0:	b950      	cbnz	r0, 800cfb8 <__ssputs_r+0x5c>
 800cfa2:	230c      	movs	r3, #12
 800cfa4:	f8ca 3000 	str.w	r3, [sl]
 800cfa8:	89a3      	ldrh	r3, [r4, #12]
 800cfaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfae:	81a3      	strh	r3, [r4, #12]
 800cfb0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfb8:	463a      	mov	r2, r7
 800cfba:	6921      	ldr	r1, [r4, #16]
 800cfbc:	f7ff fc32 	bl	800c824 <memcpy>
 800cfc0:	89a3      	ldrh	r3, [r4, #12]
 800cfc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cfc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfca:	81a3      	strh	r3, [r4, #12]
 800cfcc:	6126      	str	r6, [r4, #16]
 800cfce:	6165      	str	r5, [r4, #20]
 800cfd0:	443e      	add	r6, r7
 800cfd2:	1bed      	subs	r5, r5, r7
 800cfd4:	6026      	str	r6, [r4, #0]
 800cfd6:	60a5      	str	r5, [r4, #8]
 800cfd8:	464e      	mov	r6, r9
 800cfda:	454e      	cmp	r6, r9
 800cfdc:	d900      	bls.n	800cfe0 <__ssputs_r+0x84>
 800cfde:	464e      	mov	r6, r9
 800cfe0:	4632      	mov	r2, r6
 800cfe2:	4641      	mov	r1, r8
 800cfe4:	6820      	ldr	r0, [r4, #0]
 800cfe6:	f000 f92d 	bl	800d244 <memmove>
 800cfea:	68a3      	ldr	r3, [r4, #8]
 800cfec:	1b9b      	subs	r3, r3, r6
 800cfee:	60a3      	str	r3, [r4, #8]
 800cff0:	6823      	ldr	r3, [r4, #0]
 800cff2:	441e      	add	r6, r3
 800cff4:	6026      	str	r6, [r4, #0]
 800cff6:	2000      	movs	r0, #0
 800cff8:	e7dc      	b.n	800cfb4 <__ssputs_r+0x58>
 800cffa:	462a      	mov	r2, r5
 800cffc:	f000 f93d 	bl	800d27a <_realloc_r>
 800d000:	4606      	mov	r6, r0
 800d002:	2800      	cmp	r0, #0
 800d004:	d1e2      	bne.n	800cfcc <__ssputs_r+0x70>
 800d006:	6921      	ldr	r1, [r4, #16]
 800d008:	4650      	mov	r0, sl
 800d00a:	f7ff feff 	bl	800ce0c <_free_r>
 800d00e:	e7c8      	b.n	800cfa2 <__ssputs_r+0x46>

0800d010 <_svfiprintf_r>:
 800d010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d014:	461d      	mov	r5, r3
 800d016:	898b      	ldrh	r3, [r1, #12]
 800d018:	061f      	lsls	r7, r3, #24
 800d01a:	b09d      	sub	sp, #116	; 0x74
 800d01c:	4680      	mov	r8, r0
 800d01e:	460c      	mov	r4, r1
 800d020:	4616      	mov	r6, r2
 800d022:	d50f      	bpl.n	800d044 <_svfiprintf_r+0x34>
 800d024:	690b      	ldr	r3, [r1, #16]
 800d026:	b96b      	cbnz	r3, 800d044 <_svfiprintf_r+0x34>
 800d028:	2140      	movs	r1, #64	; 0x40
 800d02a:	f7ff ff3d 	bl	800cea8 <_malloc_r>
 800d02e:	6020      	str	r0, [r4, #0]
 800d030:	6120      	str	r0, [r4, #16]
 800d032:	b928      	cbnz	r0, 800d040 <_svfiprintf_r+0x30>
 800d034:	230c      	movs	r3, #12
 800d036:	f8c8 3000 	str.w	r3, [r8]
 800d03a:	f04f 30ff 	mov.w	r0, #4294967295
 800d03e:	e0c8      	b.n	800d1d2 <_svfiprintf_r+0x1c2>
 800d040:	2340      	movs	r3, #64	; 0x40
 800d042:	6163      	str	r3, [r4, #20]
 800d044:	2300      	movs	r3, #0
 800d046:	9309      	str	r3, [sp, #36]	; 0x24
 800d048:	2320      	movs	r3, #32
 800d04a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d04e:	2330      	movs	r3, #48	; 0x30
 800d050:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d054:	9503      	str	r5, [sp, #12]
 800d056:	f04f 0b01 	mov.w	fp, #1
 800d05a:	4637      	mov	r7, r6
 800d05c:	463d      	mov	r5, r7
 800d05e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d062:	b10b      	cbz	r3, 800d068 <_svfiprintf_r+0x58>
 800d064:	2b25      	cmp	r3, #37	; 0x25
 800d066:	d13e      	bne.n	800d0e6 <_svfiprintf_r+0xd6>
 800d068:	ebb7 0a06 	subs.w	sl, r7, r6
 800d06c:	d00b      	beq.n	800d086 <_svfiprintf_r+0x76>
 800d06e:	4653      	mov	r3, sl
 800d070:	4632      	mov	r2, r6
 800d072:	4621      	mov	r1, r4
 800d074:	4640      	mov	r0, r8
 800d076:	f7ff ff71 	bl	800cf5c <__ssputs_r>
 800d07a:	3001      	adds	r0, #1
 800d07c:	f000 80a4 	beq.w	800d1c8 <_svfiprintf_r+0x1b8>
 800d080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d082:	4453      	add	r3, sl
 800d084:	9309      	str	r3, [sp, #36]	; 0x24
 800d086:	783b      	ldrb	r3, [r7, #0]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	f000 809d 	beq.w	800d1c8 <_svfiprintf_r+0x1b8>
 800d08e:	2300      	movs	r3, #0
 800d090:	f04f 32ff 	mov.w	r2, #4294967295
 800d094:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d098:	9304      	str	r3, [sp, #16]
 800d09a:	9307      	str	r3, [sp, #28]
 800d09c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0a0:	931a      	str	r3, [sp, #104]	; 0x68
 800d0a2:	462f      	mov	r7, r5
 800d0a4:	2205      	movs	r2, #5
 800d0a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d0aa:	4850      	ldr	r0, [pc, #320]	; (800d1ec <_svfiprintf_r+0x1dc>)
 800d0ac:	f7f3 f980 	bl	80003b0 <memchr>
 800d0b0:	9b04      	ldr	r3, [sp, #16]
 800d0b2:	b9d0      	cbnz	r0, 800d0ea <_svfiprintf_r+0xda>
 800d0b4:	06d9      	lsls	r1, r3, #27
 800d0b6:	bf44      	itt	mi
 800d0b8:	2220      	movmi	r2, #32
 800d0ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d0be:	071a      	lsls	r2, r3, #28
 800d0c0:	bf44      	itt	mi
 800d0c2:	222b      	movmi	r2, #43	; 0x2b
 800d0c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d0c8:	782a      	ldrb	r2, [r5, #0]
 800d0ca:	2a2a      	cmp	r2, #42	; 0x2a
 800d0cc:	d015      	beq.n	800d0fa <_svfiprintf_r+0xea>
 800d0ce:	9a07      	ldr	r2, [sp, #28]
 800d0d0:	462f      	mov	r7, r5
 800d0d2:	2000      	movs	r0, #0
 800d0d4:	250a      	movs	r5, #10
 800d0d6:	4639      	mov	r1, r7
 800d0d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0dc:	3b30      	subs	r3, #48	; 0x30
 800d0de:	2b09      	cmp	r3, #9
 800d0e0:	d94d      	bls.n	800d17e <_svfiprintf_r+0x16e>
 800d0e2:	b1b8      	cbz	r0, 800d114 <_svfiprintf_r+0x104>
 800d0e4:	e00f      	b.n	800d106 <_svfiprintf_r+0xf6>
 800d0e6:	462f      	mov	r7, r5
 800d0e8:	e7b8      	b.n	800d05c <_svfiprintf_r+0x4c>
 800d0ea:	4a40      	ldr	r2, [pc, #256]	; (800d1ec <_svfiprintf_r+0x1dc>)
 800d0ec:	1a80      	subs	r0, r0, r2
 800d0ee:	fa0b f000 	lsl.w	r0, fp, r0
 800d0f2:	4318      	orrs	r0, r3
 800d0f4:	9004      	str	r0, [sp, #16]
 800d0f6:	463d      	mov	r5, r7
 800d0f8:	e7d3      	b.n	800d0a2 <_svfiprintf_r+0x92>
 800d0fa:	9a03      	ldr	r2, [sp, #12]
 800d0fc:	1d11      	adds	r1, r2, #4
 800d0fe:	6812      	ldr	r2, [r2, #0]
 800d100:	9103      	str	r1, [sp, #12]
 800d102:	2a00      	cmp	r2, #0
 800d104:	db01      	blt.n	800d10a <_svfiprintf_r+0xfa>
 800d106:	9207      	str	r2, [sp, #28]
 800d108:	e004      	b.n	800d114 <_svfiprintf_r+0x104>
 800d10a:	4252      	negs	r2, r2
 800d10c:	f043 0302 	orr.w	r3, r3, #2
 800d110:	9207      	str	r2, [sp, #28]
 800d112:	9304      	str	r3, [sp, #16]
 800d114:	783b      	ldrb	r3, [r7, #0]
 800d116:	2b2e      	cmp	r3, #46	; 0x2e
 800d118:	d10c      	bne.n	800d134 <_svfiprintf_r+0x124>
 800d11a:	787b      	ldrb	r3, [r7, #1]
 800d11c:	2b2a      	cmp	r3, #42	; 0x2a
 800d11e:	d133      	bne.n	800d188 <_svfiprintf_r+0x178>
 800d120:	9b03      	ldr	r3, [sp, #12]
 800d122:	1d1a      	adds	r2, r3, #4
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	9203      	str	r2, [sp, #12]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	bfb8      	it	lt
 800d12c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d130:	3702      	adds	r7, #2
 800d132:	9305      	str	r3, [sp, #20]
 800d134:	4d2e      	ldr	r5, [pc, #184]	; (800d1f0 <_svfiprintf_r+0x1e0>)
 800d136:	7839      	ldrb	r1, [r7, #0]
 800d138:	2203      	movs	r2, #3
 800d13a:	4628      	mov	r0, r5
 800d13c:	f7f3 f938 	bl	80003b0 <memchr>
 800d140:	b138      	cbz	r0, 800d152 <_svfiprintf_r+0x142>
 800d142:	2340      	movs	r3, #64	; 0x40
 800d144:	1b40      	subs	r0, r0, r5
 800d146:	fa03 f000 	lsl.w	r0, r3, r0
 800d14a:	9b04      	ldr	r3, [sp, #16]
 800d14c:	4303      	orrs	r3, r0
 800d14e:	3701      	adds	r7, #1
 800d150:	9304      	str	r3, [sp, #16]
 800d152:	7839      	ldrb	r1, [r7, #0]
 800d154:	4827      	ldr	r0, [pc, #156]	; (800d1f4 <_svfiprintf_r+0x1e4>)
 800d156:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d15a:	2206      	movs	r2, #6
 800d15c:	1c7e      	adds	r6, r7, #1
 800d15e:	f7f3 f927 	bl	80003b0 <memchr>
 800d162:	2800      	cmp	r0, #0
 800d164:	d038      	beq.n	800d1d8 <_svfiprintf_r+0x1c8>
 800d166:	4b24      	ldr	r3, [pc, #144]	; (800d1f8 <_svfiprintf_r+0x1e8>)
 800d168:	bb13      	cbnz	r3, 800d1b0 <_svfiprintf_r+0x1a0>
 800d16a:	9b03      	ldr	r3, [sp, #12]
 800d16c:	3307      	adds	r3, #7
 800d16e:	f023 0307 	bic.w	r3, r3, #7
 800d172:	3308      	adds	r3, #8
 800d174:	9303      	str	r3, [sp, #12]
 800d176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d178:	444b      	add	r3, r9
 800d17a:	9309      	str	r3, [sp, #36]	; 0x24
 800d17c:	e76d      	b.n	800d05a <_svfiprintf_r+0x4a>
 800d17e:	fb05 3202 	mla	r2, r5, r2, r3
 800d182:	2001      	movs	r0, #1
 800d184:	460f      	mov	r7, r1
 800d186:	e7a6      	b.n	800d0d6 <_svfiprintf_r+0xc6>
 800d188:	2300      	movs	r3, #0
 800d18a:	3701      	adds	r7, #1
 800d18c:	9305      	str	r3, [sp, #20]
 800d18e:	4619      	mov	r1, r3
 800d190:	250a      	movs	r5, #10
 800d192:	4638      	mov	r0, r7
 800d194:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d198:	3a30      	subs	r2, #48	; 0x30
 800d19a:	2a09      	cmp	r2, #9
 800d19c:	d903      	bls.n	800d1a6 <_svfiprintf_r+0x196>
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d0c8      	beq.n	800d134 <_svfiprintf_r+0x124>
 800d1a2:	9105      	str	r1, [sp, #20]
 800d1a4:	e7c6      	b.n	800d134 <_svfiprintf_r+0x124>
 800d1a6:	fb05 2101 	mla	r1, r5, r1, r2
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	4607      	mov	r7, r0
 800d1ae:	e7f0      	b.n	800d192 <_svfiprintf_r+0x182>
 800d1b0:	ab03      	add	r3, sp, #12
 800d1b2:	9300      	str	r3, [sp, #0]
 800d1b4:	4622      	mov	r2, r4
 800d1b6:	4b11      	ldr	r3, [pc, #68]	; (800d1fc <_svfiprintf_r+0x1ec>)
 800d1b8:	a904      	add	r1, sp, #16
 800d1ba:	4640      	mov	r0, r8
 800d1bc:	f7fe f968 	bl	800b490 <_printf_float>
 800d1c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d1c4:	4681      	mov	r9, r0
 800d1c6:	d1d6      	bne.n	800d176 <_svfiprintf_r+0x166>
 800d1c8:	89a3      	ldrh	r3, [r4, #12]
 800d1ca:	065b      	lsls	r3, r3, #25
 800d1cc:	f53f af35 	bmi.w	800d03a <_svfiprintf_r+0x2a>
 800d1d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1d2:	b01d      	add	sp, #116	; 0x74
 800d1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1d8:	ab03      	add	r3, sp, #12
 800d1da:	9300      	str	r3, [sp, #0]
 800d1dc:	4622      	mov	r2, r4
 800d1de:	4b07      	ldr	r3, [pc, #28]	; (800d1fc <_svfiprintf_r+0x1ec>)
 800d1e0:	a904      	add	r1, sp, #16
 800d1e2:	4640      	mov	r0, r8
 800d1e4:	f7fe fbf6 	bl	800b9d4 <_printf_i>
 800d1e8:	e7ea      	b.n	800d1c0 <_svfiprintf_r+0x1b0>
 800d1ea:	bf00      	nop
 800d1ec:	0801decc 	.word	0x0801decc
 800d1f0:	0801ded2 	.word	0x0801ded2
 800d1f4:	0801ded6 	.word	0x0801ded6
 800d1f8:	0800b491 	.word	0x0800b491
 800d1fc:	0800cf5d 	.word	0x0800cf5d

0800d200 <_sbrk_r>:
 800d200:	b538      	push	{r3, r4, r5, lr}
 800d202:	4c06      	ldr	r4, [pc, #24]	; (800d21c <_sbrk_r+0x1c>)
 800d204:	2300      	movs	r3, #0
 800d206:	4605      	mov	r5, r0
 800d208:	4608      	mov	r0, r1
 800d20a:	6023      	str	r3, [r4, #0]
 800d20c:	f7f6 fac0 	bl	8003790 <_sbrk>
 800d210:	1c43      	adds	r3, r0, #1
 800d212:	d102      	bne.n	800d21a <_sbrk_r+0x1a>
 800d214:	6823      	ldr	r3, [r4, #0]
 800d216:	b103      	cbz	r3, 800d21a <_sbrk_r+0x1a>
 800d218:	602b      	str	r3, [r5, #0]
 800d21a:	bd38      	pop	{r3, r4, r5, pc}
 800d21c:	2400d644 	.word	0x2400d644

0800d220 <__ascii_mbtowc>:
 800d220:	b082      	sub	sp, #8
 800d222:	b901      	cbnz	r1, 800d226 <__ascii_mbtowc+0x6>
 800d224:	a901      	add	r1, sp, #4
 800d226:	b142      	cbz	r2, 800d23a <__ascii_mbtowc+0x1a>
 800d228:	b14b      	cbz	r3, 800d23e <__ascii_mbtowc+0x1e>
 800d22a:	7813      	ldrb	r3, [r2, #0]
 800d22c:	600b      	str	r3, [r1, #0]
 800d22e:	7812      	ldrb	r2, [r2, #0]
 800d230:	1c10      	adds	r0, r2, #0
 800d232:	bf18      	it	ne
 800d234:	2001      	movne	r0, #1
 800d236:	b002      	add	sp, #8
 800d238:	4770      	bx	lr
 800d23a:	4610      	mov	r0, r2
 800d23c:	e7fb      	b.n	800d236 <__ascii_mbtowc+0x16>
 800d23e:	f06f 0001 	mvn.w	r0, #1
 800d242:	e7f8      	b.n	800d236 <__ascii_mbtowc+0x16>

0800d244 <memmove>:
 800d244:	4288      	cmp	r0, r1
 800d246:	b510      	push	{r4, lr}
 800d248:	eb01 0302 	add.w	r3, r1, r2
 800d24c:	d807      	bhi.n	800d25e <memmove+0x1a>
 800d24e:	1e42      	subs	r2, r0, #1
 800d250:	4299      	cmp	r1, r3
 800d252:	d00a      	beq.n	800d26a <memmove+0x26>
 800d254:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d258:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d25c:	e7f8      	b.n	800d250 <memmove+0xc>
 800d25e:	4283      	cmp	r3, r0
 800d260:	d9f5      	bls.n	800d24e <memmove+0xa>
 800d262:	1881      	adds	r1, r0, r2
 800d264:	1ad2      	subs	r2, r2, r3
 800d266:	42d3      	cmn	r3, r2
 800d268:	d100      	bne.n	800d26c <memmove+0x28>
 800d26a:	bd10      	pop	{r4, pc}
 800d26c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d270:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d274:	e7f7      	b.n	800d266 <memmove+0x22>

0800d276 <__malloc_lock>:
 800d276:	4770      	bx	lr

0800d278 <__malloc_unlock>:
 800d278:	4770      	bx	lr

0800d27a <_realloc_r>:
 800d27a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d27c:	4607      	mov	r7, r0
 800d27e:	4614      	mov	r4, r2
 800d280:	460e      	mov	r6, r1
 800d282:	b921      	cbnz	r1, 800d28e <_realloc_r+0x14>
 800d284:	4611      	mov	r1, r2
 800d286:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d28a:	f7ff be0d 	b.w	800cea8 <_malloc_r>
 800d28e:	b922      	cbnz	r2, 800d29a <_realloc_r+0x20>
 800d290:	f7ff fdbc 	bl	800ce0c <_free_r>
 800d294:	4625      	mov	r5, r4
 800d296:	4628      	mov	r0, r5
 800d298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d29a:	f000 f821 	bl	800d2e0 <_malloc_usable_size_r>
 800d29e:	42a0      	cmp	r0, r4
 800d2a0:	d20f      	bcs.n	800d2c2 <_realloc_r+0x48>
 800d2a2:	4621      	mov	r1, r4
 800d2a4:	4638      	mov	r0, r7
 800d2a6:	f7ff fdff 	bl	800cea8 <_malloc_r>
 800d2aa:	4605      	mov	r5, r0
 800d2ac:	2800      	cmp	r0, #0
 800d2ae:	d0f2      	beq.n	800d296 <_realloc_r+0x1c>
 800d2b0:	4631      	mov	r1, r6
 800d2b2:	4622      	mov	r2, r4
 800d2b4:	f7ff fab6 	bl	800c824 <memcpy>
 800d2b8:	4631      	mov	r1, r6
 800d2ba:	4638      	mov	r0, r7
 800d2bc:	f7ff fda6 	bl	800ce0c <_free_r>
 800d2c0:	e7e9      	b.n	800d296 <_realloc_r+0x1c>
 800d2c2:	4635      	mov	r5, r6
 800d2c4:	e7e7      	b.n	800d296 <_realloc_r+0x1c>

0800d2c6 <__ascii_wctomb>:
 800d2c6:	b149      	cbz	r1, 800d2dc <__ascii_wctomb+0x16>
 800d2c8:	2aff      	cmp	r2, #255	; 0xff
 800d2ca:	bf85      	ittet	hi
 800d2cc:	238a      	movhi	r3, #138	; 0x8a
 800d2ce:	6003      	strhi	r3, [r0, #0]
 800d2d0:	700a      	strbls	r2, [r1, #0]
 800d2d2:	f04f 30ff 	movhi.w	r0, #4294967295
 800d2d6:	bf98      	it	ls
 800d2d8:	2001      	movls	r0, #1
 800d2da:	4770      	bx	lr
 800d2dc:	4608      	mov	r0, r1
 800d2de:	4770      	bx	lr

0800d2e0 <_malloc_usable_size_r>:
 800d2e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2e4:	1f18      	subs	r0, r3, #4
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	bfbc      	itt	lt
 800d2ea:	580b      	ldrlt	r3, [r1, r0]
 800d2ec:	18c0      	addlt	r0, r0, r3
 800d2ee:	4770      	bx	lr

0800d2f0 <cos>:
 800d2f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2f2:	eeb0 7b40 	vmov.f64	d7, d0
 800d2f6:	ee17 3a90 	vmov	r3, s15
 800d2fa:	4a19      	ldr	r2, [pc, #100]	; (800d360 <cos+0x70>)
 800d2fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d300:	4293      	cmp	r3, r2
 800d302:	dc04      	bgt.n	800d30e <cos+0x1e>
 800d304:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800d358 <cos+0x68>
 800d308:	f000 ff4a 	bl	800e1a0 <__kernel_cos>
 800d30c:	e004      	b.n	800d318 <cos+0x28>
 800d30e:	4a15      	ldr	r2, [pc, #84]	; (800d364 <cos+0x74>)
 800d310:	4293      	cmp	r3, r2
 800d312:	dd04      	ble.n	800d31e <cos+0x2e>
 800d314:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d318:	b005      	add	sp, #20
 800d31a:	f85d fb04 	ldr.w	pc, [sp], #4
 800d31e:	4668      	mov	r0, sp
 800d320:	f000 fdfe 	bl	800df20 <__ieee754_rem_pio2>
 800d324:	f000 0003 	and.w	r0, r0, #3
 800d328:	2801      	cmp	r0, #1
 800d32a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d32e:	ed9d 0b00 	vldr	d0, [sp]
 800d332:	d007      	beq.n	800d344 <cos+0x54>
 800d334:	2802      	cmp	r0, #2
 800d336:	d00a      	beq.n	800d34e <cos+0x5e>
 800d338:	2800      	cmp	r0, #0
 800d33a:	d0e5      	beq.n	800d308 <cos+0x18>
 800d33c:	2001      	movs	r0, #1
 800d33e:	f001 fa37 	bl	800e7b0 <__kernel_sin>
 800d342:	e7e9      	b.n	800d318 <cos+0x28>
 800d344:	f001 fa34 	bl	800e7b0 <__kernel_sin>
 800d348:	eeb1 0b40 	vneg.f64	d0, d0
 800d34c:	e7e4      	b.n	800d318 <cos+0x28>
 800d34e:	f000 ff27 	bl	800e1a0 <__kernel_cos>
 800d352:	e7f9      	b.n	800d348 <cos+0x58>
 800d354:	f3af 8000 	nop.w
	...
 800d360:	3fe921fb 	.word	0x3fe921fb
 800d364:	7fefffff 	.word	0x7fefffff

0800d368 <sin>:
 800d368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d36a:	eeb0 7b40 	vmov.f64	d7, d0
 800d36e:	ee17 3a90 	vmov	r3, s15
 800d372:	4a19      	ldr	r2, [pc, #100]	; (800d3d8 <sin+0x70>)
 800d374:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d378:	4293      	cmp	r3, r2
 800d37a:	dc05      	bgt.n	800d388 <sin+0x20>
 800d37c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800d3d0 <sin+0x68>
 800d380:	2000      	movs	r0, #0
 800d382:	f001 fa15 	bl	800e7b0 <__kernel_sin>
 800d386:	e004      	b.n	800d392 <sin+0x2a>
 800d388:	4a14      	ldr	r2, [pc, #80]	; (800d3dc <sin+0x74>)
 800d38a:	4293      	cmp	r3, r2
 800d38c:	dd04      	ble.n	800d398 <sin+0x30>
 800d38e:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d392:	b005      	add	sp, #20
 800d394:	f85d fb04 	ldr.w	pc, [sp], #4
 800d398:	4668      	mov	r0, sp
 800d39a:	f000 fdc1 	bl	800df20 <__ieee754_rem_pio2>
 800d39e:	f000 0003 	and.w	r0, r0, #3
 800d3a2:	2801      	cmp	r0, #1
 800d3a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d3a8:	ed9d 0b00 	vldr	d0, [sp]
 800d3ac:	d004      	beq.n	800d3b8 <sin+0x50>
 800d3ae:	2802      	cmp	r0, #2
 800d3b0:	d005      	beq.n	800d3be <sin+0x56>
 800d3b2:	b950      	cbnz	r0, 800d3ca <sin+0x62>
 800d3b4:	2001      	movs	r0, #1
 800d3b6:	e7e4      	b.n	800d382 <sin+0x1a>
 800d3b8:	f000 fef2 	bl	800e1a0 <__kernel_cos>
 800d3bc:	e7e9      	b.n	800d392 <sin+0x2a>
 800d3be:	2001      	movs	r0, #1
 800d3c0:	f001 f9f6 	bl	800e7b0 <__kernel_sin>
 800d3c4:	eeb1 0b40 	vneg.f64	d0, d0
 800d3c8:	e7e3      	b.n	800d392 <sin+0x2a>
 800d3ca:	f000 fee9 	bl	800e1a0 <__kernel_cos>
 800d3ce:	e7f9      	b.n	800d3c4 <sin+0x5c>
	...
 800d3d8:	3fe921fb 	.word	0x3fe921fb
 800d3dc:	7fefffff 	.word	0x7fefffff

0800d3e0 <log10>:
 800d3e0:	b500      	push	{lr}
 800d3e2:	ed2d 8b02 	vpush	{d8}
 800d3e6:	eeb0 8b40 	vmov.f64	d8, d0
 800d3ea:	b08b      	sub	sp, #44	; 0x2c
 800d3ec:	f000 f998 	bl	800d720 <__ieee754_log10>
 800d3f0:	4b2d      	ldr	r3, [pc, #180]	; (800d4a8 <log10+0xc8>)
 800d3f2:	f993 3000 	ldrsb.w	r3, [r3]
 800d3f6:	1c5a      	adds	r2, r3, #1
 800d3f8:	d051      	beq.n	800d49e <log10+0xbe>
 800d3fa:	eeb4 8b48 	vcmp.f64	d8, d8
 800d3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d402:	d64c      	bvs.n	800d49e <log10+0xbe>
 800d404:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800d408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d40c:	d847      	bhi.n	800d49e <log10+0xbe>
 800d40e:	4a27      	ldr	r2, [pc, #156]	; (800d4ac <log10+0xcc>)
 800d410:	9201      	str	r2, [sp, #4]
 800d412:	2200      	movs	r2, #0
 800d414:	9208      	str	r2, [sp, #32]
 800d416:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d41a:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d41e:	b993      	cbnz	r3, 800d446 <log10+0x66>
 800d420:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d424:	4922      	ldr	r1, [pc, #136]	; (800d4b0 <log10+0xd0>)
 800d426:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 800d42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d42e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d432:	d025      	beq.n	800d480 <log10+0xa0>
 800d434:	2201      	movs	r2, #1
 800d436:	2b02      	cmp	r3, #2
 800d438:	9200      	str	r2, [sp, #0]
 800d43a:	d116      	bne.n	800d46a <log10+0x8a>
 800d43c:	f7fd ff6e 	bl	800b31c <__errno>
 800d440:	2321      	movs	r3, #33	; 0x21
 800d442:	6003      	str	r3, [r0, #0]
 800d444:	e016      	b.n	800d474 <log10+0x94>
 800d446:	491b      	ldr	r1, [pc, #108]	; (800d4b4 <log10+0xd4>)
 800d448:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d44c:	2000      	movs	r0, #0
 800d44e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d452:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d456:	d1ed      	bne.n	800d434 <log10+0x54>
 800d458:	2202      	movs	r2, #2
 800d45a:	4293      	cmp	r3, r2
 800d45c:	9200      	str	r2, [sp, #0]
 800d45e:	d111      	bne.n	800d484 <log10+0xa4>
 800d460:	f7fd ff5c 	bl	800b31c <__errno>
 800d464:	2322      	movs	r3, #34	; 0x22
 800d466:	6003      	str	r3, [r0, #0]
 800d468:	e011      	b.n	800d48e <log10+0xae>
 800d46a:	4668      	mov	r0, sp
 800d46c:	f001 fa84 	bl	800e978 <matherr>
 800d470:	2800      	cmp	r0, #0
 800d472:	d0e3      	beq.n	800d43c <log10+0x5c>
 800d474:	4810      	ldr	r0, [pc, #64]	; (800d4b8 <log10+0xd8>)
 800d476:	f001 fa83 	bl	800e980 <nan>
 800d47a:	ed8d 0b06 	vstr	d0, [sp, #24]
 800d47e:	e006      	b.n	800d48e <log10+0xae>
 800d480:	2302      	movs	r3, #2
 800d482:	9300      	str	r3, [sp, #0]
 800d484:	4668      	mov	r0, sp
 800d486:	f001 fa77 	bl	800e978 <matherr>
 800d48a:	2800      	cmp	r0, #0
 800d48c:	d0e8      	beq.n	800d460 <log10+0x80>
 800d48e:	9b08      	ldr	r3, [sp, #32]
 800d490:	b11b      	cbz	r3, 800d49a <log10+0xba>
 800d492:	f7fd ff43 	bl	800b31c <__errno>
 800d496:	9b08      	ldr	r3, [sp, #32]
 800d498:	6003      	str	r3, [r0, #0]
 800d49a:	ed9d 0b06 	vldr	d0, [sp, #24]
 800d49e:	b00b      	add	sp, #44	; 0x2c
 800d4a0:	ecbd 8b02 	vpop	{d8}
 800d4a4:	f85d fb04 	ldr.w	pc, [sp], #4
 800d4a8:	240003d8 	.word	0x240003d8
 800d4ac:	0801dfe8 	.word	0x0801dfe8
 800d4b0:	c7efffff 	.word	0xc7efffff
 800d4b4:	fff00000 	.word	0xfff00000
 800d4b8:	0801ded1 	.word	0x0801ded1
 800d4bc:	00000000 	.word	0x00000000

0800d4c0 <pow>:
 800d4c0:	b570      	push	{r4, r5, r6, lr}
 800d4c2:	ed2d 8b0a 	vpush	{d8-d12}
 800d4c6:	eeb0 9b40 	vmov.f64	d9, d0
 800d4ca:	eeb0 8b41 	vmov.f64	d8, d1
 800d4ce:	4c8c      	ldr	r4, [pc, #560]	; (800d700 <pow+0x240>)
 800d4d0:	b08a      	sub	sp, #40	; 0x28
 800d4d2:	f000 f99d 	bl	800d810 <__ieee754_pow>
 800d4d6:	f994 3000 	ldrsb.w	r3, [r4]
 800d4da:	eeb0 ab40 	vmov.f64	d10, d0
 800d4de:	1c5a      	adds	r2, r3, #1
 800d4e0:	4626      	mov	r6, r4
 800d4e2:	d04b      	beq.n	800d57c <pow+0xbc>
 800d4e4:	eeb4 8b48 	vcmp.f64	d8, d8
 800d4e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4ec:	d646      	bvs.n	800d57c <pow+0xbc>
 800d4ee:	eeb4 9b49 	vcmp.f64	d9, d9
 800d4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4f6:	d719      	bvc.n	800d52c <pow+0x6c>
 800d4f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d500:	d13c      	bne.n	800d57c <pow+0xbc>
 800d502:	2201      	movs	r2, #1
 800d504:	9200      	str	r2, [sp, #0]
 800d506:	497f      	ldr	r1, [pc, #508]	; (800d704 <pow+0x244>)
 800d508:	4a7f      	ldr	r2, [pc, #508]	; (800d708 <pow+0x248>)
 800d50a:	9201      	str	r2, [sp, #4]
 800d50c:	2000      	movs	r0, #0
 800d50e:	2200      	movs	r2, #0
 800d510:	2b02      	cmp	r3, #2
 800d512:	9208      	str	r2, [sp, #32]
 800d514:	ed8d 9b02 	vstr	d9, [sp, #8]
 800d518:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d51c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d520:	d02a      	beq.n	800d578 <pow+0xb8>
 800d522:	4668      	mov	r0, sp
 800d524:	f001 fa28 	bl	800e978 <matherr>
 800d528:	bb00      	cbnz	r0, 800d56c <pow+0xac>
 800d52a:	e04e      	b.n	800d5ca <pow+0x10a>
 800d52c:	ed9f bb72 	vldr	d11, [pc, #456]	; 800d6f8 <pow+0x238>
 800d530:	eeb4 9b4b 	vcmp.f64	d9, d11
 800d534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d538:	eeb0 cb4b 	vmov.f64	d12, d11
 800d53c:	d14a      	bne.n	800d5d4 <pow+0x114>
 800d53e:	eeb4 8b4b 	vcmp.f64	d8, d11
 800d542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d546:	d11f      	bne.n	800d588 <pow+0xc8>
 800d548:	2201      	movs	r2, #1
 800d54a:	9200      	str	r2, [sp, #0]
 800d54c:	4a6e      	ldr	r2, [pc, #440]	; (800d708 <pow+0x248>)
 800d54e:	9201      	str	r2, [sp, #4]
 800d550:	2200      	movs	r2, #0
 800d552:	9208      	str	r2, [sp, #32]
 800d554:	ed8d 9b02 	vstr	d9, [sp, #8]
 800d558:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d55c:	ed8d bb06 	vstr	d11, [sp, #24]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d0de      	beq.n	800d522 <pow+0x62>
 800d564:	4b67      	ldr	r3, [pc, #412]	; (800d704 <pow+0x244>)
 800d566:	2200      	movs	r2, #0
 800d568:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d56c:	9b08      	ldr	r3, [sp, #32]
 800d56e:	b11b      	cbz	r3, 800d578 <pow+0xb8>
 800d570:	f7fd fed4 	bl	800b31c <__errno>
 800d574:	9b08      	ldr	r3, [sp, #32]
 800d576:	6003      	str	r3, [r0, #0]
 800d578:	ed9d ab06 	vldr	d10, [sp, #24]
 800d57c:	eeb0 0b4a 	vmov.f64	d0, d10
 800d580:	b00a      	add	sp, #40	; 0x28
 800d582:	ecbd 8b0a 	vpop	{d8-d12}
 800d586:	bd70      	pop	{r4, r5, r6, pc}
 800d588:	eeb0 0b48 	vmov.f64	d0, d8
 800d58c:	f001 f971 	bl	800e872 <finite>
 800d590:	2800      	cmp	r0, #0
 800d592:	d0f3      	beq.n	800d57c <pow+0xbc>
 800d594:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800d598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d59c:	d5ee      	bpl.n	800d57c <pow+0xbc>
 800d59e:	2301      	movs	r3, #1
 800d5a0:	9300      	str	r3, [sp, #0]
 800d5a2:	4b59      	ldr	r3, [pc, #356]	; (800d708 <pow+0x248>)
 800d5a4:	9301      	str	r3, [sp, #4]
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	9308      	str	r3, [sp, #32]
 800d5aa:	f994 3000 	ldrsb.w	r3, [r4]
 800d5ae:	ed8d 9b02 	vstr	d9, [sp, #8]
 800d5b2:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d5b6:	b913      	cbnz	r3, 800d5be <pow+0xfe>
 800d5b8:	ed8d bb06 	vstr	d11, [sp, #24]
 800d5bc:	e7b1      	b.n	800d522 <pow+0x62>
 800d5be:	4953      	ldr	r1, [pc, #332]	; (800d70c <pow+0x24c>)
 800d5c0:	2000      	movs	r0, #0
 800d5c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d5c6:	2b02      	cmp	r3, #2
 800d5c8:	d1ab      	bne.n	800d522 <pow+0x62>
 800d5ca:	f7fd fea7 	bl	800b31c <__errno>
 800d5ce:	2321      	movs	r3, #33	; 0x21
 800d5d0:	6003      	str	r3, [r0, #0]
 800d5d2:	e7cb      	b.n	800d56c <pow+0xac>
 800d5d4:	f001 f94d 	bl	800e872 <finite>
 800d5d8:	4605      	mov	r5, r0
 800d5da:	2800      	cmp	r0, #0
 800d5dc:	d164      	bne.n	800d6a8 <pow+0x1e8>
 800d5de:	eeb0 0b49 	vmov.f64	d0, d9
 800d5e2:	f001 f946 	bl	800e872 <finite>
 800d5e6:	2800      	cmp	r0, #0
 800d5e8:	d05e      	beq.n	800d6a8 <pow+0x1e8>
 800d5ea:	eeb0 0b48 	vmov.f64	d0, d8
 800d5ee:	f001 f940 	bl	800e872 <finite>
 800d5f2:	2800      	cmp	r0, #0
 800d5f4:	d058      	beq.n	800d6a8 <pow+0x1e8>
 800d5f6:	eeb4 ab4a 	vcmp.f64	d10, d10
 800d5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5fe:	f994 3000 	ldrsb.w	r3, [r4]
 800d602:	4a41      	ldr	r2, [pc, #260]	; (800d708 <pow+0x248>)
 800d604:	d70e      	bvc.n	800d624 <pow+0x164>
 800d606:	2101      	movs	r1, #1
 800d608:	e9cd 1200 	strd	r1, r2, [sp]
 800d60c:	9508      	str	r5, [sp, #32]
 800d60e:	ed8d 9b02 	vstr	d9, [sp, #8]
 800d612:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d0ce      	beq.n	800d5b8 <pow+0xf8>
 800d61a:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 800d61e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d622:	e7d0      	b.n	800d5c6 <pow+0x106>
 800d624:	2103      	movs	r1, #3
 800d626:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d62a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d62e:	ee28 8b07 	vmul.f64	d8, d8, d7
 800d632:	e9cd 1200 	strd	r1, r2, [sp]
 800d636:	9508      	str	r5, [sp, #32]
 800d638:	ed8d 9b02 	vstr	d9, [sp, #8]
 800d63c:	b9fb      	cbnz	r3, 800d67e <pow+0x1be>
 800d63e:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800d642:	4b33      	ldr	r3, [pc, #204]	; (800d710 <pow+0x250>)
 800d644:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d64c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d650:	d54b      	bpl.n	800d6ea <pow+0x22a>
 800d652:	eeb0 0b48 	vmov.f64	d0, d8
 800d656:	f001 f99b 	bl	800e990 <rint>
 800d65a:	eeb4 0b48 	vcmp.f64	d0, d8
 800d65e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d662:	d004      	beq.n	800d66e <pow+0x1ae>
 800d664:	4b2b      	ldr	r3, [pc, #172]	; (800d714 <pow+0x254>)
 800d666:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d66a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d66e:	f996 3000 	ldrsb.w	r3, [r6]
 800d672:	2b02      	cmp	r3, #2
 800d674:	d139      	bne.n	800d6ea <pow+0x22a>
 800d676:	f7fd fe51 	bl	800b31c <__errno>
 800d67a:	2322      	movs	r3, #34	; 0x22
 800d67c:	e7a8      	b.n	800d5d0 <pow+0x110>
 800d67e:	4b26      	ldr	r3, [pc, #152]	; (800d718 <pow+0x258>)
 800d680:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800d684:	2200      	movs	r2, #0
 800d686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d68a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d68e:	d5ee      	bpl.n	800d66e <pow+0x1ae>
 800d690:	eeb0 0b48 	vmov.f64	d0, d8
 800d694:	f001 f97c 	bl	800e990 <rint>
 800d698:	eeb4 0b48 	vcmp.f64	d0, d8
 800d69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6a0:	d0e5      	beq.n	800d66e <pow+0x1ae>
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	4b19      	ldr	r3, [pc, #100]	; (800d70c <pow+0x24c>)
 800d6a6:	e7e0      	b.n	800d66a <pow+0x1aa>
 800d6a8:	eeb5 ab40 	vcmp.f64	d10, #0.0
 800d6ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6b0:	f47f af64 	bne.w	800d57c <pow+0xbc>
 800d6b4:	eeb0 0b49 	vmov.f64	d0, d9
 800d6b8:	f001 f8db 	bl	800e872 <finite>
 800d6bc:	2800      	cmp	r0, #0
 800d6be:	f43f af5d 	beq.w	800d57c <pow+0xbc>
 800d6c2:	eeb0 0b48 	vmov.f64	d0, d8
 800d6c6:	f001 f8d4 	bl	800e872 <finite>
 800d6ca:	2800      	cmp	r0, #0
 800d6cc:	f43f af56 	beq.w	800d57c <pow+0xbc>
 800d6d0:	2304      	movs	r3, #4
 800d6d2:	9300      	str	r3, [sp, #0]
 800d6d4:	4b0c      	ldr	r3, [pc, #48]	; (800d708 <pow+0x248>)
 800d6d6:	9301      	str	r3, [sp, #4]
 800d6d8:	2300      	movs	r3, #0
 800d6da:	9308      	str	r3, [sp, #32]
 800d6dc:	ed8d 9b02 	vstr	d9, [sp, #8]
 800d6e0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d6e4:	ed8d cb06 	vstr	d12, [sp, #24]
 800d6e8:	e7c1      	b.n	800d66e <pow+0x1ae>
 800d6ea:	4668      	mov	r0, sp
 800d6ec:	f001 f944 	bl	800e978 <matherr>
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	f47f af3b 	bne.w	800d56c <pow+0xac>
 800d6f6:	e7be      	b.n	800d676 <pow+0x1b6>
	...
 800d700:	240003d8 	.word	0x240003d8
 800d704:	3ff00000 	.word	0x3ff00000
 800d708:	0801dfee 	.word	0x0801dfee
 800d70c:	fff00000 	.word	0xfff00000
 800d710:	47efffff 	.word	0x47efffff
 800d714:	c7efffff 	.word	0xc7efffff
 800d718:	7ff00000 	.word	0x7ff00000
 800d71c:	00000000 	.word	0x00000000

0800d720 <__ieee754_log10>:
 800d720:	b500      	push	{lr}
 800d722:	ed2d 8b02 	vpush	{d8}
 800d726:	b083      	sub	sp, #12
 800d728:	ed8d 0b00 	vstr	d0, [sp]
 800d72c:	9a01      	ldr	r2, [sp, #4]
 800d72e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800d732:	da29      	bge.n	800d788 <__ieee754_log10+0x68>
 800d734:	9900      	ldr	r1, [sp, #0]
 800d736:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800d73a:	430b      	orrs	r3, r1
 800d73c:	d10a      	bne.n	800d754 <__ieee754_log10+0x34>
 800d73e:	ed9f 6b26 	vldr	d6, [pc, #152]	; 800d7d8 <__ieee754_log10+0xb8>
 800d742:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800d7e0 <__ieee754_log10+0xc0>
 800d746:	ee86 0b07 	vdiv.f64	d0, d6, d7
 800d74a:	b003      	add	sp, #12
 800d74c:	ecbd 8b02 	vpop	{d8}
 800d750:	f85d fb04 	ldr.w	pc, [sp], #4
 800d754:	2a00      	cmp	r2, #0
 800d756:	da04      	bge.n	800d762 <__ieee754_log10+0x42>
 800d758:	ed9d 7b00 	vldr	d7, [sp]
 800d75c:	ee37 6b47 	vsub.f64	d6, d7, d7
 800d760:	e7ef      	b.n	800d742 <__ieee754_log10+0x22>
 800d762:	ed9d 6b00 	vldr	d6, [sp]
 800d766:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800d7e8 <__ieee754_log10+0xc8>
 800d76a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d76e:	ed8d 7b00 	vstr	d7, [sp]
 800d772:	9a01      	ldr	r2, [sp, #4]
 800d774:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800d778:	4b23      	ldr	r3, [pc, #140]	; (800d808 <__ieee754_log10+0xe8>)
 800d77a:	429a      	cmp	r2, r3
 800d77c:	dd06      	ble.n	800d78c <__ieee754_log10+0x6c>
 800d77e:	ed9d 7b00 	vldr	d7, [sp]
 800d782:	ee37 0b07 	vadd.f64	d0, d7, d7
 800d786:	e7e0      	b.n	800d74a <__ieee754_log10+0x2a>
 800d788:	2100      	movs	r1, #0
 800d78a:	e7f5      	b.n	800d778 <__ieee754_log10+0x58>
 800d78c:	1513      	asrs	r3, r2, #20
 800d78e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d792:	440b      	add	r3, r1
 800d794:	0fd8      	lsrs	r0, r3, #31
 800d796:	4403      	add	r3, r0
 800d798:	ee07 3a90 	vmov	s15, r3
 800d79c:	f3c2 0113 	ubfx	r1, r2, #0, #20
 800d7a0:	f5c0 707f 	rsb	r0, r0, #1020	; 0x3fc
 800d7a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7a8:	3003      	adds	r0, #3
 800d7aa:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800d7ae:	ec43 2b10 	vmov	d0, r2, r3
 800d7b2:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 800d7b6:	f001 f9f7 	bl	800eba8 <__ieee754_log>
 800d7ba:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800d7f0 <__ieee754_log10+0xd0>
 800d7be:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d7c2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800d7f8 <__ieee754_log10+0xd8>
 800d7c6:	eea8 0b07 	vfma.f64	d0, d8, d7
 800d7ca:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800d800 <__ieee754_log10+0xe0>
 800d7ce:	eea8 0b07 	vfma.f64	d0, d8, d7
 800d7d2:	e7ba      	b.n	800d74a <__ieee754_log10+0x2a>
 800d7d4:	f3af 8000 	nop.w
 800d7d8:	00000000 	.word	0x00000000
 800d7dc:	c3500000 	.word	0xc3500000
	...
 800d7ec:	43500000 	.word	0x43500000
 800d7f0:	1526e50e 	.word	0x1526e50e
 800d7f4:	3fdbcb7b 	.word	0x3fdbcb7b
 800d7f8:	11f12b36 	.word	0x11f12b36
 800d7fc:	3d59fef3 	.word	0x3d59fef3
 800d800:	509f6000 	.word	0x509f6000
 800d804:	3fd34413 	.word	0x3fd34413
 800d808:	7fefffff 	.word	0x7fefffff
 800d80c:	00000000 	.word	0x00000000

0800d810 <__ieee754_pow>:
 800d810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d814:	ec57 6b11 	vmov	r6, r7, d1
 800d818:	ed2d 8b02 	vpush	{d8}
 800d81c:	eeb0 8b40 	vmov.f64	d8, d0
 800d820:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d824:	ea58 0306 	orrs.w	r3, r8, r6
 800d828:	b085      	sub	sp, #20
 800d82a:	46b9      	mov	r9, r7
 800d82c:	ee11 2a10 	vmov	r2, s2
 800d830:	f000 8306 	beq.w	800de40 <__ieee754_pow+0x630>
 800d834:	ee18 aa90 	vmov	sl, s17
 800d838:	4bb9      	ldr	r3, [pc, #740]	; (800db20 <__ieee754_pow+0x310>)
 800d83a:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 800d83e:	429c      	cmp	r4, r3
 800d840:	ee10 ba10 	vmov	fp, s0
 800d844:	dc0b      	bgt.n	800d85e <__ieee754_pow+0x4e>
 800d846:	d105      	bne.n	800d854 <__ieee754_pow+0x44>
 800d848:	f1bb 0f00 	cmp.w	fp, #0
 800d84c:	d107      	bne.n	800d85e <__ieee754_pow+0x4e>
 800d84e:	45a0      	cmp	r8, r4
 800d850:	dc0d      	bgt.n	800d86e <__ieee754_pow+0x5e>
 800d852:	e001      	b.n	800d858 <__ieee754_pow+0x48>
 800d854:	4598      	cmp	r8, r3
 800d856:	dc02      	bgt.n	800d85e <__ieee754_pow+0x4e>
 800d858:	4598      	cmp	r8, r3
 800d85a:	d110      	bne.n	800d87e <__ieee754_pow+0x6e>
 800d85c:	b17a      	cbz	r2, 800d87e <__ieee754_pow+0x6e>
 800d85e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d862:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d866:	ea54 030b 	orrs.w	r3, r4, fp
 800d86a:	f000 82e9 	beq.w	800de40 <__ieee754_pow+0x630>
 800d86e:	48ad      	ldr	r0, [pc, #692]	; (800db24 <__ieee754_pow+0x314>)
 800d870:	b005      	add	sp, #20
 800d872:	ecbd 8b02 	vpop	{d8}
 800d876:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d87a:	f001 b881 	b.w	800e980 <nan>
 800d87e:	f1ba 0f00 	cmp.w	sl, #0
 800d882:	da4e      	bge.n	800d922 <__ieee754_pow+0x112>
 800d884:	4ba8      	ldr	r3, [pc, #672]	; (800db28 <__ieee754_pow+0x318>)
 800d886:	4598      	cmp	r8, r3
 800d888:	dc49      	bgt.n	800d91e <__ieee754_pow+0x10e>
 800d88a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d88e:	4598      	cmp	r8, r3
 800d890:	dd47      	ble.n	800d922 <__ieee754_pow+0x112>
 800d892:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d896:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d89a:	2b14      	cmp	r3, #20
 800d89c:	dd24      	ble.n	800d8e8 <__ieee754_pow+0xd8>
 800d89e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d8a2:	fa22 f503 	lsr.w	r5, r2, r3
 800d8a6:	fa05 f303 	lsl.w	r3, r5, r3
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d139      	bne.n	800d922 <__ieee754_pow+0x112>
 800d8ae:	f005 0501 	and.w	r5, r5, #1
 800d8b2:	f1c5 0502 	rsb	r5, r5, #2
 800d8b6:	2a00      	cmp	r2, #0
 800d8b8:	d15a      	bne.n	800d970 <__ieee754_pow+0x160>
 800d8ba:	4b99      	ldr	r3, [pc, #612]	; (800db20 <__ieee754_pow+0x310>)
 800d8bc:	4598      	cmp	r8, r3
 800d8be:	d122      	bne.n	800d906 <__ieee754_pow+0xf6>
 800d8c0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d8c4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d8c8:	ea53 030b 	orrs.w	r3, r3, fp
 800d8cc:	f000 82b8 	beq.w	800de40 <__ieee754_pow+0x630>
 800d8d0:	4b96      	ldr	r3, [pc, #600]	; (800db2c <__ieee754_pow+0x31c>)
 800d8d2:	429c      	cmp	r4, r3
 800d8d4:	dd27      	ble.n	800d926 <__ieee754_pow+0x116>
 800d8d6:	f1b9 0f00 	cmp.w	r9, #0
 800d8da:	f280 82b4 	bge.w	800de46 <__ieee754_pow+0x636>
 800d8de:	ed9f 7b84 	vldr	d7, [pc, #528]	; 800daf0 <__ieee754_pow+0x2e0>
 800d8e2:	ed8d 7b00 	vstr	d7, [sp]
 800d8e6:	e026      	b.n	800d936 <__ieee754_pow+0x126>
 800d8e8:	2a00      	cmp	r2, #0
 800d8ea:	d140      	bne.n	800d96e <__ieee754_pow+0x15e>
 800d8ec:	f1c3 0314 	rsb	r3, r3, #20
 800d8f0:	fa48 f503 	asr.w	r5, r8, r3
 800d8f4:	fa05 f303 	lsl.w	r3, r5, r3
 800d8f8:	4543      	cmp	r3, r8
 800d8fa:	f040 82aa 	bne.w	800de52 <__ieee754_pow+0x642>
 800d8fe:	f005 0501 	and.w	r5, r5, #1
 800d902:	f1c5 0502 	rsb	r5, r5, #2
 800d906:	4b8a      	ldr	r3, [pc, #552]	; (800db30 <__ieee754_pow+0x320>)
 800d908:	4598      	cmp	r8, r3
 800d90a:	d11b      	bne.n	800d944 <__ieee754_pow+0x134>
 800d90c:	f1b9 0f00 	cmp.w	r9, #0
 800d910:	f280 829c 	bge.w	800de4c <__ieee754_pow+0x63c>
 800d914:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800d918:	ee87 7b08 	vdiv.f64	d7, d7, d8
 800d91c:	e7e1      	b.n	800d8e2 <__ieee754_pow+0xd2>
 800d91e:	2502      	movs	r5, #2
 800d920:	e7c9      	b.n	800d8b6 <__ieee754_pow+0xa6>
 800d922:	2500      	movs	r5, #0
 800d924:	e7c7      	b.n	800d8b6 <__ieee754_pow+0xa6>
 800d926:	f1b9 0f00 	cmp.w	r9, #0
 800d92a:	dad8      	bge.n	800d8de <__ieee754_pow+0xce>
 800d92c:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 800d930:	4633      	mov	r3, r6
 800d932:	e9cd 3400 	strd	r3, r4, [sp]
 800d936:	ed9d 0b00 	vldr	d0, [sp]
 800d93a:	b005      	add	sp, #20
 800d93c:	ecbd 8b02 	vpop	{d8}
 800d940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d944:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d948:	d102      	bne.n	800d950 <__ieee754_pow+0x140>
 800d94a:	ee28 7b08 	vmul.f64	d7, d8, d8
 800d94e:	e7c8      	b.n	800d8e2 <__ieee754_pow+0xd2>
 800d950:	4b78      	ldr	r3, [pc, #480]	; (800db34 <__ieee754_pow+0x324>)
 800d952:	4599      	cmp	r9, r3
 800d954:	d10c      	bne.n	800d970 <__ieee754_pow+0x160>
 800d956:	f1ba 0f00 	cmp.w	sl, #0
 800d95a:	db09      	blt.n	800d970 <__ieee754_pow+0x160>
 800d95c:	eeb0 0b48 	vmov.f64	d0, d8
 800d960:	b005      	add	sp, #20
 800d962:	ecbd 8b02 	vpop	{d8}
 800d966:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d96a:	f000 bc15 	b.w	800e198 <__ieee754_sqrt>
 800d96e:	2500      	movs	r5, #0
 800d970:	eeb0 0b48 	vmov.f64	d0, d8
 800d974:	f000 ff74 	bl	800e860 <fabs>
 800d978:	ed8d 0b00 	vstr	d0, [sp]
 800d97c:	f1bb 0f00 	cmp.w	fp, #0
 800d980:	d128      	bne.n	800d9d4 <__ieee754_pow+0x1c4>
 800d982:	b124      	cbz	r4, 800d98e <__ieee754_pow+0x17e>
 800d984:	4b6a      	ldr	r3, [pc, #424]	; (800db30 <__ieee754_pow+0x320>)
 800d986:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 800d98a:	429a      	cmp	r2, r3
 800d98c:	d122      	bne.n	800d9d4 <__ieee754_pow+0x1c4>
 800d98e:	f1b9 0f00 	cmp.w	r9, #0
 800d992:	da07      	bge.n	800d9a4 <__ieee754_pow+0x194>
 800d994:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800d998:	ed9d 6b00 	vldr	d6, [sp]
 800d99c:	ee87 7b06 	vdiv.f64	d7, d7, d6
 800d9a0:	ed8d 7b00 	vstr	d7, [sp]
 800d9a4:	f1ba 0f00 	cmp.w	sl, #0
 800d9a8:	dac5      	bge.n	800d936 <__ieee754_pow+0x126>
 800d9aa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d9ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d9b2:	ea54 0305 	orrs.w	r3, r4, r5
 800d9b6:	d106      	bne.n	800d9c6 <__ieee754_pow+0x1b6>
 800d9b8:	ed9d 7b00 	vldr	d7, [sp]
 800d9bc:	ee37 7b47 	vsub.f64	d7, d7, d7
 800d9c0:	ee87 7b07 	vdiv.f64	d7, d7, d7
 800d9c4:	e78d      	b.n	800d8e2 <__ieee754_pow+0xd2>
 800d9c6:	2d01      	cmp	r5, #1
 800d9c8:	d1b5      	bne.n	800d936 <__ieee754_pow+0x126>
 800d9ca:	ed9d 7b00 	vldr	d7, [sp]
 800d9ce:	eeb1 7b47 	vneg.f64	d7, d7
 800d9d2:	e786      	b.n	800d8e2 <__ieee754_pow+0xd2>
 800d9d4:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800d9d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d9dc:	ea55 030a 	orrs.w	r3, r5, sl
 800d9e0:	d104      	bne.n	800d9ec <__ieee754_pow+0x1dc>
 800d9e2:	ee38 8b48 	vsub.f64	d8, d8, d8
 800d9e6:	ee88 7b08 	vdiv.f64	d7, d8, d8
 800d9ea:	e77a      	b.n	800d8e2 <__ieee754_pow+0xd2>
 800d9ec:	4b52      	ldr	r3, [pc, #328]	; (800db38 <__ieee754_pow+0x328>)
 800d9ee:	4598      	cmp	r8, r3
 800d9f0:	f340 80a8 	ble.w	800db44 <__ieee754_pow+0x334>
 800d9f4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d9f8:	4598      	cmp	r8, r3
 800d9fa:	dd0b      	ble.n	800da14 <__ieee754_pow+0x204>
 800d9fc:	4b4b      	ldr	r3, [pc, #300]	; (800db2c <__ieee754_pow+0x31c>)
 800d9fe:	429c      	cmp	r4, r3
 800da00:	dc0e      	bgt.n	800da20 <__ieee754_pow+0x210>
 800da02:	f1b9 0f00 	cmp.w	r9, #0
 800da06:	f6bf af6a 	bge.w	800d8de <__ieee754_pow+0xce>
 800da0a:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800daf8 <__ieee754_pow+0x2e8>
 800da0e:	ee27 7b07 	vmul.f64	d7, d7, d7
 800da12:	e766      	b.n	800d8e2 <__ieee754_pow+0xd2>
 800da14:	4b49      	ldr	r3, [pc, #292]	; (800db3c <__ieee754_pow+0x32c>)
 800da16:	429c      	cmp	r4, r3
 800da18:	ddf3      	ble.n	800da02 <__ieee754_pow+0x1f2>
 800da1a:	4b45      	ldr	r3, [pc, #276]	; (800db30 <__ieee754_pow+0x320>)
 800da1c:	429c      	cmp	r4, r3
 800da1e:	dd03      	ble.n	800da28 <__ieee754_pow+0x218>
 800da20:	f1b9 0f00 	cmp.w	r9, #0
 800da24:	dcf1      	bgt.n	800da0a <__ieee754_pow+0x1fa>
 800da26:	e75a      	b.n	800d8de <__ieee754_pow+0xce>
 800da28:	ed9d 7b00 	vldr	d7, [sp]
 800da2c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800da30:	ed9f 5b33 	vldr	d5, [pc, #204]	; 800db00 <__ieee754_pow+0x2f0>
 800da34:	ee37 6b46 	vsub.f64	d6, d7, d6
 800da38:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 800da3c:	eeb1 3b46 	vneg.f64	d3, d6
 800da40:	eea3 5b07 	vfma.f64	d5, d3, d7
 800da44:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800da48:	eea5 7b46 	vfms.f64	d7, d5, d6
 800da4c:	ee26 5b06 	vmul.f64	d5, d6, d6
 800da50:	ee27 5b05 	vmul.f64	d5, d7, d5
 800da54:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 800db08 <__ieee754_pow+0x2f8>
 800da58:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800da5c:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800db10 <__ieee754_pow+0x300>
 800da60:	eea6 7b05 	vfma.f64	d7, d6, d5
 800da64:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800db18 <__ieee754_pow+0x308>
 800da68:	eeb0 4b47 	vmov.f64	d4, d7
 800da6c:	eea6 4b05 	vfma.f64	d4, d6, d5
 800da70:	ec53 2b14 	vmov	r2, r3, d4
 800da74:	2200      	movs	r2, #0
 800da76:	ec43 2b14 	vmov	d4, r2, r3
 800da7a:	eeb0 6b44 	vmov.f64	d6, d4
 800da7e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800da82:	ee37 7b46 	vsub.f64	d7, d7, d6
 800da86:	3d01      	subs	r5, #1
 800da88:	ea55 030a 	orrs.w	r3, r5, sl
 800da8c:	f04f 0200 	mov.w	r2, #0
 800da90:	463b      	mov	r3, r7
 800da92:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800da96:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800da9a:	ec47 6b15 	vmov	d5, r6, r7
 800da9e:	fe06 8b08 	vseleq.f64	d8, d6, d8
 800daa2:	ec47 6b13 	vmov	d3, r6, r7
 800daa6:	ec43 2b16 	vmov	d6, r2, r3
 800daaa:	ee27 7b03 	vmul.f64	d7, d7, d3
 800daae:	ee35 5b46 	vsub.f64	d5, d5, d6
 800dab2:	4b23      	ldr	r3, [pc, #140]	; (800db40 <__ieee754_pow+0x330>)
 800dab4:	eea5 7b04 	vfma.f64	d7, d5, d4
 800dab8:	ee24 6b06 	vmul.f64	d6, d4, d6
 800dabc:	ee37 5b06 	vadd.f64	d5, d7, d6
 800dac0:	ee15 1a90 	vmov	r1, s11
 800dac4:	4299      	cmp	r1, r3
 800dac6:	ee15 2a10 	vmov	r2, s10
 800daca:	f340 819b 	ble.w	800de04 <__ieee754_pow+0x5f4>
 800dace:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800dad2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800dad6:	4313      	orrs	r3, r2
 800dad8:	f000 810a 	beq.w	800dcf0 <__ieee754_pow+0x4e0>
 800dadc:	ed9f 7b06 	vldr	d7, [pc, #24]	; 800daf8 <__ieee754_pow+0x2e8>
 800dae0:	ee28 8b07 	vmul.f64	d8, d8, d7
 800dae4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800dae8:	e6fb      	b.n	800d8e2 <__ieee754_pow+0xd2>
 800daea:	bf00      	nop
 800daec:	f3af 8000 	nop.w
	...
 800daf8:	8800759c 	.word	0x8800759c
 800dafc:	7e37e43c 	.word	0x7e37e43c
 800db00:	55555555 	.word	0x55555555
 800db04:	3fd55555 	.word	0x3fd55555
 800db08:	652b82fe 	.word	0x652b82fe
 800db0c:	3ff71547 	.word	0x3ff71547
 800db10:	f85ddf44 	.word	0xf85ddf44
 800db14:	3e54ae0b 	.word	0x3e54ae0b
 800db18:	60000000 	.word	0x60000000
 800db1c:	3ff71547 	.word	0x3ff71547
 800db20:	7ff00000 	.word	0x7ff00000
 800db24:	0801ded1 	.word	0x0801ded1
 800db28:	433fffff 	.word	0x433fffff
 800db2c:	3fefffff 	.word	0x3fefffff
 800db30:	3ff00000 	.word	0x3ff00000
 800db34:	3fe00000 	.word	0x3fe00000
 800db38:	41e00000 	.word	0x41e00000
 800db3c:	3feffffe 	.word	0x3feffffe
 800db40:	408fffff 	.word	0x408fffff
 800db44:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800db48:	f280 80ce 	bge.w	800dce8 <__ieee754_pow+0x4d8>
 800db4c:	ed9d 6b00 	vldr	d6, [sp]
 800db50:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 800de58 <__ieee754_pow+0x648>
 800db54:	ee26 7b07 	vmul.f64	d7, d6, d7
 800db58:	ed8d 7b00 	vstr	d7, [sp]
 800db5c:	9c01      	ldr	r4, [sp, #4]
 800db5e:	f06f 0334 	mvn.w	r3, #52	; 0x34
 800db62:	1521      	asrs	r1, r4, #20
 800db64:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800db68:	4419      	add	r1, r3
 800db6a:	4be3      	ldr	r3, [pc, #908]	; (800def8 <__ieee754_pow+0x6e8>)
 800db6c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800db70:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 800db74:	429c      	cmp	r4, r3
 800db76:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 800db7a:	dd06      	ble.n	800db8a <__ieee754_pow+0x37a>
 800db7c:	4bdf      	ldr	r3, [pc, #892]	; (800defc <__ieee754_pow+0x6ec>)
 800db7e:	429c      	cmp	r4, r3
 800db80:	f340 80b4 	ble.w	800dcec <__ieee754_pow+0x4dc>
 800db84:	3101      	adds	r1, #1
 800db86:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800db8a:	2400      	movs	r4, #0
 800db8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db90:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800db94:	4603      	mov	r3, r0
 800db96:	ec43 2b17 	vmov	d7, r2, r3
 800db9a:	4bd9      	ldr	r3, [pc, #868]	; (800df00 <__ieee754_pow+0x6f0>)
 800db9c:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 800dba0:	4463      	add	r3, ip
 800dba2:	ed93 5b00 	vldr	d5, [r3]
 800dba6:	1040      	asrs	r0, r0, #1
 800dba8:	ee37 2b45 	vsub.f64	d2, d7, d5
 800dbac:	ee35 6b07 	vadd.f64	d6, d5, d7
 800dbb0:	ee84 1b06 	vdiv.f64	d1, d4, d6
 800dbb4:	ee22 6b01 	vmul.f64	d6, d2, d1
 800dbb8:	ed8d 6b00 	vstr	d6, [sp]
 800dbbc:	e9dd 8900 	ldrd	r8, r9, [sp]
 800dbc0:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 800dbc4:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 800dbc8:	f04f 0800 	mov.w	r8, #0
 800dbcc:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	ec49 8b14 	vmov	d4, r8, r9
 800dbd6:	ec43 2b16 	vmov	d6, r2, r3
 800dbda:	eeb1 3b44 	vneg.f64	d3, d4
 800dbde:	eea3 2b06 	vfma.f64	d2, d3, d6
 800dbe2:	ee36 6b45 	vsub.f64	d6, d6, d5
 800dbe6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dbea:	eea3 2b07 	vfma.f64	d2, d3, d7
 800dbee:	ed9d 7b00 	vldr	d7, [sp]
 800dbf2:	ee22 2b01 	vmul.f64	d2, d2, d1
 800dbf6:	ee27 5b07 	vmul.f64	d5, d7, d7
 800dbfa:	ee37 6b04 	vadd.f64	d6, d7, d4
 800dbfe:	ed9f 1b98 	vldr	d1, [pc, #608]	; 800de60 <__ieee754_pow+0x650>
 800dc02:	ee25 0b05 	vmul.f64	d0, d5, d5
 800dc06:	ee26 6b02 	vmul.f64	d6, d6, d2
 800dc0a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800de68 <__ieee754_pow+0x658>
 800dc0e:	eea5 7b01 	vfma.f64	d7, d5, d1
 800dc12:	ed9f 1b97 	vldr	d1, [pc, #604]	; 800de70 <__ieee754_pow+0x660>
 800dc16:	eea7 1b05 	vfma.f64	d1, d7, d5
 800dc1a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800de78 <__ieee754_pow+0x668>
 800dc1e:	eea1 7b05 	vfma.f64	d7, d1, d5
 800dc22:	ed9f 1b97 	vldr	d1, [pc, #604]	; 800de80 <__ieee754_pow+0x670>
 800dc26:	eea7 1b05 	vfma.f64	d1, d7, d5
 800dc2a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800de88 <__ieee754_pow+0x678>
 800dc2e:	eea1 7b05 	vfma.f64	d7, d1, d5
 800dc32:	eea0 6b07 	vfma.f64	d6, d0, d7
 800dc36:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 800dc3a:	eeb0 5b47 	vmov.f64	d5, d7
 800dc3e:	eea4 5b04 	vfma.f64	d5, d4, d4
 800dc42:	ee35 5b06 	vadd.f64	d5, d5, d6
 800dc46:	ed8d 5b02 	vstr	d5, [sp, #8]
 800dc4a:	f8cd 8008 	str.w	r8, [sp, #8]
 800dc4e:	ed9d 5b02 	vldr	d5, [sp, #8]
 800dc52:	ee35 7b47 	vsub.f64	d7, d5, d7
 800dc56:	eea3 7b04 	vfma.f64	d7, d3, d4
 800dc5a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dc5e:	ed9d 6b00 	vldr	d6, [sp]
 800dc62:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dc66:	eea2 7b05 	vfma.f64	d7, d2, d5
 800dc6a:	eeb0 6b47 	vmov.f64	d6, d7
 800dc6e:	eea4 6b05 	vfma.f64	d6, d4, d5
 800dc72:	ed8d 6b00 	vstr	d6, [sp]
 800dc76:	f8cd 8000 	str.w	r8, [sp]
 800dc7a:	ed9d 2b00 	vldr	d2, [sp]
 800dc7e:	eeb0 6b42 	vmov.f64	d6, d2
 800dc82:	eea3 6b05 	vfma.f64	d6, d3, d5
 800dc86:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dc8a:	ed9f 6b81 	vldr	d6, [pc, #516]	; 800de90 <__ieee754_pow+0x680>
 800dc8e:	4b9d      	ldr	r3, [pc, #628]	; (800df04 <__ieee754_pow+0x6f4>)
 800dc90:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dc94:	ed9f 6b80 	vldr	d6, [pc, #512]	; 800de98 <__ieee754_pow+0x688>
 800dc98:	4463      	add	r3, ip
 800dc9a:	eea2 7b06 	vfma.f64	d7, d2, d6
 800dc9e:	ed93 6b00 	vldr	d6, [r3]
 800dca2:	4b99      	ldr	r3, [pc, #612]	; (800df08 <__ieee754_pow+0x6f8>)
 800dca4:	ee37 6b06 	vadd.f64	d6, d7, d6
 800dca8:	449c      	add	ip, r3
 800dcaa:	ed9c 1b00 	vldr	d1, [ip]
 800dcae:	eeb0 4b46 	vmov.f64	d4, d6
 800dcb2:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 800dea0 <__ieee754_pow+0x690>
 800dcb6:	ee07 1a90 	vmov	s15, r1
 800dcba:	eea2 4b03 	vfma.f64	d4, d2, d3
 800dcbe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dcc2:	ee34 4b01 	vadd.f64	d4, d4, d1
 800dcc6:	ee34 5b07 	vadd.f64	d5, d4, d7
 800dcca:	ed8d 5b00 	vstr	d5, [sp]
 800dcce:	f8cd 8000 	str.w	r8, [sp]
 800dcd2:	ed9d 4b00 	vldr	d4, [sp]
 800dcd6:	ee34 7b47 	vsub.f64	d7, d4, d7
 800dcda:	ee37 7b41 	vsub.f64	d7, d7, d1
 800dcde:	eea2 7b43 	vfms.f64	d7, d2, d3
 800dce2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dce6:	e6ce      	b.n	800da86 <__ieee754_pow+0x276>
 800dce8:	2300      	movs	r3, #0
 800dcea:	e73a      	b.n	800db62 <__ieee754_pow+0x352>
 800dcec:	2401      	movs	r4, #1
 800dcee:	e74d      	b.n	800db8c <__ieee754_pow+0x37c>
 800dcf0:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 800dea8 <__ieee754_pow+0x698>
 800dcf4:	ee35 5b46 	vsub.f64	d5, d5, d6
 800dcf8:	ee37 4b04 	vadd.f64	d4, d7, d4
 800dcfc:	eeb4 4bc5 	vcmpe.f64	d4, d5
 800dd00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd04:	f73f aeea 	bgt.w	800dadc <__ieee754_pow+0x2cc>
 800dd08:	4a80      	ldr	r2, [pc, #512]	; (800df0c <__ieee754_pow+0x6fc>)
 800dd0a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	f340 808e 	ble.w	800de30 <__ieee754_pow+0x620>
 800dd14:	151b      	asrs	r3, r3, #20
 800dd16:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 800dd1a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800dd1e:	4103      	asrs	r3, r0
 800dd20:	440b      	add	r3, r1
 800dd22:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800dd26:	487a      	ldr	r0, [pc, #488]	; (800df10 <__ieee754_pow+0x700>)
 800dd28:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800dd2c:	4110      	asrs	r0, r2
 800dd2e:	ea23 0500 	bic.w	r5, r3, r0
 800dd32:	f3c3 0013 	ubfx	r0, r3, #0, #20
 800dd36:	2400      	movs	r4, #0
 800dd38:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 800dd3c:	f1c2 0214 	rsb	r2, r2, #20
 800dd40:	ec45 4b15 	vmov	d5, r4, r5
 800dd44:	4110      	asrs	r0, r2
 800dd46:	2900      	cmp	r1, #0
 800dd48:	bfb8      	it	lt
 800dd4a:	4240      	neglt	r0, r0
 800dd4c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800dd50:	ee36 5b07 	vadd.f64	d5, d6, d7
 800dd54:	ec53 2b15 	vmov	r2, r3, d5
 800dd58:	2200      	movs	r2, #0
 800dd5a:	ec43 2b15 	vmov	d5, r2, r3
 800dd5e:	ed9f 4b54 	vldr	d4, [pc, #336]	; 800deb0 <__ieee754_pow+0x6a0>
 800dd62:	ee35 6b46 	vsub.f64	d6, d5, d6
 800dd66:	ee37 6b46 	vsub.f64	d6, d7, d6
 800dd6a:	ed9f 7b53 	vldr	d7, [pc, #332]	; 800deb8 <__ieee754_pow+0x6a8>
 800dd6e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800dd72:	eea6 7b04 	vfma.f64	d7, d6, d4
 800dd76:	ed9f 6b52 	vldr	d6, [pc, #328]	; 800dec0 <__ieee754_pow+0x6b0>
 800dd7a:	eeb0 4b47 	vmov.f64	d4, d7
 800dd7e:	eea5 4b06 	vfma.f64	d4, d5, d6
 800dd82:	eeb0 3b44 	vmov.f64	d3, d4
 800dd86:	eea5 3b46 	vfms.f64	d3, d5, d6
 800dd8a:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 800dec8 <__ieee754_pow+0x6b8>
 800dd8e:	ee37 7b43 	vsub.f64	d7, d7, d3
 800dd92:	ee24 6b04 	vmul.f64	d6, d4, d4
 800dd96:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 800ded0 <__ieee754_pow+0x6c0>
 800dd9a:	eea4 7b07 	vfma.f64	d7, d4, d7
 800dd9e:	eea6 3b05 	vfma.f64	d3, d6, d5
 800dda2:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 800ded8 <__ieee754_pow+0x6c8>
 800dda6:	eea3 5b06 	vfma.f64	d5, d3, d6
 800ddaa:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800dee0 <__ieee754_pow+0x6d0>
 800ddae:	eea5 3b06 	vfma.f64	d3, d5, d6
 800ddb2:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 800dee8 <__ieee754_pow+0x6d8>
 800ddb6:	eea3 5b06 	vfma.f64	d5, d3, d6
 800ddba:	eeb0 3b44 	vmov.f64	d3, d4
 800ddbe:	eea5 3b46 	vfms.f64	d3, d5, d6
 800ddc2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ddc6:	eeb0 6b43 	vmov.f64	d6, d3
 800ddca:	ee24 3b03 	vmul.f64	d3, d4, d3
 800ddce:	ee36 5b45 	vsub.f64	d5, d6, d5
 800ddd2:	ee83 6b05 	vdiv.f64	d6, d3, d5
 800ddd6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ddda:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ddde:	ee37 7b44 	vsub.f64	d7, d7, d4
 800dde2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dde6:	ed8d 7b00 	vstr	d7, [sp]
 800ddea:	9901      	ldr	r1, [sp, #4]
 800ddec:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 800ddf0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ddf4:	da1e      	bge.n	800de34 <__ieee754_pow+0x624>
 800ddf6:	eeb0 0b47 	vmov.f64	d0, d7
 800ddfa:	f000 fe55 	bl	800eaa8 <scalbn>
 800ddfe:	ee20 7b08 	vmul.f64	d7, d0, d8
 800de02:	e56e      	b.n	800d8e2 <__ieee754_pow+0xd2>
 800de04:	4b43      	ldr	r3, [pc, #268]	; (800df14 <__ieee754_pow+0x704>)
 800de06:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 800de0a:	4298      	cmp	r0, r3
 800de0c:	f77f af7c 	ble.w	800dd08 <__ieee754_pow+0x4f8>
 800de10:	4b41      	ldr	r3, [pc, #260]	; (800df18 <__ieee754_pow+0x708>)
 800de12:	440b      	add	r3, r1
 800de14:	4313      	orrs	r3, r2
 800de16:	d002      	beq.n	800de1e <__ieee754_pow+0x60e>
 800de18:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800def0 <__ieee754_pow+0x6e0>
 800de1c:	e660      	b.n	800dae0 <__ieee754_pow+0x2d0>
 800de1e:	ee35 5b46 	vsub.f64	d5, d5, d6
 800de22:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800de26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de2a:	f6ff af6d 	blt.w	800dd08 <__ieee754_pow+0x4f8>
 800de2e:	e7f3      	b.n	800de18 <__ieee754_pow+0x608>
 800de30:	2000      	movs	r0, #0
 800de32:	e78d      	b.n	800dd50 <__ieee754_pow+0x540>
 800de34:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de38:	460b      	mov	r3, r1
 800de3a:	ec43 2b10 	vmov	d0, r2, r3
 800de3e:	e7de      	b.n	800ddfe <__ieee754_pow+0x5ee>
 800de40:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800de44:	e54d      	b.n	800d8e2 <__ieee754_pow+0xd2>
 800de46:	e9cd 6700 	strd	r6, r7, [sp]
 800de4a:	e574      	b.n	800d936 <__ieee754_pow+0x126>
 800de4c:	ed8d 8b00 	vstr	d8, [sp]
 800de50:	e571      	b.n	800d936 <__ieee754_pow+0x126>
 800de52:	4615      	mov	r5, r2
 800de54:	e557      	b.n	800d906 <__ieee754_pow+0xf6>
 800de56:	bf00      	nop
 800de58:	00000000 	.word	0x00000000
 800de5c:	43400000 	.word	0x43400000
 800de60:	4a454eef 	.word	0x4a454eef
 800de64:	3fca7e28 	.word	0x3fca7e28
 800de68:	93c9db65 	.word	0x93c9db65
 800de6c:	3fcd864a 	.word	0x3fcd864a
 800de70:	a91d4101 	.word	0xa91d4101
 800de74:	3fd17460 	.word	0x3fd17460
 800de78:	518f264d 	.word	0x518f264d
 800de7c:	3fd55555 	.word	0x3fd55555
 800de80:	db6fabff 	.word	0xdb6fabff
 800de84:	3fdb6db6 	.word	0x3fdb6db6
 800de88:	33333303 	.word	0x33333303
 800de8c:	3fe33333 	.word	0x3fe33333
 800de90:	dc3a03fd 	.word	0xdc3a03fd
 800de94:	3feec709 	.word	0x3feec709
 800de98:	145b01f5 	.word	0x145b01f5
 800de9c:	be3e2fe0 	.word	0xbe3e2fe0
 800dea0:	e0000000 	.word	0xe0000000
 800dea4:	3feec709 	.word	0x3feec709
 800dea8:	652b82fe 	.word	0x652b82fe
 800deac:	3c971547 	.word	0x3c971547
 800deb0:	fefa39ef 	.word	0xfefa39ef
 800deb4:	3fe62e42 	.word	0x3fe62e42
 800deb8:	0ca86c39 	.word	0x0ca86c39
 800debc:	be205c61 	.word	0xbe205c61
 800dec0:	00000000 	.word	0x00000000
 800dec4:	3fe62e43 	.word	0x3fe62e43
 800dec8:	72bea4d0 	.word	0x72bea4d0
 800decc:	3e663769 	.word	0x3e663769
 800ded0:	c5d26bf1 	.word	0xc5d26bf1
 800ded4:	bebbbd41 	.word	0xbebbbd41
 800ded8:	af25de2c 	.word	0xaf25de2c
 800dedc:	3f11566a 	.word	0x3f11566a
 800dee0:	16bebd93 	.word	0x16bebd93
 800dee4:	bf66c16c 	.word	0xbf66c16c
 800dee8:	5555553e 	.word	0x5555553e
 800deec:	3fc55555 	.word	0x3fc55555
 800def0:	c2f8f359 	.word	0xc2f8f359
 800def4:	01a56e1f 	.word	0x01a56e1f
 800def8:	0003988e 	.word	0x0003988e
 800defc:	000bb679 	.word	0x000bb679
 800df00:	0801dff8 	.word	0x0801dff8
 800df04:	0801e018 	.word	0x0801e018
 800df08:	0801e008 	.word	0x0801e008
 800df0c:	3fe00000 	.word	0x3fe00000
 800df10:	000fffff 	.word	0x000fffff
 800df14:	4090cbff 	.word	0x4090cbff
 800df18:	3f6f3400 	.word	0x3f6f3400
 800df1c:	00000000 	.word	0x00000000

0800df20 <__ieee754_rem_pio2>:
 800df20:	b570      	push	{r4, r5, r6, lr}
 800df22:	eeb0 7b40 	vmov.f64	d7, d0
 800df26:	ee17 5a90 	vmov	r5, s15
 800df2a:	4b95      	ldr	r3, [pc, #596]	; (800e180 <__ieee754_rem_pio2+0x260>)
 800df2c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800df30:	429e      	cmp	r6, r3
 800df32:	b088      	sub	sp, #32
 800df34:	4604      	mov	r4, r0
 800df36:	dc07      	bgt.n	800df48 <__ieee754_rem_pio2+0x28>
 800df38:	2200      	movs	r2, #0
 800df3a:	2300      	movs	r3, #0
 800df3c:	ed84 0b00 	vstr	d0, [r4]
 800df40:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800df44:	2000      	movs	r0, #0
 800df46:	e01b      	b.n	800df80 <__ieee754_rem_pio2+0x60>
 800df48:	4b8e      	ldr	r3, [pc, #568]	; (800e184 <__ieee754_rem_pio2+0x264>)
 800df4a:	429e      	cmp	r6, r3
 800df4c:	dc3b      	bgt.n	800dfc6 <__ieee754_rem_pio2+0xa6>
 800df4e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800df52:	2d00      	cmp	r5, #0
 800df54:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800e140 <__ieee754_rem_pio2+0x220>
 800df58:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800df5c:	dd19      	ble.n	800df92 <__ieee754_rem_pio2+0x72>
 800df5e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800df62:	429e      	cmp	r6, r3
 800df64:	d00e      	beq.n	800df84 <__ieee754_rem_pio2+0x64>
 800df66:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800e148 <__ieee754_rem_pio2+0x228>
 800df6a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800df6e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800df72:	ed84 5b00 	vstr	d5, [r4]
 800df76:	ee37 7b46 	vsub.f64	d7, d7, d6
 800df7a:	ed84 7b02 	vstr	d7, [r4, #8]
 800df7e:	2001      	movs	r0, #1
 800df80:	b008      	add	sp, #32
 800df82:	bd70      	pop	{r4, r5, r6, pc}
 800df84:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800e150 <__ieee754_rem_pio2+0x230>
 800df88:	ee37 7b46 	vsub.f64	d7, d7, d6
 800df8c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800e158 <__ieee754_rem_pio2+0x238>
 800df90:	e7eb      	b.n	800df6a <__ieee754_rem_pio2+0x4a>
 800df92:	429e      	cmp	r6, r3
 800df94:	ee30 7b06 	vadd.f64	d7, d0, d6
 800df98:	d00e      	beq.n	800dfb8 <__ieee754_rem_pio2+0x98>
 800df9a:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800e148 <__ieee754_rem_pio2+0x228>
 800df9e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800dfa2:	ee37 7b45 	vsub.f64	d7, d7, d5
 800dfa6:	ed84 5b00 	vstr	d5, [r4]
 800dfaa:	ee37 7b06 	vadd.f64	d7, d7, d6
 800dfae:	f04f 30ff 	mov.w	r0, #4294967295
 800dfb2:	ed84 7b02 	vstr	d7, [r4, #8]
 800dfb6:	e7e3      	b.n	800df80 <__ieee754_rem_pio2+0x60>
 800dfb8:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800e150 <__ieee754_rem_pio2+0x230>
 800dfbc:	ee37 7b06 	vadd.f64	d7, d7, d6
 800dfc0:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800e158 <__ieee754_rem_pio2+0x238>
 800dfc4:	e7eb      	b.n	800df9e <__ieee754_rem_pio2+0x7e>
 800dfc6:	4b70      	ldr	r3, [pc, #448]	; (800e188 <__ieee754_rem_pio2+0x268>)
 800dfc8:	429e      	cmp	r6, r3
 800dfca:	dc6c      	bgt.n	800e0a6 <__ieee754_rem_pio2+0x186>
 800dfcc:	f000 fc48 	bl	800e860 <fabs>
 800dfd0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800dfd4:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800e160 <__ieee754_rem_pio2+0x240>
 800dfd8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800dfdc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800dfe0:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800dfe4:	ee17 0a90 	vmov	r0, s15
 800dfe8:	eeb1 5b44 	vneg.f64	d5, d4
 800dfec:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800e140 <__ieee754_rem_pio2+0x220>
 800dff0:	eea5 0b07 	vfma.f64	d0, d5, d7
 800dff4:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800e148 <__ieee754_rem_pio2+0x228>
 800dff8:	281f      	cmp	r0, #31
 800dffa:	ee24 7b07 	vmul.f64	d7, d4, d7
 800dffe:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e002:	dc08      	bgt.n	800e016 <__ieee754_rem_pio2+0xf6>
 800e004:	1e42      	subs	r2, r0, #1
 800e006:	4b61      	ldr	r3, [pc, #388]	; (800e18c <__ieee754_rem_pio2+0x26c>)
 800e008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e00c:	42b3      	cmp	r3, r6
 800e00e:	d002      	beq.n	800e016 <__ieee754_rem_pio2+0xf6>
 800e010:	ed84 6b00 	vstr	d6, [r4]
 800e014:	e022      	b.n	800e05c <__ieee754_rem_pio2+0x13c>
 800e016:	ee16 3a90 	vmov	r3, s13
 800e01a:	1536      	asrs	r6, r6, #20
 800e01c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800e020:	1af3      	subs	r3, r6, r3
 800e022:	2b10      	cmp	r3, #16
 800e024:	ddf4      	ble.n	800e010 <__ieee754_rem_pio2+0xf0>
 800e026:	eeb0 6b40 	vmov.f64	d6, d0
 800e02a:	ed9f 3b49 	vldr	d3, [pc, #292]	; 800e150 <__ieee754_rem_pio2+0x230>
 800e02e:	eea5 6b03 	vfma.f64	d6, d5, d3
 800e032:	ee30 7b46 	vsub.f64	d7, d0, d6
 800e036:	eea5 7b03 	vfma.f64	d7, d5, d3
 800e03a:	ed9f 3b47 	vldr	d3, [pc, #284]	; 800e158 <__ieee754_rem_pio2+0x238>
 800e03e:	ee94 7b03 	vfnms.f64	d7, d4, d3
 800e042:	ee36 3b47 	vsub.f64	d3, d6, d7
 800e046:	ee13 3a90 	vmov	r3, s7
 800e04a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800e04e:	1af6      	subs	r6, r6, r3
 800e050:	2e31      	cmp	r6, #49	; 0x31
 800e052:	dc17      	bgt.n	800e084 <__ieee754_rem_pio2+0x164>
 800e054:	eeb0 0b46 	vmov.f64	d0, d6
 800e058:	ed84 3b00 	vstr	d3, [r4]
 800e05c:	ed94 6b00 	vldr	d6, [r4]
 800e060:	2d00      	cmp	r5, #0
 800e062:	ee30 0b46 	vsub.f64	d0, d0, d6
 800e066:	ee30 7b47 	vsub.f64	d7, d0, d7
 800e06a:	ed84 7b02 	vstr	d7, [r4, #8]
 800e06e:	da87      	bge.n	800df80 <__ieee754_rem_pio2+0x60>
 800e070:	eeb1 6b46 	vneg.f64	d6, d6
 800e074:	ed84 6b00 	vstr	d6, [r4]
 800e078:	eeb1 7b47 	vneg.f64	d7, d7
 800e07c:	4240      	negs	r0, r0
 800e07e:	ed84 7b02 	vstr	d7, [r4, #8]
 800e082:	e77d      	b.n	800df80 <__ieee754_rem_pio2+0x60>
 800e084:	ed9f 3b38 	vldr	d3, [pc, #224]	; 800e168 <__ieee754_rem_pio2+0x248>
 800e088:	eeb0 0b46 	vmov.f64	d0, d6
 800e08c:	eea5 0b03 	vfma.f64	d0, d5, d3
 800e090:	ee36 7b40 	vsub.f64	d7, d6, d0
 800e094:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800e170 <__ieee754_rem_pio2+0x250>
 800e098:	eea5 7b03 	vfma.f64	d7, d5, d3
 800e09c:	ee94 7b06 	vfnms.f64	d7, d4, d6
 800e0a0:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e0a4:	e7b4      	b.n	800e010 <__ieee754_rem_pio2+0xf0>
 800e0a6:	4b3a      	ldr	r3, [pc, #232]	; (800e190 <__ieee754_rem_pio2+0x270>)
 800e0a8:	429e      	cmp	r6, r3
 800e0aa:	dd06      	ble.n	800e0ba <__ieee754_rem_pio2+0x19a>
 800e0ac:	ee30 7b40 	vsub.f64	d7, d0, d0
 800e0b0:	ed80 7b02 	vstr	d7, [r0, #8]
 800e0b4:	ed80 7b00 	vstr	d7, [r0]
 800e0b8:	e744      	b.n	800df44 <__ieee754_rem_pio2+0x24>
 800e0ba:	1532      	asrs	r2, r6, #20
 800e0bc:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800e0c0:	ee10 0a10 	vmov	r0, s0
 800e0c4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800e0c8:	ec41 0b17 	vmov	d7, r0, r1
 800e0cc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e0d0:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800e178 <__ieee754_rem_pio2+0x258>
 800e0d4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e0d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e0dc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e0e0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e0e4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e0e8:	a908      	add	r1, sp, #32
 800e0ea:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e0ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e0f2:	ed8d 6b04 	vstr	d6, [sp, #16]
 800e0f6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e0fa:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e0fe:	2303      	movs	r3, #3
 800e100:	ed31 7b02 	vldmdb	r1!, {d7}
 800e104:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e10c:	f103 30ff 	add.w	r0, r3, #4294967295
 800e110:	d013      	beq.n	800e13a <__ieee754_rem_pio2+0x21a>
 800e112:	4920      	ldr	r1, [pc, #128]	; (800e194 <__ieee754_rem_pio2+0x274>)
 800e114:	9101      	str	r1, [sp, #4]
 800e116:	2102      	movs	r1, #2
 800e118:	9100      	str	r1, [sp, #0]
 800e11a:	a802      	add	r0, sp, #8
 800e11c:	4621      	mov	r1, r4
 800e11e:	f000 f8ab 	bl	800e278 <__kernel_rem_pio2>
 800e122:	2d00      	cmp	r5, #0
 800e124:	f6bf af2c 	bge.w	800df80 <__ieee754_rem_pio2+0x60>
 800e128:	ed94 7b00 	vldr	d7, [r4]
 800e12c:	eeb1 7b47 	vneg.f64	d7, d7
 800e130:	ed84 7b00 	vstr	d7, [r4]
 800e134:	ed94 7b02 	vldr	d7, [r4, #8]
 800e138:	e79e      	b.n	800e078 <__ieee754_rem_pio2+0x158>
 800e13a:	4603      	mov	r3, r0
 800e13c:	e7e0      	b.n	800e100 <__ieee754_rem_pio2+0x1e0>
 800e13e:	bf00      	nop
 800e140:	54400000 	.word	0x54400000
 800e144:	3ff921fb 	.word	0x3ff921fb
 800e148:	1a626331 	.word	0x1a626331
 800e14c:	3dd0b461 	.word	0x3dd0b461
 800e150:	1a600000 	.word	0x1a600000
 800e154:	3dd0b461 	.word	0x3dd0b461
 800e158:	2e037073 	.word	0x2e037073
 800e15c:	3ba3198a 	.word	0x3ba3198a
 800e160:	6dc9c883 	.word	0x6dc9c883
 800e164:	3fe45f30 	.word	0x3fe45f30
 800e168:	2e000000 	.word	0x2e000000
 800e16c:	3ba3198a 	.word	0x3ba3198a
 800e170:	252049c1 	.word	0x252049c1
 800e174:	397b839a 	.word	0x397b839a
 800e178:	00000000 	.word	0x00000000
 800e17c:	41700000 	.word	0x41700000
 800e180:	3fe921fb 	.word	0x3fe921fb
 800e184:	4002d97b 	.word	0x4002d97b
 800e188:	413921fb 	.word	0x413921fb
 800e18c:	0801e028 	.word	0x0801e028
 800e190:	7fefffff 	.word	0x7fefffff
 800e194:	0801e0a8 	.word	0x0801e0a8

0800e198 <__ieee754_sqrt>:
 800e198:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800e19c:	4770      	bx	lr
	...

0800e1a0 <__kernel_cos>:
 800e1a0:	ee10 1a90 	vmov	r1, s1
 800e1a4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800e1a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e1ac:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800e1b0:	da05      	bge.n	800e1be <__kernel_cos+0x1e>
 800e1b2:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800e1b6:	ee16 3a90 	vmov	r3, s13
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d03d      	beq.n	800e23a <__kernel_cos+0x9a>
 800e1be:	ee20 4b00 	vmul.f64	d4, d0, d0
 800e1c2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800e1c6:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 800e240 <__kernel_cos+0xa0>
 800e1ca:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800e1ce:	ee24 6b06 	vmul.f64	d6, d4, d6
 800e1d2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800e248 <__kernel_cos+0xa8>
 800e1d6:	eea4 5b03 	vfma.f64	d5, d4, d3
 800e1da:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800e250 <__kernel_cos+0xb0>
 800e1de:	eea5 3b04 	vfma.f64	d3, d5, d4
 800e1e2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800e258 <__kernel_cos+0xb8>
 800e1e6:	eea3 5b04 	vfma.f64	d5, d3, d4
 800e1ea:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800e260 <__kernel_cos+0xc0>
 800e1ee:	4b20      	ldr	r3, [pc, #128]	; (800e270 <__kernel_cos+0xd0>)
 800e1f0:	eea5 3b04 	vfma.f64	d3, d5, d4
 800e1f4:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 800e268 <__kernel_cos+0xc8>
 800e1f8:	4299      	cmp	r1, r3
 800e1fa:	eea3 5b04 	vfma.f64	d5, d3, d4
 800e1fe:	ee25 5b04 	vmul.f64	d5, d5, d4
 800e202:	eea4 1b05 	vfma.f64	d1, d4, d5
 800e206:	dc04      	bgt.n	800e212 <__kernel_cos+0x72>
 800e208:	ee36 6b41 	vsub.f64	d6, d6, d1
 800e20c:	ee37 0b46 	vsub.f64	d0, d7, d6
 800e210:	4770      	bx	lr
 800e212:	4b18      	ldr	r3, [pc, #96]	; (800e274 <__kernel_cos+0xd4>)
 800e214:	4299      	cmp	r1, r3
 800e216:	dc0d      	bgt.n	800e234 <__kernel_cos+0x94>
 800e218:	2200      	movs	r2, #0
 800e21a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800e21e:	ec43 2b15 	vmov	d5, r2, r3
 800e222:	ee37 0b45 	vsub.f64	d0, d7, d5
 800e226:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e22a:	ee36 6b41 	vsub.f64	d6, d6, d1
 800e22e:	ee30 0b46 	vsub.f64	d0, d0, d6
 800e232:	4770      	bx	lr
 800e234:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800e238:	e7f3      	b.n	800e222 <__kernel_cos+0x82>
 800e23a:	eeb0 0b47 	vmov.f64	d0, d7
 800e23e:	4770      	bx	lr
 800e240:	be8838d4 	.word	0xbe8838d4
 800e244:	bda8fae9 	.word	0xbda8fae9
 800e248:	bdb4b1c4 	.word	0xbdb4b1c4
 800e24c:	3e21ee9e 	.word	0x3e21ee9e
 800e250:	809c52ad 	.word	0x809c52ad
 800e254:	be927e4f 	.word	0xbe927e4f
 800e258:	19cb1590 	.word	0x19cb1590
 800e25c:	3efa01a0 	.word	0x3efa01a0
 800e260:	16c15177 	.word	0x16c15177
 800e264:	bf56c16c 	.word	0xbf56c16c
 800e268:	5555554c 	.word	0x5555554c
 800e26c:	3fa55555 	.word	0x3fa55555
 800e270:	3fd33332 	.word	0x3fd33332
 800e274:	3fe90000 	.word	0x3fe90000

0800e278 <__kernel_rem_pio2>:
 800e278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e27c:	ed2d 8b06 	vpush	{d8-d10}
 800e280:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800e284:	469b      	mov	fp, r3
 800e286:	460e      	mov	r6, r1
 800e288:	4bc7      	ldr	r3, [pc, #796]	; (800e5a8 <__kernel_rem_pio2+0x330>)
 800e28a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800e28c:	9002      	str	r0, [sp, #8]
 800e28e:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800e292:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 800e294:	1ed1      	subs	r1, r2, #3
 800e296:	2318      	movs	r3, #24
 800e298:	f06f 0417 	mvn.w	r4, #23
 800e29c:	fb91 f1f3 	sdiv	r1, r1, r3
 800e2a0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800e2a4:	f10b 3aff 	add.w	sl, fp, #4294967295
 800e2a8:	fb01 4404 	mla	r4, r1, r4, r4
 800e2ac:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 800e590 <__kernel_rem_pio2+0x318>
 800e2b0:	4414      	add	r4, r2
 800e2b2:	eba1 050a 	sub.w	r5, r1, sl
 800e2b6:	aa1a      	add	r2, sp, #104	; 0x68
 800e2b8:	eb09 070a 	add.w	r7, r9, sl
 800e2bc:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800e2c0:	4696      	mov	lr, r2
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	42bb      	cmp	r3, r7
 800e2c6:	dd0f      	ble.n	800e2e8 <__kernel_rem_pio2+0x70>
 800e2c8:	af6a      	add	r7, sp, #424	; 0x1a8
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	454a      	cmp	r2, r9
 800e2ce:	dc28      	bgt.n	800e322 <__kernel_rem_pio2+0xaa>
 800e2d0:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800e2d4:	eb0b 0302 	add.w	r3, fp, r2
 800e2d8:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800e2dc:	9d02      	ldr	r5, [sp, #8]
 800e2de:	ed9f 7bac 	vldr	d7, [pc, #688]	; 800e590 <__kernel_rem_pio2+0x318>
 800e2e2:	f04f 0c00 	mov.w	ip, #0
 800e2e6:	e016      	b.n	800e316 <__kernel_rem_pio2+0x9e>
 800e2e8:	42dd      	cmn	r5, r3
 800e2ea:	d409      	bmi.n	800e300 <__kernel_rem_pio2+0x88>
 800e2ec:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800e2f0:	ee07 2a90 	vmov	s15, r2
 800e2f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e2f8:	ecae 7b02 	vstmia	lr!, {d7}
 800e2fc:	3301      	adds	r3, #1
 800e2fe:	e7e1      	b.n	800e2c4 <__kernel_rem_pio2+0x4c>
 800e300:	eeb0 7b46 	vmov.f64	d7, d6
 800e304:	e7f8      	b.n	800e2f8 <__kernel_rem_pio2+0x80>
 800e306:	ecb5 5b02 	vldmia	r5!, {d5}
 800e30a:	ed33 6b02 	vldmdb	r3!, {d6}
 800e30e:	f10c 0c01 	add.w	ip, ip, #1
 800e312:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e316:	45d4      	cmp	ip, sl
 800e318:	ddf5      	ble.n	800e306 <__kernel_rem_pio2+0x8e>
 800e31a:	eca7 7b02 	vstmia	r7!, {d7}
 800e31e:	3201      	adds	r2, #1
 800e320:	e7d4      	b.n	800e2cc <__kernel_rem_pio2+0x54>
 800e322:	ab06      	add	r3, sp, #24
 800e324:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800e328:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 800e598 <__kernel_rem_pio2+0x320>
 800e32c:	ed9f ab9c 	vldr	d10, [pc, #624]	; 800e5a0 <__kernel_rem_pio2+0x328>
 800e330:	9304      	str	r3, [sp, #16]
 800e332:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800e336:	9303      	str	r3, [sp, #12]
 800e338:	464d      	mov	r5, r9
 800e33a:	ab92      	add	r3, sp, #584	; 0x248
 800e33c:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 800e340:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e344:	3f01      	subs	r7, #1
 800e346:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800e34a:	00ff      	lsls	r7, r7, #3
 800e34c:	ab92      	add	r3, sp, #584	; 0x248
 800e34e:	19da      	adds	r2, r3, r7
 800e350:	3a98      	subs	r2, #152	; 0x98
 800e352:	2300      	movs	r3, #0
 800e354:	1ae9      	subs	r1, r5, r3
 800e356:	2900      	cmp	r1, #0
 800e358:	dc4e      	bgt.n	800e3f8 <__kernel_rem_pio2+0x180>
 800e35a:	4620      	mov	r0, r4
 800e35c:	f000 fba4 	bl	800eaa8 <scalbn>
 800e360:	eeb0 8b40 	vmov.f64	d8, d0
 800e364:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800e368:	ee28 0b00 	vmul.f64	d0, d8, d0
 800e36c:	f000 fa8c 	bl	800e888 <floor>
 800e370:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800e374:	eea0 8b47 	vfms.f64	d8, d0, d7
 800e378:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800e37c:	2c00      	cmp	r4, #0
 800e37e:	edcd 7a01 	vstr	s15, [sp, #4]
 800e382:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e386:	ee38 8b47 	vsub.f64	d8, d8, d7
 800e38a:	dd4a      	ble.n	800e422 <__kernel_rem_pio2+0x1aa>
 800e38c:	1e69      	subs	r1, r5, #1
 800e38e:	ab06      	add	r3, sp, #24
 800e390:	f1c4 0018 	rsb	r0, r4, #24
 800e394:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800e398:	9a01      	ldr	r2, [sp, #4]
 800e39a:	fa4c f300 	asr.w	r3, ip, r0
 800e39e:	441a      	add	r2, r3
 800e3a0:	4083      	lsls	r3, r0
 800e3a2:	9201      	str	r2, [sp, #4]
 800e3a4:	ebac 0203 	sub.w	r2, ip, r3
 800e3a8:	ab06      	add	r3, sp, #24
 800e3aa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800e3ae:	f1c4 0317 	rsb	r3, r4, #23
 800e3b2:	fa42 f803 	asr.w	r8, r2, r3
 800e3b6:	f1b8 0f00 	cmp.w	r8, #0
 800e3ba:	dd43      	ble.n	800e444 <__kernel_rem_pio2+0x1cc>
 800e3bc:	9b01      	ldr	r3, [sp, #4]
 800e3be:	2000      	movs	r0, #0
 800e3c0:	3301      	adds	r3, #1
 800e3c2:	9301      	str	r3, [sp, #4]
 800e3c4:	4601      	mov	r1, r0
 800e3c6:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 800e3ca:	4285      	cmp	r5, r0
 800e3cc:	dc6e      	bgt.n	800e4ac <__kernel_rem_pio2+0x234>
 800e3ce:	2c00      	cmp	r4, #0
 800e3d0:	dd04      	ble.n	800e3dc <__kernel_rem_pio2+0x164>
 800e3d2:	2c01      	cmp	r4, #1
 800e3d4:	d07f      	beq.n	800e4d6 <__kernel_rem_pio2+0x25e>
 800e3d6:	2c02      	cmp	r4, #2
 800e3d8:	f000 8087 	beq.w	800e4ea <__kernel_rem_pio2+0x272>
 800e3dc:	f1b8 0f02 	cmp.w	r8, #2
 800e3e0:	d130      	bne.n	800e444 <__kernel_rem_pio2+0x1cc>
 800e3e2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e3e6:	ee30 8b48 	vsub.f64	d8, d0, d8
 800e3ea:	b359      	cbz	r1, 800e444 <__kernel_rem_pio2+0x1cc>
 800e3ec:	4620      	mov	r0, r4
 800e3ee:	f000 fb5b 	bl	800eaa8 <scalbn>
 800e3f2:	ee38 8b40 	vsub.f64	d8, d8, d0
 800e3f6:	e025      	b.n	800e444 <__kernel_rem_pio2+0x1cc>
 800e3f8:	ee20 7b09 	vmul.f64	d7, d0, d9
 800e3fc:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800e400:	a806      	add	r0, sp, #24
 800e402:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800e406:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800e40a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e40e:	ee10 1a10 	vmov	r1, s0
 800e412:	ed32 0b02 	vldmdb	r2!, {d0}
 800e416:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800e41a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800e41e:	3301      	adds	r3, #1
 800e420:	e798      	b.n	800e354 <__kernel_rem_pio2+0xdc>
 800e422:	d106      	bne.n	800e432 <__kernel_rem_pio2+0x1ba>
 800e424:	1e6b      	subs	r3, r5, #1
 800e426:	aa06      	add	r2, sp, #24
 800e428:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e42c:	ea4f 58e2 	mov.w	r8, r2, asr #23
 800e430:	e7c1      	b.n	800e3b6 <__kernel_rem_pio2+0x13e>
 800e432:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800e436:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e43a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e43e:	da32      	bge.n	800e4a6 <__kernel_rem_pio2+0x22e>
 800e440:	f04f 0800 	mov.w	r8, #0
 800e444:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e44c:	f040 80b0 	bne.w	800e5b0 <__kernel_rem_pio2+0x338>
 800e450:	1e6b      	subs	r3, r5, #1
 800e452:	4618      	mov	r0, r3
 800e454:	2200      	movs	r2, #0
 800e456:	4548      	cmp	r0, r9
 800e458:	da4e      	bge.n	800e4f8 <__kernel_rem_pio2+0x280>
 800e45a:	2a00      	cmp	r2, #0
 800e45c:	f000 8088 	beq.w	800e570 <__kernel_rem_pio2+0x2f8>
 800e460:	aa06      	add	r2, sp, #24
 800e462:	3c18      	subs	r4, #24
 800e464:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800e468:	2900      	cmp	r1, #0
 800e46a:	f000 808e 	beq.w	800e58a <__kernel_rem_pio2+0x312>
 800e46e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e472:	4620      	mov	r0, r4
 800e474:	9302      	str	r3, [sp, #8]
 800e476:	f000 fb17 	bl	800eaa8 <scalbn>
 800e47a:	9b02      	ldr	r3, [sp, #8]
 800e47c:	aa6a      	add	r2, sp, #424	; 0x1a8
 800e47e:	00d9      	lsls	r1, r3, #3
 800e480:	ed9f 6b45 	vldr	d6, [pc, #276]	; 800e598 <__kernel_rem_pio2+0x320>
 800e484:	1850      	adds	r0, r2, r1
 800e486:	f100 0508 	add.w	r5, r0, #8
 800e48a:	461c      	mov	r4, r3
 800e48c:	2c00      	cmp	r4, #0
 800e48e:	f280 80bd 	bge.w	800e60c <__kernel_rem_pio2+0x394>
 800e492:	2500      	movs	r5, #0
 800e494:	1b5c      	subs	r4, r3, r5
 800e496:	2c00      	cmp	r4, #0
 800e498:	f2c0 80dd 	blt.w	800e656 <__kernel_rem_pio2+0x3de>
 800e49c:	4f43      	ldr	r7, [pc, #268]	; (800e5ac <__kernel_rem_pio2+0x334>)
 800e49e:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 800e590 <__kernel_rem_pio2+0x318>
 800e4a2:	2400      	movs	r4, #0
 800e4a4:	e0cb      	b.n	800e63e <__kernel_rem_pio2+0x3c6>
 800e4a6:	f04f 0802 	mov.w	r8, #2
 800e4aa:	e787      	b.n	800e3bc <__kernel_rem_pio2+0x144>
 800e4ac:	ab06      	add	r3, sp, #24
 800e4ae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e4b2:	b949      	cbnz	r1, 800e4c8 <__kernel_rem_pio2+0x250>
 800e4b4:	b12b      	cbz	r3, 800e4c2 <__kernel_rem_pio2+0x24a>
 800e4b6:	aa06      	add	r2, sp, #24
 800e4b8:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e4bc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	3001      	adds	r0, #1
 800e4c4:	4619      	mov	r1, r3
 800e4c6:	e780      	b.n	800e3ca <__kernel_rem_pio2+0x152>
 800e4c8:	aa06      	add	r2, sp, #24
 800e4ca:	ebac 0303 	sub.w	r3, ip, r3
 800e4ce:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800e4d2:	460b      	mov	r3, r1
 800e4d4:	e7f5      	b.n	800e4c2 <__kernel_rem_pio2+0x24a>
 800e4d6:	1e68      	subs	r0, r5, #1
 800e4d8:	ab06      	add	r3, sp, #24
 800e4da:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e4de:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e4e2:	aa06      	add	r2, sp, #24
 800e4e4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800e4e8:	e778      	b.n	800e3dc <__kernel_rem_pio2+0x164>
 800e4ea:	1e68      	subs	r0, r5, #1
 800e4ec:	ab06      	add	r3, sp, #24
 800e4ee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e4f2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e4f6:	e7f4      	b.n	800e4e2 <__kernel_rem_pio2+0x26a>
 800e4f8:	a906      	add	r1, sp, #24
 800e4fa:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800e4fe:	3801      	subs	r0, #1
 800e500:	430a      	orrs	r2, r1
 800e502:	e7a8      	b.n	800e456 <__kernel_rem_pio2+0x1de>
 800e504:	f10c 0c01 	add.w	ip, ip, #1
 800e508:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e50c:	2a00      	cmp	r2, #0
 800e50e:	d0f9      	beq.n	800e504 <__kernel_rem_pio2+0x28c>
 800e510:	eb0b 0305 	add.w	r3, fp, r5
 800e514:	aa1a      	add	r2, sp, #104	; 0x68
 800e516:	00db      	lsls	r3, r3, #3
 800e518:	1898      	adds	r0, r3, r2
 800e51a:	3008      	adds	r0, #8
 800e51c:	1c69      	adds	r1, r5, #1
 800e51e:	3708      	adds	r7, #8
 800e520:	2200      	movs	r2, #0
 800e522:	4465      	add	r5, ip
 800e524:	9005      	str	r0, [sp, #20]
 800e526:	428d      	cmp	r5, r1
 800e528:	f6ff af07 	blt.w	800e33a <__kernel_rem_pio2+0xc2>
 800e52c:	a81a      	add	r0, sp, #104	; 0x68
 800e52e:	eb02 0c03 	add.w	ip, r2, r3
 800e532:	4484      	add	ip, r0
 800e534:	9803      	ldr	r0, [sp, #12]
 800e536:	f8dd e008 	ldr.w	lr, [sp, #8]
 800e53a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800e53e:	9001      	str	r0, [sp, #4]
 800e540:	ee07 0a90 	vmov	s15, r0
 800e544:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e548:	9805      	ldr	r0, [sp, #20]
 800e54a:	ed8c 7b00 	vstr	d7, [ip]
 800e54e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800e590 <__kernel_rem_pio2+0x318>
 800e552:	eb00 0802 	add.w	r8, r0, r2
 800e556:	f04f 0c00 	mov.w	ip, #0
 800e55a:	45d4      	cmp	ip, sl
 800e55c:	dd0c      	ble.n	800e578 <__kernel_rem_pio2+0x300>
 800e55e:	eb02 0c07 	add.w	ip, r2, r7
 800e562:	a86a      	add	r0, sp, #424	; 0x1a8
 800e564:	4484      	add	ip, r0
 800e566:	ed8c 7b02 	vstr	d7, [ip, #8]
 800e56a:	3101      	adds	r1, #1
 800e56c:	3208      	adds	r2, #8
 800e56e:	e7da      	b.n	800e526 <__kernel_rem_pio2+0x2ae>
 800e570:	9b04      	ldr	r3, [sp, #16]
 800e572:	f04f 0c01 	mov.w	ip, #1
 800e576:	e7c7      	b.n	800e508 <__kernel_rem_pio2+0x290>
 800e578:	ecbe 5b02 	vldmia	lr!, {d5}
 800e57c:	ed38 6b02 	vldmdb	r8!, {d6}
 800e580:	f10c 0c01 	add.w	ip, ip, #1
 800e584:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e588:	e7e7      	b.n	800e55a <__kernel_rem_pio2+0x2e2>
 800e58a:	3b01      	subs	r3, #1
 800e58c:	e768      	b.n	800e460 <__kernel_rem_pio2+0x1e8>
 800e58e:	bf00      	nop
	...
 800e59c:	3e700000 	.word	0x3e700000
 800e5a0:	00000000 	.word	0x00000000
 800e5a4:	41700000 	.word	0x41700000
 800e5a8:	0801e1f0 	.word	0x0801e1f0
 800e5ac:	0801e1b0 	.word	0x0801e1b0
 800e5b0:	4260      	negs	r0, r4
 800e5b2:	eeb0 0b48 	vmov.f64	d0, d8
 800e5b6:	f000 fa77 	bl	800eaa8 <scalbn>
 800e5ba:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800e798 <__kernel_rem_pio2+0x520>
 800e5be:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800e5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5c6:	db18      	blt.n	800e5fa <__kernel_rem_pio2+0x382>
 800e5c8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800e7a0 <__kernel_rem_pio2+0x528>
 800e5cc:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e5d0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800e5d4:	aa06      	add	r2, sp, #24
 800e5d6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800e5da:	eea5 0b46 	vfms.f64	d0, d5, d6
 800e5de:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e5e2:	a906      	add	r1, sp, #24
 800e5e4:	ee10 3a10 	vmov	r3, s0
 800e5e8:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800e5ec:	1c6b      	adds	r3, r5, #1
 800e5ee:	ee17 2a10 	vmov	r2, s14
 800e5f2:	3418      	adds	r4, #24
 800e5f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e5f8:	e739      	b.n	800e46e <__kernel_rem_pio2+0x1f6>
 800e5fa:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e5fe:	aa06      	add	r2, sp, #24
 800e600:	ee10 3a10 	vmov	r3, s0
 800e604:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800e608:	462b      	mov	r3, r5
 800e60a:	e730      	b.n	800e46e <__kernel_rem_pio2+0x1f6>
 800e60c:	aa06      	add	r2, sp, #24
 800e60e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800e612:	9202      	str	r2, [sp, #8]
 800e614:	ee07 2a90 	vmov	s15, r2
 800e618:	3c01      	subs	r4, #1
 800e61a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e61e:	ee27 7b00 	vmul.f64	d7, d7, d0
 800e622:	ee20 0b06 	vmul.f64	d0, d0, d6
 800e626:	ed25 7b02 	vstmdb	r5!, {d7}
 800e62a:	e72f      	b.n	800e48c <__kernel_rem_pio2+0x214>
 800e62c:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 800e630:	ecb7 5b02 	vldmia	r7!, {d5}
 800e634:	ed9c 6b00 	vldr	d6, [ip]
 800e638:	3401      	adds	r4, #1
 800e63a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e63e:	454c      	cmp	r4, r9
 800e640:	dc01      	bgt.n	800e646 <__kernel_rem_pio2+0x3ce>
 800e642:	42a5      	cmp	r5, r4
 800e644:	daf2      	bge.n	800e62c <__kernel_rem_pio2+0x3b4>
 800e646:	aa42      	add	r2, sp, #264	; 0x108
 800e648:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 800e64c:	ed84 7b00 	vstr	d7, [r4]
 800e650:	3501      	adds	r5, #1
 800e652:	3808      	subs	r0, #8
 800e654:	e71e      	b.n	800e494 <__kernel_rem_pio2+0x21c>
 800e656:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800e658:	2a03      	cmp	r2, #3
 800e65a:	d84e      	bhi.n	800e6fa <__kernel_rem_pio2+0x482>
 800e65c:	e8df f002 	tbb	[pc, r2]
 800e660:	021f1f3e 	.word	0x021f1f3e
 800e664:	3108      	adds	r1, #8
 800e666:	aa42      	add	r2, sp, #264	; 0x108
 800e668:	4411      	add	r1, r2
 800e66a:	4608      	mov	r0, r1
 800e66c:	461c      	mov	r4, r3
 800e66e:	2c00      	cmp	r4, #0
 800e670:	dc61      	bgt.n	800e736 <__kernel_rem_pio2+0x4be>
 800e672:	4608      	mov	r0, r1
 800e674:	461c      	mov	r4, r3
 800e676:	2c01      	cmp	r4, #1
 800e678:	dc6d      	bgt.n	800e756 <__kernel_rem_pio2+0x4de>
 800e67a:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800e7a8 <__kernel_rem_pio2+0x530>
 800e67e:	2b01      	cmp	r3, #1
 800e680:	dc79      	bgt.n	800e776 <__kernel_rem_pio2+0x4fe>
 800e682:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800e686:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800e68a:	f1b8 0f00 	cmp.w	r8, #0
 800e68e:	d178      	bne.n	800e782 <__kernel_rem_pio2+0x50a>
 800e690:	ed86 5b00 	vstr	d5, [r6]
 800e694:	ed86 6b02 	vstr	d6, [r6, #8]
 800e698:	ed86 7b04 	vstr	d7, [r6, #16]
 800e69c:	e02d      	b.n	800e6fa <__kernel_rem_pio2+0x482>
 800e69e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 800e7a8 <__kernel_rem_pio2+0x530>
 800e6a2:	3108      	adds	r1, #8
 800e6a4:	aa42      	add	r2, sp, #264	; 0x108
 800e6a6:	4411      	add	r1, r2
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	2800      	cmp	r0, #0
 800e6ac:	da34      	bge.n	800e718 <__kernel_rem_pio2+0x4a0>
 800e6ae:	f1b8 0f00 	cmp.w	r8, #0
 800e6b2:	d037      	beq.n	800e724 <__kernel_rem_pio2+0x4ac>
 800e6b4:	eeb1 7b46 	vneg.f64	d7, d6
 800e6b8:	ed86 7b00 	vstr	d7, [r6]
 800e6bc:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800e6c0:	a844      	add	r0, sp, #272	; 0x110
 800e6c2:	2101      	movs	r1, #1
 800e6c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e6c8:	428b      	cmp	r3, r1
 800e6ca:	da2e      	bge.n	800e72a <__kernel_rem_pio2+0x4b2>
 800e6cc:	f1b8 0f00 	cmp.w	r8, #0
 800e6d0:	d001      	beq.n	800e6d6 <__kernel_rem_pio2+0x45e>
 800e6d2:	eeb1 7b47 	vneg.f64	d7, d7
 800e6d6:	ed86 7b02 	vstr	d7, [r6, #8]
 800e6da:	e00e      	b.n	800e6fa <__kernel_rem_pio2+0x482>
 800e6dc:	aa92      	add	r2, sp, #584	; 0x248
 800e6de:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800e7a8 <__kernel_rem_pio2+0x530>
 800e6e2:	4411      	add	r1, r2
 800e6e4:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	da0f      	bge.n	800e70c <__kernel_rem_pio2+0x494>
 800e6ec:	f1b8 0f00 	cmp.w	r8, #0
 800e6f0:	d001      	beq.n	800e6f6 <__kernel_rem_pio2+0x47e>
 800e6f2:	eeb1 7b47 	vneg.f64	d7, d7
 800e6f6:	ed86 7b00 	vstr	d7, [r6]
 800e6fa:	9b01      	ldr	r3, [sp, #4]
 800e6fc:	f003 0007 	and.w	r0, r3, #7
 800e700:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800e704:	ecbd 8b06 	vpop	{d8-d10}
 800e708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e70c:	ed31 6b02 	vldmdb	r1!, {d6}
 800e710:	3b01      	subs	r3, #1
 800e712:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e716:	e7e7      	b.n	800e6e8 <__kernel_rem_pio2+0x470>
 800e718:	ed31 7b02 	vldmdb	r1!, {d7}
 800e71c:	3801      	subs	r0, #1
 800e71e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e722:	e7c2      	b.n	800e6aa <__kernel_rem_pio2+0x432>
 800e724:	eeb0 7b46 	vmov.f64	d7, d6
 800e728:	e7c6      	b.n	800e6b8 <__kernel_rem_pio2+0x440>
 800e72a:	ecb0 6b02 	vldmia	r0!, {d6}
 800e72e:	3101      	adds	r1, #1
 800e730:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e734:	e7c8      	b.n	800e6c8 <__kernel_rem_pio2+0x450>
 800e736:	ed10 7b04 	vldr	d7, [r0, #-16]
 800e73a:	ed30 5b02 	vldmdb	r0!, {d5}
 800e73e:	3c01      	subs	r4, #1
 800e740:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e744:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e748:	ed00 6b02 	vstr	d6, [r0, #-8]
 800e74c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e750:	ed80 7b00 	vstr	d7, [r0]
 800e754:	e78b      	b.n	800e66e <__kernel_rem_pio2+0x3f6>
 800e756:	ed10 7b04 	vldr	d7, [r0, #-16]
 800e75a:	ed30 5b02 	vldmdb	r0!, {d5}
 800e75e:	3c01      	subs	r4, #1
 800e760:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e764:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e768:	ed00 6b02 	vstr	d6, [r0, #-8]
 800e76c:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e770:	ed80 7b00 	vstr	d7, [r0]
 800e774:	e77f      	b.n	800e676 <__kernel_rem_pio2+0x3fe>
 800e776:	ed31 6b02 	vldmdb	r1!, {d6}
 800e77a:	3b01      	subs	r3, #1
 800e77c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e780:	e77d      	b.n	800e67e <__kernel_rem_pio2+0x406>
 800e782:	eeb1 5b45 	vneg.f64	d5, d5
 800e786:	eeb1 6b46 	vneg.f64	d6, d6
 800e78a:	ed86 5b00 	vstr	d5, [r6]
 800e78e:	eeb1 7b47 	vneg.f64	d7, d7
 800e792:	ed86 6b02 	vstr	d6, [r6, #8]
 800e796:	e77f      	b.n	800e698 <__kernel_rem_pio2+0x420>
 800e798:	00000000 	.word	0x00000000
 800e79c:	41700000 	.word	0x41700000
 800e7a0:	00000000 	.word	0x00000000
 800e7a4:	3e700000 	.word	0x3e700000
	...

0800e7b0 <__kernel_sin>:
 800e7b0:	ee10 3a90 	vmov	r3, s1
 800e7b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e7b8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e7bc:	da04      	bge.n	800e7c8 <__kernel_sin+0x18>
 800e7be:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800e7c2:	ee17 3a90 	vmov	r3, s15
 800e7c6:	b35b      	cbz	r3, 800e820 <__kernel_sin+0x70>
 800e7c8:	ee20 6b00 	vmul.f64	d6, d0, d0
 800e7cc:	ee20 5b06 	vmul.f64	d5, d0, d6
 800e7d0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800e828 <__kernel_sin+0x78>
 800e7d4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e830 <__kernel_sin+0x80>
 800e7d8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e7dc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800e838 <__kernel_sin+0x88>
 800e7e0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e7e4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e840 <__kernel_sin+0x90>
 800e7e8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800e7ec:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800e848 <__kernel_sin+0x98>
 800e7f0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e7f4:	b930      	cbnz	r0, 800e804 <__kernel_sin+0x54>
 800e7f6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e850 <__kernel_sin+0xa0>
 800e7fa:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e7fe:	eea4 0b05 	vfma.f64	d0, d4, d5
 800e802:	4770      	bx	lr
 800e804:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800e808:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e80c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800e810:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800e814:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800e858 <__kernel_sin+0xa8>
 800e818:	eea5 1b07 	vfma.f64	d1, d5, d7
 800e81c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800e820:	4770      	bx	lr
 800e822:	bf00      	nop
 800e824:	f3af 8000 	nop.w
 800e828:	5acfd57c 	.word	0x5acfd57c
 800e82c:	3de5d93a 	.word	0x3de5d93a
 800e830:	8a2b9ceb 	.word	0x8a2b9ceb
 800e834:	be5ae5e6 	.word	0xbe5ae5e6
 800e838:	57b1fe7d 	.word	0x57b1fe7d
 800e83c:	3ec71de3 	.word	0x3ec71de3
 800e840:	19c161d5 	.word	0x19c161d5
 800e844:	bf2a01a0 	.word	0xbf2a01a0
 800e848:	1110f8a6 	.word	0x1110f8a6
 800e84c:	3f811111 	.word	0x3f811111
 800e850:	55555549 	.word	0x55555549
 800e854:	bfc55555 	.word	0xbfc55555
 800e858:	55555549 	.word	0x55555549
 800e85c:	3fc55555 	.word	0x3fc55555

0800e860 <fabs>:
 800e860:	ec51 0b10 	vmov	r0, r1, d0
 800e864:	ee10 2a10 	vmov	r2, s0
 800e868:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e86c:	ec43 2b10 	vmov	d0, r2, r3
 800e870:	4770      	bx	lr

0800e872 <finite>:
 800e872:	ee10 3a90 	vmov	r3, s1
 800e876:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800e87a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e87e:	0fc0      	lsrs	r0, r0, #31
 800e880:	4770      	bx	lr
 800e882:	0000      	movs	r0, r0
 800e884:	0000      	movs	r0, r0
	...

0800e888 <floor>:
 800e888:	ee10 1a90 	vmov	r1, s1
 800e88c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e890:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800e894:	2b13      	cmp	r3, #19
 800e896:	b530      	push	{r4, r5, lr}
 800e898:	ee10 0a10 	vmov	r0, s0
 800e89c:	ee10 5a10 	vmov	r5, s0
 800e8a0:	dc33      	bgt.n	800e90a <floor+0x82>
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	da17      	bge.n	800e8d6 <floor+0x4e>
 800e8a6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800e968 <floor+0xe0>
 800e8aa:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e8ae:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8b6:	dd09      	ble.n	800e8cc <floor+0x44>
 800e8b8:	2900      	cmp	r1, #0
 800e8ba:	da50      	bge.n	800e95e <floor+0xd6>
 800e8bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e8c0:	4a2b      	ldr	r2, [pc, #172]	; (800e970 <floor+0xe8>)
 800e8c2:	4303      	orrs	r3, r0
 800e8c4:	2000      	movs	r0, #0
 800e8c6:	4283      	cmp	r3, r0
 800e8c8:	bf18      	it	ne
 800e8ca:	4611      	movne	r1, r2
 800e8cc:	460b      	mov	r3, r1
 800e8ce:	4602      	mov	r2, r0
 800e8d0:	ec43 2b10 	vmov	d0, r2, r3
 800e8d4:	e020      	b.n	800e918 <floor+0x90>
 800e8d6:	4a27      	ldr	r2, [pc, #156]	; (800e974 <floor+0xec>)
 800e8d8:	411a      	asrs	r2, r3
 800e8da:	ea01 0402 	and.w	r4, r1, r2
 800e8de:	4304      	orrs	r4, r0
 800e8e0:	d01a      	beq.n	800e918 <floor+0x90>
 800e8e2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800e968 <floor+0xe0>
 800e8e6:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e8ea:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8f2:	ddeb      	ble.n	800e8cc <floor+0x44>
 800e8f4:	2900      	cmp	r1, #0
 800e8f6:	bfbe      	ittt	lt
 800e8f8:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800e8fc:	fa40 f303 	asrlt.w	r3, r0, r3
 800e900:	18c9      	addlt	r1, r1, r3
 800e902:	ea21 0102 	bic.w	r1, r1, r2
 800e906:	2000      	movs	r0, #0
 800e908:	e7e0      	b.n	800e8cc <floor+0x44>
 800e90a:	2b33      	cmp	r3, #51	; 0x33
 800e90c:	dd05      	ble.n	800e91a <floor+0x92>
 800e90e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e912:	d101      	bne.n	800e918 <floor+0x90>
 800e914:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e918:	bd30      	pop	{r4, r5, pc}
 800e91a:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800e91e:	f04f 32ff 	mov.w	r2, #4294967295
 800e922:	40e2      	lsrs	r2, r4
 800e924:	4202      	tst	r2, r0
 800e926:	d0f7      	beq.n	800e918 <floor+0x90>
 800e928:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800e968 <floor+0xe0>
 800e92c:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e930:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e938:	ddc8      	ble.n	800e8cc <floor+0x44>
 800e93a:	2900      	cmp	r1, #0
 800e93c:	da02      	bge.n	800e944 <floor+0xbc>
 800e93e:	2b14      	cmp	r3, #20
 800e940:	d103      	bne.n	800e94a <floor+0xc2>
 800e942:	3101      	adds	r1, #1
 800e944:	ea20 0002 	bic.w	r0, r0, r2
 800e948:	e7c0      	b.n	800e8cc <floor+0x44>
 800e94a:	2401      	movs	r4, #1
 800e94c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e950:	fa04 f303 	lsl.w	r3, r4, r3
 800e954:	4418      	add	r0, r3
 800e956:	42a8      	cmp	r0, r5
 800e958:	bf38      	it	cc
 800e95a:	1909      	addcc	r1, r1, r4
 800e95c:	e7f2      	b.n	800e944 <floor+0xbc>
 800e95e:	2000      	movs	r0, #0
 800e960:	4601      	mov	r1, r0
 800e962:	e7b3      	b.n	800e8cc <floor+0x44>
 800e964:	f3af 8000 	nop.w
 800e968:	8800759c 	.word	0x8800759c
 800e96c:	7e37e43c 	.word	0x7e37e43c
 800e970:	bff00000 	.word	0xbff00000
 800e974:	000fffff 	.word	0x000fffff

0800e978 <matherr>:
 800e978:	2000      	movs	r0, #0
 800e97a:	4770      	bx	lr
 800e97c:	0000      	movs	r0, r0
	...

0800e980 <nan>:
 800e980:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e988 <nan+0x8>
 800e984:	4770      	bx	lr
 800e986:	bf00      	nop
 800e988:	00000000 	.word	0x00000000
 800e98c:	7ff80000 	.word	0x7ff80000

0800e990 <rint>:
 800e990:	b530      	push	{r4, r5, lr}
 800e992:	b085      	sub	sp, #20
 800e994:	ed8d 0b00 	vstr	d0, [sp]
 800e998:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e99c:	f3c3 510a 	ubfx	r1, r3, #20, #11
 800e9a0:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 800e9a4:	2813      	cmp	r0, #19
 800e9a6:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 800e9aa:	dc5a      	bgt.n	800ea62 <rint+0xd2>
 800e9ac:	2800      	cmp	r0, #0
 800e9ae:	da2f      	bge.n	800ea10 <rint+0x80>
 800e9b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e9b4:	4311      	orrs	r1, r2
 800e9b6:	d027      	beq.n	800ea08 <rint+0x78>
 800e9b8:	f3c3 0513 	ubfx	r5, r3, #0, #20
 800e9bc:	4315      	orrs	r5, r2
 800e9be:	426a      	negs	r2, r5
 800e9c0:	432a      	orrs	r2, r5
 800e9c2:	0b12      	lsrs	r2, r2, #12
 800e9c4:	0c5b      	lsrs	r3, r3, #17
 800e9c6:	045b      	lsls	r3, r3, #17
 800e9c8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800e9cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e9d0:	ea42 0103 	orr.w	r1, r2, r3
 800e9d4:	4b31      	ldr	r3, [pc, #196]	; (800ea9c <rint+0x10c>)
 800e9d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e9da:	ed93 6b00 	vldr	d6, [r3]
 800e9de:	ec41 0b17 	vmov	d7, r0, r1
 800e9e2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e9e6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e9ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e9ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e9f2:	ed8d 7b00 	vstr	d7, [sp]
 800e9f6:	9b01      	ldr	r3, [sp, #4]
 800e9f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e9fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ea00:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 800ea04:	e9cd 0100 	strd	r0, r1, [sp]
 800ea08:	ed9d 0b00 	vldr	d0, [sp]
 800ea0c:	b005      	add	sp, #20
 800ea0e:	bd30      	pop	{r4, r5, pc}
 800ea10:	4923      	ldr	r1, [pc, #140]	; (800eaa0 <rint+0x110>)
 800ea12:	4101      	asrs	r1, r0
 800ea14:	ea03 0501 	and.w	r5, r3, r1
 800ea18:	4315      	orrs	r5, r2
 800ea1a:	d0f5      	beq.n	800ea08 <rint+0x78>
 800ea1c:	0849      	lsrs	r1, r1, #1
 800ea1e:	ea03 0501 	and.w	r5, r3, r1
 800ea22:	432a      	orrs	r2, r5
 800ea24:	d00b      	beq.n	800ea3e <rint+0xae>
 800ea26:	ea23 0101 	bic.w	r1, r3, r1
 800ea2a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ea2e:	2813      	cmp	r0, #19
 800ea30:	fa43 f300 	asr.w	r3, r3, r0
 800ea34:	bf0c      	ite	eq
 800ea36:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800ea3a:	2200      	movne	r2, #0
 800ea3c:	430b      	orrs	r3, r1
 800ea3e:	4619      	mov	r1, r3
 800ea40:	4b16      	ldr	r3, [pc, #88]	; (800ea9c <rint+0x10c>)
 800ea42:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ea46:	ed94 6b00 	vldr	d6, [r4]
 800ea4a:	4610      	mov	r0, r2
 800ea4c:	ec41 0b17 	vmov	d7, r0, r1
 800ea50:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ea54:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ea58:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ea5c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ea60:	e008      	b.n	800ea74 <rint+0xe4>
 800ea62:	2833      	cmp	r0, #51	; 0x33
 800ea64:	dd09      	ble.n	800ea7a <rint+0xea>
 800ea66:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800ea6a:	d1cd      	bne.n	800ea08 <rint+0x78>
 800ea6c:	ed9d 7b00 	vldr	d7, [sp]
 800ea70:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ea74:	ed8d 7b00 	vstr	d7, [sp]
 800ea78:	e7c6      	b.n	800ea08 <rint+0x78>
 800ea7a:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 800ea7e:	f04f 31ff 	mov.w	r1, #4294967295
 800ea82:	40c1      	lsrs	r1, r0
 800ea84:	420a      	tst	r2, r1
 800ea86:	d0bf      	beq.n	800ea08 <rint+0x78>
 800ea88:	0849      	lsrs	r1, r1, #1
 800ea8a:	420a      	tst	r2, r1
 800ea8c:	bf1f      	itttt	ne
 800ea8e:	ea22 0101 	bicne.w	r1, r2, r1
 800ea92:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800ea96:	4102      	asrne	r2, r0
 800ea98:	430a      	orrne	r2, r1
 800ea9a:	e7d0      	b.n	800ea3e <rint+0xae>
 800ea9c:	0801e200 	.word	0x0801e200
 800eaa0:	000fffff 	.word	0x000fffff
 800eaa4:	00000000 	.word	0x00000000

0800eaa8 <scalbn>:
 800eaa8:	b500      	push	{lr}
 800eaaa:	ed2d 8b02 	vpush	{d8}
 800eaae:	b083      	sub	sp, #12
 800eab0:	ed8d 0b00 	vstr	d0, [sp]
 800eab4:	9b01      	ldr	r3, [sp, #4]
 800eab6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800eaba:	b9a2      	cbnz	r2, 800eae6 <scalbn+0x3e>
 800eabc:	9a00      	ldr	r2, [sp, #0]
 800eabe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eac2:	4313      	orrs	r3, r2
 800eac4:	d03a      	beq.n	800eb3c <scalbn+0x94>
 800eac6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800eb80 <scalbn+0xd8>
 800eaca:	4b35      	ldr	r3, [pc, #212]	; (800eba0 <scalbn+0xf8>)
 800eacc:	ee20 7b07 	vmul.f64	d7, d0, d7
 800ead0:	4298      	cmp	r0, r3
 800ead2:	ed8d 7b00 	vstr	d7, [sp]
 800ead6:	da11      	bge.n	800eafc <scalbn+0x54>
 800ead8:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800eb88 <scalbn+0xe0>
 800eadc:	ed9d 6b00 	vldr	d6, [sp]
 800eae0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800eae4:	e007      	b.n	800eaf6 <scalbn+0x4e>
 800eae6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800eaea:	428a      	cmp	r2, r1
 800eaec:	d10a      	bne.n	800eb04 <scalbn+0x5c>
 800eaee:	ed9d 7b00 	vldr	d7, [sp]
 800eaf2:	ee37 7b07 	vadd.f64	d7, d7, d7
 800eaf6:	ed8d 7b00 	vstr	d7, [sp]
 800eafa:	e01f      	b.n	800eb3c <scalbn+0x94>
 800eafc:	9b01      	ldr	r3, [sp, #4]
 800eafe:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800eb02:	3a36      	subs	r2, #54	; 0x36
 800eb04:	4402      	add	r2, r0
 800eb06:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800eb0a:	428a      	cmp	r2, r1
 800eb0c:	dd0a      	ble.n	800eb24 <scalbn+0x7c>
 800eb0e:	ed9f 8b20 	vldr	d8, [pc, #128]	; 800eb90 <scalbn+0xe8>
 800eb12:	eeb0 0b48 	vmov.f64	d0, d8
 800eb16:	ed9d 1b00 	vldr	d1, [sp]
 800eb1a:	f000 f95f 	bl	800eddc <copysign>
 800eb1e:	ee20 7b08 	vmul.f64	d7, d0, d8
 800eb22:	e7e8      	b.n	800eaf6 <scalbn+0x4e>
 800eb24:	2a00      	cmp	r2, #0
 800eb26:	dd10      	ble.n	800eb4a <scalbn+0xa2>
 800eb28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb2c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eb30:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eb34:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800eb38:	e9cd 0100 	strd	r0, r1, [sp]
 800eb3c:	ed9d 0b00 	vldr	d0, [sp]
 800eb40:	b003      	add	sp, #12
 800eb42:	ecbd 8b02 	vpop	{d8}
 800eb46:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb4a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800eb4e:	da06      	bge.n	800eb5e <scalbn+0xb6>
 800eb50:	f24c 3350 	movw	r3, #50000	; 0xc350
 800eb54:	4298      	cmp	r0, r3
 800eb56:	dcda      	bgt.n	800eb0e <scalbn+0x66>
 800eb58:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800eb88 <scalbn+0xe0>
 800eb5c:	e7d9      	b.n	800eb12 <scalbn+0x6a>
 800eb5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb62:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eb66:	3236      	adds	r2, #54	; 0x36
 800eb68:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eb6c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800eb70:	ec41 0b17 	vmov	d7, r0, r1
 800eb74:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800eb98 <scalbn+0xf0>
 800eb78:	e7b2      	b.n	800eae0 <scalbn+0x38>
 800eb7a:	bf00      	nop
 800eb7c:	f3af 8000 	nop.w
 800eb80:	00000000 	.word	0x00000000
 800eb84:	43500000 	.word	0x43500000
 800eb88:	c2f8f359 	.word	0xc2f8f359
 800eb8c:	01a56e1f 	.word	0x01a56e1f
 800eb90:	8800759c 	.word	0x8800759c
 800eb94:	7e37e43c 	.word	0x7e37e43c
 800eb98:	00000000 	.word	0x00000000
 800eb9c:	3c900000 	.word	0x3c900000
 800eba0:	ffff3cb0 	.word	0xffff3cb0
 800eba4:	00000000 	.word	0x00000000

0800eba8 <__ieee754_log>:
 800eba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ebaa:	ed8d 0b00 	vstr	d0, [sp]
 800ebae:	9a01      	ldr	r2, [sp, #4]
 800ebb0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800ebb4:	da26      	bge.n	800ec04 <__ieee754_log+0x5c>
 800ebb6:	9900      	ldr	r1, [sp, #0]
 800ebb8:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800ebbc:	430b      	orrs	r3, r1
 800ebbe:	d107      	bne.n	800ebd0 <__ieee754_log+0x28>
 800ebc0:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800ed70 <__ieee754_log+0x1c8>
 800ebc4:	ed9f 7b6c 	vldr	d7, [pc, #432]	; 800ed78 <__ieee754_log+0x1d0>
 800ebc8:	ee86 0b07 	vdiv.f64	d0, d6, d7
 800ebcc:	b003      	add	sp, #12
 800ebce:	bd30      	pop	{r4, r5, pc}
 800ebd0:	2a00      	cmp	r2, #0
 800ebd2:	da04      	bge.n	800ebde <__ieee754_log+0x36>
 800ebd4:	ed9d 7b00 	vldr	d7, [sp]
 800ebd8:	ee37 6b47 	vsub.f64	d6, d7, d7
 800ebdc:	e7f2      	b.n	800ebc4 <__ieee754_log+0x1c>
 800ebde:	ed9d 6b00 	vldr	d6, [sp]
 800ebe2:	ed9f 7b67 	vldr	d7, [pc, #412]	; 800ed80 <__ieee754_log+0x1d8>
 800ebe6:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ebea:	ed8d 7b00 	vstr	d7, [sp]
 800ebee:	9a01      	ldr	r2, [sp, #4]
 800ebf0:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800ebf4:	4b78      	ldr	r3, [pc, #480]	; (800edd8 <__ieee754_log+0x230>)
 800ebf6:	429a      	cmp	r2, r3
 800ebf8:	dd06      	ble.n	800ec08 <__ieee754_log+0x60>
 800ebfa:	ed9d 7b00 	vldr	d7, [sp]
 800ebfe:	ee37 0b07 	vadd.f64	d0, d7, d7
 800ec02:	e7e3      	b.n	800ebcc <__ieee754_log+0x24>
 800ec04:	2100      	movs	r1, #0
 800ec06:	e7f5      	b.n	800ebf4 <__ieee754_log+0x4c>
 800ec08:	1513      	asrs	r3, r2, #20
 800ec0a:	f3c2 0013 	ubfx	r0, r2, #0, #20
 800ec0e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ec12:	4419      	add	r1, r3
 800ec14:	f500 2315 	add.w	r3, r0, #610304	; 0x95000
 800ec18:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800ec1c:	f403 1480 	and.w	r4, r3, #1048576	; 0x100000
 800ec20:	f084 557f 	eor.w	r5, r4, #1069547520	; 0x3fc00000
 800ec24:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec28:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800ec2c:	f485 1540 	eor.w	r5, r5, #3145728	; 0x300000
 800ec30:	ea45 0300 	orr.w	r3, r5, r0
 800ec34:	ec43 2b10 	vmov	d0, r2, r3
 800ec38:	1c82      	adds	r2, r0, #2
 800ec3a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ec3e:	2a02      	cmp	r2, #2
 800ec40:	eb01 5414 	add.w	r4, r1, r4, lsr #20
 800ec44:	ee30 0b47 	vsub.f64	d0, d0, d7
 800ec48:	dc31      	bgt.n	800ecae <__ieee754_log+0x106>
 800ec4a:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800ec4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec52:	d10f      	bne.n	800ec74 <__ieee754_log+0xcc>
 800ec54:	2c00      	cmp	r4, #0
 800ec56:	f000 8086 	beq.w	800ed66 <__ieee754_log+0x1be>
 800ec5a:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800ed88 <__ieee754_log+0x1e0>
 800ec5e:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 800ed90 <__ieee754_log+0x1e8>
 800ec62:	ee07 4a90 	vmov	s15, r4
 800ec66:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ec6a:	ee27 0b00 	vmul.f64	d0, d7, d0
 800ec6e:	eea7 0b06 	vfma.f64	d0, d7, d6
 800ec72:	e7ab      	b.n	800ebcc <__ieee754_log+0x24>
 800ec74:	ed9f 7b48 	vldr	d7, [pc, #288]	; 800ed98 <__ieee754_log+0x1f0>
 800ec78:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800ec7c:	eea0 6b47 	vfms.f64	d6, d0, d7
 800ec80:	ee20 7b00 	vmul.f64	d7, d0, d0
 800ec84:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ec88:	b914      	cbnz	r4, 800ec90 <__ieee754_log+0xe8>
 800ec8a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800ec8e:	e79d      	b.n	800ebcc <__ieee754_log+0x24>
 800ec90:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 800ed88 <__ieee754_log+0x1e0>
 800ec94:	ee07 4a90 	vmov	s15, r4
 800ec98:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ec9c:	eea7 6b45 	vfms.f64	d6, d7, d5
 800eca0:	ee36 0b40 	vsub.f64	d0, d6, d0
 800eca4:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 800ed90 <__ieee754_log+0x1e8>
 800eca8:	ee97 0b06 	vfnms.f64	d0, d7, d6
 800ecac:	e78e      	b.n	800ebcc <__ieee754_log+0x24>
 800ecae:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800ecb2:	ee30 7b07 	vadd.f64	d7, d0, d7
 800ecb6:	ee80 4b07 	vdiv.f64	d4, d0, d7
 800ecba:	ee07 4a90 	vmov	s15, r4
 800ecbe:	ee24 2b04 	vmul.f64	d2, d4, d4
 800ecc2:	ed9f 3b37 	vldr	d3, [pc, #220]	; 800eda0 <__ieee754_log+0x1f8>
 800ecc6:	ee22 5b02 	vmul.f64	d5, d2, d2
 800ecca:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800ecce:	ed9f 7b36 	vldr	d7, [pc, #216]	; 800eda8 <__ieee754_log+0x200>
 800ecd2:	eea5 7b03 	vfma.f64	d7, d5, d3
 800ecd6:	ed9f 3b36 	vldr	d3, [pc, #216]	; 800edb0 <__ieee754_log+0x208>
 800ecda:	ed9f 1b37 	vldr	d1, [pc, #220]	; 800edb8 <__ieee754_log+0x210>
 800ecde:	eea7 3b05 	vfma.f64	d3, d7, d5
 800ece2:	ed9f 7b37 	vldr	d7, [pc, #220]	; 800edc0 <__ieee754_log+0x218>
 800ece6:	eea5 7b01 	vfma.f64	d7, d5, d1
 800ecea:	ed9f 1b37 	vldr	d1, [pc, #220]	; 800edc8 <__ieee754_log+0x220>
 800ecee:	f5a0 21c2 	sub.w	r1, r0, #397312	; 0x61000
 800ecf2:	f5c0 22d7 	rsb	r2, r0, #440320	; 0x6b800
 800ecf6:	eea7 1b05 	vfma.f64	d1, d7, d5
 800ecfa:	f2a1 417a 	subw	r1, r1, #1146	; 0x47a
 800ecfe:	ed9f 7b34 	vldr	d7, [pc, #208]	; 800edd0 <__ieee754_log+0x228>
 800ed02:	3251      	adds	r2, #81	; 0x51
 800ed04:	430a      	orrs	r2, r1
 800ed06:	2a00      	cmp	r2, #0
 800ed08:	eea1 7b05 	vfma.f64	d7, d1, d5
 800ed0c:	ee27 7b02 	vmul.f64	d7, d7, d2
 800ed10:	eea3 7b05 	vfma.f64	d7, d3, d5
 800ed14:	dd1c      	ble.n	800ed50 <__ieee754_log+0x1a8>
 800ed16:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ed1a:	ee20 5b05 	vmul.f64	d5, d0, d5
 800ed1e:	ee25 5b00 	vmul.f64	d5, d5, d0
 800ed22:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ed26:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ed2a:	b924      	cbnz	r4, 800ed36 <__ieee754_log+0x18e>
 800ed2c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ed30:	ee30 0b47 	vsub.f64	d0, d0, d7
 800ed34:	e74a      	b.n	800ebcc <__ieee754_log+0x24>
 800ed36:	ed9f 4b14 	vldr	d4, [pc, #80]	; 800ed88 <__ieee754_log+0x1e0>
 800ed3a:	eea6 7b04 	vfma.f64	d7, d6, d4
 800ed3e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ed42:	ee37 0b40 	vsub.f64	d0, d7, d0
 800ed46:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800ed90 <__ieee754_log+0x1e8>
 800ed4a:	ee96 0b07 	vfnms.f64	d0, d6, d7
 800ed4e:	e73d      	b.n	800ebcc <__ieee754_log+0x24>
 800ed50:	ee30 7b47 	vsub.f64	d7, d0, d7
 800ed54:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ed58:	2c00      	cmp	r4, #0
 800ed5a:	d0e9      	beq.n	800ed30 <__ieee754_log+0x188>
 800ed5c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 800ed88 <__ieee754_log+0x1e0>
 800ed60:	eea6 7b45 	vfms.f64	d7, d6, d5
 800ed64:	e7ed      	b.n	800ed42 <__ieee754_log+0x19a>
 800ed66:	ed9f 0b04 	vldr	d0, [pc, #16]	; 800ed78 <__ieee754_log+0x1d0>
 800ed6a:	e72f      	b.n	800ebcc <__ieee754_log+0x24>
 800ed6c:	f3af 8000 	nop.w
 800ed70:	00000000 	.word	0x00000000
 800ed74:	c3500000 	.word	0xc3500000
	...
 800ed84:	43500000 	.word	0x43500000
 800ed88:	35793c76 	.word	0x35793c76
 800ed8c:	3dea39ef 	.word	0x3dea39ef
 800ed90:	fee00000 	.word	0xfee00000
 800ed94:	3fe62e42 	.word	0x3fe62e42
 800ed98:	55555555 	.word	0x55555555
 800ed9c:	3fd55555 	.word	0x3fd55555
 800eda0:	d078c69f 	.word	0xd078c69f
 800eda4:	3fc39a09 	.word	0x3fc39a09
 800eda8:	1d8e78af 	.word	0x1d8e78af
 800edac:	3fcc71c5 	.word	0x3fcc71c5
 800edb0:	9997fa04 	.word	0x9997fa04
 800edb4:	3fd99999 	.word	0x3fd99999
 800edb8:	df3e5244 	.word	0xdf3e5244
 800edbc:	3fc2f112 	.word	0x3fc2f112
 800edc0:	96cb03de 	.word	0x96cb03de
 800edc4:	3fc74664 	.word	0x3fc74664
 800edc8:	94229359 	.word	0x94229359
 800edcc:	3fd24924 	.word	0x3fd24924
 800edd0:	55555593 	.word	0x55555593
 800edd4:	3fe55555 	.word	0x3fe55555
 800edd8:	7fefffff 	.word	0x7fefffff

0800eddc <copysign>:
 800eddc:	ec51 0b10 	vmov	r0, r1, d0
 800ede0:	ee11 0a90 	vmov	r0, s3
 800ede4:	ee10 2a10 	vmov	r2, s0
 800ede8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800edec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800edf0:	ea41 0300 	orr.w	r3, r1, r0
 800edf4:	ec43 2b10 	vmov	d0, r2, r3
 800edf8:	4770      	bx	lr
	...

0800edfc <_init>:
 800edfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edfe:	bf00      	nop
 800ee00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee02:	bc08      	pop	{r3}
 800ee04:	469e      	mov	lr, r3
 800ee06:	4770      	bx	lr

0800ee08 <_fini>:
 800ee08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee0a:	bf00      	nop
 800ee0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee0e:	bc08      	pop	{r3}
 800ee10:	469e      	mov	lr, r3
 800ee12:	4770      	bx	lr
