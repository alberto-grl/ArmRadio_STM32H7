
ArmRadioH7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8bc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000f3f8  0800eb60  0800eb60  0001eb60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801df58  0801df58  0004f600  2**0
                  CONTENTS
  4 .ARM          00000008  0801df58  0801df58  0002df58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801df60  0801df60  0004f600  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801df60  0801df60  0002df60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801df64  0801df64  0002df64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003dc  24000000  0801df68  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d228  240003e0  0801e344  000303e0  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  20000000  20000000  00040000  2**0
                  ALLOC
 11 .dtcm         0000f000  20000600  20000600  00040600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 0000002e  00000000  00000000  0004f600  2**0
                  CONTENTS, READONLY
 13 .debug_info   00032db7  00000000  00000000  0004f62e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00004f8a  00000000  00000000  000823e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00018c46  00000000  00000000  0008736f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000011f8  00000000  00000000  0009ffb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00003a70  00000000  00000000  000a11b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003a0e8  00000000  00000000  000a4c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00018513  00000000  00000000  000ded08  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    001785b4  00000000  00000000  000f721b  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      000000e9  00000000  00000000  0026f7cf  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004cf0  00000000  00000000  0026f8b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240003e0 	.word	0x240003e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800eb44 	.word	0x0800eb44

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240003e4 	.word	0x240003e4
 80002dc:	0800eb44 	.word	0x0800eb44

080002e0 <arm_bitreversal_32>:
 80002e0:	1c4b      	adds	r3, r1, #1
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	bf98      	it	ls
 80002e6:	4770      	bxls	lr
 80002e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002ec:	1c91      	adds	r1, r2, #2
 80002ee:	089b      	lsrs	r3, r3, #2

080002f0 <arm_bitreversal_32_0>:
 80002f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002f8:	880a      	ldrh	r2, [r1, #0]
 80002fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002fe:	4480      	add	r8, r0
 8000300:	4481      	add	r9, r0
 8000302:	4402      	add	r2, r0
 8000304:	4484      	add	ip, r0
 8000306:	f8d9 7000 	ldr.w	r7, [r9]
 800030a:	f8d8 6000 	ldr.w	r6, [r8]
 800030e:	6815      	ldr	r5, [r2, #0]
 8000310:	f8dc 4000 	ldr.w	r4, [ip]
 8000314:	f8c9 6000 	str.w	r6, [r9]
 8000318:	f8c8 7000 	str.w	r7, [r8]
 800031c:	f8cc 5000 	str.w	r5, [ip]
 8000320:	6014      	str	r4, [r2, #0]
 8000322:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000326:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800032a:	6855      	ldr	r5, [r2, #4]
 800032c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000330:	f8c9 6004 	str.w	r6, [r9, #4]
 8000334:	f8c8 7004 	str.w	r7, [r8, #4]
 8000338:	f8cc 5004 	str.w	r5, [ip, #4]
 800033c:	6054      	str	r4, [r2, #4]
 800033e:	3108      	adds	r1, #8
 8000340:	3b01      	subs	r3, #1
 8000342:	d1d5      	bne.n	80002f0 <arm_bitreversal_32_0>
 8000344:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000348:	4770      	bx	lr

0800034a <arm_bitreversal_16>:
 800034a:	1c4b      	adds	r3, r1, #1
 800034c:	2b01      	cmp	r3, #1
 800034e:	bf98      	it	ls
 8000350:	4770      	bxls	lr
 8000352:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000356:	1c91      	adds	r1, r2, #2
 8000358:	089b      	lsrs	r3, r3, #2

0800035a <arm_bitreversal_16_0>:
 800035a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800035e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000362:	880a      	ldrh	r2, [r1, #0]
 8000364:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000368:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800036c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000370:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000374:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000378:	f8d9 7000 	ldr.w	r7, [r9]
 800037c:	f8d8 6000 	ldr.w	r6, [r8]
 8000380:	6815      	ldr	r5, [r2, #0]
 8000382:	f8dc 4000 	ldr.w	r4, [ip]
 8000386:	f8c9 6000 	str.w	r6, [r9]
 800038a:	f8c8 7000 	str.w	r7, [r8]
 800038e:	f8cc 5000 	str.w	r5, [ip]
 8000392:	6014      	str	r4, [r2, #0]
 8000394:	3108      	adds	r1, #8
 8000396:	3b01      	subs	r3, #1
 8000398:	d1df      	bne.n	800035a <arm_bitreversal_16_0>
 800039a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800039e:	4770      	bx	lr

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <memchr>:
 80003b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003b4:	2a10      	cmp	r2, #16
 80003b6:	db2b      	blt.n	8000410 <memchr+0x60>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	d008      	beq.n	80003d0 <memchr+0x20>
 80003be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003c2:	3a01      	subs	r2, #1
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d02d      	beq.n	8000424 <memchr+0x74>
 80003c8:	f010 0f07 	tst.w	r0, #7
 80003cc:	b342      	cbz	r2, 8000420 <memchr+0x70>
 80003ce:	d1f6      	bne.n	80003be <memchr+0xe>
 80003d0:	b4f0      	push	{r4, r5, r6, r7}
 80003d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003da:	f022 0407 	bic.w	r4, r2, #7
 80003de:	f07f 0700 	mvns.w	r7, #0
 80003e2:	2300      	movs	r3, #0
 80003e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003e8:	3c08      	subs	r4, #8
 80003ea:	ea85 0501 	eor.w	r5, r5, r1
 80003ee:	ea86 0601 	eor.w	r6, r6, r1
 80003f2:	fa85 f547 	uadd8	r5, r5, r7
 80003f6:	faa3 f587 	sel	r5, r3, r7
 80003fa:	fa86 f647 	uadd8	r6, r6, r7
 80003fe:	faa5 f687 	sel	r6, r5, r7
 8000402:	b98e      	cbnz	r6, 8000428 <memchr+0x78>
 8000404:	d1ee      	bne.n	80003e4 <memchr+0x34>
 8000406:	bcf0      	pop	{r4, r5, r6, r7}
 8000408:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800040c:	f002 0207 	and.w	r2, r2, #7
 8000410:	b132      	cbz	r2, 8000420 <memchr+0x70>
 8000412:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000416:	3a01      	subs	r2, #1
 8000418:	ea83 0301 	eor.w	r3, r3, r1
 800041c:	b113      	cbz	r3, 8000424 <memchr+0x74>
 800041e:	d1f8      	bne.n	8000412 <memchr+0x62>
 8000420:	2000      	movs	r0, #0
 8000422:	4770      	bx	lr
 8000424:	3801      	subs	r0, #1
 8000426:	4770      	bx	lr
 8000428:	2d00      	cmp	r5, #0
 800042a:	bf06      	itte	eq
 800042c:	4635      	moveq	r5, r6
 800042e:	3803      	subeq	r0, #3
 8000430:	3807      	subne	r0, #7
 8000432:	f015 0f01 	tst.w	r5, #1
 8000436:	d107      	bne.n	8000448 <memchr+0x98>
 8000438:	3001      	adds	r0, #1
 800043a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800043e:	bf02      	ittt	eq
 8000440:	3001      	addeq	r0, #1
 8000442:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000446:	3001      	addeq	r0, #1
 8000448:	bcf0      	pop	{r4, r5, r6, r7}
 800044a:	3801      	subs	r0, #1
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295
 8000460:	f04f 30ff 	movne.w	r0, #4294967295
 8000464:	f000 b972 	b.w	800074c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9e08      	ldr	r6, [sp, #32]
 8000486:	4604      	mov	r4, r0
 8000488:	4688      	mov	r8, r1
 800048a:	2b00      	cmp	r3, #0
 800048c:	d14b      	bne.n	8000526 <__udivmoddi4+0xa6>
 800048e:	428a      	cmp	r2, r1
 8000490:	4615      	mov	r5, r2
 8000492:	d967      	bls.n	8000564 <__udivmoddi4+0xe4>
 8000494:	fab2 f282 	clz	r2, r2
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0720 	rsb	r7, r2, #32
 800049e:	fa01 f302 	lsl.w	r3, r1, r2
 80004a2:	fa20 f707 	lsr.w	r7, r0, r7
 80004a6:	4095      	lsls	r5, r2
 80004a8:	ea47 0803 	orr.w	r8, r7, r3
 80004ac:	4094      	lsls	r4, r2
 80004ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fbb8 f7fe 	udiv	r7, r8, lr
 80004b8:	fa1f fc85 	uxth.w	ip, r5
 80004bc:	fb0e 8817 	mls	r8, lr, r7, r8
 80004c0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004c4:	fb07 f10c 	mul.w	r1, r7, ip
 80004c8:	4299      	cmp	r1, r3
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x60>
 80004cc:	18eb      	adds	r3, r5, r3
 80004ce:	f107 30ff 	add.w	r0, r7, #4294967295
 80004d2:	f080 811b 	bcs.w	800070c <__udivmoddi4+0x28c>
 80004d6:	4299      	cmp	r1, r3
 80004d8:	f240 8118 	bls.w	800070c <__udivmoddi4+0x28c>
 80004dc:	3f02      	subs	r7, #2
 80004de:	442b      	add	r3, r5
 80004e0:	1a5b      	subs	r3, r3, r1
 80004e2:	b2a4      	uxth	r4, r4
 80004e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004f0:	fb00 fc0c 	mul.w	ip, r0, ip
 80004f4:	45a4      	cmp	ip, r4
 80004f6:	d909      	bls.n	800050c <__udivmoddi4+0x8c>
 80004f8:	192c      	adds	r4, r5, r4
 80004fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80004fe:	f080 8107 	bcs.w	8000710 <__udivmoddi4+0x290>
 8000502:	45a4      	cmp	ip, r4
 8000504:	f240 8104 	bls.w	8000710 <__udivmoddi4+0x290>
 8000508:	3802      	subs	r0, #2
 800050a:	442c      	add	r4, r5
 800050c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000510:	eba4 040c 	sub.w	r4, r4, ip
 8000514:	2700      	movs	r7, #0
 8000516:	b11e      	cbz	r6, 8000520 <__udivmoddi4+0xa0>
 8000518:	40d4      	lsrs	r4, r2
 800051a:	2300      	movs	r3, #0
 800051c:	e9c6 4300 	strd	r4, r3, [r6]
 8000520:	4639      	mov	r1, r7
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	428b      	cmp	r3, r1
 8000528:	d909      	bls.n	800053e <__udivmoddi4+0xbe>
 800052a:	2e00      	cmp	r6, #0
 800052c:	f000 80eb 	beq.w	8000706 <__udivmoddi4+0x286>
 8000530:	2700      	movs	r7, #0
 8000532:	e9c6 0100 	strd	r0, r1, [r6]
 8000536:	4638      	mov	r0, r7
 8000538:	4639      	mov	r1, r7
 800053a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053e:	fab3 f783 	clz	r7, r3
 8000542:	2f00      	cmp	r7, #0
 8000544:	d147      	bne.n	80005d6 <__udivmoddi4+0x156>
 8000546:	428b      	cmp	r3, r1
 8000548:	d302      	bcc.n	8000550 <__udivmoddi4+0xd0>
 800054a:	4282      	cmp	r2, r0
 800054c:	f200 80fa 	bhi.w	8000744 <__udivmoddi4+0x2c4>
 8000550:	1a84      	subs	r4, r0, r2
 8000552:	eb61 0303 	sbc.w	r3, r1, r3
 8000556:	2001      	movs	r0, #1
 8000558:	4698      	mov	r8, r3
 800055a:	2e00      	cmp	r6, #0
 800055c:	d0e0      	beq.n	8000520 <__udivmoddi4+0xa0>
 800055e:	e9c6 4800 	strd	r4, r8, [r6]
 8000562:	e7dd      	b.n	8000520 <__udivmoddi4+0xa0>
 8000564:	b902      	cbnz	r2, 8000568 <__udivmoddi4+0xe8>
 8000566:	deff      	udf	#255	; 0xff
 8000568:	fab2 f282 	clz	r2, r2
 800056c:	2a00      	cmp	r2, #0
 800056e:	f040 808f 	bne.w	8000690 <__udivmoddi4+0x210>
 8000572:	1b49      	subs	r1, r1, r5
 8000574:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000578:	fa1f f885 	uxth.w	r8, r5
 800057c:	2701      	movs	r7, #1
 800057e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000582:	0c23      	lsrs	r3, r4, #16
 8000584:	fb0e 111c 	mls	r1, lr, ip, r1
 8000588:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800058c:	fb08 f10c 	mul.w	r1, r8, ip
 8000590:	4299      	cmp	r1, r3
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x124>
 8000594:	18eb      	adds	r3, r5, r3
 8000596:	f10c 30ff 	add.w	r0, ip, #4294967295
 800059a:	d202      	bcs.n	80005a2 <__udivmoddi4+0x122>
 800059c:	4299      	cmp	r1, r3
 800059e:	f200 80cd 	bhi.w	800073c <__udivmoddi4+0x2bc>
 80005a2:	4684      	mov	ip, r0
 80005a4:	1a59      	subs	r1, r3, r1
 80005a6:	b2a3      	uxth	r3, r4
 80005a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ac:	fb0e 1410 	mls	r4, lr, r0, r1
 80005b0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80005b4:	fb08 f800 	mul.w	r8, r8, r0
 80005b8:	45a0      	cmp	r8, r4
 80005ba:	d907      	bls.n	80005cc <__udivmoddi4+0x14c>
 80005bc:	192c      	adds	r4, r5, r4
 80005be:	f100 33ff 	add.w	r3, r0, #4294967295
 80005c2:	d202      	bcs.n	80005ca <__udivmoddi4+0x14a>
 80005c4:	45a0      	cmp	r8, r4
 80005c6:	f200 80b6 	bhi.w	8000736 <__udivmoddi4+0x2b6>
 80005ca:	4618      	mov	r0, r3
 80005cc:	eba4 0408 	sub.w	r4, r4, r8
 80005d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005d4:	e79f      	b.n	8000516 <__udivmoddi4+0x96>
 80005d6:	f1c7 0c20 	rsb	ip, r7, #32
 80005da:	40bb      	lsls	r3, r7
 80005dc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80005e0:	ea4e 0e03 	orr.w	lr, lr, r3
 80005e4:	fa01 f407 	lsl.w	r4, r1, r7
 80005e8:	fa20 f50c 	lsr.w	r5, r0, ip
 80005ec:	fa21 f30c 	lsr.w	r3, r1, ip
 80005f0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80005f4:	4325      	orrs	r5, r4
 80005f6:	fbb3 f9f8 	udiv	r9, r3, r8
 80005fa:	0c2c      	lsrs	r4, r5, #16
 80005fc:	fb08 3319 	mls	r3, r8, r9, r3
 8000600:	fa1f fa8e 	uxth.w	sl, lr
 8000604:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000608:	fb09 f40a 	mul.w	r4, r9, sl
 800060c:	429c      	cmp	r4, r3
 800060e:	fa02 f207 	lsl.w	r2, r2, r7
 8000612:	fa00 f107 	lsl.w	r1, r0, r7
 8000616:	d90b      	bls.n	8000630 <__udivmoddi4+0x1b0>
 8000618:	eb1e 0303 	adds.w	r3, lr, r3
 800061c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000620:	f080 8087 	bcs.w	8000732 <__udivmoddi4+0x2b2>
 8000624:	429c      	cmp	r4, r3
 8000626:	f240 8084 	bls.w	8000732 <__udivmoddi4+0x2b2>
 800062a:	f1a9 0902 	sub.w	r9, r9, #2
 800062e:	4473      	add	r3, lr
 8000630:	1b1b      	subs	r3, r3, r4
 8000632:	b2ad      	uxth	r5, r5
 8000634:	fbb3 f0f8 	udiv	r0, r3, r8
 8000638:	fb08 3310 	mls	r3, r8, r0, r3
 800063c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000640:	fb00 fa0a 	mul.w	sl, r0, sl
 8000644:	45a2      	cmp	sl, r4
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x1da>
 8000648:	eb1e 0404 	adds.w	r4, lr, r4
 800064c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000650:	d26b      	bcs.n	800072a <__udivmoddi4+0x2aa>
 8000652:	45a2      	cmp	sl, r4
 8000654:	d969      	bls.n	800072a <__udivmoddi4+0x2aa>
 8000656:	3802      	subs	r0, #2
 8000658:	4474      	add	r4, lr
 800065a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800065e:	fba0 8902 	umull	r8, r9, r0, r2
 8000662:	eba4 040a 	sub.w	r4, r4, sl
 8000666:	454c      	cmp	r4, r9
 8000668:	46c2      	mov	sl, r8
 800066a:	464b      	mov	r3, r9
 800066c:	d354      	bcc.n	8000718 <__udivmoddi4+0x298>
 800066e:	d051      	beq.n	8000714 <__udivmoddi4+0x294>
 8000670:	2e00      	cmp	r6, #0
 8000672:	d069      	beq.n	8000748 <__udivmoddi4+0x2c8>
 8000674:	ebb1 050a 	subs.w	r5, r1, sl
 8000678:	eb64 0403 	sbc.w	r4, r4, r3
 800067c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000680:	40fd      	lsrs	r5, r7
 8000682:	40fc      	lsrs	r4, r7
 8000684:	ea4c 0505 	orr.w	r5, ip, r5
 8000688:	e9c6 5400 	strd	r5, r4, [r6]
 800068c:	2700      	movs	r7, #0
 800068e:	e747      	b.n	8000520 <__udivmoddi4+0xa0>
 8000690:	f1c2 0320 	rsb	r3, r2, #32
 8000694:	fa20 f703 	lsr.w	r7, r0, r3
 8000698:	4095      	lsls	r5, r2
 800069a:	fa01 f002 	lsl.w	r0, r1, r2
 800069e:	fa21 f303 	lsr.w	r3, r1, r3
 80006a2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80006a6:	4338      	orrs	r0, r7
 80006a8:	0c01      	lsrs	r1, r0, #16
 80006aa:	fbb3 f7fe 	udiv	r7, r3, lr
 80006ae:	fa1f f885 	uxth.w	r8, r5
 80006b2:	fb0e 3317 	mls	r3, lr, r7, r3
 80006b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006ba:	fb07 f308 	mul.w	r3, r7, r8
 80006be:	428b      	cmp	r3, r1
 80006c0:	fa04 f402 	lsl.w	r4, r4, r2
 80006c4:	d907      	bls.n	80006d6 <__udivmoddi4+0x256>
 80006c6:	1869      	adds	r1, r5, r1
 80006c8:	f107 3cff 	add.w	ip, r7, #4294967295
 80006cc:	d22f      	bcs.n	800072e <__udivmoddi4+0x2ae>
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d92d      	bls.n	800072e <__udivmoddi4+0x2ae>
 80006d2:	3f02      	subs	r7, #2
 80006d4:	4429      	add	r1, r5
 80006d6:	1acb      	subs	r3, r1, r3
 80006d8:	b281      	uxth	r1, r0
 80006da:	fbb3 f0fe 	udiv	r0, r3, lr
 80006de:	fb0e 3310 	mls	r3, lr, r0, r3
 80006e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006e6:	fb00 f308 	mul.w	r3, r0, r8
 80006ea:	428b      	cmp	r3, r1
 80006ec:	d907      	bls.n	80006fe <__udivmoddi4+0x27e>
 80006ee:	1869      	adds	r1, r5, r1
 80006f0:	f100 3cff 	add.w	ip, r0, #4294967295
 80006f4:	d217      	bcs.n	8000726 <__udivmoddi4+0x2a6>
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d915      	bls.n	8000726 <__udivmoddi4+0x2a6>
 80006fa:	3802      	subs	r0, #2
 80006fc:	4429      	add	r1, r5
 80006fe:	1ac9      	subs	r1, r1, r3
 8000700:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000704:	e73b      	b.n	800057e <__udivmoddi4+0xfe>
 8000706:	4637      	mov	r7, r6
 8000708:	4630      	mov	r0, r6
 800070a:	e709      	b.n	8000520 <__udivmoddi4+0xa0>
 800070c:	4607      	mov	r7, r0
 800070e:	e6e7      	b.n	80004e0 <__udivmoddi4+0x60>
 8000710:	4618      	mov	r0, r3
 8000712:	e6fb      	b.n	800050c <__udivmoddi4+0x8c>
 8000714:	4541      	cmp	r1, r8
 8000716:	d2ab      	bcs.n	8000670 <__udivmoddi4+0x1f0>
 8000718:	ebb8 0a02 	subs.w	sl, r8, r2
 800071c:	eb69 020e 	sbc.w	r2, r9, lr
 8000720:	3801      	subs	r0, #1
 8000722:	4613      	mov	r3, r2
 8000724:	e7a4      	b.n	8000670 <__udivmoddi4+0x1f0>
 8000726:	4660      	mov	r0, ip
 8000728:	e7e9      	b.n	80006fe <__udivmoddi4+0x27e>
 800072a:	4618      	mov	r0, r3
 800072c:	e795      	b.n	800065a <__udivmoddi4+0x1da>
 800072e:	4667      	mov	r7, ip
 8000730:	e7d1      	b.n	80006d6 <__udivmoddi4+0x256>
 8000732:	4681      	mov	r9, r0
 8000734:	e77c      	b.n	8000630 <__udivmoddi4+0x1b0>
 8000736:	3802      	subs	r0, #2
 8000738:	442c      	add	r4, r5
 800073a:	e747      	b.n	80005cc <__udivmoddi4+0x14c>
 800073c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000740:	442b      	add	r3, r5
 8000742:	e72f      	b.n	80005a4 <__udivmoddi4+0x124>
 8000744:	4638      	mov	r0, r7
 8000746:	e708      	b.n	800055a <__udivmoddi4+0xda>
 8000748:	4637      	mov	r7, r6
 800074a:	e6e9      	b.n	8000520 <__udivmoddi4+0xa0>

0800074c <__aeabi_idiv0>:
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop

08000750 <Load_Presets>:



// Load from the Presets table
void Load_Presets(void)
{
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <Load_Presets+0x40>)
 8000752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000756:	4c0f      	ldr	r4, [pc, #60]	; (8000794 <Load_Presets+0x44>)
 8000758:	f503 78a8 	add.w	r8, r3, #336	; 0x150
 800075c:	4f0e      	ldr	r7, [pc, #56]	; (8000798 <Load_Presets+0x48>)
 800075e:	4e0f      	ldr	r6, [pc, #60]	; (800079c <Load_Presets+0x4c>)
 8000760:	4d0f      	ldr	r5, [pc, #60]	; (80007a0 <Load_Presets+0x50>)
  int k;

  for(k=0; k<MAXPRESETS; k++)
  {
    strcpy(psets[k].name, pNames[k]);
 8000762:	4621      	mov	r1, r4
 8000764:	4618      	mov	r0, r3
 8000766:	f00b f90b 	bl	800b980 <strcpy>
    psets[k].freq = pFreqs[k];
    psets[k].mode = pModes[k];
 800076a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    strcpy(psets[k].name, pNames[k]);
 800076e:	4603      	mov	r3, r0
    psets[k].bw   = pBws[k];    
 8000770:	f815 2f01 	ldrb.w	r2, [r5, #1]!
    psets[k].freq = pFreqs[k];
 8000774:	f857 0b04 	ldr.w	r0, [r7], #4
 8000778:	3410      	adds	r4, #16
    psets[k].mode = pModes[k];
 800077a:	7519      	strb	r1, [r3, #20]
 800077c:	3318      	adds	r3, #24
    psets[k].freq = pFreqs[k];
 800077e:	f843 0c08 	str.w	r0, [r3, #-8]
    psets[k].bw   = pBws[k];    
 8000782:	f803 2c03 	strb.w	r2, [r3, #-3]
  for(k=0; k<MAXPRESETS; k++)
 8000786:	4543      	cmp	r3, r8
 8000788:	d1eb      	bne.n	8000762 <Load_Presets+0x12>
  }    
}
 800078a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800078e:	bf00      	nop
 8000790:	24008728 	.word	0x24008728
 8000794:	24000004 	.word	0x24000004
 8000798:	0801ab70 	.word	0x0801ab70
 800079c:	0801aba7 	.word	0x0801aba7
 80007a0:	0801ab5f 	.word	0x0801ab5f

080007a4 <SetBW>:
// Load the FFT mask according to the mode and the bandwidth chosen,
// and change the color of the buttons to indicate the active bandwidth
void SetBW(/*WM_HWIN ptr,*/ Bwidth newbw)
{
	CurrentBW = newbw;
	switch(CurrentMode)
 80007a4:	4b2a      	ldr	r3, [pc, #168]	; (8000850 <SetBW+0xac>)
	CurrentBW = newbw;
 80007a6:	4a2b      	ldr	r2, [pc, #172]	; (8000854 <SetBW+0xb0>)
	switch(CurrentMode)
 80007a8:	781b      	ldrb	r3, [r3, #0]
{
 80007aa:	b470      	push	{r4, r5, r6}
 80007ac:	4604      	mov	r4, r0
	CurrentBW = newbw;
 80007ae:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 80007b0:	2b03      	cmp	r3, #3
 80007b2:	d84b      	bhi.n	800084c <SetBW+0xa8>
 80007b4:	e8df f003 	tbb	[pc, r3]
 80007b8:	02142638 	.word	0x02142638
				             (float *)FFTmaskSSB_I[USBindex], FFTmask, FFTLEN);	
      break; 

    case CW  : 			
      bw[CW] = newbw;
      CWindex = (newbw == Narrow) ? 0 : 1;
 80007bc:	1c02      	adds	r2, r0, #0
 80007be:	4d26      	ldr	r5, [pc, #152]	; (8000858 <SetBW+0xb4>)
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 80007c0:	4e26      	ldr	r6, [pc, #152]	; (800085c <SetBW+0xb8>)
 80007c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
      CWindex = (newbw == Narrow) ? 0 : 1;
 80007c6:	bf18      	it	ne
 80007c8:	2201      	movne	r2, #1
				             (float *)FFTmaskCW_I[CWindex], FFTmask, FFTLEN);	
 80007ca:	4925      	ldr	r1, [pc, #148]	; (8000860 <SetBW+0xbc>)
 80007cc:	0310      	lsls	r0, r2, #12
      CWindex = (newbw == Narrow) ? 0 : 1;
 80007ce:	802a      	strh	r2, [r5, #0]
      bw[CW] = newbw;
 80007d0:	4d24      	ldr	r5, [pc, #144]	; (8000864 <SetBW+0xc0>)
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 80007d2:	4401      	add	r1, r0
 80007d4:	4a24      	ldr	r2, [pc, #144]	; (8000868 <SetBW+0xc4>)
 80007d6:	4430      	add	r0, r6
      bw[CW] = newbw;
 80007d8:	70ec      	strb	r4, [r5, #3]
      break; 

    default :
      break;		
  }    
}	
 80007da:	bc70      	pop	{r4, r5, r6}
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 80007dc:	f001 bbf2 	b.w	8001fc4 <SDR_2R_toC_f32>
      USBindex = (newbw == Narrow) ? 0 : 1;
 80007e0:	1c02      	adds	r2, r0, #0
 80007e2:	4d22      	ldr	r5, [pc, #136]	; (800086c <SetBW+0xc8>)
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex], 
 80007e4:	4e22      	ldr	r6, [pc, #136]	; (8000870 <SetBW+0xcc>)
 80007e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
      USBindex = (newbw == Narrow) ? 0 : 1;
 80007ea:	bf18      	it	ne
 80007ec:	2201      	movne	r2, #1
				             (float *)FFTmaskSSB_I[USBindex], FFTmask, FFTLEN);	
 80007ee:	4921      	ldr	r1, [pc, #132]	; (8000874 <SetBW+0xd0>)
 80007f0:	0310      	lsls	r0, r2, #12
      USBindex = (newbw == Narrow) ? 0 : 1;
 80007f2:	802a      	strh	r2, [r5, #0]
      bw[USB] = newbw;
 80007f4:	4d1b      	ldr	r5, [pc, #108]	; (8000864 <SetBW+0xc0>)
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex], 
 80007f6:	4401      	add	r1, r0
 80007f8:	4a1b      	ldr	r2, [pc, #108]	; (8000868 <SetBW+0xc4>)
 80007fa:	4430      	add	r0, r6
      bw[USB] = newbw;
 80007fc:	70ac      	strb	r4, [r5, #2]
}	
 80007fe:	bc70      	pop	{r4, r5, r6}
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex], 
 8000800:	f001 bbe0 	b.w	8001fc4 <SDR_2R_toC_f32>
      LSBindex = (newbw == Narrow) ? 0 : 1;
 8000804:	1c02      	adds	r2, r0, #0
 8000806:	4d1c      	ldr	r5, [pc, #112]	; (8000878 <SetBW+0xd4>)
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex], 
 8000808:	4e19      	ldr	r6, [pc, #100]	; (8000870 <SetBW+0xcc>)
 800080a:	f44f 6380 	mov.w	r3, #1024	; 0x400
      LSBindex = (newbw == Narrow) ? 0 : 1;
 800080e:	bf18      	it	ne
 8000810:	2201      	movne	r2, #1
				             (float *)FFTmaskSSB_I[LSBindex], FFTmask, FFTLEN);	
 8000812:	4918      	ldr	r1, [pc, #96]	; (8000874 <SetBW+0xd0>)
 8000814:	0310      	lsls	r0, r2, #12
      LSBindex = (newbw == Narrow) ? 0 : 1;
 8000816:	802a      	strh	r2, [r5, #0]
      bw[LSB] = newbw;
 8000818:	4d12      	ldr	r5, [pc, #72]	; (8000864 <SetBW+0xc0>)
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex], 
 800081a:	4401      	add	r1, r0
 800081c:	4a12      	ldr	r2, [pc, #72]	; (8000868 <SetBW+0xc4>)
 800081e:	4430      	add	r0, r6
      bw[LSB] = newbw;
 8000820:	706c      	strb	r4, [r5, #1]
}	
 8000822:	bc70      	pop	{r4, r5, r6}
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex], 
 8000824:	f001 bbce 	b.w	8001fc4 <SDR_2R_toC_f32>
      AMindex = (newbw == Narrow) ? 0 : 1;
 8000828:	1c02      	adds	r2, r0, #0
 800082a:	4d14      	ldr	r5, [pc, #80]	; (800087c <SetBW+0xd8>)
      SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex], 
 800082c:	4e14      	ldr	r6, [pc, #80]	; (8000880 <SetBW+0xdc>)
 800082e:	f44f 6380 	mov.w	r3, #1024	; 0x400
      AMindex = (newbw == Narrow) ? 0 : 1;
 8000832:	bf18      	it	ne
 8000834:	2201      	movne	r2, #1
				             (float *)FFTmaskAM_I[AMindex], FFTmask, FFTLEN);	
 8000836:	4913      	ldr	r1, [pc, #76]	; (8000884 <SetBW+0xe0>)
 8000838:	0310      	lsls	r0, r2, #12
      AMindex = (newbw == Narrow) ? 0 : 1;
 800083a:	802a      	strh	r2, [r5, #0]
      bw[AM] = newbw;
 800083c:	4d09      	ldr	r5, [pc, #36]	; (8000864 <SetBW+0xc0>)
      SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex], 
 800083e:	4401      	add	r1, r0
 8000840:	4a09      	ldr	r2, [pc, #36]	; (8000868 <SetBW+0xc4>)
 8000842:	4430      	add	r0, r6
      bw[AM] = newbw;
 8000844:	702c      	strb	r4, [r5, #0]
}	
 8000846:	bc70      	pop	{r4, r5, r6}
      SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex], 
 8000848:	f001 bbbc 	b.w	8001fc4 <SDR_2R_toC_f32>
}	
 800084c:	bc70      	pop	{r4, r5, r6}
 800084e:	4770      	bx	lr
 8000850:	2400c1fc 	.word	0x2400c1fc
 8000854:	24000910 	.word	0x24000910
 8000858:	24008cc8 	.word	0x24008cc8
 800085c:	08014b60 	.word	0x08014b60
 8000860:	08012b60 	.word	0x08012b60
 8000864:	24008ccc 	.word	0x24008ccc
 8000868:	20004600 	.word	0x20004600
 800086c:	24007e9c 	.word	0x24007e9c
 8000870:	08018b60 	.word	0x08018b60
 8000874:	08016b60 	.word	0x08016b60
 8000878:	2400d600 	.word	0x2400d600
 800087c:	2400d602 	.word	0x2400d602
 8000880:	08010b60 	.word	0x08010b60
 8000884:	0800eb60 	.word	0x0800eb60

08000888 <Tune_Preset>:
{
 8000888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LOfreq = psets[Idx].freq;
 800088c:	0045      	lsls	r5, r0, #1
 800088e:	4e89      	ldr	r6, [pc, #548]	; (8000ab4 <Tune_Preset+0x22c>)
 8000890:	4a89      	ldr	r2, [pc, #548]	; (8000ab8 <Tune_Preset+0x230>)
{
 8000892:	4604      	mov	r4, r0
  LOfreq = psets[Idx].freq;
 8000894:	182b      	adds	r3, r5, r0
// Set the new demodulation mode chosen by the user, and change the color
// of the buttons to indicate the active mode

void SetMode(/*WM_HWIN ptr,*/ Mode newmode)
{
	CurrentMode = newmode;
 8000896:	4f89      	ldr	r7, [pc, #548]	; (8000abc <Tune_Preset+0x234>)
  LOfreq = psets[Idx].freq;
 8000898:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800089c:	6919      	ldr	r1, [r3, #16]
	SetMode( psets[Idx].mode);
 800089e:	7d1b      	ldrb	r3, [r3, #20]
  LOfreq = psets[Idx].freq;
 80008a0:	6011      	str	r1, [r2, #0]
	CurrentMode = newmode;
 80008a2:	703b      	strb	r3, [r7, #0]

	switch(CurrentMode)
 80008a4:	2b03      	cmp	r3, #3
 80008a6:	d849      	bhi.n	800093c <Tune_Preset+0xb4>
 80008a8:	e8df f003 	tbb	[pc, r3]
 80008ac:	02152637 	.word	0x02152637
 //     ChangeColor(ptr, hUSB, GUI_RED);		
 //     ChangeColor(ptr, hCW,  GUI_BLACK);		
      break; 

    case CW  : 			
      SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 80008b0:	f8df 8248 	ldr.w	r8, [pc, #584]	; 8000afc <Tune_Preset+0x274>
 80008b4:	f898 0003 	ldrb.w	r0, [r8, #3]
 80008b8:	f7ff ff74 	bl	80007a4 <SetBW>
 80008bc:	4b80      	ldr	r3, [pc, #512]	; (8000ac0 <Tune_Preset+0x238>)
	CurrentAGC =newAGC;
 80008be:	4881      	ldr	r0, [pc, #516]	; (8000ac4 <Tune_Preset+0x23c>)
      SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 80008c0:	78da      	ldrb	r2, [r3, #3]
	switch(CurrentMode)
 80008c2:	7839      	ldrb	r1, [r7, #0]
	CurrentAGC =newAGC;
 80008c4:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 80008c6:	2903      	cmp	r1, #3
 80008c8:	d838      	bhi.n	800093c <Tune_Preset+0xb4>
 80008ca:	e8df f011 	tbh	[pc, r1, lsl #1]
 80008ce:	00a6      	.short	0x00a6
 80008d0:	006c0089 	.word	0x006c0089
 80008d4:	00e7      	.short	0x00e7
      SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 80008d6:	f8df 8224 	ldr.w	r8, [pc, #548]	; 8000afc <Tune_Preset+0x274>
 80008da:	f898 0002 	ldrb.w	r0, [r8, #2]
 80008de:	f7ff ff61 	bl	80007a4 <SetBW>
 80008e2:	4b77      	ldr	r3, [pc, #476]	; (8000ac0 <Tune_Preset+0x238>)
	CurrentAGC =newAGC;
 80008e4:	4877      	ldr	r0, [pc, #476]	; (8000ac4 <Tune_Preset+0x23c>)
      SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 80008e6:	789a      	ldrb	r2, [r3, #2]
	switch(CurrentMode)
 80008e8:	7839      	ldrb	r1, [r7, #0]
	CurrentAGC =newAGC;
 80008ea:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 80008ec:	2903      	cmp	r1, #3
 80008ee:	d825      	bhi.n	800093c <Tune_Preset+0xb4>
 80008f0:	e8df f001 	tbb	[pc, r1]
 80008f4:	33b07693 	.word	0x33b07693
      SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 80008f8:	f8df 8200 	ldr.w	r8, [pc, #512]	; 8000afc <Tune_Preset+0x274>
 80008fc:	f898 0001 	ldrb.w	r0, [r8, #1]
 8000900:	f7ff ff50 	bl	80007a4 <SetBW>
 8000904:	4b6e      	ldr	r3, [pc, #440]	; (8000ac0 <Tune_Preset+0x238>)
	CurrentAGC =newAGC;
 8000906:	486f      	ldr	r0, [pc, #444]	; (8000ac4 <Tune_Preset+0x23c>)
      SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000908:	785a      	ldrb	r2, [r3, #1]
	switch(CurrentMode)
 800090a:	7839      	ldrb	r1, [r7, #0]
	CurrentAGC =newAGC;
 800090c:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 800090e:	2903      	cmp	r1, #3
 8000910:	d814      	bhi.n	800093c <Tune_Preset+0xb4>
 8000912:	e8df f001 	tbb	[pc, r1]
 8000916:	ab82      	.short	0xab82
 8000918:	2248      	.short	0x2248
      SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 800091a:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8000afc <Tune_Preset+0x274>
 800091e:	f898 0000 	ldrb.w	r0, [r8]
 8000922:	f7ff ff3f 	bl	80007a4 <SetBW>
 8000926:	4b66      	ldr	r3, [pc, #408]	; (8000ac0 <Tune_Preset+0x238>)
	CurrentAGC =newAGC;
 8000928:	4866      	ldr	r0, [pc, #408]	; (8000ac4 <Tune_Preset+0x23c>)
      SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 800092a:	781a      	ldrb	r2, [r3, #0]
	switch(CurrentMode)
 800092c:	7839      	ldrb	r1, [r7, #0]
	CurrentAGC =newAGC;
 800092e:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8000930:	2903      	cmp	r1, #3
 8000932:	d803      	bhi.n	800093c <Tune_Preset+0xb4>
 8000934:	e8df f001 	tbb	[pc, r1]
 8000938:	113754a6 	.word	0x113754a6
  SetBW( psets[Idx].bw);
 800093c:	4425      	add	r5, r4
	CurrentBW = newbw;
 800093e:	4b62      	ldr	r3, [pc, #392]	; (8000ac8 <Tune_Preset+0x240>)
  SetBW( psets[Idx].bw);
 8000940:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
	CurrentBW = newbw;
 8000944:	7d6a      	ldrb	r2, [r5, #21]
 8000946:	701a      	strb	r2, [r3, #0]
	strcpy(msg, psets[Idx].name);
 8000948:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800094c:	485f      	ldr	r0, [pc, #380]	; (8000acc <Tune_Preset+0x244>)
 800094e:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
}
 8000952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	strcpy(msg, psets[Idx].name);
 8000956:	f00b b813 	b.w	800b980 <strcpy>
      Decay[CW]   = AGC_decay[newAGC];
 800095a:	495d      	ldr	r1, [pc, #372]	; (8000ad0 <Tune_Preset+0x248>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 800095c:	4f5d      	ldr	r7, [pc, #372]	; (8000ad4 <Tune_Preset+0x24c>)
      Decay[CW]   = AGC_decay[newAGC];
 800095e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    case CW :       agc[CW] = newAGC;
 8000962:	70da      	strb	r2, [r3, #3]
      Decay[CW]   = AGC_decay[newAGC];
 8000964:	485c      	ldr	r0, [pc, #368]	; (8000ad8 <Tune_Preset+0x250>)
 8000966:	6809      	ldr	r1, [r1, #0]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000968:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 800096c:	4b5b      	ldr	r3, [pc, #364]	; (8000adc <Tune_Preset+0x254>)
      Decay[CW]   = AGC_decay[newAGC];
 800096e:	60c1      	str	r1, [r0, #12]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000970:	80da      	strh	r2, [r3, #6]
  SetBW( psets[Idx].bw);
 8000972:	4425      	add	r5, r4
				             (float *)FFTmaskCW_I[CWindex], FFTmask, FFTLEN);	
 8000974:	495a      	ldr	r1, [pc, #360]	; (8000ae0 <Tune_Preset+0x258>)
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 8000976:	4f5b      	ldr	r7, [pc, #364]	; (8000ae4 <Tune_Preset+0x25c>)
 8000978:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SetBW( psets[Idx].bw);
 800097c:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
	CurrentBW = newbw;
 8000980:	4851      	ldr	r0, [pc, #324]	; (8000ac8 <Tune_Preset+0x240>)
      CWindex = (newbw == Narrow) ? 0 : 1;
 8000982:	f8df c17c 	ldr.w	ip, [pc, #380]	; 8000b00 <Tune_Preset+0x278>
  SetBW( psets[Idx].bw);
 8000986:	7d6a      	ldrb	r2, [r5, #21]
      CWindex = (newbw == Narrow) ? 0 : 1;
 8000988:	1c15      	adds	r5, r2, #0
      bw[CW] = newbw;
 800098a:	f888 2003 	strb.w	r2, [r8, #3]
      CWindex = (newbw == Narrow) ? 0 : 1;
 800098e:	bf18      	it	ne
 8000990:	2501      	movne	r5, #1
	CurrentBW = newbw;
 8000992:	7002      	strb	r2, [r0, #0]
 8000994:	0328      	lsls	r0, r5, #12
      CWindex = (newbw == Narrow) ? 0 : 1;
 8000996:	f8ac 5000 	strh.w	r5, [ip]
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 800099a:	4401      	add	r1, r0
 800099c:	4a52      	ldr	r2, [pc, #328]	; (8000ae8 <Tune_Preset+0x260>)
 800099e:	4438      	add	r0, r7
 80009a0:	f001 fb10 	bl	8001fc4 <SDR_2R_toC_f32>
 80009a4:	e7d0      	b.n	8000948 <Tune_Preset+0xc0>
      Decay[USB]  = AGC_decay[newAGC];
 80009a6:	494a      	ldr	r1, [pc, #296]	; (8000ad0 <Tune_Preset+0x248>)
      Hcount[USB] = Hangcount[newAGC]; break;
 80009a8:	4f4a      	ldr	r7, [pc, #296]	; (8000ad4 <Tune_Preset+0x24c>)
      Decay[USB]  = AGC_decay[newAGC];
 80009aa:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    case USB :      agc[USB] = newAGC;
 80009ae:	709a      	strb	r2, [r3, #2]
      Decay[USB]  = AGC_decay[newAGC];
 80009b0:	4849      	ldr	r0, [pc, #292]	; (8000ad8 <Tune_Preset+0x250>)
 80009b2:	6809      	ldr	r1, [r1, #0]
      Hcount[USB] = Hangcount[newAGC]; break;
 80009b4:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80009b8:	4b48      	ldr	r3, [pc, #288]	; (8000adc <Tune_Preset+0x254>)
      Decay[USB]  = AGC_decay[newAGC];
 80009ba:	6081      	str	r1, [r0, #8]
      Hcount[USB] = Hangcount[newAGC]; break;
 80009bc:	809a      	strh	r2, [r3, #4]
  SetBW( psets[Idx].bw);
 80009be:	4425      	add	r5, r4
				             (float *)FFTmaskSSB_I[USBindex], FFTmask, FFTLEN);	
 80009c0:	494a      	ldr	r1, [pc, #296]	; (8000aec <Tune_Preset+0x264>)
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex], 
 80009c2:	4f4b      	ldr	r7, [pc, #300]	; (8000af0 <Tune_Preset+0x268>)
 80009c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SetBW( psets[Idx].bw);
 80009c8:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
	CurrentBW = newbw;
 80009cc:	483e      	ldr	r0, [pc, #248]	; (8000ac8 <Tune_Preset+0x240>)
      USBindex = (newbw == Narrow) ? 0 : 1;
 80009ce:	f8df c134 	ldr.w	ip, [pc, #308]	; 8000b04 <Tune_Preset+0x27c>
  SetBW( psets[Idx].bw);
 80009d2:	7d6a      	ldrb	r2, [r5, #21]
      USBindex = (newbw == Narrow) ? 0 : 1;
 80009d4:	1c15      	adds	r5, r2, #0
      bw[USB] = newbw;
 80009d6:	f888 2002 	strb.w	r2, [r8, #2]
      USBindex = (newbw == Narrow) ? 0 : 1;
 80009da:	bf18      	it	ne
 80009dc:	2501      	movne	r5, #1
 80009de:	e7d8      	b.n	8000992 <Tune_Preset+0x10a>
      Decay[LSB]  = AGC_decay[newAGC];
 80009e0:	493b      	ldr	r1, [pc, #236]	; (8000ad0 <Tune_Preset+0x248>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 80009e2:	4f3c      	ldr	r7, [pc, #240]	; (8000ad4 <Tune_Preset+0x24c>)
      Decay[LSB]  = AGC_decay[newAGC];
 80009e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    case LSB :      agc[LSB] = newAGC;
 80009e8:	705a      	strb	r2, [r3, #1]
      Decay[LSB]  = AGC_decay[newAGC];
 80009ea:	483b      	ldr	r0, [pc, #236]	; (8000ad8 <Tune_Preset+0x250>)
 80009ec:	6809      	ldr	r1, [r1, #0]
      Hcount[LSB] = Hangcount[newAGC]; break;
 80009ee:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80009f2:	4b3a      	ldr	r3, [pc, #232]	; (8000adc <Tune_Preset+0x254>)
      Decay[LSB]  = AGC_decay[newAGC];
 80009f4:	6041      	str	r1, [r0, #4]
      Hcount[LSB] = Hangcount[newAGC]; break;
 80009f6:	805a      	strh	r2, [r3, #2]
  SetBW( psets[Idx].bw);
 80009f8:	4425      	add	r5, r4
				             (float *)FFTmaskSSB_I[LSBindex], FFTmask, FFTLEN);	
 80009fa:	493c      	ldr	r1, [pc, #240]	; (8000aec <Tune_Preset+0x264>)
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex], 
 80009fc:	4f3c      	ldr	r7, [pc, #240]	; (8000af0 <Tune_Preset+0x268>)
 80009fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SetBW( psets[Idx].bw);
 8000a02:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
	CurrentBW = newbw;
 8000a06:	4830      	ldr	r0, [pc, #192]	; (8000ac8 <Tune_Preset+0x240>)
      LSBindex = (newbw == Narrow) ? 0 : 1;
 8000a08:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8000b08 <Tune_Preset+0x280>
  SetBW( psets[Idx].bw);
 8000a0c:	7d6a      	ldrb	r2, [r5, #21]
      LSBindex = (newbw == Narrow) ? 0 : 1;
 8000a0e:	1c15      	adds	r5, r2, #0
      bw[LSB] = newbw;
 8000a10:	f888 2001 	strb.w	r2, [r8, #1]
      LSBindex = (newbw == Narrow) ? 0 : 1;
 8000a14:	bf18      	it	ne
 8000a16:	2501      	movne	r5, #1
 8000a18:	e7bb      	b.n	8000992 <Tune_Preset+0x10a>
      Decay[AM]   = AGC_decay[newAGC];
 8000a1a:	492d      	ldr	r1, [pc, #180]	; (8000ad0 <Tune_Preset+0x248>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000a1c:	4f2d      	ldr	r7, [pc, #180]	; (8000ad4 <Tune_Preset+0x24c>)
      Decay[AM]   = AGC_decay[newAGC];
 8000a1e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
	  case AM :       agc[AM] = newAGC;
 8000a22:	701a      	strb	r2, [r3, #0]
      Decay[AM]   = AGC_decay[newAGC];
 8000a24:	482c      	ldr	r0, [pc, #176]	; (8000ad8 <Tune_Preset+0x250>)
 8000a26:	6809      	ldr	r1, [r1, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000a28:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8000a2c:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <Tune_Preset+0x254>)
      Decay[AM]   = AGC_decay[newAGC];
 8000a2e:	6001      	str	r1, [r0, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000a30:	801a      	strh	r2, [r3, #0]
  SetBW( psets[Idx].bw);
 8000a32:	4425      	add	r5, r4
				             (float *)FFTmaskAM_I[AMindex], FFTmask, FFTLEN);	
 8000a34:	492f      	ldr	r1, [pc, #188]	; (8000af4 <Tune_Preset+0x26c>)
      SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex], 
 8000a36:	4f30      	ldr	r7, [pc, #192]	; (8000af8 <Tune_Preset+0x270>)
 8000a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SetBW( psets[Idx].bw);
 8000a3c:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
	CurrentBW = newbw;
 8000a40:	4821      	ldr	r0, [pc, #132]	; (8000ac8 <Tune_Preset+0x240>)
      AMindex = (newbw == Narrow) ? 0 : 1;
 8000a42:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 8000b0c <Tune_Preset+0x284>
  SetBW( psets[Idx].bw);
 8000a46:	7d6a      	ldrb	r2, [r5, #21]
      AMindex = (newbw == Narrow) ? 0 : 1;
 8000a48:	1c15      	adds	r5, r2, #0
      bw[AM] = newbw;
 8000a4a:	f888 2000 	strb.w	r2, [r8]
      AMindex = (newbw == Narrow) ? 0 : 1;
 8000a4e:	bf18      	it	ne
 8000a50:	2501      	movne	r5, #1
 8000a52:	e79e      	b.n	8000992 <Tune_Preset+0x10a>
      Decay[USB]  = AGC_decay[newAGC];
 8000a54:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <Tune_Preset+0x248>)
      Hcount[USB] = Hangcount[newAGC]; break;
 8000a56:	481f      	ldr	r0, [pc, #124]	; (8000ad4 <Tune_Preset+0x24c>)
      Decay[USB]  = AGC_decay[newAGC];
 8000a58:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000a5c:	491e      	ldr	r1, [pc, #120]	; (8000ad8 <Tune_Preset+0x250>)
      Hcount[USB] = Hangcount[newAGC]; break;
 8000a5e:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[USB]  = AGC_decay[newAGC];
 8000a62:	6818      	ldr	r0, [r3, #0]
      Hcount[USB] = Hangcount[newAGC]; break;
 8000a64:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <Tune_Preset+0x254>)
      Decay[USB]  = AGC_decay[newAGC];
 8000a66:	6088      	str	r0, [r1, #8]
      Hcount[USB] = Hangcount[newAGC]; break;
 8000a68:	809a      	strh	r2, [r3, #4]
 8000a6a:	e7a8      	b.n	80009be <Tune_Preset+0x136>
      Decay[LSB]  = AGC_decay[newAGC];
 8000a6c:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <Tune_Preset+0x248>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000a6e:	4819      	ldr	r0, [pc, #100]	; (8000ad4 <Tune_Preset+0x24c>)
      Decay[LSB]  = AGC_decay[newAGC];
 8000a70:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000a74:	4918      	ldr	r1, [pc, #96]	; (8000ad8 <Tune_Preset+0x250>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000a76:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[LSB]  = AGC_decay[newAGC];
 8000a7a:	6818      	ldr	r0, [r3, #0]
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <Tune_Preset+0x254>)
      Decay[LSB]  = AGC_decay[newAGC];
 8000a7e:	6048      	str	r0, [r1, #4]
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000a80:	805a      	strh	r2, [r3, #2]
 8000a82:	e7b9      	b.n	80009f8 <Tune_Preset+0x170>
      Decay[AM]   = AGC_decay[newAGC];
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <Tune_Preset+0x248>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000a86:	4813      	ldr	r0, [pc, #76]	; (8000ad4 <Tune_Preset+0x24c>)
      Decay[AM]   = AGC_decay[newAGC];
 8000a88:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000a8c:	4912      	ldr	r1, [pc, #72]	; (8000ad8 <Tune_Preset+0x250>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000a8e:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[AM]   = AGC_decay[newAGC];
 8000a92:	6818      	ldr	r0, [r3, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <Tune_Preset+0x254>)
      Decay[AM]   = AGC_decay[newAGC];
 8000a96:	6008      	str	r0, [r1, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000a98:	801a      	strh	r2, [r3, #0]
 8000a9a:	e7ca      	b.n	8000a32 <Tune_Preset+0x1aa>
      Decay[CW]   = AGC_decay[newAGC];
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <Tune_Preset+0x248>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000a9e:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <Tune_Preset+0x24c>)
      Decay[CW]   = AGC_decay[newAGC];
 8000aa0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000aa4:	490c      	ldr	r1, [pc, #48]	; (8000ad8 <Tune_Preset+0x250>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000aa6:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[CW]   = AGC_decay[newAGC];
 8000aaa:	6818      	ldr	r0, [r3, #0]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <Tune_Preset+0x254>)
      Decay[CW]   = AGC_decay[newAGC];
 8000aae:	60c8      	str	r0, [r1, #12]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000ab0:	80da      	strh	r2, [r3, #6]
 8000ab2:	e75e      	b.n	8000972 <Tune_Preset+0xea>
 8000ab4:	24008728 	.word	0x24008728
 8000ab8:	24009cdc 	.word	0x24009cdc
 8000abc:	2400c1fc 	.word	0x2400c1fc
 8000ac0:	24007688 	.word	0x24007688
 8000ac4:	24000500 	.word	0x24000500
 8000ac8:	24000910 	.word	0x24000910
 8000acc:	240042dc 	.word	0x240042dc
 8000ad0:	2400c1ec 	.word	0x2400c1ec
 8000ad4:	24009cd8 	.word	0x24009cd8
 8000ad8:	24002918 	.word	0x24002918
 8000adc:	24007e90 	.word	0x24007e90
 8000ae0:	08012b60 	.word	0x08012b60
 8000ae4:	08014b60 	.word	0x08014b60
 8000ae8:	20004600 	.word	0x20004600
 8000aec:	08016b60 	.word	0x08016b60
 8000af0:	08018b60 	.word	0x08018b60
 8000af4:	0800eb60 	.word	0x0800eb60
 8000af8:	08010b60 	.word	0x08010b60
 8000afc:	24008ccc 	.word	0x24008ccc
 8000b00:	24008cc8 	.word	0x24008cc8
 8000b04:	24007e9c 	.word	0x24007e9c
 8000b08:	2400d600 	.word	0x2400d600
 8000b0c:	2400d602 	.word	0x2400d602

08000b10 <SetAGC>:
	switch(CurrentMode)
 8000b10:	4b23      	ldr	r3, [pc, #140]	; (8000ba0 <SetAGC+0x90>)
	CurrentAGC =newAGC;
 8000b12:	4a24      	ldr	r2, [pc, #144]	; (8000ba4 <SetAGC+0x94>)
	switch(CurrentMode)
 8000b14:	781b      	ldrb	r3, [r3, #0]
{
 8000b16:	b430      	push	{r4, r5}
	CurrentAGC =newAGC;
 8000b18:	7010      	strb	r0, [r2, #0]
	switch(CurrentMode)
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	d810      	bhi.n	8000b40 <SetAGC+0x30>
 8000b1e:	e8df f003 	tbb	[pc, r3]
 8000b22:	202f      	.short	0x202f
 8000b24:	0211      	.short	0x0211
      Decay[CW]   = AGC_decay[newAGC];
 8000b26:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <SetAGC+0x98>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000b28:	4a20      	ldr	r2, [pc, #128]	; (8000bac <SetAGC+0x9c>)
      Decay[CW]   = AGC_decay[newAGC];
 8000b2a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000b2e:	4c20      	ldr	r4, [pc, #128]	; (8000bb0 <SetAGC+0xa0>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000b30:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
      Decay[CW]   = AGC_decay[newAGC];
 8000b34:	681d      	ldr	r5, [r3, #0]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000b36:	4a1f      	ldr	r2, [pc, #124]	; (8000bb4 <SetAGC+0xa4>)
    case CW :       agc[CW] = newAGC;
 8000b38:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <SetAGC+0xa8>)
      Decay[CW]   = AGC_decay[newAGC];
 8000b3a:	60e5      	str	r5, [r4, #12]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000b3c:	80d1      	strh	r1, [r2, #6]
    case CW :       agc[CW] = newAGC;
 8000b3e:	70d8      	strb	r0, [r3, #3]
}	
 8000b40:	bc30      	pop	{r4, r5}
 8000b42:	4770      	bx	lr
      Decay[USB]  = AGC_decay[newAGC];
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <SetAGC+0x98>)
      Hcount[USB] = Hangcount[newAGC]; break;
 8000b46:	4a19      	ldr	r2, [pc, #100]	; (8000bac <SetAGC+0x9c>)
      Decay[USB]  = AGC_decay[newAGC];
 8000b48:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000b4c:	4c18      	ldr	r4, [pc, #96]	; (8000bb0 <SetAGC+0xa0>)
      Hcount[USB] = Hangcount[newAGC]; break;
 8000b4e:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
      Decay[USB]  = AGC_decay[newAGC];
 8000b52:	681d      	ldr	r5, [r3, #0]
      Hcount[USB] = Hangcount[newAGC]; break;
 8000b54:	4a17      	ldr	r2, [pc, #92]	; (8000bb4 <SetAGC+0xa4>)
    case USB :      agc[USB] = newAGC;
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <SetAGC+0xa8>)
      Decay[USB]  = AGC_decay[newAGC];
 8000b58:	60a5      	str	r5, [r4, #8]
      Hcount[USB] = Hangcount[newAGC]; break;
 8000b5a:	8091      	strh	r1, [r2, #4]
    case USB :      agc[USB] = newAGC;
 8000b5c:	7098      	strb	r0, [r3, #2]
}	
 8000b5e:	bc30      	pop	{r4, r5}
 8000b60:	4770      	bx	lr
      Decay[LSB]  = AGC_decay[newAGC];
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <SetAGC+0x98>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000b64:	4a11      	ldr	r2, [pc, #68]	; (8000bac <SetAGC+0x9c>)
      Decay[LSB]  = AGC_decay[newAGC];
 8000b66:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000b6a:	4c11      	ldr	r4, [pc, #68]	; (8000bb0 <SetAGC+0xa0>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000b6c:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
      Decay[LSB]  = AGC_decay[newAGC];
 8000b70:	681d      	ldr	r5, [r3, #0]
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000b72:	4a10      	ldr	r2, [pc, #64]	; (8000bb4 <SetAGC+0xa4>)
    case LSB :      agc[LSB] = newAGC;
 8000b74:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <SetAGC+0xa8>)
      Decay[LSB]  = AGC_decay[newAGC];
 8000b76:	6065      	str	r5, [r4, #4]
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000b78:	8051      	strh	r1, [r2, #2]
    case LSB :      agc[LSB] = newAGC;
 8000b7a:	7058      	strb	r0, [r3, #1]
}	
 8000b7c:	bc30      	pop	{r4, r5}
 8000b7e:	4770      	bx	lr
      Decay[AM]   = AGC_decay[newAGC];
 8000b80:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <SetAGC+0x98>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000b82:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <SetAGC+0x9c>)
      Decay[AM]   = AGC_decay[newAGC];
 8000b84:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000b88:	4c09      	ldr	r4, [pc, #36]	; (8000bb0 <SetAGC+0xa0>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000b8a:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
      Decay[AM]   = AGC_decay[newAGC];
 8000b8e:	681d      	ldr	r5, [r3, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000b90:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <SetAGC+0xa4>)
	  case AM :       agc[AM] = newAGC;
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <SetAGC+0xa8>)
      Decay[AM]   = AGC_decay[newAGC];
 8000b94:	6025      	str	r5, [r4, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000b96:	8011      	strh	r1, [r2, #0]
	  case AM :       agc[AM] = newAGC;
 8000b98:	7018      	strb	r0, [r3, #0]
}	
 8000b9a:	bc30      	pop	{r4, r5}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	2400c1fc 	.word	0x2400c1fc
 8000ba4:	24000500 	.word	0x24000500
 8000ba8:	2400c1ec 	.word	0x2400c1ec
 8000bac:	24009cd8 	.word	0x24009cd8
 8000bb0:	24002918 	.word	0x24002918
 8000bb4:	24007e90 	.word	0x24007e90
 8000bb8:	24007688 	.word	0x24007688

08000bbc <SetMode>:
{
 8000bbc:	b570      	push	{r4, r5, r6, lr}
	CurrentMode = newmode;
 8000bbe:	4c66      	ldr	r4, [pc, #408]	; (8000d58 <SetMode+0x19c>)
 8000bc0:	7020      	strb	r0, [r4, #0]
	switch(CurrentMode)
 8000bc2:	2803      	cmp	r0, #3
 8000bc4:	d80e      	bhi.n	8000be4 <SetMode+0x28>
 8000bc6:	e8df f000 	tbb	[pc, r0]
 8000bca:	4260      	.short	0x4260
 8000bcc:	0e33      	.short	0x0e33
      Decay[CW]   = AGC_decay[newAGC];
 8000bce:	4b63      	ldr	r3, [pc, #396]	; (8000d5c <SetMode+0x1a0>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000bd0:	4863      	ldr	r0, [pc, #396]	; (8000d60 <SetMode+0x1a4>)
      Decay[CW]   = AGC_decay[newAGC];
 8000bd2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000bd6:	4963      	ldr	r1, [pc, #396]	; (8000d64 <SetMode+0x1a8>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000bd8:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[CW]   = AGC_decay[newAGC];
 8000bdc:	6818      	ldr	r0, [r3, #0]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000bde:	4b62      	ldr	r3, [pc, #392]	; (8000d68 <SetMode+0x1ac>)
      Decay[CW]   = AGC_decay[newAGC];
 8000be0:	60c8      	str	r0, [r1, #12]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000be2:	80da      	strh	r2, [r3, #6]
      break; 

    default :
      break;			
	}
}	
 8000be4:	bd70      	pop	{r4, r5, r6, pc}
      SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000be6:	4a61      	ldr	r2, [pc, #388]	; (8000d6c <SetMode+0x1b0>)
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 8000be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
	CurrentBW = newbw;
 8000bec:	4860      	ldr	r0, [pc, #384]	; (8000d70 <SetMode+0x1b4>)
      SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000bee:	78d5      	ldrb	r5, [r2, #3]
				             (float *)FFTmaskCW_I[CWindex], FFTmask, FFTLEN);	
 8000bf0:	4960      	ldr	r1, [pc, #384]	; (8000d74 <SetMode+0x1b8>)
      CWindex = (newbw == Narrow) ? 0 : 1;
 8000bf2:	1c2a      	adds	r2, r5, #0
	CurrentBW = newbw;
 8000bf4:	7005      	strb	r5, [r0, #0]
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 8000bf6:	4e60      	ldr	r6, [pc, #384]	; (8000d78 <SetMode+0x1bc>)
      CWindex = (newbw == Narrow) ? 0 : 1;
 8000bf8:	bf18      	it	ne
 8000bfa:	2201      	movne	r2, #1
 8000bfc:	4d5f      	ldr	r5, [pc, #380]	; (8000d7c <SetMode+0x1c0>)
 8000bfe:	0310      	lsls	r0, r2, #12
 8000c00:	802a      	strh	r2, [r5, #0]
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 8000c02:	4a5f      	ldr	r2, [pc, #380]	; (8000d80 <SetMode+0x1c4>)
 8000c04:	4401      	add	r1, r0
 8000c06:	4430      	add	r0, r6
 8000c08:	f001 f9dc 	bl	8001fc4 <SDR_2R_toC_f32>
      SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000c0c:	4b5d      	ldr	r3, [pc, #372]	; (8000d84 <SetMode+0x1c8>)
	CurrentAGC =newAGC;
 8000c0e:	485e      	ldr	r0, [pc, #376]	; (8000d88 <SetMode+0x1cc>)
      SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000c10:	78da      	ldrb	r2, [r3, #3]
	switch(CurrentMode)
 8000c12:	7821      	ldrb	r1, [r4, #0]
	CurrentAGC =newAGC;
 8000c14:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8000c16:	2903      	cmp	r1, #3
 8000c18:	d8e4      	bhi.n	8000be4 <SetMode+0x28>
 8000c1a:	a001      	add	r0, pc, #4	; (adr r0, 8000c20 <SetMode+0x64>)
 8000c1c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8000c20:	08000cf7 	.word	0x08000cf7
 8000c24:	08000cdd 	.word	0x08000cdd
 8000c28:	08000cc3 	.word	0x08000cc3
 8000c2c:	08000bcf 	.word	0x08000bcf
      SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000c30:	4b4e      	ldr	r3, [pc, #312]	; (8000d6c <SetMode+0x1b0>)
 8000c32:	7898      	ldrb	r0, [r3, #2]
 8000c34:	f7ff fdb6 	bl	80007a4 <SetBW>
 8000c38:	4b52      	ldr	r3, [pc, #328]	; (8000d84 <SetMode+0x1c8>)
	CurrentAGC =newAGC;
 8000c3a:	4853      	ldr	r0, [pc, #332]	; (8000d88 <SetMode+0x1cc>)
      SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000c3c:	789a      	ldrb	r2, [r3, #2]
	switch(CurrentMode)
 8000c3e:	7821      	ldrb	r1, [r4, #0]
	CurrentAGC =newAGC;
 8000c40:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8000c42:	2903      	cmp	r1, #3
 8000c44:	d8ce      	bhi.n	8000be4 <SetMode+0x28>
 8000c46:	e8df f001 	tbb	[pc, r1]
 8000c4a:	4956      	.short	0x4956
 8000c4c:	2f63      	.short	0x2f63
      SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000c4e:	4a47      	ldr	r2, [pc, #284]	; (8000d6c <SetMode+0x1b0>)
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex], 
 8000c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
	CurrentBW = newbw;
 8000c54:	4846      	ldr	r0, [pc, #280]	; (8000d70 <SetMode+0x1b4>)
      SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000c56:	7855      	ldrb	r5, [r2, #1]
				             (float *)FFTmaskSSB_I[LSBindex], FFTmask, FFTLEN);	
 8000c58:	494c      	ldr	r1, [pc, #304]	; (8000d8c <SetMode+0x1d0>)
      LSBindex = (newbw == Narrow) ? 0 : 1;
 8000c5a:	1c2a      	adds	r2, r5, #0
	CurrentBW = newbw;
 8000c5c:	7005      	strb	r5, [r0, #0]
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex], 
 8000c5e:	4e4c      	ldr	r6, [pc, #304]	; (8000d90 <SetMode+0x1d4>)
      LSBindex = (newbw == Narrow) ? 0 : 1;
 8000c60:	bf18      	it	ne
 8000c62:	2201      	movne	r2, #1
 8000c64:	4d4b      	ldr	r5, [pc, #300]	; (8000d94 <SetMode+0x1d8>)
 8000c66:	0310      	lsls	r0, r2, #12
 8000c68:	802a      	strh	r2, [r5, #0]
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex], 
 8000c6a:	4a45      	ldr	r2, [pc, #276]	; (8000d80 <SetMode+0x1c4>)
 8000c6c:	4401      	add	r1, r0
 8000c6e:	4430      	add	r0, r6
 8000c70:	f001 f9a8 	bl	8001fc4 <SDR_2R_toC_f32>
      SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000c74:	4b43      	ldr	r3, [pc, #268]	; (8000d84 <SetMode+0x1c8>)
	CurrentAGC =newAGC;
 8000c76:	4844      	ldr	r0, [pc, #272]	; (8000d88 <SetMode+0x1cc>)
      SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000c78:	785a      	ldrb	r2, [r3, #1]
	switch(CurrentMode)
 8000c7a:	7821      	ldrb	r1, [r4, #0]
	CurrentAGC =newAGC;
 8000c7c:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8000c7e:	2903      	cmp	r1, #3
 8000c80:	d8b0      	bhi.n	8000be4 <SetMode+0x28>
 8000c82:	e8df f001 	tbb	[pc, r1]
 8000c86:	5138      	.short	0x5138
 8000c88:	111e      	.short	0x111e
      SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000c8a:	4b38      	ldr	r3, [pc, #224]	; (8000d6c <SetMode+0x1b0>)
 8000c8c:	7818      	ldrb	r0, [r3, #0]
 8000c8e:	f7ff fd89 	bl	80007a4 <SetBW>
 8000c92:	4b3c      	ldr	r3, [pc, #240]	; (8000d84 <SetMode+0x1c8>)
	CurrentAGC =newAGC;
 8000c94:	483c      	ldr	r0, [pc, #240]	; (8000d88 <SetMode+0x1cc>)
      SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000c96:	781a      	ldrb	r2, [r3, #0]
	switch(CurrentMode)
 8000c98:	7821      	ldrb	r1, [r4, #0]
	CurrentAGC =newAGC;
 8000c9a:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8000c9c:	2903      	cmp	r1, #3
 8000c9e:	d8a1      	bhi.n	8000be4 <SetMode+0x28>
 8000ca0:	e8df f001 	tbb	[pc, r1]
 8000ca4:	020f1c4e 	.word	0x020f1c4e
      Decay[CW]   = AGC_decay[newAGC];
 8000ca8:	492c      	ldr	r1, [pc, #176]	; (8000d5c <SetMode+0x1a0>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000caa:	482d      	ldr	r0, [pc, #180]	; (8000d60 <SetMode+0x1a4>)
      Decay[CW]   = AGC_decay[newAGC];
 8000cac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8000cb0:	4c2c      	ldr	r4, [pc, #176]	; (8000d64 <SetMode+0x1a8>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000cb2:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
      Decay[CW]   = AGC_decay[newAGC];
 8000cb6:	680d      	ldr	r5, [r1, #0]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000cb8:	492b      	ldr	r1, [pc, #172]	; (8000d68 <SetMode+0x1ac>)
    case CW :       agc[CW] = newAGC;
 8000cba:	70da      	strb	r2, [r3, #3]
      Decay[CW]   = AGC_decay[newAGC];
 8000cbc:	60e5      	str	r5, [r4, #12]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000cbe:	80c8      	strh	r0, [r1, #6]
}	
 8000cc0:	bd70      	pop	{r4, r5, r6, pc}
      Decay[USB]  = AGC_decay[newAGC];
 8000cc2:	4926      	ldr	r1, [pc, #152]	; (8000d5c <SetMode+0x1a0>)
      Hcount[USB] = Hangcount[newAGC]; break;
 8000cc4:	4826      	ldr	r0, [pc, #152]	; (8000d60 <SetMode+0x1a4>)
      Decay[USB]  = AGC_decay[newAGC];
 8000cc6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8000cca:	4c26      	ldr	r4, [pc, #152]	; (8000d64 <SetMode+0x1a8>)
      Hcount[USB] = Hangcount[newAGC]; break;
 8000ccc:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
      Decay[USB]  = AGC_decay[newAGC];
 8000cd0:	680d      	ldr	r5, [r1, #0]
      Hcount[USB] = Hangcount[newAGC]; break;
 8000cd2:	4925      	ldr	r1, [pc, #148]	; (8000d68 <SetMode+0x1ac>)
    case USB :      agc[USB] = newAGC;
 8000cd4:	709a      	strb	r2, [r3, #2]
      Decay[USB]  = AGC_decay[newAGC];
 8000cd6:	60a5      	str	r5, [r4, #8]
      Hcount[USB] = Hangcount[newAGC]; break;
 8000cd8:	8088      	strh	r0, [r1, #4]
}	
 8000cda:	bd70      	pop	{r4, r5, r6, pc}
      Decay[LSB]  = AGC_decay[newAGC];
 8000cdc:	491f      	ldr	r1, [pc, #124]	; (8000d5c <SetMode+0x1a0>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000cde:	4820      	ldr	r0, [pc, #128]	; (8000d60 <SetMode+0x1a4>)
      Decay[LSB]  = AGC_decay[newAGC];
 8000ce0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8000ce4:	4c1f      	ldr	r4, [pc, #124]	; (8000d64 <SetMode+0x1a8>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000ce6:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
      Decay[LSB]  = AGC_decay[newAGC];
 8000cea:	680d      	ldr	r5, [r1, #0]
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000cec:	491e      	ldr	r1, [pc, #120]	; (8000d68 <SetMode+0x1ac>)
    case LSB :      agc[LSB] = newAGC;
 8000cee:	705a      	strb	r2, [r3, #1]
      Decay[LSB]  = AGC_decay[newAGC];
 8000cf0:	6065      	str	r5, [r4, #4]
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000cf2:	8048      	strh	r0, [r1, #2]
}	
 8000cf4:	bd70      	pop	{r4, r5, r6, pc}
      Decay[AM]   = AGC_decay[newAGC];
 8000cf6:	4919      	ldr	r1, [pc, #100]	; (8000d5c <SetMode+0x1a0>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000cf8:	4819      	ldr	r0, [pc, #100]	; (8000d60 <SetMode+0x1a4>)
      Decay[AM]   = AGC_decay[newAGC];
 8000cfa:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8000cfe:	4c19      	ldr	r4, [pc, #100]	; (8000d64 <SetMode+0x1a8>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000d00:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
      Decay[AM]   = AGC_decay[newAGC];
 8000d04:	680d      	ldr	r5, [r1, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000d06:	4918      	ldr	r1, [pc, #96]	; (8000d68 <SetMode+0x1ac>)
	  case AM :       agc[AM] = newAGC;
 8000d08:	701a      	strb	r2, [r3, #0]
      Decay[AM]   = AGC_decay[newAGC];
 8000d0a:	6025      	str	r5, [r4, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000d0c:	8008      	strh	r0, [r1, #0]
}	
 8000d0e:	bd70      	pop	{r4, r5, r6, pc}
      Decay[USB]  = AGC_decay[newAGC];
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <SetMode+0x1a0>)
      Hcount[USB] = Hangcount[newAGC]; break;
 8000d12:	4813      	ldr	r0, [pc, #76]	; (8000d60 <SetMode+0x1a4>)
      Decay[USB]  = AGC_decay[newAGC];
 8000d14:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000d18:	4912      	ldr	r1, [pc, #72]	; (8000d64 <SetMode+0x1a8>)
      Hcount[USB] = Hangcount[newAGC]; break;
 8000d1a:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[USB]  = AGC_decay[newAGC];
 8000d1e:	6818      	ldr	r0, [r3, #0]
      Hcount[USB] = Hangcount[newAGC]; break;
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <SetMode+0x1ac>)
      Decay[USB]  = AGC_decay[newAGC];
 8000d22:	6088      	str	r0, [r1, #8]
      Hcount[USB] = Hangcount[newAGC]; break;
 8000d24:	809a      	strh	r2, [r3, #4]
}	
 8000d26:	bd70      	pop	{r4, r5, r6, pc}
      Decay[LSB]  = AGC_decay[newAGC];
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <SetMode+0x1a0>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000d2a:	480d      	ldr	r0, [pc, #52]	; (8000d60 <SetMode+0x1a4>)
      Decay[LSB]  = AGC_decay[newAGC];
 8000d2c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000d30:	490c      	ldr	r1, [pc, #48]	; (8000d64 <SetMode+0x1a8>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000d32:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[LSB]  = AGC_decay[newAGC];
 8000d36:	6818      	ldr	r0, [r3, #0]
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000d38:	4b0b      	ldr	r3, [pc, #44]	; (8000d68 <SetMode+0x1ac>)
      Decay[LSB]  = AGC_decay[newAGC];
 8000d3a:	6048      	str	r0, [r1, #4]
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000d3c:	805a      	strh	r2, [r3, #2]
}	
 8000d3e:	bd70      	pop	{r4, r5, r6, pc}
      Decay[AM]   = AGC_decay[newAGC];
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <SetMode+0x1a0>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000d42:	4807      	ldr	r0, [pc, #28]	; (8000d60 <SetMode+0x1a4>)
      Decay[AM]   = AGC_decay[newAGC];
 8000d44:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000d48:	4906      	ldr	r1, [pc, #24]	; (8000d64 <SetMode+0x1a8>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000d4a:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[AM]   = AGC_decay[newAGC];
 8000d4e:	6818      	ldr	r0, [r3, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <SetMode+0x1ac>)
      Decay[AM]   = AGC_decay[newAGC];
 8000d52:	6008      	str	r0, [r1, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000d54:	801a      	strh	r2, [r3, #0]
}	
 8000d56:	bd70      	pop	{r4, r5, r6, pc}
 8000d58:	2400c1fc 	.word	0x2400c1fc
 8000d5c:	2400c1ec 	.word	0x2400c1ec
 8000d60:	24009cd8 	.word	0x24009cd8
 8000d64:	24002918 	.word	0x24002918
 8000d68:	24007e90 	.word	0x24007e90
 8000d6c:	24008ccc 	.word	0x24008ccc
 8000d70:	24000910 	.word	0x24000910
 8000d74:	08012b60 	.word	0x08012b60
 8000d78:	08014b60 	.word	0x08014b60
 8000d7c:	24008cc8 	.word	0x24008cc8
 8000d80:	20004600 	.word	0x20004600
 8000d84:	24007688 	.word	0x24007688
 8000d88:	24000500 	.word	0x24000500
 8000d8c:	08016b60 	.word	0x08016b60
 8000d90:	08018b60 	.word	0x08018b60
 8000d94:	2400d600 	.word	0x2400d600

08000d98 <SetFstep>:

//-----------------------------------------------------------------------------
// Set the frequency step according to the radio button pressed by the user
void SetFstep(int idx)
{
  Fstep = pow(10, 5 - idx);	
 8000d98:	f1c0 0005 	rsb	r0, r0, #5
 8000d9c:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8000da0:	ee07 0a90 	vmov	s15, r0
{
 8000da4:	b508      	push	{r3, lr}
  Fstep = pow(10, 5 - idx);	
 8000da6:	eeb8 1be7 	vcvt.f64.s32	d1, s15
 8000daa:	f00c fa2d 	bl	800d208 <pow>
 8000dae:	eebc 0bc0 	vcvt.u32.f64	s0, d0
 8000db2:	4b02      	ldr	r3, [pc, #8]	; (8000dbc <SetFstep+0x24>)
 8000db4:	ed83 0a00 	vstr	s0, [r3]
}	
 8000db8:	bd08      	pop	{r3, pc}
 8000dba:	bf00      	nop
 8000dbc:	2400c1f4 	.word	0x2400c1f4

08000dc0 <FplusClicked>:
//-----------------------------------------------------------------------------
// Increase the frequency by the value of the current step
void FplusClicked()
{	
	LOfreq += Fstep;
 8000dc0:	4b81      	ldr	r3, [pc, #516]	; (8000fc8 <FplusClicked+0x208>)
 8000dc2:	4a82      	ldr	r2, [pc, #520]	; (8000fcc <FplusClicked+0x20c>)
 8000dc4:	edd3 7a00 	vldr	s15, [r3]
 8000dc8:	ed92 7a00 	vldr	s14, [r2]
 8000dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
{	
 8000dd0:	b570      	push	{r4, r5, r6, lr}
  LOfreq  = min(LOfreq, 50000000.f);
  psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000dd2:	4e7f      	ldr	r6, [pc, #508]	; (8000fd0 <FplusClicked+0x210>)
	LOfreq += Fstep;
 8000dd4:	ee77 7a87 	vadd.f32	s15, s15, s14
  psets[0].bw = bw[CurrentMode];
 8000dd8:	4d7e      	ldr	r5, [pc, #504]	; (8000fd4 <FplusClicked+0x214>)
  psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000dda:	7833      	ldrb	r3, [r6, #0]
 8000ddc:	4c7e      	ldr	r4, [pc, #504]	; (8000fd8 <FplusClicked+0x218>)
  LOfreq  = min(LOfreq, 50000000.f);
 8000dde:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8000fdc <FplusClicked+0x21c>
  psets[0].bw = bw[CurrentMode];
 8000de2:	5ce9      	ldrb	r1, [r5, r3]
  LOfreq  = min(LOfreq, 50000000.f);
 8000de4:	fec7 7ac7 	vminnm.f32	s15, s15, s14
  psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000de8:	7523      	strb	r3, [r4, #20]
  LOfreq  = min(LOfreq, 50000000.f);
 8000dea:	edc2 7a00 	vstr	s15, [r2]
  psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8000dee:	edc4 7a04 	vstr	s15, [r4, #16]
  psets[0].bw = bw[CurrentMode];
 8000df2:	7561      	strb	r1, [r4, #21]
	switch(CurrentMode)
 8000df4:	2b03      	cmp	r3, #3
 8000df6:	d83e      	bhi.n	8000e76 <FplusClicked+0xb6>
 8000df8:	e8df f003 	tbb	[pc, r3]
 8000dfc:	0212202e 	.word	0x0212202e
      SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000e00:	78e8      	ldrb	r0, [r5, #3]
 8000e02:	f7ff fccf 	bl	80007a4 <SetBW>
 8000e06:	4b76      	ldr	r3, [pc, #472]	; (8000fe0 <FplusClicked+0x220>)
	CurrentAGC =newAGC;
 8000e08:	4876      	ldr	r0, [pc, #472]	; (8000fe4 <FplusClicked+0x224>)
      SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8000e0a:	78da      	ldrb	r2, [r3, #3]
	switch(CurrentMode)
 8000e0c:	7831      	ldrb	r1, [r6, #0]
	CurrentAGC =newAGC;
 8000e0e:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8000e10:	2903      	cmp	r1, #3
 8000e12:	d82f      	bhi.n	8000e74 <FplusClicked+0xb4>
 8000e14:	e8df f011 	tbh	[pc, r1, lsl #1]
 8000e18:	0074008c 	.word	0x0074008c
 8000e1c:	00cb005c 	.word	0x00cb005c
      SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000e20:	78a8      	ldrb	r0, [r5, #2]
 8000e22:	f7ff fcbf 	bl	80007a4 <SetBW>
 8000e26:	4b6e      	ldr	r3, [pc, #440]	; (8000fe0 <FplusClicked+0x220>)
	CurrentAGC =newAGC;
 8000e28:	486e      	ldr	r0, [pc, #440]	; (8000fe4 <FplusClicked+0x224>)
      SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8000e2a:	789a      	ldrb	r2, [r3, #2]
	switch(CurrentMode)
 8000e2c:	7831      	ldrb	r1, [r6, #0]
	CurrentAGC =newAGC;
 8000e2e:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8000e30:	2903      	cmp	r1, #3
 8000e32:	d81f      	bhi.n	8000e74 <FplusClicked+0xb4>
 8000e34:	e8df f001 	tbb	[pc, r1]
 8000e38:	2794647c 	.word	0x2794647c
      SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000e3c:	7868      	ldrb	r0, [r5, #1]
 8000e3e:	f7ff fcb1 	bl	80007a4 <SetBW>
 8000e42:	4b67      	ldr	r3, [pc, #412]	; (8000fe0 <FplusClicked+0x220>)
	CurrentAGC =newAGC;
 8000e44:	4867      	ldr	r0, [pc, #412]	; (8000fe4 <FplusClicked+0x224>)
      SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8000e46:	785a      	ldrb	r2, [r3, #1]
	switch(CurrentMode)
 8000e48:	7831      	ldrb	r1, [r6, #0]
	CurrentAGC =newAGC;
 8000e4a:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8000e4c:	2903      	cmp	r1, #3
 8000e4e:	d811      	bhi.n	8000e74 <FplusClicked+0xb4>
 8000e50:	e8df f001 	tbb	[pc, r1]
 8000e54:	193e936e 	.word	0x193e936e
      SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000e58:	7828      	ldrb	r0, [r5, #0]
 8000e5a:	f7ff fca3 	bl	80007a4 <SetBW>
 8000e5e:	4b60      	ldr	r3, [pc, #384]	; (8000fe0 <FplusClicked+0x220>)
	CurrentAGC =newAGC;
 8000e60:	4860      	ldr	r0, [pc, #384]	; (8000fe4 <FplusClicked+0x224>)
      SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8000e62:	781a      	ldrb	r2, [r3, #0]
	switch(CurrentMode)
 8000e64:	7831      	ldrb	r1, [r6, #0]
	CurrentAGC =newAGC;
 8000e66:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8000e68:	2903      	cmp	r1, #3
 8000e6a:	d803      	bhi.n	8000e74 <FplusClicked+0xb4>
 8000e6c:	e8df f001 	tbb	[pc, r1]
 8000e70:	0b304892 	.word	0x0b304892
 8000e74:	7d61      	ldrb	r1, [r4, #21]
	CurrentBW = newbw;
 8000e76:	4b5c      	ldr	r3, [pc, #368]	; (8000fe8 <FplusClicked+0x228>)
	strcpy(msg, psets[Idx].name);
 8000e78:	485c      	ldr	r0, [pc, #368]	; (8000fec <FplusClicked+0x22c>)
	CurrentBW = newbw;
 8000e7a:	7019      	strb	r1, [r3, #0]
	strcpy(msg, psets[Idx].name);
 8000e7c:	4956      	ldr	r1, [pc, #344]	; (8000fd8 <FplusClicked+0x218>)
  Tune_Preset(0);  // preset 0 means "User tuning"
}	
 8000e7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	strcpy(msg, psets[Idx].name);
 8000e82:	f00a bd7d 	b.w	800b980 <strcpy>
      Decay[CW]   = AGC_decay[newAGC];
 8000e86:	495a      	ldr	r1, [pc, #360]	; (8000ff0 <FplusClicked+0x230>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000e88:	4e5a      	ldr	r6, [pc, #360]	; (8000ff4 <FplusClicked+0x234>)
      Decay[CW]   = AGC_decay[newAGC];
 8000e8a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    case CW :       agc[CW] = newAGC;
 8000e8e:	70da      	strb	r2, [r3, #3]
      Decay[CW]   = AGC_decay[newAGC];
 8000e90:	4859      	ldr	r0, [pc, #356]	; (8000ff8 <FplusClicked+0x238>)
 8000e92:	6809      	ldr	r1, [r1, #0]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000e94:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8000e98:	4b58      	ldr	r3, [pc, #352]	; (8000ffc <FplusClicked+0x23c>)
 8000e9a:	7d64      	ldrb	r4, [r4, #21]
      Decay[CW]   = AGC_decay[newAGC];
 8000e9c:	60c1      	str	r1, [r0, #12]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000e9e:	80da      	strh	r2, [r3, #6]
      CWindex = (newbw == Narrow) ? 0 : 1;
 8000ea0:	1c22      	adds	r2, r4, #0
      bw[CW] = newbw;
 8000ea2:	70ec      	strb	r4, [r5, #3]
				             (float *)FFTmaskCW_I[CWindex], FFTmask, FFTLEN);	
 8000ea4:	4956      	ldr	r1, [pc, #344]	; (8001000 <FplusClicked+0x240>)
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 8000ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
      CWindex = (newbw == Narrow) ? 0 : 1;
 8000eaa:	bf18      	it	ne
 8000eac:	2201      	movne	r2, #1
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 8000eae:	4e55      	ldr	r6, [pc, #340]	; (8001004 <FplusClicked+0x244>)
      CWindex = (newbw == Narrow) ? 0 : 1;
 8000eb0:	4d55      	ldr	r5, [pc, #340]	; (8001008 <FplusClicked+0x248>)
 8000eb2:	0310      	lsls	r0, r2, #12
 8000eb4:	802a      	strh	r2, [r5, #0]
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 8000eb6:	4401      	add	r1, r0
	CurrentBW = newbw;
 8000eb8:	4d4b      	ldr	r5, [pc, #300]	; (8000fe8 <FplusClicked+0x228>)
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 8000eba:	4430      	add	r0, r6
 8000ebc:	4a53      	ldr	r2, [pc, #332]	; (800100c <FplusClicked+0x24c>)
	CurrentBW = newbw;
 8000ebe:	702c      	strb	r4, [r5, #0]
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 8000ec0:	f001 f880 	bl	8001fc4 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8000ec4:	4944      	ldr	r1, [pc, #272]	; (8000fd8 <FplusClicked+0x218>)
 8000ec6:	4849      	ldr	r0, [pc, #292]	; (8000fec <FplusClicked+0x22c>)
}	
 8000ec8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	strcpy(msg, psets[Idx].name);
 8000ecc:	f00a bd58 	b.w	800b980 <strcpy>
      Decay[USB]  = AGC_decay[newAGC];
 8000ed0:	4947      	ldr	r1, [pc, #284]	; (8000ff0 <FplusClicked+0x230>)
      Hcount[USB] = Hangcount[newAGC]; break;
 8000ed2:	4e48      	ldr	r6, [pc, #288]	; (8000ff4 <FplusClicked+0x234>)
      Decay[USB]  = AGC_decay[newAGC];
 8000ed4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    case USB :      agc[USB] = newAGC;
 8000ed8:	709a      	strb	r2, [r3, #2]
      Decay[USB]  = AGC_decay[newAGC];
 8000eda:	4847      	ldr	r0, [pc, #284]	; (8000ff8 <FplusClicked+0x238>)
 8000edc:	6809      	ldr	r1, [r1, #0]
      Hcount[USB] = Hangcount[newAGC]; break;
 8000ede:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8000ee2:	4b46      	ldr	r3, [pc, #280]	; (8000ffc <FplusClicked+0x23c>)
 8000ee4:	7d64      	ldrb	r4, [r4, #21]
      Decay[USB]  = AGC_decay[newAGC];
 8000ee6:	6081      	str	r1, [r0, #8]
      Hcount[USB] = Hangcount[newAGC]; break;
 8000ee8:	809a      	strh	r2, [r3, #4]
      USBindex = (newbw == Narrow) ? 0 : 1;
 8000eea:	1c22      	adds	r2, r4, #0
      bw[USB] = newbw;
 8000eec:	70ac      	strb	r4, [r5, #2]
				             (float *)FFTmaskSSB_I[USBindex], FFTmask, FFTLEN);	
 8000eee:	4948      	ldr	r1, [pc, #288]	; (8001010 <FplusClicked+0x250>)
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex], 
 8000ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
      USBindex = (newbw == Narrow) ? 0 : 1;
 8000ef4:	bf18      	it	ne
 8000ef6:	2201      	movne	r2, #1
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex], 
 8000ef8:	4e46      	ldr	r6, [pc, #280]	; (8001014 <FplusClicked+0x254>)
      USBindex = (newbw == Narrow) ? 0 : 1;
 8000efa:	4d47      	ldr	r5, [pc, #284]	; (8001018 <FplusClicked+0x258>)
 8000efc:	0310      	lsls	r0, r2, #12
 8000efe:	e7d9      	b.n	8000eb4 <FplusClicked+0xf4>
      Decay[LSB]  = AGC_decay[newAGC];
 8000f00:	493b      	ldr	r1, [pc, #236]	; (8000ff0 <FplusClicked+0x230>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000f02:	4e3c      	ldr	r6, [pc, #240]	; (8000ff4 <FplusClicked+0x234>)
      Decay[LSB]  = AGC_decay[newAGC];
 8000f04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    case LSB :      agc[LSB] = newAGC;
 8000f08:	705a      	strb	r2, [r3, #1]
      Decay[LSB]  = AGC_decay[newAGC];
 8000f0a:	483b      	ldr	r0, [pc, #236]	; (8000ff8 <FplusClicked+0x238>)
 8000f0c:	6809      	ldr	r1, [r1, #0]
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000f0e:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8000f12:	4b3a      	ldr	r3, [pc, #232]	; (8000ffc <FplusClicked+0x23c>)
 8000f14:	7d64      	ldrb	r4, [r4, #21]
      Decay[LSB]  = AGC_decay[newAGC];
 8000f16:	6041      	str	r1, [r0, #4]
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000f18:	805a      	strh	r2, [r3, #2]
      LSBindex = (newbw == Narrow) ? 0 : 1;
 8000f1a:	1c22      	adds	r2, r4, #0
      bw[LSB] = newbw;
 8000f1c:	706c      	strb	r4, [r5, #1]
				             (float *)FFTmaskSSB_I[LSBindex], FFTmask, FFTLEN);	
 8000f1e:	493c      	ldr	r1, [pc, #240]	; (8001010 <FplusClicked+0x250>)
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex], 
 8000f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
      LSBindex = (newbw == Narrow) ? 0 : 1;
 8000f24:	bf18      	it	ne
 8000f26:	2201      	movne	r2, #1
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex], 
 8000f28:	4e3a      	ldr	r6, [pc, #232]	; (8001014 <FplusClicked+0x254>)
      LSBindex = (newbw == Narrow) ? 0 : 1;
 8000f2a:	4d3c      	ldr	r5, [pc, #240]	; (800101c <FplusClicked+0x25c>)
 8000f2c:	0310      	lsls	r0, r2, #12
 8000f2e:	e7c1      	b.n	8000eb4 <FplusClicked+0xf4>
      Decay[AM]   = AGC_decay[newAGC];
 8000f30:	492f      	ldr	r1, [pc, #188]	; (8000ff0 <FplusClicked+0x230>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000f32:	4e30      	ldr	r6, [pc, #192]	; (8000ff4 <FplusClicked+0x234>)
      Decay[AM]   = AGC_decay[newAGC];
 8000f34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
	  case AM :       agc[AM] = newAGC;
 8000f38:	701a      	strb	r2, [r3, #0]
      Decay[AM]   = AGC_decay[newAGC];
 8000f3a:	482f      	ldr	r0, [pc, #188]	; (8000ff8 <FplusClicked+0x238>)
 8000f3c:	6809      	ldr	r1, [r1, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000f3e:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8000f42:	4b2e      	ldr	r3, [pc, #184]	; (8000ffc <FplusClicked+0x23c>)
 8000f44:	7d64      	ldrb	r4, [r4, #21]
      Decay[AM]   = AGC_decay[newAGC];
 8000f46:	6001      	str	r1, [r0, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000f48:	801a      	strh	r2, [r3, #0]
      AMindex = (newbw == Narrow) ? 0 : 1;
 8000f4a:	1c22      	adds	r2, r4, #0
      bw[AM] = newbw;
 8000f4c:	702c      	strb	r4, [r5, #0]
				             (float *)FFTmaskAM_I[AMindex], FFTmask, FFTLEN);	
 8000f4e:	4934      	ldr	r1, [pc, #208]	; (8001020 <FplusClicked+0x260>)
      SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex], 
 8000f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
      AMindex = (newbw == Narrow) ? 0 : 1;
 8000f54:	bf18      	it	ne
 8000f56:	2201      	movne	r2, #1
      SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex], 
 8000f58:	4e32      	ldr	r6, [pc, #200]	; (8001024 <FplusClicked+0x264>)
      AMindex = (newbw == Narrow) ? 0 : 1;
 8000f5a:	4d33      	ldr	r5, [pc, #204]	; (8001028 <FplusClicked+0x268>)
 8000f5c:	0310      	lsls	r0, r2, #12
 8000f5e:	e7a9      	b.n	8000eb4 <FplusClicked+0xf4>
      Decay[USB]  = AGC_decay[newAGC];
 8000f60:	4b23      	ldr	r3, [pc, #140]	; (8000ff0 <FplusClicked+0x230>)
      Hcount[USB] = Hangcount[newAGC]; break;
 8000f62:	4824      	ldr	r0, [pc, #144]	; (8000ff4 <FplusClicked+0x234>)
      Decay[USB]  = AGC_decay[newAGC];
 8000f64:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000f68:	4923      	ldr	r1, [pc, #140]	; (8000ff8 <FplusClicked+0x238>)
      Hcount[USB] = Hangcount[newAGC]; break;
 8000f6a:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[USB]  = AGC_decay[newAGC];
 8000f6e:	6818      	ldr	r0, [r3, #0]
      Hcount[USB] = Hangcount[newAGC]; break;
 8000f70:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <FplusClicked+0x23c>)
 8000f72:	7d64      	ldrb	r4, [r4, #21]
      Decay[USB]  = AGC_decay[newAGC];
 8000f74:	6088      	str	r0, [r1, #8]
      Hcount[USB] = Hangcount[newAGC]; break;
 8000f76:	809a      	strh	r2, [r3, #4]
 8000f78:	e7b7      	b.n	8000eea <FplusClicked+0x12a>
      Decay[LSB]  = AGC_decay[newAGC];
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <FplusClicked+0x230>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000f7c:	481d      	ldr	r0, [pc, #116]	; (8000ff4 <FplusClicked+0x234>)
      Decay[LSB]  = AGC_decay[newAGC];
 8000f7e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000f82:	491d      	ldr	r1, [pc, #116]	; (8000ff8 <FplusClicked+0x238>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000f84:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[LSB]  = AGC_decay[newAGC];
 8000f88:	6818      	ldr	r0, [r3, #0]
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <FplusClicked+0x23c>)
 8000f8c:	7d64      	ldrb	r4, [r4, #21]
      Decay[LSB]  = AGC_decay[newAGC];
 8000f8e:	6048      	str	r0, [r1, #4]
      Hcount[LSB] = Hangcount[newAGC]; break;
 8000f90:	805a      	strh	r2, [r3, #2]
 8000f92:	e7c2      	b.n	8000f1a <FplusClicked+0x15a>
      Decay[AM]   = AGC_decay[newAGC];
 8000f94:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <FplusClicked+0x230>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000f96:	4817      	ldr	r0, [pc, #92]	; (8000ff4 <FplusClicked+0x234>)
      Decay[AM]   = AGC_decay[newAGC];
 8000f98:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000f9c:	4916      	ldr	r1, [pc, #88]	; (8000ff8 <FplusClicked+0x238>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000f9e:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[AM]   = AGC_decay[newAGC];
 8000fa2:	6818      	ldr	r0, [r3, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000fa4:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <FplusClicked+0x23c>)
 8000fa6:	7d64      	ldrb	r4, [r4, #21]
      Decay[AM]   = AGC_decay[newAGC];
 8000fa8:	6008      	str	r0, [r1, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8000faa:	801a      	strh	r2, [r3, #0]
 8000fac:	e7cd      	b.n	8000f4a <FplusClicked+0x18a>
      Decay[CW]   = AGC_decay[newAGC];
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <FplusClicked+0x230>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000fb0:	4810      	ldr	r0, [pc, #64]	; (8000ff4 <FplusClicked+0x234>)
      Decay[CW]   = AGC_decay[newAGC];
 8000fb2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000fb6:	4910      	ldr	r1, [pc, #64]	; (8000ff8 <FplusClicked+0x238>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000fb8:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[CW]   = AGC_decay[newAGC];
 8000fbc:	6818      	ldr	r0, [r3, #0]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	; (8000ffc <FplusClicked+0x23c>)
 8000fc0:	7d64      	ldrb	r4, [r4, #21]
      Decay[CW]   = AGC_decay[newAGC];
 8000fc2:	60c8      	str	r0, [r1, #12]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8000fc4:	80da      	strh	r2, [r3, #6]
 8000fc6:	e76b      	b.n	8000ea0 <FplusClicked+0xe0>
 8000fc8:	2400c1f4 	.word	0x2400c1f4
 8000fcc:	24009cdc 	.word	0x24009cdc
 8000fd0:	2400c1fc 	.word	0x2400c1fc
 8000fd4:	24008ccc 	.word	0x24008ccc
 8000fd8:	24008728 	.word	0x24008728
 8000fdc:	4c3ebc20 	.word	0x4c3ebc20
 8000fe0:	24007688 	.word	0x24007688
 8000fe4:	24000500 	.word	0x24000500
 8000fe8:	24000910 	.word	0x24000910
 8000fec:	240042dc 	.word	0x240042dc
 8000ff0:	2400c1ec 	.word	0x2400c1ec
 8000ff4:	24009cd8 	.word	0x24009cd8
 8000ff8:	24002918 	.word	0x24002918
 8000ffc:	24007e90 	.word	0x24007e90
 8001000:	08012b60 	.word	0x08012b60
 8001004:	08014b60 	.word	0x08014b60
 8001008:	24008cc8 	.word	0x24008cc8
 800100c:	20004600 	.word	0x20004600
 8001010:	08016b60 	.word	0x08016b60
 8001014:	08018b60 	.word	0x08018b60
 8001018:	24007e9c 	.word	0x24007e9c
 800101c:	2400d600 	.word	0x2400d600
 8001020:	0800eb60 	.word	0x0800eb60
 8001024:	08010b60 	.word	0x08010b60
 8001028:	2400d602 	.word	0x2400d602

0800102c <FminusClicked>:
//-----------------------------------------------------------------------------
// Decrease the frequency by the value of the current step
void FminusClicked()
{	
	LOfreq -= Fstep;
 800102c:	4b81      	ldr	r3, [pc, #516]	; (8001234 <FminusClicked+0x208>)
 800102e:	4a82      	ldr	r2, [pc, #520]	; (8001238 <FminusClicked+0x20c>)
 8001030:	ed93 7a00 	vldr	s14, [r3]
 8001034:	edd2 7a00 	vldr	s15, [r2]
 8001038:	eeb8 7a47 	vcvt.f32.u32	s14, s14
{	
 800103c:	b570      	push	{r4, r5, r6, lr}
  LOfreq  = max(LOfreq, 8000.f);
  psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 800103e:	4e7f      	ldr	r6, [pc, #508]	; (800123c <FminusClicked+0x210>)
	LOfreq -= Fstep;
 8001040:	ee77 7ac7 	vsub.f32	s15, s15, s14
  psets[0].bw = bw[CurrentMode];
 8001044:	4d7e      	ldr	r5, [pc, #504]	; (8001240 <FminusClicked+0x214>)
  psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001046:	7833      	ldrb	r3, [r6, #0]
 8001048:	4c7e      	ldr	r4, [pc, #504]	; (8001244 <FminusClicked+0x218>)
  LOfreq  = max(LOfreq, 8000.f);
 800104a:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001248 <FminusClicked+0x21c>
  psets[0].bw = bw[CurrentMode];
 800104e:	5ce9      	ldrb	r1, [r5, r3]
  LOfreq  = max(LOfreq, 8000.f);
 8001050:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
  psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 8001054:	7523      	strb	r3, [r4, #20]
  LOfreq  = max(LOfreq, 8000.f);
 8001056:	edc2 7a00 	vstr	s15, [r2]
  psets[0].freq = LOfreq; psets[0].mode = CurrentMode;
 800105a:	edc4 7a04 	vstr	s15, [r4, #16]
  psets[0].bw = bw[CurrentMode];
 800105e:	7561      	strb	r1, [r4, #21]
	switch(CurrentMode)
 8001060:	2b03      	cmp	r3, #3
 8001062:	d83e      	bhi.n	80010e2 <FminusClicked+0xb6>
 8001064:	e8df f003 	tbb	[pc, r3]
 8001068:	0212202e 	.word	0x0212202e
      SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 800106c:	78e8      	ldrb	r0, [r5, #3]
 800106e:	f7ff fb99 	bl	80007a4 <SetBW>
 8001072:	4b76      	ldr	r3, [pc, #472]	; (800124c <FminusClicked+0x220>)
	CurrentAGC =newAGC;
 8001074:	4876      	ldr	r0, [pc, #472]	; (8001250 <FminusClicked+0x224>)
      SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8001076:	78da      	ldrb	r2, [r3, #3]
	switch(CurrentMode)
 8001078:	7831      	ldrb	r1, [r6, #0]
	CurrentAGC =newAGC;
 800107a:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 800107c:	2903      	cmp	r1, #3
 800107e:	d82f      	bhi.n	80010e0 <FminusClicked+0xb4>
 8001080:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001084:	0074008c 	.word	0x0074008c
 8001088:	00cb005c 	.word	0x00cb005c
      SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 800108c:	78a8      	ldrb	r0, [r5, #2]
 800108e:	f7ff fb89 	bl	80007a4 <SetBW>
 8001092:	4b6e      	ldr	r3, [pc, #440]	; (800124c <FminusClicked+0x220>)
	CurrentAGC =newAGC;
 8001094:	486e      	ldr	r0, [pc, #440]	; (8001250 <FminusClicked+0x224>)
      SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8001096:	789a      	ldrb	r2, [r3, #2]
	switch(CurrentMode)
 8001098:	7831      	ldrb	r1, [r6, #0]
	CurrentAGC =newAGC;
 800109a:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 800109c:	2903      	cmp	r1, #3
 800109e:	d81f      	bhi.n	80010e0 <FminusClicked+0xb4>
 80010a0:	e8df f001 	tbb	[pc, r1]
 80010a4:	2794647c 	.word	0x2794647c
      SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 80010a8:	7868      	ldrb	r0, [r5, #1]
 80010aa:	f7ff fb7b 	bl	80007a4 <SetBW>
 80010ae:	4b67      	ldr	r3, [pc, #412]	; (800124c <FminusClicked+0x220>)
	CurrentAGC =newAGC;
 80010b0:	4867      	ldr	r0, [pc, #412]	; (8001250 <FminusClicked+0x224>)
      SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 80010b2:	785a      	ldrb	r2, [r3, #1]
	switch(CurrentMode)
 80010b4:	7831      	ldrb	r1, [r6, #0]
	CurrentAGC =newAGC;
 80010b6:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 80010b8:	2903      	cmp	r1, #3
 80010ba:	d811      	bhi.n	80010e0 <FminusClicked+0xb4>
 80010bc:	e8df f001 	tbb	[pc, r1]
 80010c0:	193e936e 	.word	0x193e936e
      SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 80010c4:	7828      	ldrb	r0, [r5, #0]
 80010c6:	f7ff fb6d 	bl	80007a4 <SetBW>
 80010ca:	4b60      	ldr	r3, [pc, #384]	; (800124c <FminusClicked+0x220>)
	CurrentAGC =newAGC;
 80010cc:	4860      	ldr	r0, [pc, #384]	; (8001250 <FminusClicked+0x224>)
      SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 80010ce:	781a      	ldrb	r2, [r3, #0]
	switch(CurrentMode)
 80010d0:	7831      	ldrb	r1, [r6, #0]
	CurrentAGC =newAGC;
 80010d2:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 80010d4:	2903      	cmp	r1, #3
 80010d6:	d803      	bhi.n	80010e0 <FminusClicked+0xb4>
 80010d8:	e8df f001 	tbb	[pc, r1]
 80010dc:	0b304892 	.word	0x0b304892
 80010e0:	7d61      	ldrb	r1, [r4, #21]
	CurrentBW = newbw;
 80010e2:	4b5c      	ldr	r3, [pc, #368]	; (8001254 <FminusClicked+0x228>)
	strcpy(msg, psets[Idx].name);
 80010e4:	485c      	ldr	r0, [pc, #368]	; (8001258 <FminusClicked+0x22c>)
	CurrentBW = newbw;
 80010e6:	7019      	strb	r1, [r3, #0]
	strcpy(msg, psets[Idx].name);
 80010e8:	4956      	ldr	r1, [pc, #344]	; (8001244 <FminusClicked+0x218>)
  Tune_Preset(0);  // preset 0 means "User tuning"
}
 80010ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	strcpy(msg, psets[Idx].name);
 80010ee:	f00a bc47 	b.w	800b980 <strcpy>
      Decay[CW]   = AGC_decay[newAGC];
 80010f2:	495a      	ldr	r1, [pc, #360]	; (800125c <FminusClicked+0x230>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 80010f4:	4e5a      	ldr	r6, [pc, #360]	; (8001260 <FminusClicked+0x234>)
      Decay[CW]   = AGC_decay[newAGC];
 80010f6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    case CW :       agc[CW] = newAGC;
 80010fa:	70da      	strb	r2, [r3, #3]
      Decay[CW]   = AGC_decay[newAGC];
 80010fc:	4859      	ldr	r0, [pc, #356]	; (8001264 <FminusClicked+0x238>)
 80010fe:	6809      	ldr	r1, [r1, #0]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8001100:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8001104:	4b58      	ldr	r3, [pc, #352]	; (8001268 <FminusClicked+0x23c>)
 8001106:	7d64      	ldrb	r4, [r4, #21]
      Decay[CW]   = AGC_decay[newAGC];
 8001108:	60c1      	str	r1, [r0, #12]
      Hcount[CW]  = Hangcount[newAGC]; break;
 800110a:	80da      	strh	r2, [r3, #6]
      CWindex = (newbw == Narrow) ? 0 : 1;
 800110c:	1c22      	adds	r2, r4, #0
      bw[CW] = newbw;
 800110e:	70ec      	strb	r4, [r5, #3]
				             (float *)FFTmaskCW_I[CWindex], FFTmask, FFTLEN);	
 8001110:	4956      	ldr	r1, [pc, #344]	; (800126c <FminusClicked+0x240>)
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 8001112:	f44f 6380 	mov.w	r3, #1024	; 0x400
      CWindex = (newbw == Narrow) ? 0 : 1;
 8001116:	bf18      	it	ne
 8001118:	2201      	movne	r2, #1
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 800111a:	4e55      	ldr	r6, [pc, #340]	; (8001270 <FminusClicked+0x244>)
      CWindex = (newbw == Narrow) ? 0 : 1;
 800111c:	4d55      	ldr	r5, [pc, #340]	; (8001274 <FminusClicked+0x248>)
 800111e:	0310      	lsls	r0, r2, #12
 8001120:	802a      	strh	r2, [r5, #0]
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 8001122:	4401      	add	r1, r0
	CurrentBW = newbw;
 8001124:	4d4b      	ldr	r5, [pc, #300]	; (8001254 <FminusClicked+0x228>)
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 8001126:	4430      	add	r0, r6
 8001128:	4a53      	ldr	r2, [pc, #332]	; (8001278 <FminusClicked+0x24c>)
	CurrentBW = newbw;
 800112a:	702c      	strb	r4, [r5, #0]
  		SDR_2R_toC_f32((float *)FFTmaskCW_R[CWindex], 
 800112c:	f000 ff4a 	bl	8001fc4 <SDR_2R_toC_f32>
	strcpy(msg, psets[Idx].name);
 8001130:	4944      	ldr	r1, [pc, #272]	; (8001244 <FminusClicked+0x218>)
 8001132:	4849      	ldr	r0, [pc, #292]	; (8001258 <FminusClicked+0x22c>)
}
 8001134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	strcpy(msg, psets[Idx].name);
 8001138:	f00a bc22 	b.w	800b980 <strcpy>
      Decay[USB]  = AGC_decay[newAGC];
 800113c:	4947      	ldr	r1, [pc, #284]	; (800125c <FminusClicked+0x230>)
      Hcount[USB] = Hangcount[newAGC]; break;
 800113e:	4e48      	ldr	r6, [pc, #288]	; (8001260 <FminusClicked+0x234>)
      Decay[USB]  = AGC_decay[newAGC];
 8001140:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    case USB :      agc[USB] = newAGC;
 8001144:	709a      	strb	r2, [r3, #2]
      Decay[USB]  = AGC_decay[newAGC];
 8001146:	4847      	ldr	r0, [pc, #284]	; (8001264 <FminusClicked+0x238>)
 8001148:	6809      	ldr	r1, [r1, #0]
      Hcount[USB] = Hangcount[newAGC]; break;
 800114a:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 800114e:	4b46      	ldr	r3, [pc, #280]	; (8001268 <FminusClicked+0x23c>)
 8001150:	7d64      	ldrb	r4, [r4, #21]
      Decay[USB]  = AGC_decay[newAGC];
 8001152:	6081      	str	r1, [r0, #8]
      Hcount[USB] = Hangcount[newAGC]; break;
 8001154:	809a      	strh	r2, [r3, #4]
      USBindex = (newbw == Narrow) ? 0 : 1;
 8001156:	1c22      	adds	r2, r4, #0
      bw[USB] = newbw;
 8001158:	70ac      	strb	r4, [r5, #2]
				             (float *)FFTmaskSSB_I[USBindex], FFTmask, FFTLEN);	
 800115a:	4948      	ldr	r1, [pc, #288]	; (800127c <FminusClicked+0x250>)
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex], 
 800115c:	f44f 6380 	mov.w	r3, #1024	; 0x400
      USBindex = (newbw == Narrow) ? 0 : 1;
 8001160:	bf18      	it	ne
 8001162:	2201      	movne	r2, #1
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[USBindex], 
 8001164:	4e46      	ldr	r6, [pc, #280]	; (8001280 <FminusClicked+0x254>)
      USBindex = (newbw == Narrow) ? 0 : 1;
 8001166:	4d47      	ldr	r5, [pc, #284]	; (8001284 <FminusClicked+0x258>)
 8001168:	0310      	lsls	r0, r2, #12
 800116a:	e7d9      	b.n	8001120 <FminusClicked+0xf4>
      Decay[LSB]  = AGC_decay[newAGC];
 800116c:	493b      	ldr	r1, [pc, #236]	; (800125c <FminusClicked+0x230>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 800116e:	4e3c      	ldr	r6, [pc, #240]	; (8001260 <FminusClicked+0x234>)
      Decay[LSB]  = AGC_decay[newAGC];
 8001170:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    case LSB :      agc[LSB] = newAGC;
 8001174:	705a      	strb	r2, [r3, #1]
      Decay[LSB]  = AGC_decay[newAGC];
 8001176:	483b      	ldr	r0, [pc, #236]	; (8001264 <FminusClicked+0x238>)
 8001178:	6809      	ldr	r1, [r1, #0]
      Hcount[LSB] = Hangcount[newAGC]; break;
 800117a:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 800117e:	4b3a      	ldr	r3, [pc, #232]	; (8001268 <FminusClicked+0x23c>)
 8001180:	7d64      	ldrb	r4, [r4, #21]
      Decay[LSB]  = AGC_decay[newAGC];
 8001182:	6041      	str	r1, [r0, #4]
      Hcount[LSB] = Hangcount[newAGC]; break;
 8001184:	805a      	strh	r2, [r3, #2]
      LSBindex = (newbw == Narrow) ? 0 : 1;
 8001186:	1c22      	adds	r2, r4, #0
      bw[LSB] = newbw;
 8001188:	706c      	strb	r4, [r5, #1]
				             (float *)FFTmaskSSB_I[LSBindex], FFTmask, FFTLEN);	
 800118a:	493c      	ldr	r1, [pc, #240]	; (800127c <FminusClicked+0x250>)
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex], 
 800118c:	f44f 6380 	mov.w	r3, #1024	; 0x400
      LSBindex = (newbw == Narrow) ? 0 : 1;
 8001190:	bf18      	it	ne
 8001192:	2201      	movne	r2, #1
  		SDR_2R_toC_f32((float *)FFTmaskSSB_R[LSBindex], 
 8001194:	4e3a      	ldr	r6, [pc, #232]	; (8001280 <FminusClicked+0x254>)
      LSBindex = (newbw == Narrow) ? 0 : 1;
 8001196:	4d3c      	ldr	r5, [pc, #240]	; (8001288 <FminusClicked+0x25c>)
 8001198:	0310      	lsls	r0, r2, #12
 800119a:	e7c1      	b.n	8001120 <FminusClicked+0xf4>
      Decay[AM]   = AGC_decay[newAGC];
 800119c:	492f      	ldr	r1, [pc, #188]	; (800125c <FminusClicked+0x230>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 800119e:	4e30      	ldr	r6, [pc, #192]	; (8001260 <FminusClicked+0x234>)
      Decay[AM]   = AGC_decay[newAGC];
 80011a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
	  case AM :       agc[AM] = newAGC;
 80011a4:	701a      	strb	r2, [r3, #0]
      Decay[AM]   = AGC_decay[newAGC];
 80011a6:	482f      	ldr	r0, [pc, #188]	; (8001264 <FminusClicked+0x238>)
 80011a8:	6809      	ldr	r1, [r1, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 80011aa:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 80011ae:	4b2e      	ldr	r3, [pc, #184]	; (8001268 <FminusClicked+0x23c>)
 80011b0:	7d64      	ldrb	r4, [r4, #21]
      Decay[AM]   = AGC_decay[newAGC];
 80011b2:	6001      	str	r1, [r0, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 80011b4:	801a      	strh	r2, [r3, #0]
      AMindex = (newbw == Narrow) ? 0 : 1;
 80011b6:	1c22      	adds	r2, r4, #0
      bw[AM] = newbw;
 80011b8:	702c      	strb	r4, [r5, #0]
				             (float *)FFTmaskAM_I[AMindex], FFTmask, FFTLEN);	
 80011ba:	4934      	ldr	r1, [pc, #208]	; (800128c <FminusClicked+0x260>)
      SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex], 
 80011bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
      AMindex = (newbw == Narrow) ? 0 : 1;
 80011c0:	bf18      	it	ne
 80011c2:	2201      	movne	r2, #1
      SDR_2R_toC_f32((float *)FFTmaskAM_R[AMindex], 
 80011c4:	4e32      	ldr	r6, [pc, #200]	; (8001290 <FminusClicked+0x264>)
      AMindex = (newbw == Narrow) ? 0 : 1;
 80011c6:	4d33      	ldr	r5, [pc, #204]	; (8001294 <FminusClicked+0x268>)
 80011c8:	0310      	lsls	r0, r2, #12
 80011ca:	e7a9      	b.n	8001120 <FminusClicked+0xf4>
      Decay[USB]  = AGC_decay[newAGC];
 80011cc:	4b23      	ldr	r3, [pc, #140]	; (800125c <FminusClicked+0x230>)
      Hcount[USB] = Hangcount[newAGC]; break;
 80011ce:	4824      	ldr	r0, [pc, #144]	; (8001260 <FminusClicked+0x234>)
      Decay[USB]  = AGC_decay[newAGC];
 80011d0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80011d4:	4923      	ldr	r1, [pc, #140]	; (8001264 <FminusClicked+0x238>)
      Hcount[USB] = Hangcount[newAGC]; break;
 80011d6:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[USB]  = AGC_decay[newAGC];
 80011da:	6818      	ldr	r0, [r3, #0]
      Hcount[USB] = Hangcount[newAGC]; break;
 80011dc:	4b22      	ldr	r3, [pc, #136]	; (8001268 <FminusClicked+0x23c>)
 80011de:	7d64      	ldrb	r4, [r4, #21]
      Decay[USB]  = AGC_decay[newAGC];
 80011e0:	6088      	str	r0, [r1, #8]
      Hcount[USB] = Hangcount[newAGC]; break;
 80011e2:	809a      	strh	r2, [r3, #4]
 80011e4:	e7b7      	b.n	8001156 <FminusClicked+0x12a>
      Decay[LSB]  = AGC_decay[newAGC];
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <FminusClicked+0x230>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 80011e8:	481d      	ldr	r0, [pc, #116]	; (8001260 <FminusClicked+0x234>)
      Decay[LSB]  = AGC_decay[newAGC];
 80011ea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80011ee:	491d      	ldr	r1, [pc, #116]	; (8001264 <FminusClicked+0x238>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 80011f0:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[LSB]  = AGC_decay[newAGC];
 80011f4:	6818      	ldr	r0, [r3, #0]
      Hcount[LSB] = Hangcount[newAGC]; break;
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <FminusClicked+0x23c>)
 80011f8:	7d64      	ldrb	r4, [r4, #21]
      Decay[LSB]  = AGC_decay[newAGC];
 80011fa:	6048      	str	r0, [r1, #4]
      Hcount[LSB] = Hangcount[newAGC]; break;
 80011fc:	805a      	strh	r2, [r3, #2]
 80011fe:	e7c2      	b.n	8001186 <FminusClicked+0x15a>
      Decay[AM]   = AGC_decay[newAGC];
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <FminusClicked+0x230>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 8001202:	4817      	ldr	r0, [pc, #92]	; (8001260 <FminusClicked+0x234>)
      Decay[AM]   = AGC_decay[newAGC];
 8001204:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001208:	4916      	ldr	r1, [pc, #88]	; (8001264 <FminusClicked+0x238>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 800120a:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[AM]   = AGC_decay[newAGC];
 800120e:	6818      	ldr	r0, [r3, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8001210:	4b15      	ldr	r3, [pc, #84]	; (8001268 <FminusClicked+0x23c>)
 8001212:	7d64      	ldrb	r4, [r4, #21]
      Decay[AM]   = AGC_decay[newAGC];
 8001214:	6008      	str	r0, [r1, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8001216:	801a      	strh	r2, [r3, #0]
 8001218:	e7cd      	b.n	80011b6 <FminusClicked+0x18a>
      Decay[CW]   = AGC_decay[newAGC];
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <FminusClicked+0x230>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 800121c:	4810      	ldr	r0, [pc, #64]	; (8001260 <FminusClicked+0x234>)
      Decay[CW]   = AGC_decay[newAGC];
 800121e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001222:	4910      	ldr	r1, [pc, #64]	; (8001264 <FminusClicked+0x238>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 8001224:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[CW]   = AGC_decay[newAGC];
 8001228:	6818      	ldr	r0, [r3, #0]
      Hcount[CW]  = Hangcount[newAGC]; break;
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <FminusClicked+0x23c>)
 800122c:	7d64      	ldrb	r4, [r4, #21]
      Decay[CW]   = AGC_decay[newAGC];
 800122e:	60c8      	str	r0, [r1, #12]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8001230:	80da      	strh	r2, [r3, #6]
 8001232:	e76b      	b.n	800110c <FminusClicked+0xe0>
 8001234:	2400c1f4 	.word	0x2400c1f4
 8001238:	24009cdc 	.word	0x24009cdc
 800123c:	2400c1fc 	.word	0x2400c1fc
 8001240:	24008ccc 	.word	0x24008ccc
 8001244:	24008728 	.word	0x24008728
 8001248:	45fa0000 	.word	0x45fa0000
 800124c:	24007688 	.word	0x24007688
 8001250:	24000500 	.word	0x24000500
 8001254:	24000910 	.word	0x24000910
 8001258:	240042dc 	.word	0x240042dc
 800125c:	2400c1ec 	.word	0x2400c1ec
 8001260:	24009cd8 	.word	0x24009cd8
 8001264:	24002918 	.word	0x24002918
 8001268:	24007e90 	.word	0x24007e90
 800126c:	08012b60 	.word	0x08012b60
 8001270:	08014b60 	.word	0x08014b60
 8001274:	24008cc8 	.word	0x24008cc8
 8001278:	20004600 	.word	0x20004600
 800127c:	08016b60 	.word	0x08016b60
 8001280:	08018b60 	.word	0x08018b60
 8001284:	24007e9c 	.word	0x24007e9c
 8001288:	2400d600 	.word	0x2400d600
 800128c:	0800eb60 	.word	0x0800eb60
 8001290:	08010b60 	.word	0x08010b60
 8001294:	2400d602 	.word	0x2400d602

08001298 <LED_switch>:
{	

	
  //if (++timer_cnt & 1) {LED_On(1); LED_Off(0);} 
	//else                 {LED_On(0); LED_Off(1);}	
}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop

0800129c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t pin)
{
  short  *p;
  static uint8_t Idx = 1;

  if (pin == USER_Btn_Pin)
 800129c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
{
 80012a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pin == USER_Btn_Pin)
 80012a4:	d13c      	bne.n	8001320 <HAL_GPIO_EXTI_Callback+0x84>
  {
//	  if(EXTI_GetITStatus(EXTI_Line0) != RESET)
	  {
	// User button pressed, cycle through all the presets
	    Idx++; if(Idx >= MAXPRESETS) Idx = 1;
 80012a6:	4aa7      	ldr	r2, [pc, #668]	; (8001544 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80012a8:	7813      	ldrb	r3, [r2, #0]
 80012aa:	3301      	adds	r3, #1
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b0d      	cmp	r3, #13
 80012b0:	d917      	bls.n	80012e2 <HAL_GPIO_EXTI_Callback+0x46>
 80012b2:	2301      	movs	r3, #1
 80012b4:	2718      	movs	r7, #24
 80012b6:	461e      	mov	r6, r3
 80012b8:	7013      	strb	r3, [r2, #0]
  LOfreq = psets[Idx].freq;
 80012ba:	0074      	lsls	r4, r6, #1
 80012bc:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 80015b8 <HAL_GPIO_EXTI_Callback+0x31c>
 80012c0:	4aa1      	ldr	r2, [pc, #644]	; (8001548 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80012c2:	19a3      	adds	r3, r4, r6
	CurrentMode = newmode;
 80012c4:	4da1      	ldr	r5, [pc, #644]	; (800154c <HAL_GPIO_EXTI_Callback+0x2b0>)
  LOfreq = psets[Idx].freq;
 80012c6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80012ca:	6919      	ldr	r1, [r3, #16]
	SetMode( psets[Idx].mode);
 80012cc:	7d1b      	ldrb	r3, [r3, #20]
  LOfreq = psets[Idx].freq;
 80012ce:	6011      	str	r1, [r2, #0]
	CurrentMode = newmode;
 80012d0:	702b      	strb	r3, [r5, #0]
	switch(CurrentMode)
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d817      	bhi.n	8001306 <HAL_GPIO_EXTI_Callback+0x6a>
 80012d6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80012da:	00d7      	.short	0x00d7
 80012dc:	00a800bf 	.word	0x00a800bf
 80012e0:	0096      	.short	0x0096
 80012e2:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 80012e6:	461e      	mov	r6, r3
	    Idx++; if(Idx >= MAXPRESETS) Idx = 1;
 80012e8:	7013      	strb	r3, [r2, #0]
 80012ea:	00ff      	lsls	r7, r7, #3
 80012ec:	e7e5      	b.n	80012ba <HAL_GPIO_EXTI_Callback+0x1e>
      Decay[CW]   = AGC_decay[newAGC];
 80012ee:	4998      	ldr	r1, [pc, #608]	; (8001550 <HAL_GPIO_EXTI_Callback+0x2b4>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 80012f0:	4d98      	ldr	r5, [pc, #608]	; (8001554 <HAL_GPIO_EXTI_Callback+0x2b8>)
      Decay[CW]   = AGC_decay[newAGC];
 80012f2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    case CW :       agc[CW] = newAGC;
 80012f6:	70da      	strb	r2, [r3, #3]
      Decay[CW]   = AGC_decay[newAGC];
 80012f8:	4897      	ldr	r0, [pc, #604]	; (8001558 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80012fa:	6809      	ldr	r1, [r1, #0]
      Hcount[CW]  = Hangcount[newAGC]; break;
 80012fc:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 8001300:	4b96      	ldr	r3, [pc, #600]	; (800155c <HAL_GPIO_EXTI_Callback+0x2c0>)
      Decay[CW]   = AGC_decay[newAGC];
 8001302:	60c1      	str	r1, [r0, #12]
      Hcount[CW]  = Hangcount[newAGC]; break;
 8001304:	80da      	strh	r2, [r3, #6]
  SetBW( psets[Idx].bw);
 8001306:	4434      	add	r4, r6
 8001308:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 800130c:	7d60      	ldrb	r0, [r4, #21]
 800130e:	f7ff fa49 	bl	80007a4 <SetBW>
	strcpy(msg, psets[Idx].name);
 8001312:	eb08 0107 	add.w	r1, r8, r7
 8001316:	4892      	ldr	r0, [pc, #584]	; (8001560 <HAL_GPIO_EXTI_Callback+0x2c4>)
  SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
//LED_YELLOW_OFF;


 // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); // set bit 8 of GPIOF low, to be observed with an oscilloscope
}
 8001318:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	strcpy(msg, psets[Idx].name);
 800131c:	f00a bb30 	b.w	800b980 <strcpy>
  SDR_memcpy_f32(Rbase, Rbasedata, BSIZE*4);
 8001320:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001324:	498f      	ldr	r1, [pc, #572]	; (8001564 <HAL_GPIO_EXTI_Callback+0x2c8>)
 8001326:	4890      	ldr	r0, [pc, #576]	; (8001568 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8001328:	f000 ff5a 	bl	80021e0 <SDR_memcpy_f32>
  SDR_memcpy_f32(Ibase, Ibasedata, BSIZE*4);
 800132c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001330:	498e      	ldr	r1, [pc, #568]	; (800156c <HAL_GPIO_EXTI_Callback+0x2d0>)
 8001332:	488f      	ldr	r0, [pc, #572]	; (8001570 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8001334:	f000 ff54 	bl	80021e0 <SDR_memcpy_f32>
	arm_fir_decimate_f32(&SfirR, Rbase, Rdata, BSIZE*4);
 8001338:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800133c:	4a8d      	ldr	r2, [pc, #564]	; (8001574 <HAL_GPIO_EXTI_Callback+0x2d8>)
 800133e:	498a      	ldr	r1, [pc, #552]	; (8001568 <HAL_GPIO_EXTI_Callback+0x2cc>)
 8001340:	488d      	ldr	r0, [pc, #564]	; (8001578 <HAL_GPIO_EXTI_Callback+0x2dc>)
 8001342:	f009 f941 	bl	800a5c8 <arm_fir_decimate_f32>
	arm_fir_decimate_f32(&SfirI, Ibase, Idata, BSIZE*4);
 8001346:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800134a:	4a8c      	ldr	r2, [pc, #560]	; (800157c <HAL_GPIO_EXTI_Callback+0x2e0>)
 800134c:	4988      	ldr	r1, [pc, #544]	; (8001570 <HAL_GPIO_EXTI_Callback+0x2d4>)
 800134e:	488c      	ldr	r0, [pc, #560]	; (8001580 <HAL_GPIO_EXTI_Callback+0x2e4>)
 8001350:	f009 f93a 	bl	800a5c8 <arm_fir_decimate_f32>
  SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 8001354:	498b      	ldr	r1, [pc, #556]	; (8001584 <HAL_GPIO_EXTI_Callback+0x2e8>)
 8001356:	f44f 6280 	mov.w	r2, #1024	; 0x400
  if(CurrentMode == LSB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 800135a:	4d7c      	ldr	r5, [pc, #496]	; (800154c <HAL_GPIO_EXTI_Callback+0x2b0>)
  SDR_memcpy_f32(fCbase, fCbase + FFTLEN, FFTLEN);
 800135c:	f5a1 5080 	sub.w	r0, r1, #4096	; 0x1000
 8001360:	f000 ff3e 	bl	80021e0 <SDR_memcpy_f32>
  SDR_2R_toC_f32(Rdata, Idata, fCbase + FFTLEN, BSIZE); 
 8001364:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001368:	4a86      	ldr	r2, [pc, #536]	; (8001584 <HAL_GPIO_EXTI_Callback+0x2e8>)
 800136a:	4984      	ldr	r1, [pc, #528]	; (800157c <HAL_GPIO_EXTI_Callback+0x2e0>)
 800136c:	4881      	ldr	r0, [pc, #516]	; (8001574 <HAL_GPIO_EXTI_Callback+0x2d8>)
 800136e:	f000 fe29 	bl	8001fc4 <SDR_2R_toC_f32>
  SDR_memcpy_f32(FFTbuf, fCbase, FFTLEN*2);
 8001372:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001376:	4984      	ldr	r1, [pc, #528]	; (8001588 <HAL_GPIO_EXTI_Callback+0x2ec>)
 8001378:	4884      	ldr	r0, [pc, #528]	; (800158c <HAL_GPIO_EXTI_Callback+0x2f0>)
 800137a:	f000 ff31 	bl	80021e0 <SDR_memcpy_f32>
  arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf, DIRECTFFT, NOREVERSE);
 800137e:	2301      	movs	r3, #1
 8001380:	2200      	movs	r2, #0
 8001382:	4982      	ldr	r1, [pc, #520]	; (800158c <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001384:	4882      	ldr	r0, [pc, #520]	; (8001590 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001386:	f009 f889 	bl	800a49c <arm_cfft_f32>
  if(CurrentMode == LSB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 800138a:	782b      	ldrb	r3, [r5, #0]
 800138c:	2b01      	cmp	r3, #1
 800138e:	f000 80ba 	beq.w	8001506 <HAL_GPIO_EXTI_Callback+0x26a>
  arm_cmplx_mult_cmplx_f32(FFTbuf, FFTmask, FFTbuf2, FFTLEN);
 8001392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001396:	4a7f      	ldr	r2, [pc, #508]	; (8001594 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001398:	497f      	ldr	r1, [pc, #508]	; (8001598 <HAL_GPIO_EXTI_Callback+0x2fc>)
 800139a:	487c      	ldr	r0, [pc, #496]	; (800158c <HAL_GPIO_EXTI_Callback+0x2f0>)
 800139c:	f009 fad0 	bl	800a940 <arm_cmplx_mult_cmplx_f32>
  arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTbuf2, INVERSEFFT, NOREVERSE);
 80013a0:	2301      	movs	r3, #1
 80013a2:	497c      	ldr	r1, [pc, #496]	; (8001594 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80013a4:	461a      	mov	r2, r3
 80013a6:	487a      	ldr	r0, [pc, #488]	; (8001590 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80013a8:	f009 f878 	bl	800a49c <arm_cfft_f32>
  SDR_memcpy_f32(tmpSamp, FFTbuf2 + 2*FFTLEN - 2*BSIZE, 2*BSIZE);   
 80013ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013b0:	497a      	ldr	r1, [pc, #488]	; (800159c <HAL_GPIO_EXTI_Callback+0x300>)
 80013b2:	487b      	ldr	r0, [pc, #492]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x304>)
 80013b4:	f000 ff14 	bl	80021e0 <SDR_memcpy_f32>
  switch(CurrentMode)
 80013b8:	782b      	ldrb	r3, [r5, #0]
 80013ba:	2b03      	cmp	r3, #3
 80013bc:	d807      	bhi.n	80013ce <HAL_GPIO_EXTI_Callback+0x132>
 80013be:	e8df f003 	tbb	[pc, r3]
 80013c2:	1d02      	.short	0x1d02
 80013c4:	0f1d      	.short	0x0f1d
      SDR_demodAM_AGC(tmpSamp, fAudio);  break;
 80013c6:	4977      	ldr	r1, [pc, #476]	; (80015a4 <HAL_GPIO_EXTI_Callback+0x308>)
 80013c8:	4875      	ldr	r0, [pc, #468]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x304>)
 80013ca:	f001 f859 	bl	8002480 <SDR_demodAM_AGC>
  SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 80013ce:	4b76      	ldr	r3, [pc, #472]	; (80015a8 <HAL_GPIO_EXTI_Callback+0x30c>)
 80013d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d4:	4873      	ldr	r0, [pc, #460]	; (80015a4 <HAL_GPIO_EXTI_Callback+0x308>)
 80013d6:	6819      	ldr	r1, [r3, #0]
}
 80013d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SDR_float_to_DAC_audio(fAudio, ValidAudioHalf, BSIZE);
 80013dc:	f000 be96 	b.w	800210c <SDR_float_to_DAC_audio>
		  SDR_demodSSB_CW_AGC(tmpSamp, fAudio);
 80013e0:	4970      	ldr	r1, [pc, #448]	; (80015a4 <HAL_GPIO_EXTI_Callback+0x308>)
 80013e2:	486f      	ldr	r0, [pc, #444]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x304>)
 80013e4:	f001 f8c8 	bl	8002578 <SDR_demodSSB_CW_AGC>
		  if(bw[CW] == Narrow)
 80013e8:	4b70      	ldr	r3, [pc, #448]	; (80015ac <HAL_GPIO_EXTI_Callback+0x310>)
 80013ea:	78db      	ldrb	r3, [r3, #3]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1ee      	bne.n	80013ce <HAL_GPIO_EXTI_Callback+0x132>
			  SDR_CWPeak(fAudio, BSIZE);
 80013f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f4:	486b      	ldr	r0, [pc, #428]	; (80015a4 <HAL_GPIO_EXTI_Callback+0x308>)
 80013f6:	f000 ffb9 	bl	800236c <SDR_CWPeak>
 80013fa:	e7e8      	b.n	80013ce <HAL_GPIO_EXTI_Callback+0x132>
		  SDR_demodSSB_CW_AGC(tmpSamp, fAudio); break;
 80013fc:	4969      	ldr	r1, [pc, #420]	; (80015a4 <HAL_GPIO_EXTI_Callback+0x308>)
 80013fe:	4868      	ldr	r0, [pc, #416]	; (80015a0 <HAL_GPIO_EXTI_Callback+0x304>)
 8001400:	f001 f8ba 	bl	8002578 <SDR_demodSSB_CW_AGC>
 8001404:	e7e3      	b.n	80013ce <HAL_GPIO_EXTI_Callback+0x132>
      SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8001406:	4b69      	ldr	r3, [pc, #420]	; (80015ac <HAL_GPIO_EXTI_Callback+0x310>)
 8001408:	78d8      	ldrb	r0, [r3, #3]
 800140a:	f7ff f9cb 	bl	80007a4 <SetBW>
 800140e:	4b68      	ldr	r3, [pc, #416]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x314>)
	CurrentAGC =newAGC;
 8001410:	4868      	ldr	r0, [pc, #416]	; (80015b4 <HAL_GPIO_EXTI_Callback+0x318>)
      SetBW(/*ptr,*/ bw[CW]);  SetAGC(/*ptr,*/ agc[CW]);
 8001412:	78da      	ldrb	r2, [r3, #3]
	switch(CurrentMode)
 8001414:	7829      	ldrb	r1, [r5, #0]
	CurrentAGC =newAGC;
 8001416:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 8001418:	2903      	cmp	r1, #3
 800141a:	f63f af74 	bhi.w	8001306 <HAL_GPIO_EXTI_Callback+0x6a>
 800141e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001422:	0065      	.short	0x0065
 8001424:	004b0058 	.word	0x004b0058
 8001428:	00d9      	.short	0x00d9
      SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 800142a:	4b60      	ldr	r3, [pc, #384]	; (80015ac <HAL_GPIO_EXTI_Callback+0x310>)
 800142c:	7898      	ldrb	r0, [r3, #2]
 800142e:	f7ff f9b9 	bl	80007a4 <SetBW>
 8001432:	4b5f      	ldr	r3, [pc, #380]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x314>)
	CurrentAGC =newAGC;
 8001434:	485f      	ldr	r0, [pc, #380]	; (80015b4 <HAL_GPIO_EXTI_Callback+0x318>)
      SetBW(/*ptr,*/ bw[USB]);  SetAGC(/*ptr,*/ agc[USB]);
 8001436:	789a      	ldrb	r2, [r3, #2]
	switch(CurrentMode)
 8001438:	7829      	ldrb	r1, [r5, #0]
	CurrentAGC =newAGC;
 800143a:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 800143c:	2903      	cmp	r1, #3
 800143e:	f63f af62 	bhi.w	8001306 <HAL_GPIO_EXTI_Callback+0x6a>
 8001442:	a001      	add	r0, pc, #4	; (adr r0, 8001448 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8001444:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8001448:	080014ed 	.word	0x080014ed
 800144c:	080014d3 	.word	0x080014d3
 8001450:	080015bd 	.word	0x080015bd
 8001454:	080012ef 	.word	0x080012ef
      SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8001458:	4b54      	ldr	r3, [pc, #336]	; (80015ac <HAL_GPIO_EXTI_Callback+0x310>)
 800145a:	7858      	ldrb	r0, [r3, #1]
 800145c:	f7ff f9a2 	bl	80007a4 <SetBW>
 8001460:	4b53      	ldr	r3, [pc, #332]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x314>)
	CurrentAGC =newAGC;
 8001462:	4854      	ldr	r0, [pc, #336]	; (80015b4 <HAL_GPIO_EXTI_Callback+0x318>)
      SetBW(/*ptr,*/ bw[LSB]);  SetAGC(/*ptr,*/ agc[LSB]);
 8001464:	785a      	ldrb	r2, [r3, #1]
	switch(CurrentMode)
 8001466:	7829      	ldrb	r1, [r5, #0]
	CurrentAGC =newAGC;
 8001468:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 800146a:	2903      	cmp	r1, #3
 800146c:	f63f af4b 	bhi.w	8001306 <HAL_GPIO_EXTI_Callback+0x6a>
 8001470:	a001      	add	r0, pc, #4	; (adr r0, 8001478 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8001472:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8001476:	bf00      	nop
 8001478:	080014ed 	.word	0x080014ed
 800147c:	0800152b 	.word	0x0800152b
 8001480:	080014b9 	.word	0x080014b9
 8001484:	080012ef 	.word	0x080012ef
      SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8001488:	4b48      	ldr	r3, [pc, #288]	; (80015ac <HAL_GPIO_EXTI_Callback+0x310>)
 800148a:	7818      	ldrb	r0, [r3, #0]
 800148c:	f7ff f98a 	bl	80007a4 <SetBW>
 8001490:	4b47      	ldr	r3, [pc, #284]	; (80015b0 <HAL_GPIO_EXTI_Callback+0x314>)
	CurrentAGC =newAGC;
 8001492:	4848      	ldr	r0, [pc, #288]	; (80015b4 <HAL_GPIO_EXTI_Callback+0x318>)
      SetBW(/*ptr,*/ bw[AM]); SetAGC(/*ptr,*/ agc[AM]);
 8001494:	781a      	ldrb	r2, [r3, #0]
	switch(CurrentMode)
 8001496:	7829      	ldrb	r1, [r5, #0]
	CurrentAGC =newAGC;
 8001498:	7002      	strb	r2, [r0, #0]
	switch(CurrentMode)
 800149a:	2903      	cmp	r1, #3
 800149c:	f63f af33 	bhi.w	8001306 <HAL_GPIO_EXTI_Callback+0x6a>
 80014a0:	a001      	add	r0, pc, #4	; (adr r0, 80014a8 <HAL_GPIO_EXTI_Callback+0x20c>)
 80014a2:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80014a6:	bf00      	nop
 80014a8:	08001513 	.word	0x08001513
 80014ac:	080014d3 	.word	0x080014d3
 80014b0:	080014b9 	.word	0x080014b9
 80014b4:	080012ef 	.word	0x080012ef
      Decay[USB]  = AGC_decay[newAGC];
 80014b8:	4925      	ldr	r1, [pc, #148]	; (8001550 <HAL_GPIO_EXTI_Callback+0x2b4>)
      Hcount[USB] = Hangcount[newAGC]; break;
 80014ba:	4d26      	ldr	r5, [pc, #152]	; (8001554 <HAL_GPIO_EXTI_Callback+0x2b8>)
      Decay[USB]  = AGC_decay[newAGC];
 80014bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    case USB :      agc[USB] = newAGC;
 80014c0:	709a      	strb	r2, [r3, #2]
      Decay[USB]  = AGC_decay[newAGC];
 80014c2:	4825      	ldr	r0, [pc, #148]	; (8001558 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80014c4:	6809      	ldr	r1, [r1, #0]
      Hcount[USB] = Hangcount[newAGC]; break;
 80014c6:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 80014ca:	4b24      	ldr	r3, [pc, #144]	; (800155c <HAL_GPIO_EXTI_Callback+0x2c0>)
      Decay[USB]  = AGC_decay[newAGC];
 80014cc:	6081      	str	r1, [r0, #8]
      Hcount[USB] = Hangcount[newAGC]; break;
 80014ce:	809a      	strh	r2, [r3, #4]
 80014d0:	e719      	b.n	8001306 <HAL_GPIO_EXTI_Callback+0x6a>
      Decay[LSB]  = AGC_decay[newAGC];
 80014d2:	491f      	ldr	r1, [pc, #124]	; (8001550 <HAL_GPIO_EXTI_Callback+0x2b4>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 80014d4:	4d1f      	ldr	r5, [pc, #124]	; (8001554 <HAL_GPIO_EXTI_Callback+0x2b8>)
      Decay[LSB]  = AGC_decay[newAGC];
 80014d6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    case LSB :      agc[LSB] = newAGC;
 80014da:	705a      	strb	r2, [r3, #1]
      Decay[LSB]  = AGC_decay[newAGC];
 80014dc:	481e      	ldr	r0, [pc, #120]	; (8001558 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80014de:	6809      	ldr	r1, [r1, #0]
      Hcount[LSB] = Hangcount[newAGC]; break;
 80014e0:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 80014e4:	4b1d      	ldr	r3, [pc, #116]	; (800155c <HAL_GPIO_EXTI_Callback+0x2c0>)
      Decay[LSB]  = AGC_decay[newAGC];
 80014e6:	6041      	str	r1, [r0, #4]
      Hcount[LSB] = Hangcount[newAGC]; break;
 80014e8:	805a      	strh	r2, [r3, #2]
 80014ea:	e70c      	b.n	8001306 <HAL_GPIO_EXTI_Callback+0x6a>
      Decay[AM]   = AGC_decay[newAGC];
 80014ec:	4918      	ldr	r1, [pc, #96]	; (8001550 <HAL_GPIO_EXTI_Callback+0x2b4>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 80014ee:	4d19      	ldr	r5, [pc, #100]	; (8001554 <HAL_GPIO_EXTI_Callback+0x2b8>)
      Decay[AM]   = AGC_decay[newAGC];
 80014f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
	  case AM :       agc[AM] = newAGC;
 80014f4:	701a      	strb	r2, [r3, #0]
      Decay[AM]   = AGC_decay[newAGC];
 80014f6:	4818      	ldr	r0, [pc, #96]	; (8001558 <HAL_GPIO_EXTI_Callback+0x2bc>)
 80014f8:	6809      	ldr	r1, [r1, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 80014fa:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 80014fe:	4b17      	ldr	r3, [pc, #92]	; (800155c <HAL_GPIO_EXTI_Callback+0x2c0>)
      Decay[AM]   = AGC_decay[newAGC];
 8001500:	6001      	str	r1, [r0, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8001502:	801a      	strh	r2, [r3, #0]
 8001504:	e6ff      	b.n	8001306 <HAL_GPIO_EXTI_Callback+0x6a>
  if(CurrentMode == LSB) SDR_mirror_LSB(FFTbuf, FFTLEN);
 8001506:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800150a:	4820      	ldr	r0, [pc, #128]	; (800158c <HAL_GPIO_EXTI_Callback+0x2f0>)
 800150c:	f000 fe84 	bl	8002218 <SDR_mirror_LSB>
 8001510:	e73f      	b.n	8001392 <HAL_GPIO_EXTI_Callback+0xf6>
      Decay[AM]   = AGC_decay[newAGC];
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <HAL_GPIO_EXTI_Callback+0x2b4>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 8001514:	480f      	ldr	r0, [pc, #60]	; (8001554 <HAL_GPIO_EXTI_Callback+0x2b8>)
      Decay[AM]   = AGC_decay[newAGC];
 8001516:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800151a:	490f      	ldr	r1, [pc, #60]	; (8001558 <HAL_GPIO_EXTI_Callback+0x2bc>)
      Hcount[AM]  = Hangcount[newAGC]; break;
 800151c:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[AM]   = AGC_decay[newAGC];
 8001520:	6818      	ldr	r0, [r3, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_GPIO_EXTI_Callback+0x2c0>)
      Decay[AM]   = AGC_decay[newAGC];
 8001524:	6008      	str	r0, [r1, #0]
      Hcount[AM]  = Hangcount[newAGC]; break;
 8001526:	801a      	strh	r2, [r3, #0]
 8001528:	e6ed      	b.n	8001306 <HAL_GPIO_EXTI_Callback+0x6a>
      Decay[LSB]  = AGC_decay[newAGC];
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_GPIO_EXTI_Callback+0x2b4>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 800152c:	4809      	ldr	r0, [pc, #36]	; (8001554 <HAL_GPIO_EXTI_Callback+0x2b8>)
      Decay[LSB]  = AGC_decay[newAGC];
 800152e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001532:	4909      	ldr	r1, [pc, #36]	; (8001558 <HAL_GPIO_EXTI_Callback+0x2bc>)
      Hcount[LSB] = Hangcount[newAGC]; break;
 8001534:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[LSB]  = AGC_decay[newAGC];
 8001538:	6818      	ldr	r0, [r3, #0]
      Hcount[LSB] = Hangcount[newAGC]; break;
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_GPIO_EXTI_Callback+0x2c0>)
      Decay[LSB]  = AGC_decay[newAGC];
 800153c:	6048      	str	r0, [r1, #4]
      Hcount[LSB] = Hangcount[newAGC]; break;
 800153e:	805a      	strh	r2, [r3, #2]
 8001540:	e6e1      	b.n	8001306 <HAL_GPIO_EXTI_Callback+0x6a>
 8001542:	bf00      	nop
 8001544:	24000000 	.word	0x24000000
 8001548:	24009cdc 	.word	0x24009cdc
 800154c:	2400c1fc 	.word	0x2400c1fc
 8001550:	2400c1ec 	.word	0x2400c1ec
 8001554:	24009cd8 	.word	0x24009cd8
 8001558:	24002918 	.word	0x24002918
 800155c:	24007e90 	.word	0x24007e90
 8001560:	240042dc 	.word	0x240042dc
 8001564:	2000d600 	.word	0x2000d600
 8001568:	20009600 	.word	0x20009600
 800156c:	2000b600 	.word	0x2000b600
 8001570:	20007600 	.word	0x20007600
 8001574:	20006e00 	.word	0x20006e00
 8001578:	24000504 	.word	0x24000504
 800157c:	20006600 	.word	0x20006600
 8001580:	2400871c 	.word	0x2400871c
 8001584:	24001918 	.word	0x24001918
 8001588:	24000918 	.word	0x24000918
 800158c:	20002600 	.word	0x20002600
 8001590:	0801acb4 	.word	0x0801acb4
 8001594:	20000600 	.word	0x20000600
 8001598:	20004600 	.word	0x20004600
 800159c:	20001600 	.word	0x20001600
 80015a0:	24002aa4 	.word	0x24002aa4
 80015a4:	2400c200 	.word	0x2400c200
 80015a8:	24004304 	.word	0x24004304
 80015ac:	24008ccc 	.word	0x24008ccc
 80015b0:	24007688 	.word	0x24007688
 80015b4:	24000500 	.word	0x24000500
 80015b8:	24008728 	.word	0x24008728
      Decay[USB]  = AGC_decay[newAGC];
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <HAL_GPIO_EXTI_Callback+0x350>)
      Hcount[USB] = Hangcount[newAGC]; break;
 80015be:	480c      	ldr	r0, [pc, #48]	; (80015f0 <HAL_GPIO_EXTI_Callback+0x354>)
      Decay[USB]  = AGC_decay[newAGC];
 80015c0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80015c4:	490b      	ldr	r1, [pc, #44]	; (80015f4 <HAL_GPIO_EXTI_Callback+0x358>)
      Hcount[USB] = Hangcount[newAGC]; break;
 80015c6:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[USB]  = AGC_decay[newAGC];
 80015ca:	6818      	ldr	r0, [r3, #0]
      Hcount[USB] = Hangcount[newAGC]; break;
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <HAL_GPIO_EXTI_Callback+0x35c>)
      Decay[USB]  = AGC_decay[newAGC];
 80015ce:	6088      	str	r0, [r1, #8]
      Hcount[USB] = Hangcount[newAGC]; break;
 80015d0:	809a      	strh	r2, [r3, #4]
 80015d2:	e698      	b.n	8001306 <HAL_GPIO_EXTI_Callback+0x6a>
      Decay[CW]   = AGC_decay[newAGC];
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_GPIO_EXTI_Callback+0x350>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 80015d6:	4806      	ldr	r0, [pc, #24]	; (80015f0 <HAL_GPIO_EXTI_Callback+0x354>)
      Decay[CW]   = AGC_decay[newAGC];
 80015d8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80015dc:	4905      	ldr	r1, [pc, #20]	; (80015f4 <HAL_GPIO_EXTI_Callback+0x358>)
      Hcount[CW]  = Hangcount[newAGC]; break;
 80015de:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
      Decay[CW]   = AGC_decay[newAGC];
 80015e2:	6818      	ldr	r0, [r3, #0]
      Hcount[CW]  = Hangcount[newAGC]; break;
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <HAL_GPIO_EXTI_Callback+0x35c>)
      Decay[CW]   = AGC_decay[newAGC];
 80015e6:	60c8      	str	r0, [r1, #12]
      Hcount[CW]  = Hangcount[newAGC]; break;
 80015e8:	80da      	strh	r2, [r3, #6]
 80015ea:	e68c      	b.n	8001306 <HAL_GPIO_EXTI_Callback+0x6a>
 80015ec:	2400c1ec 	.word	0x2400c1ec
 80015f0:	24009cd8 	.word	0x24009cd8
 80015f4:	24002918 	.word	0x24002918
 80015f8:	24007e90 	.word	0x24007e90

080015fc <ADC_Stream0_Handler>:

//-----------------------------------------------------------------------------  
// This the handler of the highest priority task interrupts, those generated
// by DMA2 Stream when a new ADC buffer is just filled
void ADC_Stream0_Handler(uint8_t FullConversion)
{
 80015fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#ifdef AG_TEST_SIGNAL
  uint16_t test_data[BSIZE];
#endif


 LED_YELLOW_ON;
 8001600:	2201      	movs	r2, #1
{
 8001602:	4605      	mov	r5, r0
 LED_YELLOW_ON;
 8001604:	2102      	movs	r1, #2
 8001606:	487e      	ldr	r0, [pc, #504]	; (8001800 <ADC_Stream0_Handler+0x204>)


// process the data contained in the just filled buffer
	if(FullConversion)
		pR =(uint16_t *) &aADCDualConvertedValues[BSIZE/2];
 8001608:	4c7e      	ldr	r4, [pc, #504]	; (8001804 <ADC_Stream0_Handler+0x208>)
{
 800160a:	ed2d 8b10 	vpush	{d8-d15}
 800160e:	b095      	sub	sp, #84	; 0x54
 LED_YELLOW_ON;
 8001610:	f004 fbaa 	bl	8005d68 <HAL_GPIO_WritePin>
		}
#endif


// compute the new NCO buffer, with the CWpitch offset if receiving CW  
 if(CurrentMode == CW)
 8001614:	4b7c      	ldr	r3, [pc, #496]	; (8001808 <ADC_Stream0_Handler+0x20c>)
		pR =(uint16_t *) &aADCDualConvertedValues[BSIZE/2];
 8001616:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 800161a:	4a7c      	ldr	r2, [pc, #496]	; (800180c <ADC_Stream0_Handler+0x210>)
 if(CurrentMode == CW)
 800161c:	781b      	ldrb	r3, [r3, #0]
		pR =(uint16_t *) &aADCDualConvertedValues[BSIZE/2];
 800161e:	2d00      	cmp	r5, #0
 8001620:	bf18      	it	ne
 8001622:	4604      	movne	r4, r0
 8001624:	ed92 0a00 	vldr	s0, [r2]
 if(CurrentMode == CW)
 8001628:	2b03      	cmp	r3, #3
 800162a:	f000 8384 	beq.w	8001d36 <ADC_Stream0_Handler+0x73a>
	  SDR_ComputeLO(LOfreq-cwpitch);  // prepare next LO buffer
  else
	  SDR_ComputeLO(LOfreq);          // prepare next LO buffer
 800162e:	f000 fc0d 	bl	8001e4c <SDR_ComputeLO>
 8001632:	f204 33fe 	addw	r3, r4, #1022	; 0x3fe
 8001636:	1ea2      	subs	r2, r4, #2

// compute the smoothed average value of the buffer, to be used as offset
// in the short words to floating point conversion routine  
	sum = 0; k = BSIZE;
 8001638:	ed9f 5a75 	vldr	s10, [pc, #468]	; 8001810 <ADC_Stream0_Handler+0x214>
  while(k)
	{ 	
		sum += pR[k-1];
 800163c:	8819      	ldrh	r1, [r3, #0]
 800163e:	3b08      	subs	r3, #8
 8001640:	ee07 1a90 	vmov	s15, r1
		sum += pR[k-2];
 8001644:	88d9      	ldrh	r1, [r3, #6]
 8001646:	ee07 1a10 	vmov	s14, r1
		sum += pR[k-3];
 800164a:	8899      	ldrh	r1, [r3, #4]
		sum += pR[k-1];
 800164c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
		sum += pR[k-4];
 8001650:	8858      	ldrh	r0, [r3, #2]
		sum += pR[k-3];
 8001652:	ee07 1a90 	vmov	s15, r1
		sum += pR[k-2];
 8001656:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		sum += pR[k-4];
 800165a:	ee06 0a90 	vmov	s13, r0
  while(k)
 800165e:	429a      	cmp	r2, r3
		sum += pR[k-3];
 8001660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		sum += pR[k-4];
 8001664:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8001668:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001670:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001674:	ee35 5a27 	vadd.f32	s10, s10, s15
  while(k)
 8001678:	d1e0      	bne.n	800163c <ADC_Stream0_Handler+0x40>
		k-=4;
	}	

	TestSampledValue=pR[BSIZE/2];
 800167a:	f8b4 2200 	ldrh.w	r2, [r4, #512]	; 0x200
 800167e:	2300      	movs	r3, #0

	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 8001680:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001814 <ADC_Stream0_Handler+0x218>

// downconvert to zero IF, by multiplication by the exp(-jwt) signal
// generated by the NCO, and at the same time convert to floating point  
SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8001684:	4620      	mov	r0, r4
	TestSampledValue=pR[BSIZE/2];
 8001686:	ee07 2a90 	vmov	s15, r2
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 800168a:	4e63      	ldr	r6, [pc, #396]	; (8001818 <ADC_Stream0_Handler+0x21c>)
 800168c:	ee25 5a07 	vmul.f32	s10, s10, s14
	TestSampledValue=pR[BSIZE/2];
 8001690:	4c62      	ldr	r4, [pc, #392]	; (800181c <ADC_Stream0_Handler+0x220>)
 8001692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001696:	4d62      	ldr	r5, [pc, #392]	; (8001820 <ADC_Stream0_Handler+0x224>)
SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 8001698:	4a62      	ldr	r2, [pc, #392]	; (8001824 <ADC_Stream0_Handler+0x228>)
 800169a:	eeb0 0a45 	vmov.f32	s0, s10
 800169e:	4962      	ldr	r1, [pc, #392]	; (8001828 <ADC_Stream0_Handler+0x22c>)
	meanavg = sum/(float)BSIZE; //TODO was "mean". Seems to be a bug from original ArmRadio
 80016a0:	ed86 5a00 	vstr	s10, [r6]
	TestSampledValue=pR[BSIZE/2];
 80016a4:	edc4 7a00 	vstr	s15, [r4]
 80016a8:	802b      	strh	r3, [r5, #0]
SDR_downconvert_f32((uint16_t *)pR, meanavg, ADC_Rdata, ADC_Idata);
 80016aa:	f000 fcbd 	bl	8002028 <SDR_downconvert_f32>
// A dividing by 16, order 4, CIC is used. Then a 4096-entry buffer is filled, and
// passed to the baseband interrupt routine, where it is additionally filtered with a
// sync-compensating FIR, which also adds further stop band rejection and a decimation by 4
//-------------------------------------------------------------------------

  k=BSIZE/2;  // BSIZE/2 to process BSIZE entries, two at a time  
 80016ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b2:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 80018b0 <ADC_Stream0_Handler+0x2b4>
 80016b6:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 80018b4 <ADC_Stream0_Handler+0x2b8>
  while(k--)
 80016ba:	23ff      	movs	r3, #255	; 0xff
  k=BSIZE/2;  // BSIZE/2 to process BSIZE entries, two at a time  
 80016bc:	8029      	strh	r1, [r5, #0]
//        which being separated in even and odd samples in advance becomes
// (1 + 6z^-1 + z^-2) for odd samples and (4 + 4z^-1) for even samples, which, when summed, give :
// odd + 6odd_old + odd_old2 + 4even + 4even_old =	odd + 6odd_old + odd_old2 + 4(even + even_old)		

		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;  
    outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 80016be:	eeb1 5a08 	vmov.f32	s10, #24	; 0x40c00000  6.0
 80016c2:	495a      	ldr	r1, [pc, #360]	; (800182c <ADC_Stream0_Handler+0x230>)
 80016c4:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
 80016c8:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 80018b8 <ADC_Stream0_Handler+0x2bc>
 80016cc:	ed91 4a00 	vldr	s8, [r1]
 80016d0:	4957      	ldr	r1, [pc, #348]	; (8001830 <ADC_Stream0_Handler+0x234>)
 80016d2:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 80018bc <ADC_Stream0_Handler+0x2c0>
 80016d6:	edd1 4a00 	vldr	s9, [r1]
 80016da:	4956      	ldr	r1, [pc, #344]	; (8001834 <ADC_Stream0_Handler+0x238>)
 80016dc:	ed9c fa00 	vldr	s30, [ip]
 80016e0:	ed91 7a00 	vldr	s14, [r1]
 80016e4:	4954      	ldr	r1, [pc, #336]	; (8001838 <ADC_Stream0_Handler+0x23c>)
 80016e6:	edde ea00 	vldr	s29, [lr]
 80016ea:	ed91 2a00 	vldr	s4, [r1]
 80016ee:	4953      	ldr	r1, [pc, #332]	; (800183c <ADC_Stream0_Handler+0x240>)
 80016f0:	edd8 9a00 	vldr	s19, [r8]
 80016f4:	edd1 7a00 	vldr	s15, [r1]
 80016f8:	4951      	ldr	r1, [pc, #324]	; (8001840 <ADC_Stream0_Handler+0x244>)
 80016fa:	edd9 fa00 	vldr	s31, [r9]
 80016fe:	edd1 2a00 	vldr	s5, [r1]
 8001702:	4950      	ldr	r1, [pc, #320]	; (8001844 <ADC_Stream0_Handler+0x248>)
 8001704:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 80018c0 <ADC_Stream0_Handler+0x2c4>
 8001708:	ed91 1a00 	vldr	s2, [r1]
 800170c:	494e      	ldr	r1, [pc, #312]	; (8001848 <ADC_Stream0_Handler+0x24c>)
 800170e:	4c4f      	ldr	r4, [pc, #316]	; (800184c <ADC_Stream0_Handler+0x250>)
 8001710:	edd1 1a00 	vldr	s3, [r1]
 8001714:	494e      	ldr	r1, [pc, #312]	; (8001850 <ADC_Stream0_Handler+0x254>)
 8001716:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 80018c4 <ADC_Stream0_Handler+0x2c8>
 800171a:	ed91 6a00 	vldr	s12, [r1]
 800171e:	494d      	ldr	r1, [pc, #308]	; (8001854 <ADC_Stream0_Handler+0x258>)
 8001720:	4a4d      	ldr	r2, [pc, #308]	; (8001858 <ADC_Stream0_Handler+0x25c>)
 8001722:	edd1 aa00 	vldr	s21, [r1]
 8001726:	494d      	ldr	r1, [pc, #308]	; (800185c <ADC_Stream0_Handler+0x260>)
 8001728:	f502 6000 	add.w	r0, r2, #2048	; 0x800
 800172c:	edd1 6a00 	vldr	s13, [r1]
 8001730:	494b      	ldr	r1, [pc, #300]	; (8001860 <ADC_Stream0_Handler+0x264>)
 8001732:	ed91 aa00 	vldr	s20, [r1]
 8001736:	494b      	ldr	r1, [pc, #300]	; (8001864 <ADC_Stream0_Handler+0x268>)
 8001738:	edd1 ba00 	vldr	s23, [r1]
 800173c:	494a      	ldr	r1, [pc, #296]	; (8001868 <ADC_Stream0_Handler+0x26c>)
 800173e:	ed91 ba00 	vldr	s22, [r1]
 8001742:	494a      	ldr	r1, [pc, #296]	; (800186c <ADC_Stream0_Handler+0x270>)
 8001744:	ed91 3a00 	vldr	s6, [r1]
 8001748:	4949      	ldr	r1, [pc, #292]	; (8001870 <ADC_Stream0_Handler+0x274>)
 800174a:	edd1 ca00 	vldr	s25, [r1]
 800174e:	4949      	ldr	r1, [pc, #292]	; (8001874 <ADC_Stream0_Handler+0x278>)
 8001750:	edd1 3a00 	vldr	s7, [r1]
 8001754:	4948      	ldr	r1, [pc, #288]	; (8001878 <ADC_Stream0_Handler+0x27c>)
 8001756:	ed91 ca00 	vldr	s24, [r1]
 800175a:	4948      	ldr	r1, [pc, #288]	; (800187c <ADC_Stream0_Handler+0x280>)
 800175c:	ed91 ea00 	vldr	s28, [r1]
 8001760:	4947      	ldr	r1, [pc, #284]	; (8001880 <ADC_Stream0_Handler+0x284>)
 8001762:	ed91 9a00 	vldr	s18, [r1]
 8001766:	4947      	ldr	r1, [pc, #284]	; (8001884 <ADC_Stream0_Handler+0x288>)
 8001768:	edd1 0a00 	vldr	s1, [r1]
 800176c:	4946      	ldr	r1, [pc, #280]	; (8001888 <ADC_Stream0_Handler+0x28c>)
 800176e:	edcd 0a05 	vstr	s1, [sp, #20]
 8001772:	edd1 0a00 	vldr	s1, [r1]
 8001776:	4945      	ldr	r1, [pc, #276]	; (800188c <ADC_Stream0_Handler+0x290>)
 8001778:	edcd 0a07 	vstr	s1, [sp, #28]
 800177c:	edd1 0a00 	vldr	s1, [r1]
 8001780:	4943      	ldr	r1, [pc, #268]	; (8001890 <ADC_Stream0_Handler+0x294>)
 8001782:	edcd 0a04 	vstr	s1, [sp, #16]
 8001786:	edd1 0a00 	vldr	s1, [r1]
 800178a:	4942      	ldr	r1, [pc, #264]	; (8001894 <ADC_Stream0_Handler+0x298>)
 800178c:	edcd 0a02 	vstr	s1, [sp, #8]
 8001790:	edd1 0a00 	vldr	s1, [r1]
 8001794:	4940      	ldr	r1, [pc, #256]	; (8001898 <ADC_Stream0_Handler+0x29c>)
 8001796:	edcd 0a06 	vstr	s1, [sp, #24]
 800179a:	edd1 0a00 	vldr	s1, [r1]
 800179e:	493f      	ldr	r1, [pc, #252]	; (800189c <ADC_Stream0_Handler+0x2a0>)
 80017a0:	edcd 0a03 	vstr	s1, [sp, #12]
 80017a4:	edd1 0a00 	vldr	s1, [r1]
 80017a8:	493d      	ldr	r1, [pc, #244]	; (80018a0 <ADC_Stream0_Handler+0x2a4>)
 80017aa:	edcd 0a0d 	vstr	s1, [sp, #52]	; 0x34
 80017ae:	edda 0a00 	vldr	s1, [sl]
 80017b2:	edcd 0a0f 	vstr	s1, [sp, #60]	; 0x3c
 80017b6:	edd4 0a00 	vldr	s1, [r4]
 80017ba:	4c3a      	ldr	r4, [pc, #232]	; (80018a4 <ADC_Stream0_Handler+0x2a8>)
 80017bc:	edcd 0a0c 	vstr	s1, [sp, #48]	; 0x30
 80017c0:	edd4 0a00 	vldr	s1, [r4]
 80017c4:	4c38      	ldr	r4, [pc, #224]	; (80018a8 <ADC_Stream0_Handler+0x2ac>)
 80017c6:	edcd 0a08 	vstr	s1, [sp, #32]
 80017ca:	edd4 0a00 	vldr	s1, [r4]
 80017ce:	4c37      	ldr	r4, [pc, #220]	; (80018ac <ADC_Stream0_Handler+0x2b0>)
 80017d0:	edcd 0a0e 	vstr	s1, [sp, #56]	; 0x38
 80017d4:	edd4 0a00 	vldr	s1, [r4]
 80017d8:	f9bb 4000 	ldrsh.w	r4, [fp]
 80017dc:	edcd 0a09 	vstr	s1, [sp, #36]	; 0x24
 80017e0:	eef0 0a64 	vmov.f32	s1, s9
 80017e4:	4626      	mov	r6, r4
 80017e6:	eef0 4a61 	vmov.f32	s9, s3
 80017ea:	460c      	mov	r4, r1
 80017ec:	eef0 1a4f 	vmov.f32	s3, s30
 80017f0:	eeb0 fa4c 	vmov.f32	s30, s24
 80017f4:	eeb0 ca6d 	vmov.f32	s24, s27
 80017f8:	eef0 da4d 	vmov.f32	s27, s26
  while(k--)
 80017fc:	e162      	b.n	8001ac4 <ADC_Stream0_Handler+0x4c8>
 80017fe:	bf00      	nop
 8001800:	58021000 	.word	0x58021000
 8001804:	2400ca00 	.word	0x2400ca00
 8001808:	2400c1fc 	.word	0x2400c1fc
 800180c:	24009cdc 	.word	0x24009cdc
 8001810:	00000000 	.word	0x00000000
 8001814:	3b000000 	.word	0x3b000000
 8001818:	2400c1e0 	.word	0x2400c1e0
 800181c:	2400c1f8 	.word	0x2400c1f8
 8001820:	24000490 	.word	0x24000490
 8001824:	24007ea0 	.word	0x24007ea0
 8001828:	24007690 	.word	0x24007690
 800182c:	24000404 	.word	0x24000404
 8001830:	24000400 	.word	0x24000400
 8001834:	2400043c 	.word	0x2400043c
 8001838:	24000438 	.word	0x24000438
 800183c:	24000434 	.word	0x24000434
 8001840:	24000430 	.word	0x24000430
 8001844:	2400040c 	.word	0x2400040c
 8001848:	24000408 	.word	0x24000408
 800184c:	2400048c 	.word	0x2400048c
 8001850:	2400044c 	.word	0x2400044c
 8001854:	24000448 	.word	0x24000448
 8001858:	24007698 	.word	0x24007698
 800185c:	24000444 	.word	0x24000444
 8001860:	24000440 	.word	0x24000440
 8001864:	24000414 	.word	0x24000414
 8001868:	24000410 	.word	0x24000410
 800186c:	2400045c 	.word	0x2400045c
 8001870:	24000458 	.word	0x24000458
 8001874:	24000454 	.word	0x24000454
 8001878:	24000450 	.word	0x24000450
 800187c:	24000418 	.word	0x24000418
 8001880:	24000464 	.word	0x24000464
 8001884:	24000424 	.word	0x24000424
 8001888:	24000420 	.word	0x24000420
 800188c:	2400047c 	.word	0x2400047c
 8001890:	24000478 	.word	0x24000478
 8001894:	24000474 	.word	0x24000474
 8001898:	24000470 	.word	0x24000470
 800189c:	2400042c 	.word	0x2400042c
 80018a0:	24007ea8 	.word	0x24007ea8
 80018a4:	24000488 	.word	0x24000488
 80018a8:	24000484 	.word	0x24000484
 80018ac:	24000480 	.word	0x24000480
 80018b0:	2400041c 	.word	0x2400041c
 80018b4:	2400046c 	.word	0x2400046c
 80018b8:	24000468 	.word	0x24000468
 80018bc:	24000460 	.word	0x24000460
 80018c0:	24000428 	.word	0x24000428
 80018c4:	240003fc 	.word	0x240003fc
// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
// produced using 4 input samples, totalling a decimation by 2		
// now compute the couple of elements for the next step

    inER=tmp1R;  inOR=outR;                    inEI=tmp1I;  inOI=outI;
    outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 80018c8:	eeaa 6a85 	vfma.f32	s12, s21, s10

		inE2Rold = inER;                           inE2Iold = inEI;  
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
		
		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 80018cc:	0799      	lsls	r1, r3, #30
    outR=(inOR+6.f*inO2Rold+inO2Rold2+4.f*(inER+inE2Rold)); outI=(inOI+6.f*inO2Iold+inO2Iold2+4.f*(inEI+inE2Iold));
 80018ce:	eeea 6a05 	vfma.f32	s13, s20, s10
 80018d2:	ee3d 4aa4 	vadd.f32	s8, s27, s9
 80018d6:	ee31 1a0c 	vadd.f32	s2, s2, s24
 80018da:	eea1 6a25 	vfma.f32	s12, s2, s11
 80018de:	eee4 6a25 	vfma.f32	s13, s8, s11
 80018e2:	ee76 4a07 	vadd.f32	s9, s12, s14
 80018e6:	ee36 4aa7 	vadd.f32	s8, s13, s15
		if((k & 0x2)) // skip the if block for k multiple of 4 (in base zero),
 80018ea:	f100 810d 	bmi.w	8001b08 <ADC_Stream0_Handler+0x50c>
// now we have the input samples decimated by 4, even element in tmp2R, tmp2I,
// and the odd element in outR, outI		
// now compute the couple of elements for the next step
		
    inER=tmp2R;  inOR=outR;                    inEI=tmp2I;  inOI=outI;
    outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 80018ee:	eeac 3a85 	vfma.f32	s6, s25, s10
 80018f2:	eddd 6a00 	vldr	s13, [sp]
 80018f6:	eeef 3a05 	vfma.f32	s7, s30, s10
 80018fa:	ed9d 6a01 	vldr	s12, [sp, #4]
 80018fe:	ee76 baab 	vadd.f32	s23, s13, s23

		inE3Rold  = inER;                          inE3Iold  = inEI;  
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;

		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 8001902:	075f      	lsls	r7, r3, #29
    outR=(inOR+6.f*inO3Rold+inO3Rold2+4.f*(inER+inE3Rold)); outI=(inOI+6.f*inO3Iold+inO3Iold2+4.f*(inEI+inE3Iold));
 8001904:	ee36 ba0b 	vadd.f32	s22, s12, s22
 8001908:	eeab 3aa5 	vfma.f32	s6, s23, s11
 800190c:	eeeb 3a25 	vfma.f32	s7, s22, s11
 8001910:	ee33 1a24 	vadd.f32	s2, s6, s9
 8001914:	ee73 0a84 	vadd.f32	s1, s7, s8
		if((k & 0x4)) // skip the if block for k multiple of 8 (in base zero),
 8001918:	f100 819c 	bmi.w	8001c54 <ADC_Stream0_Handler+0x658>
		// at this point we have two elem. (tmp1R[even] and outR[odd] and also the I counterparts)
		// produced using 4 input samples, totalling a decimation by 8
		// now compute the couple of elements for the next step

		    inER=tmp3R;  inOR=outR;                    inEI=tmp3I;  inOI=outI;
		    outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 800191c:	eeef 9a85 	vfma.f32	s19, s31, s10
 8001920:	eddd 3a0b 	vldr	s7, [sp, #44]	; 0x2c
 8001924:	eea1 9a85 	vfma.f32	s18, s3, s10
 8001928:	ed9d 3a0a 	vldr	s6, [sp, #40]	; 0x28
 800192c:	ee7e eaa3 	vadd.f32	s29, s29, s7

				inE4Rold = inER;                           inE4Iold = inEI;
				inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;

				if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 8001930:	0719      	lsls	r1, r3, #28
		    outR=(inOR+6.f*inO4Rold+inO4Rold2+4.f*(inER+inE4Rold)); outI=(inOI+6.f*inO4Iold+inO4Iold2+4.f*(inEI+inE4Iold));
 8001932:	ee3e ea03 	vadd.f32	s28, s28, s6
 8001936:	eeee 9aa5 	vfma.f32	s19, s29, s11
 800193a:	eeae 9a25 	vfma.f32	s18, s28, s11
 800193e:	ee39 ba81 	vadd.f32	s22, s19, s2
 8001942:	ee79 ba20 	vadd.f32	s23, s18, s1
				if((k & 0x8)) // skip the if block for k multiple of 8 (in base zero),
 8001946:	f100 81a2 	bmi.w	8001c8e <ADC_Stream0_Handler+0x692>
		// now we have the input samples decimated by 8, even element in tmp2R, tmp2I,
		// and the odd element in outR, outI
		// now compute the couple of elements for the next step

		    inER=tmp4R;  inOR=outR;                    inEI=tmp4I;  inOI=outI;
		    outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 800194a:	ed9d ea04 	vldr	s28, [sp, #16]

				inE5Rold  = inER;                          inE5Iold  = inEI;
				inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;

				if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 800194e:	f013 0110 	ands.w	r1, r3, #16
		    outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 8001952:	ed9d 9a02 	vldr	s18, [sp, #8]
 8001956:	eddd ea06 	vldr	s29, [sp, #24]
 800195a:	eddd 9a03 	vldr	s19, [sp, #12]
 800195e:	eea9 ea05 	vfma.f32	s28, s18, s10
 8001962:	ed9d 3a05 	vldr	s6, [sp, #20]
 8001966:	eddd 3a11 	vldr	s7, [sp, #68]	; 0x44
 800196a:	eee9 ea85 	vfma.f32	s29, s19, s10
 800196e:	eddd 6a07 	vldr	s13, [sp, #28]
 8001972:	ee33 6a83 	vadd.f32	s12, s7, s6
 8001976:	ed9d 3a10 	vldr	s6, [sp, #64]	; 0x40
				if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 800197a:	9105      	str	r1, [sp, #20]
		    outR=(inOR+6.f*inO5Rold+inO5Rold2+4.f*(inER+inE5Rold)); outI=(inOI+6.f*inO5Iold+inO5Iold2+4.f*(inEI+inE5Iold));
 800197c:	ee73 6a26 	vadd.f32	s13, s6, s13
 8001980:	eea6 ea25 	vfma.f32	s28, s12, s11
 8001984:	eee6 eaa5 	vfma.f32	s29, s13, s11
 8001988:	ee3e ea0b 	vadd.f32	s28, s28, s22
 800198c:	ee7e eaab 	vadd.f32	s29, s29, s23
				if((k & 0x10)) // skip the if block for k multiple of 10 (in base zero),
 8001990:	f040 81a6 	bne.w	8001ce0 <ADC_Stream0_Handler+0x6e4>
// at this point we have two elem. (tmp3R[even] and outR[odd] and also the I counterparts)
// produced with 4 of the previous elem, i.e. with 16 input samples, totalling 
// a decimation by 16. Now compute the couple of elements for the next step

    inER=tmp5R;  inOR=outR;                    inEI=tmp5I;  inOI=outI;
    outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 8001994:	ed9d 6a08 	vldr	s12, [sp, #32]
// we downscale it with a factor of 8388608, i.e. the gain of the CIC, i.e.	R^M = 64^4 = 16777216
// divided by two, to compensate for the 3 dB loss caused by keeping just half of the band    

// create a block of BSIZE*4 entries, which will be then decimated by 4

	  Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 8001998:	00b1      	lsls	r1, r6, #2
    outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 800199a:	eddd 6a0c 	vldr	s13, [sp, #48]	; 0x30
	  Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 800199e:	3601      	adds	r6, #1
    outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80019a0:	eddd 3a09 	vldr	s7, [sp, #36]	; 0x24
 80019a4:	eee6 6a05 	vfma.f32	s13, s12, s10
 80019a8:	ed9d 6a0e 	vldr	s12, [sp, #56]	; 0x38
 80019ac:	ed9d 3a12 	vldr	s6, [sp, #72]	; 0x48
	  Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80019b0:	b236      	sxth	r6, r6
    outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80019b2:	eea3 6a85 	vfma.f32	s12, s7, s10
 80019b6:	eddd 3a0d 	vldr	s7, [sp, #52]	; 0x34
 80019ba:	ed9d 9a0f 	vldr	s18, [sp, #60]	; 0x3c
//	  Rbasedata[idx] = outR/65536.f;    Ibasedata[idx++] = outI/65536.f; //decimate by 16

		if(idx < BSIZE*4)
 80019be:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
    outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80019c2:	ee73 3a23 	vadd.f32	s7, s6, s7
 80019c6:	ed9d 3a13 	vldr	s6, [sp, #76]	; 0x4c
	  Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80019ca:	4fdf      	ldr	r7, [pc, #892]	; (8001d48 <ADC_Stream0_Handler+0x74c>)
    outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80019cc:	ee33 3a09 	vadd.f32	s6, s6, s18
 80019d0:	eee3 6aa5 	vfma.f32	s13, s7, s11
	  Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80019d4:	440f      	add	r7, r1
 80019d6:	eddf 3add 	vldr	s7, [pc, #884]	; 8001d4c <ADC_Stream0_Handler+0x750>
    outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80019da:	eea3 6a25 	vfma.f32	s12, s6, s11
	  Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80019de:	9704      	str	r7, [sp, #16]
 80019e0:	4fdb      	ldr	r7, [pc, #876]	; (8001d50 <ADC_Stream0_Handler+0x754>)
 80019e2:	4439      	add	r1, r7
 80019e4:	9f04      	ldr	r7, [sp, #16]
    outR=(inOR+6.f*inO6Rold+inO6Rold2+4.f*(inER+inE6Rold)); outI=(inOI+6.f*inO6Iold+inO6Iold2+4.f*(inEI+inE6Iold));
 80019e6:	ee76 6a8e 	vadd.f32	s13, s13, s28
 80019ea:	ee36 6a2e 	vadd.f32	s12, s12, s29
	  Rbasedata[idx] = outR/8388608.f;    Ibasedata[idx++] = outI/8388608.f;  //decimate by 64
 80019ee:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80019f2:	ee26 6a23 	vmul.f32	s12, s12, s7
 80019f6:	edc7 6a00 	vstr	s13, [r7]
 80019fa:	ed81 6a00 	vstr	s12, [r1]
		if(idx < BSIZE*4)
 80019fe:	f2c0 81eb 	blt.w	8001dd8 <ADC_Stream0_Handler+0x7dc>

#endif

// generate now an interrupt to signal the base band processing routine that it has a new buffer			 

		EXTI->SWIER1 |= GPIO_PIN_14;
 8001a02:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
 8001a06:	eddd 6a09 	vldr	s13, [sp, #36]	; 0x24
 8001a0a:	ed9d 9a02 	vldr	s18, [sp, #8]
 8001a0e:	eef0 3a4f 	vmov.f32	s7, s30
 8001a12:	68b9      	ldr	r1, [r7, #8]
 8001a14:	eeb0 3a6c 	vmov.f32	s6, s25
 8001a18:	ed9d 6a08 	vldr	s12, [sp, #32]
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001a1c:	eeb0 fa44 	vmov.f32	s30, s8
		EXTI->SWIER1 |= GPIO_PIN_14;
 8001a20:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8001a24:	eef0 6a4a 	vmov.f32	s13, s20
 8001a28:	edcd 9a06 	vstr	s19, [sp, #24]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a2c:	eeb0 aa67 	vmov.f32	s20, s15
		EXTI->SWIER1 |= GPIO_PIN_14;
 8001a30:	ed8d 9a04 	vstr	s18, [sp, #16]
 8001a34:	eef0 9a6f 	vmov.f32	s19, s31
 8001a38:	eeb0 9a61 	vmov.f32	s18, s3
 8001a3c:	ed8d 6a0c 	vstr	s12, [sp, #48]	; 0x30
				inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a40:	eef0 1a60 	vmov.f32	s3, s1
		EXTI->SWIER1 |= GPIO_PIN_14;
 8001a44:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
				inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001a48:	eef0 fa41 	vmov.f32	s31, s2
		inE6Rold = inER;                           inE6Iold = inEI;
 8001a4c:	ed9d 4a13 	vldr	s8, [sp, #76]	; 0x4c
		EXTI->SWIER1 |= GPIO_PIN_14;
 8001a50:	eeb0 6a6a 	vmov.f32	s12, s21
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001a54:	edcd ea09 	vstr	s29, [sp, #36]	; 0x24
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001a58:	eef0 ca64 	vmov.f32	s25, s9
		inE6Rold = inER;                           inE6Iold = inEI;
 8001a5c:	eddd 4a12 	vldr	s9, [sp, #72]	; 0x48
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001a60:	eef0 aa47 	vmov.f32	s21, s14
				inE5Rold  = inER;                          inE5Iold  = inEI;
 8001a64:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001a68:	ed8d ea08 	vstr	s28, [sp, #32]
				inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001a6c:	edcd ba03 	vstr	s23, [sp, #12]
 8001a70:	ed8d ba02 	vstr	s22, [sp, #8]
		idx = 0;
 8001a74:	9e05      	ldr	r6, [sp, #20]
		EXTI->SWIER1 |= GPIO_PIN_14;
 8001a76:	60b9      	str	r1, [r7, #8]
		inE6Rold = inER;                           inE6Iold = inEI;
 8001a78:	ed8d 4a0f 	vstr	s8, [sp, #60]	; 0x3c
 8001a7c:	edcd 4a0d 	vstr	s9, [sp, #52]	; 0x34
				inE5Rold  = inER;                          inE5Iold  = inEI;
 8001a80:	ed8d 7a07 	vstr	s14, [sp, #28]
		inE2Rold = inER;                           inE2Iold = inEI;  
 8001a84:	eef0 4a6d 	vmov.f32	s9, s27
				inE5Rold  = inER;                          inE5Iold  = inEI;
 8001a88:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
		inE2Rold = inER;                           inE2Iold = inEI;  
 8001a8c:	eeb0 1a4c 	vmov.f32	s2, s24
		inE3Rold  = inER;                          inE3Iold  = inEI;  
 8001a90:	ed9d ba01 	vldr	s22, [sp, #4]
 8001a94:	eddd ba00 	vldr	s23, [sp]
				inE4Rold = inER;                           inE4Iold = inEI;
 8001a98:	ed9d ea0a 	vldr	s28, [sp, #40]	; 0x28
 8001a9c:	eddd ea0b 	vldr	s29, [sp, #44]	; 0x2c
				inE5Rold  = inER;                          inE5Iold  = inEI;
 8001aa0:	edcd 7a05 	vstr	s15, [sp, #20]
 8001aa4:	3b01      	subs	r3, #1
		inE1Rold = inER;                           inE1Iold = inEI;
 8001aa6:	eef0 7a62 	vmov.f32	s15, s5
 8001aaa:	eeb0 7a42 	vmov.f32	s14, s4
 8001aae:	3208      	adds	r2, #8
 8001ab0:	eef0 0a4d 	vmov.f32	s1, s26
 8001ab4:	b29b      	uxth	r3, r3
		inO1Rold2 = inO1Rold; inO1Rold = inOR;     inO1Iold2 = inO1Iold; inO1Iold = inOI;
 8001ab6:	eef0 2a68 	vmov.f32	s5, s17
 8001aba:	3408      	adds	r4, #8
		inE1Rold = inER;                           inE1Iold = inEI;
 8001abc:	eeb0 4a48 	vmov.f32	s8, s16
		inO1Rold2 = inO1Rold; inO1Rold = inOR;     inO1Iold2 = inO1Iold; inO1Iold = inOI;
 8001ac0:	eeb0 2a40 	vmov.f32	s4, s0
  while(k--)
 8001ac4:	4290      	cmp	r0, r2
 8001ac6:	d030      	beq.n	8001b2a <ADC_Stream0_Handler+0x52e>
    outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8001ac8:	eea2 7a05 	vfma.f32	s14, s4, s10
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;  
 8001acc:	ed12 0a01 	vldr	s0, [r2, #-4]
    outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8001ad0:	eee2 7a85 	vfma.f32	s15, s5, s10
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;  
 8001ad4:	ed12 8a02 	vldr	s16, [r2, #-8]
 8001ad8:	ed54 8a01 	vldr	s17, [r4, #-4]
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero), 
 8001adc:	07df      	lsls	r7, r3, #31
		inER=*ptDataR++; inOR=*ptDataR++;          inEI=*ptDataI++; inOI=*ptDataI++;  
 8001ade:	ed14 da02 	vldr	s26, [r4, #-8]
    outR=(inOR+6.f*inO1Rold+inO1Rold2+4.f*(inER+inE1Rold)); outI=(inOI+6.f*inO1Iold+inO1Iold2+4.f*(inEI+inE1Iold));
 8001ae2:	ee34 4a08 	vadd.f32	s8, s8, s16
 8001ae6:	ee70 0a8d 	vadd.f32	s1, s1, s26
 8001aea:	ee37 7a00 	vadd.f32	s14, s14, s0
 8001aee:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8001af2:	eea4 7a25 	vfma.f32	s14, s8, s11
 8001af6:	eee0 7aa5 	vfma.f32	s15, s1, s11
		if((k & 0x1))  // skip the if-block for k multiple of 2 (in base zero), 
 8001afa:	f57f aee5 	bpl.w	80018c8 <ADC_Stream0_Handler+0x2cc>
      tmp1R = outR; tmp1I = outI;  // save the even element produced
 8001afe:	eef0 da67 	vmov.f32	s27, s15
 8001b02:	eeb0 ca47 	vmov.f32	s24, s14
 8001b06:	e7cd      	b.n	8001aa4 <ADC_Stream0_Handler+0x4a8>
 8001b08:	eef0 6a4a 	vmov.f32	s13, s20
      tmp2R = outR; tmp2I = outI;  // save the even element produced
 8001b0c:	edcd 4a00 	vstr	s9, [sp]
 8001b10:	eeb0 6a6a 	vmov.f32	s12, s21
 8001b14:	ed8d 4a01 	vstr	s8, [sp, #4]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001b18:	eeb0 aa67 	vmov.f32	s20, s15
 8001b1c:	eef0 aa47 	vmov.f32	s21, s14
		inE2Rold = inER;                           inE2Iold = inEI;  
 8001b20:	eef0 4a6d 	vmov.f32	s9, s27
 8001b24:	eeb0 1a4c 	vmov.f32	s2, s24
 8001b28:	e7bc      	b.n	8001aa4 <ADC_Stream0_Handler+0x4a8>
 8001b2a:	4634      	mov	r4, r6
 8001b2c:	4e89      	ldr	r6, [pc, #548]	; (8001d54 <ADC_Stream0_Handler+0x758>)
 8001b2e:	eeb0 ca4f 	vmov.f32	s24, s30
 8001b32:	edc9 fa00 	vstr	s31, [r9]
 8001b36:	ed86 9a00 	vstr	s18, [r6]
 8001b3a:	eeb0 fa61 	vmov.f32	s30, s3
 8001b3e:	4e86      	ldr	r6, [pc, #536]	; (8001d58 <ADC_Stream0_Handler+0x75c>)
 8001b40:	eef0 1a64 	vmov.f32	s3, s9
 8001b44:	edc8 9a00 	vstr	s19, [r8]
 8001b48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b4c:	ed86 ea00 	vstr	s28, [r6]
  }	

 LED_YELLOW_OFF;
 8001b50:	2200      	movs	r2, #0
 8001b52:	4e82      	ldr	r6, [pc, #520]	; (8001d5c <ADC_Stream0_Handler+0x760>)
 8001b54:	2102      	movs	r1, #2
 8001b56:	edce ea00 	vstr	s29, [lr]
 8001b5a:	ed86 2a00 	vstr	s4, [r6]
 8001b5e:	4e80      	ldr	r6, [pc, #512]	; (8001d60 <ADC_Stream0_Handler+0x764>)
 8001b60:	ed8c fa00 	vstr	s30, [ip]
 8001b64:	ed86 7a00 	vstr	s14, [r6]
 8001b68:	4e7e      	ldr	r6, [pc, #504]	; (8001d64 <ADC_Stream0_Handler+0x768>)
 8001b6a:	487f      	ldr	r0, [pc, #508]	; (8001d68 <ADC_Stream0_Handler+0x76c>)
 8001b6c:	ed86 4a00 	vstr	s8, [r6]
 8001b70:	4e7e      	ldr	r6, [pc, #504]	; (8001d6c <ADC_Stream0_Handler+0x770>)
 8001b72:	edc6 2a00 	vstr	s5, [r6]
 8001b76:	4e7e      	ldr	r6, [pc, #504]	; (8001d70 <ADC_Stream0_Handler+0x774>)
 8001b78:	edc6 7a00 	vstr	s15, [r6]
 8001b7c:	4e7d      	ldr	r6, [pc, #500]	; (8001d74 <ADC_Stream0_Handler+0x778>)
 8001b7e:	eddd 7a02 	vldr	s15, [sp, #8]
 8001b82:	edc6 0a00 	vstr	s1, [r6]
 8001b86:	4e7c      	ldr	r6, [pc, #496]	; (8001d78 <ADC_Stream0_Handler+0x77c>)
 8001b88:	edc6 aa00 	vstr	s21, [r6]
 8001b8c:	4e7b      	ldr	r6, [pc, #492]	; (8001d7c <ADC_Stream0_Handler+0x780>)
 8001b8e:	ed86 6a00 	vstr	s12, [r6]
 8001b92:	4e7b      	ldr	r6, [pc, #492]	; (8001d80 <ADC_Stream0_Handler+0x784>)
 8001b94:	ed86 1a00 	vstr	s2, [r6]
 8001b98:	4e7a      	ldr	r6, [pc, #488]	; (8001d84 <ADC_Stream0_Handler+0x788>)
 8001b9a:	ed86 aa00 	vstr	s20, [r6]
 8001b9e:	4e7a      	ldr	r6, [pc, #488]	; (8001d88 <ADC_Stream0_Handler+0x78c>)
 8001ba0:	edc6 6a00 	vstr	s13, [r6]
 8001ba4:	4e79      	ldr	r6, [pc, #484]	; (8001d8c <ADC_Stream0_Handler+0x790>)
 8001ba6:	edc6 1a00 	vstr	s3, [r6]
 8001baa:	4e79      	ldr	r6, [pc, #484]	; (8001d90 <ADC_Stream0_Handler+0x794>)
 8001bac:	edc6 ca00 	vstr	s25, [r6]
 8001bb0:	4e78      	ldr	r6, [pc, #480]	; (8001d94 <ADC_Stream0_Handler+0x798>)
 8001bb2:	ed86 3a00 	vstr	s6, [r6]
 8001bb6:	4e78      	ldr	r6, [pc, #480]	; (8001d98 <ADC_Stream0_Handler+0x79c>)
 8001bb8:	edc6 ba00 	vstr	s23, [r6]
 8001bbc:	4e77      	ldr	r6, [pc, #476]	; (8001d9c <ADC_Stream0_Handler+0x7a0>)
 8001bbe:	ed86 ca00 	vstr	s24, [r6]
 8001bc2:	4e77      	ldr	r6, [pc, #476]	; (8001da0 <ADC_Stream0_Handler+0x7a4>)
 8001bc4:	edc6 3a00 	vstr	s7, [r6]
 8001bc8:	4e76      	ldr	r6, [pc, #472]	; (8001da4 <ADC_Stream0_Handler+0x7a8>)
 8001bca:	ed86 ba00 	vstr	s22, [r6]
 8001bce:	4e76      	ldr	r6, [pc, #472]	; (8001da8 <ADC_Stream0_Handler+0x7ac>)
 8001bd0:	edc6 7a00 	vstr	s15, [r6]
 8001bd4:	eddd 7a04 	vldr	s15, [sp, #16]
 8001bd8:	4e74      	ldr	r6, [pc, #464]	; (8001dac <ADC_Stream0_Handler+0x7b0>)
 8001bda:	edc6 7a00 	vstr	s15, [r6]
 8001bde:	eddd 7a05 	vldr	s15, [sp, #20]
 8001be2:	4e73      	ldr	r6, [pc, #460]	; (8001db0 <ADC_Stream0_Handler+0x7b4>)
 8001be4:	edc6 7a00 	vstr	s15, [r6]
 8001be8:	eddd 7a03 	vldr	s15, [sp, #12]
 8001bec:	4e71      	ldr	r6, [pc, #452]	; (8001db4 <ADC_Stream0_Handler+0x7b8>)
 8001bee:	edc6 7a00 	vstr	s15, [r6]
 8001bf2:	eddd 7a06 	vldr	s15, [sp, #24]
 8001bf6:	4e70      	ldr	r6, [pc, #448]	; (8001db8 <ADC_Stream0_Handler+0x7bc>)
 8001bf8:	802b      	strh	r3, [r5, #0]
 8001bfa:	edc6 7a00 	vstr	s15, [r6]
 8001bfe:	eddd 7a07 	vldr	s15, [sp, #28]
 8001c02:	4e6e      	ldr	r6, [pc, #440]	; (8001dbc <ADC_Stream0_Handler+0x7c0>)
 8001c04:	4b6e      	ldr	r3, [pc, #440]	; (8001dc0 <ADC_Stream0_Handler+0x7c4>)
 8001c06:	edc6 7a00 	vstr	s15, [r6]
 8001c0a:	eddd 7a08 	vldr	s15, [sp, #32]
 8001c0e:	4e6d      	ldr	r6, [pc, #436]	; (8001dc4 <ADC_Stream0_Handler+0x7c8>)
 8001c10:	f8ab 4000 	strh.w	r4, [fp]
 8001c14:	edc6 7a00 	vstr	s15, [r6]
 8001c18:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8001c1c:	edc3 7a00 	vstr	s15, [r3]
 8001c20:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8001c24:	4b68      	ldr	r3, [pc, #416]	; (8001dc8 <ADC_Stream0_Handler+0x7cc>)
 8001c26:	edc3 7a00 	vstr	s15, [r3]
 8001c2a:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8001c2e:	4b67      	ldr	r3, [pc, #412]	; (8001dcc <ADC_Stream0_Handler+0x7d0>)
 8001c30:	edc3 7a00 	vstr	s15, [r3]
 8001c34:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8001c38:	4b65      	ldr	r3, [pc, #404]	; (8001dd0 <ADC_Stream0_Handler+0x7d4>)
 8001c3a:	edc3 7a00 	vstr	s15, [r3]
 8001c3e:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
 8001c42:	edca 7a00 	vstr	s15, [sl]

	}
 8001c46:	b015      	add	sp, #84	; 0x54
 8001c48:	ecbd 8b10 	vpop	{d8-d15}
 8001c4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 LED_YELLOW_OFF;
 8001c50:	f004 b88a 	b.w	8005d68 <HAL_GPIO_WritePin>
 8001c54:	eeb0 ba46 	vmov.f32	s22, s12
      tmp3R = outR; tmp3I = outI;  // save the even element produced
 8001c58:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 8001c5c:	eef0 ba66 	vmov.f32	s23, s13
 8001c60:	edcd 0a0a 	vstr	s1, [sp, #40]	; 0x28
 8001c64:	eef0 3a4f 	vmov.f32	s7, s30
 8001c68:	eeb0 3a6c 	vmov.f32	s6, s25
 8001c6c:	eef0 6a4a 	vmov.f32	s13, s20
 8001c70:	eeb0 6a6a 	vmov.f32	s12, s21
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001c74:	eef0 ca64 	vmov.f32	s25, s9
 8001c78:	eeb0 fa44 	vmov.f32	s30, s8
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001c7c:	eeb0 aa67 	vmov.f32	s20, s15
 8001c80:	eef0 aa47 	vmov.f32	s21, s14
		inE2Rold = inER;                           inE2Iold = inEI;  
 8001c84:	eef0 4a6d 	vmov.f32	s9, s27
 8001c88:	eeb0 1a4c 	vmov.f32	s2, s24
 8001c8c:	e70a      	b.n	8001aa4 <ADC_Stream0_Handler+0x4a8>
 8001c8e:	eeb0 ea43 	vmov.f32	s28, s6
		      tmp4R = outR; tmp4I = outI;  // save the even element produced
 8001c92:	edcd ba10 	vstr	s23, [sp, #64]	; 0x40
 8001c96:	eef0 ea63 	vmov.f32	s29, s7
 8001c9a:	ed8d ba11 	vstr	s22, [sp, #68]	; 0x44
 8001c9e:	eef0 3a4f 	vmov.f32	s7, s30
		inE3Rold  = inER;                          inE3Iold  = inEI;  
 8001ca2:	ed9d ba01 	vldr	s22, [sp, #4]
 8001ca6:	eeb0 3a6c 	vmov.f32	s6, s25
 8001caa:	eddd ba00 	vldr	s23, [sp]
 8001cae:	eef0 6a4a 	vmov.f32	s13, s20
 8001cb2:	eeb0 6a6a 	vmov.f32	s12, s21
 8001cb6:	eeb0 9a61 	vmov.f32	s18, s3
 8001cba:	eef0 9a6f 	vmov.f32	s19, s31
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001cbe:	eef0 ca64 	vmov.f32	s25, s9
				inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001cc2:	eef0 fa41 	vmov.f32	s31, s2
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001cc6:	eeb0 fa44 	vmov.f32	s30, s8
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001cca:	eeb0 aa67 	vmov.f32	s20, s15
 8001cce:	eef0 aa47 	vmov.f32	s21, s14
				inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001cd2:	eef0 1a60 	vmov.f32	s3, s1
		inE2Rold = inER;                           inE2Iold = inEI;  
 8001cd6:	eef0 4a6d 	vmov.f32	s9, s27
 8001cda:	eeb0 1a4c 	vmov.f32	s2, s24
 8001cde:	e6e1      	b.n	8001aa4 <ADC_Stream0_Handler+0x4a8>
 8001ce0:	eddd 6a02 	vldr	s13, [sp, #8]
 8001ce4:	eef0 3a4f 	vmov.f32	s7, s30
 8001ce8:	edcd 9a06 	vstr	s19, [sp, #24]
 8001cec:	eeb0 3a6c 	vmov.f32	s6, s25
 8001cf0:	edcd 6a04 	vstr	s13, [sp, #16]
 8001cf4:	eeb0 6a6a 	vmov.f32	s12, s21
 8001cf8:	eef0 6a4a 	vmov.f32	s13, s20
				inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001cfc:	edcd ba03 	vstr	s23, [sp, #12]
 8001d00:	eeb0 9a61 	vmov.f32	s18, s3
 8001d04:	ed8d ba02 	vstr	s22, [sp, #8]
 8001d08:	eef0 9a6f 	vmov.f32	s19, s31
		      tmp5R = outR; tmp5I = outI;  // save the even element produced
 8001d0c:	edcd ea13 	vstr	s29, [sp, #76]	; 0x4c
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001d10:	eeb0 fa44 	vmov.f32	s30, s8
		      tmp5R = outR; tmp5I = outI;  // save the even element produced
 8001d14:	ed8d ea12 	vstr	s28, [sp, #72]	; 0x48
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001d18:	eef0 ca64 	vmov.f32	s25, s9
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001d1c:	eeb0 aa67 	vmov.f32	s20, s15
 8001d20:	eef0 aa47 	vmov.f32	s21, s14
				inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001d24:	eef0 1a60 	vmov.f32	s3, s1
 8001d28:	eef0 fa41 	vmov.f32	s31, s2
				inE5Rold  = inER;                          inE5Iold  = inEI;
 8001d2c:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
 8001d30:	edcd 7a07 	vstr	s15, [sp, #28]
 8001d34:	e6a6      	b.n	8001a84 <ADC_Stream0_Handler+0x488>
	  SDR_ComputeLO(LOfreq-cwpitch);  // prepare next LO buffer
 8001d36:	4b27      	ldr	r3, [pc, #156]	; (8001dd4 <ADC_Stream0_Handler+0x7d8>)
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8001d40:	f000 f884 	bl	8001e4c <SDR_ComputeLO>
 8001d44:	e475      	b.n	8001632 <ADC_Stream0_Handler+0x36>
 8001d46:	bf00      	nop
 8001d48:	2000d600 	.word	0x2000d600
 8001d4c:	34000000 	.word	0x34000000
 8001d50:	2000b600 	.word	0x2000b600
 8001d54:	24000464 	.word	0x24000464
 8001d58:	24000418 	.word	0x24000418
 8001d5c:	24000438 	.word	0x24000438
 8001d60:	2400043c 	.word	0x2400043c
 8001d64:	24000404 	.word	0x24000404
 8001d68:	58021000 	.word	0x58021000
 8001d6c:	24000430 	.word	0x24000430
 8001d70:	24000434 	.word	0x24000434
 8001d74:	24000400 	.word	0x24000400
 8001d78:	24000448 	.word	0x24000448
 8001d7c:	2400044c 	.word	0x2400044c
 8001d80:	2400040c 	.word	0x2400040c
 8001d84:	24000440 	.word	0x24000440
 8001d88:	24000444 	.word	0x24000444
 8001d8c:	24000408 	.word	0x24000408
 8001d90:	24000458 	.word	0x24000458
 8001d94:	2400045c 	.word	0x2400045c
 8001d98:	24000414 	.word	0x24000414
 8001d9c:	24000450 	.word	0x24000450
 8001da0:	24000454 	.word	0x24000454
 8001da4:	24000410 	.word	0x24000410
 8001da8:	24000478 	.word	0x24000478
 8001dac:	2400047c 	.word	0x2400047c
 8001db0:	24000424 	.word	0x24000424
 8001db4:	24000470 	.word	0x24000470
 8001db8:	24000474 	.word	0x24000474
 8001dbc:	24000420 	.word	0x24000420
 8001dc0:	2400048c 	.word	0x2400048c
 8001dc4:	24000488 	.word	0x24000488
 8001dc8:	2400042c 	.word	0x2400042c
 8001dcc:	24000480 	.word	0x24000480
 8001dd0:	24000484 	.word	0x24000484
 8001dd4:	24009cd4 	.word	0x24009cd4
 8001dd8:	eddd 6a09 	vldr	s13, [sp, #36]	; 0x24
 8001ddc:	eef0 3a4f 	vmov.f32	s7, s30
 8001de0:	eeb0 3a6c 	vmov.f32	s6, s25
		inO6Rold2 = inO6Rold; inO6Rold = inOR;     inO6Iold2 = inO6Iold; inO6Iold = inOI;
 8001de4:	edcd ea09 	vstr	s29, [sp, #36]	; 0x24
 8001de8:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8001dec:	eeb0 6a6a 	vmov.f32	s12, s21
 8001df0:	eddd 6a08 	vldr	s13, [sp, #32]
 8001df4:	eeb0 9a61 	vmov.f32	s18, s3
 8001df8:	eef0 9a6f 	vmov.f32	s19, s31
 8001dfc:	ed8d ea08 	vstr	s28, [sp, #32]
 8001e00:	edcd 6a0c 	vstr	s13, [sp, #48]	; 0x30
		inO3Rold2 = inO3Rold; inO3Rold = inOR;     inO3Iold2 = inO3Iold; inO3Iold = inOI;
 8001e04:	eeb0 fa44 	vmov.f32	s30, s8
 8001e08:	eddd 6a03 	vldr	s13, [sp, #12]
 8001e0c:	eef0 ca64 	vmov.f32	s25, s9
				inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001e10:	edcd ba03 	vstr	s23, [sp, #12]
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001e14:	eef0 aa47 	vmov.f32	s21, s14
 8001e18:	edcd 6a06 	vstr	s13, [sp, #24]
				inO4Rold2 = inO4Rold; inO4Rold = inOR;     inO4Iold2 = inO4Iold; inO4Iold = inOI;
 8001e1c:	eef0 1a60 	vmov.f32	s3, s1
 8001e20:	eddd 6a02 	vldr	s13, [sp, #8]
 8001e24:	eef0 fa41 	vmov.f32	s31, s2
				inO5Rold2 = inO5Rold; inO5Rold = inOR;     inO5Iold2 = inO5Iold; inO5Iold = inOI;
 8001e28:	ed8d ba02 	vstr	s22, [sp, #8]
 8001e2c:	edcd 6a04 	vstr	s13, [sp, #16]
 8001e30:	eef0 6a4a 	vmov.f32	s13, s20
		inO2Rold2 = inO2Rold; inO2Rold = inOR;     inO2Iold2 = inO2Iold; inO2Iold = inOI;
 8001e34:	eeb0 aa67 	vmov.f32	s20, s15
		inE6Rold = inER;                           inE6Iold = inEI;
 8001e38:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 8001e3c:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 8001e40:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
 8001e44:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8001e48:	e770      	b.n	8001d2c <ADC_Stream0_Handler+0x730>
 8001e4a:	bf00      	nop

08001e4c <SDR_ComputeLO>:

#include "Globals.h"

//------------------------------------------------------------------------------
void SDR_ComputeLO(float32_t freq)
{
 8001e4c:	b538      	push	{r3, r4, r5, lr}
	uint16_t        k;
	float           *pBufR=LO_R, *pBufI=LO_I;
  static float    costheta, sintheta, oldfreq = 1.e9f, ym1i=1.f, ym1q=0.f, 
	                ypi, ypq, tmpi, gain=1.f;
	
	if (oldfreq != freq)
 8001e4e:	4b4f      	ldr	r3, [pc, #316]	; (8001f8c <SDR_ComputeLO+0x140>)
 8001e50:	edd3 7a00 	vldr	s15, [r3]
 8001e54:	eef4 7a40 	vcmp.f32	s15, s0
{
 8001e58:	ed2d 8b04 	vpush	{d8-d9}
	if (oldfreq != freq)
 8001e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e60:	d171      	bne.n	8001f46 <SDR_ComputeLO+0xfa>
 8001e62:	4a4b      	ldr	r2, [pc, #300]	; (8001f90 <SDR_ComputeLO+0x144>)
 8001e64:	4b4b      	ldr	r3, [pc, #300]	; (8001f94 <SDR_ComputeLO+0x148>)
 8001e66:	ed92 8a00 	vldr	s16, [r2]
 8001e6a:	ed93 6a00 	vldr	s12, [r3]
// Coupled Quadrature Oscillator with level stabilization	
	while(k)
	{                    
// loop partially unrolled for performance		

		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001e6e:	484a      	ldr	r0, [pc, #296]	; (8001f98 <SDR_ComputeLO+0x14c>)
 8001e70:	4c4a      	ldr	r4, [pc, #296]	; (8001f9c <SDR_ComputeLO+0x150>)
 8001e72:	4d4b      	ldr	r5, [pc, #300]	; (8001fa0 <SDR_ComputeLO+0x154>)
 8001e74:	4b4b      	ldr	r3, [pc, #300]	; (8001fa4 <SDR_ComputeLO+0x158>)
 8001e76:	edd0 5a00 	vldr	s11, [r0]
 8001e7a:	edd4 7a00 	vldr	s15, [r4]
 8001e7e:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 8001e82:	ed95 5a00 	vldr	s10, [r5]
 8001e86:	4a48      	ldr	r2, [pc, #288]	; (8001fa8 <SDR_ComputeLO+0x15c>)
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001e88:	ee27 7a88 	vmul.f32	s14, s15, s16
 8001e8c:	3310      	adds	r3, #16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001e8e:	ee66 7a67 	vnmul.f32	s15, s12, s15
 8001e92:	3210      	adds	r2, #16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001e94:	eea5 7a06 	vfma.f32	s14, s10, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001e98:	eee5 7a08 	vfma.f32	s15, s10, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001e9c:	ee27 7a25 	vmul.f32	s14, s14, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001ea0:	ee67 6aa5 	vmul.f32	s13, s15, s11
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001ea4:	ee67 7a08 	vmul.f32	s15, s14, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001ea8:	ed02 7a08 	vstr	s14, [r2, #-32]	; 0xffffffe0
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001eac:	ee26 7a47 	vnmul.f32	s14, s12, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001eb0:	ed43 6a08 	vstr	s13, [r3, #-32]	; 0xffffffe0
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001eb4:	eee6 7a86 	vfma.f32	s15, s13, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001eb8:	eea6 7a88 	vfma.f32	s14, s13, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001ebc:	ee67 7aa5 	vmul.f32	s15, s15, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001ec0:	ee27 7a25 	vmul.f32	s14, s14, s11
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001ec4:	ee67 6a88 	vmul.f32	s13, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001ec8:	ed42 7a07 	vstr	s15, [r2, #-28]	; 0xffffffe4
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001ecc:	ee66 7a67 	vnmul.f32	s15, s12, s15
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001ed0:	ed03 7a07 	vstr	s14, [r3, #-28]	; 0xffffffe4
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001ed4:	eee7 6a06 	vfma.f32	s13, s14, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001ed8:	eee7 7a08 	vfma.f32	s15, s14, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001edc:	ee26 7aa5 	vmul.f32	s14, s13, s11
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001ee0:	ee67 7aa5 	vmul.f32	s15, s15, s11
    ym1i = tmpi;
		
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001ee4:	ee66 6a47 	vnmul.f32	s13, s12, s14
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001ee8:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001eec:	ee27 7a08 	vmul.f32	s14, s14, s16
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001ef0:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001ef4:	eee7 6a88 	vfma.f32	s13, s15, s16
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001ef8:	eea7 7a86 	vfma.f32	s14, s15, s12
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001efc:	ee25 5aa6 	vmul.f32	s10, s11, s13
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001f00:	ee65 7a87 	vmul.f32	s15, s11, s14
		ypi  = ym1i * costheta - ym1q * sintheta; *pBufR++ = tmpi = ypi * gain;
 8001f04:	ed03 5a05 	vstr	s10, [r3, #-20]	; 0xffffffec
	while(k)
 8001f08:	428b      	cmp	r3, r1
		ypq  = ym1i * sintheta + ym1q * costheta; *pBufI++ = ym1q = ypq * gain;  
 8001f0a:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
	while(k)
 8001f0e:	d1bb      	bne.n	8001e88 <SDR_ComputeLO+0x3c>
    ym1i = tmpi;

    k--;
	}
// compute the gain to be applied to stabilize the level
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8001f10:	ee67 5a07 	vmul.f32	s11, s14, s14
 8001f14:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8001fac <SDR_ComputeLO+0x160>
 8001f18:	edc4 7a00 	vstr	s15, [r4]
 8001f1c:	eddf 4a24 	vldr	s9, [pc, #144]	; 8001fb0 <SDR_ComputeLO+0x164>
 8001f20:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8001f24:	4a23      	ldr	r2, [pc, #140]	; (8001fb4 <SDR_ComputeLO+0x168>)
 8001f26:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <SDR_ComputeLO+0x16c>)
 8001f28:	ed85 5a00 	vstr	s10, [r5]
 8001f2c:	edc2 6a00 	vstr	s13, [r2]
 8001f30:	ed83 7a00 	vstr	s14, [r3]
 8001f34:	ee76 7a65 	vsub.f32	s15, s12, s11
}	
 8001f38:	ecbd 8b04 	vpop	{d8-d9}
  gain = (8192.5f - (ypi * ypi + ypq * ypq))/8192.f;
 8001f3c:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8001f40:	edc0 7a00 	vstr	s15, [r0]
}	
 8001f44:	bd38      	pop	{r3, r4, r5, pc}
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001f46:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8001fbc <SDR_ComputeLO+0x170>
 8001f4a:	4a1d      	ldr	r2, [pc, #116]	; (8001fc0 <SDR_ComputeLO+0x174>)
 8001f4c:	ee60 7a27 	vmul.f32	s15, s0, s15
	  oldfreq  =  freq;
 8001f50:	ed83 0a00 	vstr	s0, [r3]
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001f54:	ed92 7a00 	vldr	s14, [r2]
 8001f58:	ee87 9a87 	vdiv.f32	s18, s15, s14
 8001f5c:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 8001f60:	eeb0 0b49 	vmov.f64	d0, d9
 8001f64:	f00b f868 	bl	800d038 <cos>
 8001f68:	eeb7 8bc0 	vcvt.f32.f64	s16, d0
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <SDR_ComputeLO+0x144>)
    sintheta = -sin(TWOPI * freq / SamplingRate);
 8001f6e:	eeb0 0b49 	vmov.f64	d0, d9
		costheta =  cos(TWOPI * freq / SamplingRate);
 8001f72:	ed83 8a00 	vstr	s16, [r3]
    sintheta = -sin(TWOPI * freq / SamplingRate);
 8001f76:	f00b f89b 	bl	800d0b0 <sin>
 8001f7a:	eeb7 6bc0 	vcvt.f32.f64	s12, d0
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <SDR_ComputeLO+0x148>)
 8001f80:	eeb1 6a46 	vneg.f32	s12, s12
 8001f84:	ed83 6a00 	vstr	s12, [r3]
 8001f88:	e771      	b.n	8001e6e <SDR_ComputeLO+0x22>
 8001f8a:	bf00      	nop
 8001f8c:	240000e8 	.word	0x240000e8
 8001f90:	24000494 	.word	0x24000494
 8001f94:	240004a4 	.word	0x240004a4
 8001f98:	240000e4 	.word	0x240000e4
 8001f9c:	240004bc 	.word	0x240004bc
 8001fa0:	240000f4 	.word	0x240000f4
 8001fa4:	24003ae4 	.word	0x24003ae4
 8001fa8:	24004418 	.word	0x24004418
 8001fac:	46000200 	.word	0x46000200
 8001fb0:	39000000 	.word	0x39000000
 8001fb4:	240004c0 	.word	0x240004c0
 8001fb8:	240004c4 	.word	0x240004c4
 8001fbc:	40c90fdb 	.word	0x40c90fdb
 8001fc0:	24004300 	.word	0x24004300

08001fc4 <SDR_2R_toC_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time
  while(blkCnt)
 8001fc4:	089b      	lsrs	r3, r3, #2
 8001fc6:	d02e      	beq.n	8002026 <SDR_2R_toC_f32+0x62>
 8001fc8:	3010      	adds	r0, #16
 8001fca:	3110      	adds	r1, #16
 8001fcc:	3220      	adds	r2, #32
{
 8001fce:	b410      	push	{r4}
  {
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001fd0:	f850 4c10 	ldr.w	r4, [r0, #-16]
  while(blkCnt)
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	f100 0010 	add.w	r0, r0, #16
 8001fda:	f101 0110 	add.w	r1, r1, #16
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001fde:	f842 4c20 	str.w	r4, [r2, #-32]
 8001fe2:	f102 0220 	add.w	r2, r2, #32
 8001fe6:	f851 4c20 	ldr.w	r4, [r1, #-32]
 8001fea:	f842 4c3c 	str.w	r4, [r2, #-60]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001fee:	f850 4c1c 	ldr.w	r4, [r0, #-28]
 8001ff2:	f842 4c38 	str.w	r4, [r2, #-56]
 8001ff6:	f851 4c1c 	ldr.w	r4, [r1, #-28]
 8001ffa:	f842 4c34 	str.w	r4, [r2, #-52]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 8001ffe:	f850 4c18 	ldr.w	r4, [r0, #-24]
 8002002:	f842 4c30 	str.w	r4, [r2, #-48]
 8002006:	f851 4c18 	ldr.w	r4, [r1, #-24]
 800200a:	f842 4c2c 	str.w	r4, [r2, #-44]
    *pDst++ = *pSrcA++;  *pDst++ = *pSrcB++;
 800200e:	f850 4c14 	ldr.w	r4, [r0, #-20]
 8002012:	f842 4c28 	str.w	r4, [r2, #-40]
 8002016:	f851 4c14 	ldr.w	r4, [r1, #-20]
 800201a:	f842 4c24 	str.w	r4, [r2, #-36]
  while(blkCnt)
 800201e:	d1d7      	bne.n	8001fd0 <SDR_2R_toC_f32+0xc>
    
    blkCnt--;
  }
}
 8002020:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	4770      	bx	lr

08002028 <SDR_downconvert_f32>:
//---------------------------------------------------------------------------------------
// Multiply the real signal vector by the complex NCO vector producing the zeroIF
// complex vector, and at the same time convert to floating point also using
// the smoothed average ADC offset computed by the DMA2_Stream0_IRQHandler routine
void SDR_downconvert_f32(uint16_t* signal, float offset, float* zeroIF_R, float* zeroIF_I)
{
 8002028:	4b35      	ldr	r3, [pc, #212]	; (8002100 <SDR_downconvert_f32+0xd8>)
 800202a:	3110      	adds	r1, #16
 800202c:	3210      	adds	r2, #16
 800202e:	3008      	adds	r0, #8
		 tmp2=((*(pt)  -offset)) / 2048.f;
		 tmp3=((*(pt+3)-offset)) / 2048.f;
		 tmp4=((*(pt+2)-offset)) / 2048.f;
*/

     tmp2=((*(pt+1)-offset)) / 2048.f;
 8002030:	eddf 5a34 	vldr	s11, [pc, #208]	; 8002104 <SDR_downconvert_f32+0xdc>
{
 8002034:	b430      	push	{r4, r5}
 8002036:	f503 6500 	add.w	r5, r3, #2048	; 0x800
 800203a:	4c33      	ldr	r4, [pc, #204]	; (8002108 <SDR_downconvert_f32+0xe0>)
		 tmp1=((*(pt)  -offset)) / 2048.f;
 800203c:	f830 cc08 	ldrh.w	ip, [r0, #-8]
 8002040:	3310      	adds	r3, #16
		 tmp4=((*(pt+3)-offset)) / 2048.f;
		 tmp3=((*(pt+2)-offset)) / 2048.f;

    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8002042:	ed13 5a08 	vldr	s10, [r3, #-32]	; 0xffffffe0
 8002046:	3008      	adds	r0, #8
		 tmp1=((*(pt)  -offset)) / 2048.f;
 8002048:	ee06 ca10 	vmov	s12, ip
     tmp2=((*(pt+1)-offset)) / 2048.f;
 800204c:	f830 cc0e 	ldrh.w	ip, [r0, #-14]
 8002050:	3110      	adds	r1, #16
 8002052:	3410      	adds	r4, #16
		 tmp1=((*(pt)  -offset)) / 2048.f;
 8002054:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
     tmp2=((*(pt+1)-offset)) / 2048.f;
 8002058:	ee06 ca90 	vmov	s13, ip
		 tmp4=((*(pt+3)-offset)) / 2048.f;
 800205c:	f830 cc0a 	ldrh.w	ip, [r0, #-10]
 8002060:	3210      	adds	r2, #16
     tmp2=((*(pt+1)-offset)) / 2048.f;
 8002062:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		 tmp1=((*(pt)  -offset)) / 2048.f;
 8002066:	ee36 6a40 	vsub.f32	s12, s12, s0
		 tmp4=((*(pt+3)-offset)) / 2048.f;
 800206a:	ee07 ca90 	vmov	s15, ip
		 tmp3=((*(pt+2)-offset)) / 2048.f;
 800206e:	f830 cc0c 	ldrh.w	ip, [r0, #-12]
     tmp2=((*(pt+1)-offset)) / 2048.f;
 8002072:	ee76 6ac0 	vsub.f32	s13, s13, s0
		 tmp1=((*(pt)  -offset)) / 2048.f;
 8002076:	ee26 6a25 	vmul.f32	s12, s12, s11
		 tmp3=((*(pt+2)-offset)) / 2048.f;
 800207a:	ee07 ca10 	vmov	s14, ip
		 tmp4=((*(pt+3)-offset)) / 2048.f;
 800207e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     tmp2=((*(pt+1)-offset)) / 2048.f;
 8002082:	ee66 6aa5 	vmul.f32	s13, s13, s11
    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8002086:	ee25 5a06 	vmul.f32	s10, s10, s12
		 tmp3=((*(pt+2)-offset)) / 2048.f;
 800208a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		 tmp4=((*(pt+3)-offset)) / 2048.f;
 800208e:	ee77 7ac0 	vsub.f32	s15, s15, s0
    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 8002092:	ed01 5a08 	vstr	s10, [r1, #-32]	; 0xffffffe0
 8002096:	ed14 5a08 	vldr	s10, [r4, #-32]	; 0xffffffe0
		 tmp3=((*(pt+2)-offset)) / 2048.f;
 800209a:	ee37 7a40 	vsub.f32	s14, s14, s0
		 tmp4=((*(pt+3)-offset)) / 2048.f;
 800209e:	ee67 7aa5 	vmul.f32	s15, s15, s11
    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 80020a2:	ee25 6a06 	vmul.f32	s12, s10, s12
		 tmp3=((*(pt+2)-offset)) / 2048.f;
 80020a6:	ee27 7a25 	vmul.f32	s14, s14, s11
    *zeroIF_R++ = *LOR++ * tmp1;  *zeroIF_I++ = *LOI++ * tmp1;
 80020aa:	ed02 6a08 	vstr	s12, [r2, #-32]	; 0xffffffe0
		 *zeroIF_R++ = *LOR++ * tmp2;  *zeroIF_I++ = *LOI++ * tmp2;
 80020ae:	ed13 6a07 	vldr	s12, [r3, #-28]	; 0xffffffe4
 80020b2:	ee26 6a26 	vmul.f32	s12, s12, s13
 80020b6:	ed01 6a07 	vstr	s12, [r1, #-28]	; 0xffffffe4
 80020ba:	ed14 6a07 	vldr	s12, [r4, #-28]	; 0xffffffe4
 80020be:	ee66 6a26 	vmul.f32	s13, s12, s13
 80020c2:	ed42 6a07 	vstr	s13, [r2, #-28]	; 0xffffffe4
		 *zeroIF_R++ = *LOR++ * tmp3;  *zeroIF_I++ = *LOI++ * tmp3;
 80020c6:	ed53 6a06 	vldr	s13, [r3, #-24]	; 0xffffffe8
 80020ca:	ee66 6a87 	vmul.f32	s13, s13, s14
 80020ce:	ed41 6a06 	vstr	s13, [r1, #-24]	; 0xffffffe8
 80020d2:	ed54 6a06 	vldr	s13, [r4, #-24]	; 0xffffffe8
 80020d6:	ee26 7a87 	vmul.f32	s14, s13, s14
 80020da:	ed02 7a06 	vstr	s14, [r2, #-24]	; 0xffffffe8
		 *zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 80020de:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
  while(blkCnt)
 80020e2:	42ab      	cmp	r3, r5
		 *zeroIF_R++ = *LOR++ * tmp4;  *zeroIF_I++ = *LOI++ * tmp4;
 80020e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020e8:	ed01 7a05 	vstr	s14, [r1, #-20]	; 0xffffffec
 80020ec:	ed14 7a05 	vldr	s14, [r4, #-20]	; 0xffffffec
 80020f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f4:	ed42 7a05 	vstr	s15, [r2, #-20]	; 0xffffffec
  while(blkCnt)
 80020f8:	d1a0      	bne.n	800203c <SDR_downconvert_f32+0x14>
     pt += 4;
     blkCnt--;
	}	
}
 80020fa:	bc30      	pop	{r4, r5}
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	24003ae4 	.word	0x24003ae4
 8002104:	3a000000 	.word	0x3a000000
 8002108:	24004418 	.word	0x24004418

0800210c <SDR_float_to_DAC_audio>:
//---------------------------------------------------------------------------------------
// Convert back from floating point to short words, applying the volume setting
void SDR_float_to_DAC_audio(float *pSrc, short *pDst, uint16_t blockSize)
{
 800210c:	b470      	push	{r4, r5, r6}
  short *AudioBuffer;

  AudioBuffer = pDst;

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;   // loop unrolling.  Compute 4 outputs at a time
 800210e:	0894      	lsrs	r4, r2, #2
  while(blkCnt--)
 8002110:	2c00      	cmp	r4, #0
 8002112:	d04a      	beq.n	80021aa <SDR_float_to_DAC_audio+0x9e>
 8002114:	1e66      	subs	r6, r4, #1
  {
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002116:	4c30      	ldr	r4, [pc, #192]	; (80021d8 <SDR_float_to_DAC_audio+0xcc>)
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002118:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800211c:	b2b3      	uxth	r3, r6
 800211e:	f100 0620 	add.w	r6, r0, #32
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002122:	edd4 7a00 	vldr	s15, [r4]
 8002126:	3010      	adds	r0, #16
 8002128:	eb06 1603 	add.w	r6, r6, r3, lsl #4
 800212c:	460b      	mov	r3, r1
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800212e:	eeb0 5a47 	vmov.f32	s10, s14
 8002132:	ed10 6a02 	vldr	s12, [r0, #-8]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002136:	eef0 4a47 	vmov.f32	s9, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800213a:	ed50 6a04 	vldr	s13, [r0, #-16]
 800213e:	eef0 5a47 	vmov.f32	s11, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002142:	2500      	movs	r5, #0
 8002144:	eea7 5a86 	vfma.f32	s10, s15, s12
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002148:	ed10 6a01 	vldr	s12, [r0, #-4]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800214c:	462c      	mov	r4, r5
 800214e:	3010      	adds	r0, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002150:	eee7 4a86 	vfma.f32	s9, s15, s12
 8002154:	3308      	adds	r3, #8
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002156:	eee6 5aa7 	vfma.f32	s11, s13, s15
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800215a:	ed50 6a07 	vldr	s13, [r0, #-28]	; 0xffffffe4
  while(blkCnt--)
 800215e:	4286      	cmp	r6, r0
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002160:	eebe 5aea 	vcvt.s32.f32	s10, s10, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002164:	eeb0 6a64 	vmov.f32	s12, s9
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002168:	eef0 4a47 	vmov.f32	s9, s14
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800216c:	ee15 ca10 	vmov	ip, s10
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002170:	eefe 5aea 	vcvt.s32.f32	s11, s11, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002174:	eebe 6aea 	vcvt.s32.f32	s12, s12, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002178:	f36c 050f 	bfi	r5, ip, #0, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800217c:	eee7 4aa6 	vfma.f32	s9, s15, s13
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002180:	ee15 ca90 	vmov	ip, s11
 8002184:	f36c 040f 	bfi	r4, ip, #0, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002188:	ee16 ca10 	vmov	ip, s12
 800218c:	f36c 451f 	bfi	r5, ip, #16, #16
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002190:	eef0 6a64 	vmov.f32	s13, s9
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002194:	f843 5c04 	str.w	r5, [r3, #-4]
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 8002198:	eefe 6aea 	vcvt.s32.f32	s13, s13, #11
	  *pDst++ = (short)(2048.f + *pSrc++ * 2048.f * volume);
 800219c:	ee16 ca90 	vmov	ip, s13
 80021a0:	f36c 441f 	bfi	r4, ip, #16, #16
 80021a4:	f843 4c08 	str.w	r4, [r3, #-8]
  while(blkCnt--)
 80021a8:	d1c1      	bne.n	800212e <SDR_float_to_DAC_audio+0x22>
	}	

  // SCB_Clean because is from RAM to DMA. Invalidate is for DMA to RAM
#ifdef USE_DCACHE
  SCB_CleanDCache_by_Addr((uint32_t *) AudioBuffer, 4 * blockSize);
 80021aa:	0092      	lsls	r2, r2, #2
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80021ac:	f3bf 8f4f 	dsb	sy
    uint32_t op_addr = (uint32_t) addr;
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */

    __DSB();

    while (op_size > 0) {
 80021b0:	b15a      	cbz	r2, 80021ca <SDR_float_to_DAC_audio+0xbe>
 80021b2:	3a01      	subs	r2, #1
 80021b4:	f101 0320 	add.w	r3, r1, #32
      SCB->DCCMVAC = op_addr;
 80021b8:	4808      	ldr	r0, [pc, #32]	; (80021dc <SDR_float_to_DAC_audio+0xd0>)
 80021ba:	f022 021f 	bic.w	r2, r2, #31
 80021be:	4413      	add	r3, r2
 80021c0:	f8c0 1268 	str.w	r1, [r0, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 80021c4:	3120      	adds	r1, #32
    while (op_size > 0) {
 80021c6:	4299      	cmp	r1, r3
 80021c8:	d1fa      	bne.n	80021c0 <SDR_float_to_DAC_audio+0xb4>
 80021ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80021ce:	f3bf 8f6f 	isb	sy
#endif
return;
}	
 80021d2:	bc70      	pop	{r4, r5, r6}
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	240042d4 	.word	0x240042d4
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <SDR_memcpy_f32>:

// loop Unrolling
  blkCnt = blockSize >> 2u;

// Compute 4 outputs at a time.    
  while(blkCnt > 0u)
 80021e0:	0892      	lsrs	r2, r2, #2
 80021e2:	d017      	beq.n	8002214 <SDR_memcpy_f32+0x34>
 80021e4:	3110      	adds	r1, #16
 80021e6:	3010      	adds	r0, #16
  {
    /* Copy and then store the results in the destination buffer */
    in1 = *pSrc++;  *pDst++ = in1;
 80021e8:	f851 3c10 	ldr.w	r3, [r1, #-16]
  while(blkCnt > 0u)
 80021ec:	3a01      	subs	r2, #1
 80021ee:	f101 0110 	add.w	r1, r1, #16
 80021f2:	f100 0010 	add.w	r0, r0, #16
    in1 = *pSrc++;  *pDst++ = in1;
 80021f6:	f840 3c20 	str.w	r3, [r0, #-32]
    in2 = *pSrc++;  *pDst++ = in2;
 80021fa:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 80021fe:	f840 3c1c 	str.w	r3, [r0, #-28]
    in3 = *pSrc++;  *pDst++ = in3;
 8002202:	f851 3c18 	ldr.w	r3, [r1, #-24]
 8002206:	f840 3c18 	str.w	r3, [r0, #-24]
    in4 = *pSrc++;  *pDst++ = in4;
 800220a:	f851 3c14 	ldr.w	r3, [r1, #-20]
 800220e:	f840 3c14 	str.w	r3, [r0, #-20]
  while(blkCnt > 0u)
 8002212:	d1e9      	bne.n	80021e8 <SDR_memcpy_f32+0x8>
		
// Decrement the loop counter
    blkCnt--;
  }
}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop

08002218 <SDR_mirror_LSB>:
{
  uint32_t blkCnt;            /* loop counter */
  float *pbR, *pbI, *peR, *peI;
	
// loop Unrolling */
  blkCnt = blockSize >> 3u;  // divide by 8, as the mirroring stops at half the buffer...
 8002218:	08ca      	lsrs	r2, r1, #3
	blkCnt--;                  // minus 1, as the DC term is skipped

  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 800221a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000

//  Compute 4 outputs at a time.    
	while(blkCnt--)
 800221e:	2a01      	cmp	r2, #1
  pbR = buf+2;  pbI = buf+3; peR = buf + blockSize*2 - 2; peI = buf + blockSize*2 - 1;
 8002220:	440b      	add	r3, r1
	while(blkCnt--)
 8002222:	d037      	beq.n	8002294 <SDR_mirror_LSB+0x7c>
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	1e91      	subs	r1, r2, #2
{
 8002228:	b410      	push	{r4}
 800222a:	f1a3 0220 	sub.w	r2, r3, #32
 800222e:	f1a3 041c 	sub.w	r4, r3, #28
 8002232:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8002236:	4402      	add	r2, r0
 8002238:	4420      	add	r0, r4
	{
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 800223a:	6a14      	ldr	r4, [r2, #32]
	while(blkCnt--)
 800223c:	3901      	subs	r1, #1
 800223e:	3a20      	subs	r2, #32
 8002240:	3820      	subs	r0, #32
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002242:	f843 4c20 	str.w	r4, [r3, #-32]
 8002246:	3320      	adds	r3, #32
 8002248:	edd0 7a10 	vldr	s15, [r0, #64]	; 0x40
 800224c:	eef1 7a67 	vneg.f32	s15, s15
 8002250:	ed43 7a0f 	vstr	s15, [r3, #-60]	; 0xffffffc4
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002254:	6b94      	ldr	r4, [r2, #56]	; 0x38
 8002256:	f843 4c38 	str.w	r4, [r3, #-56]
 800225a:	edd0 7a0e 	vldr	s15, [r0, #56]	; 0x38
 800225e:	eef1 7a67 	vneg.f32	s15, s15
 8002262:	ed43 7a0d 	vstr	s15, [r3, #-52]	; 0xffffffcc
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002266:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8002268:	f843 4c30 	str.w	r4, [r3, #-48]
 800226c:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8002270:	eef1 7a67 	vneg.f32	s15, s15
 8002274:	ed43 7a0b 	vstr	s15, [r3, #-44]	; 0xffffffd4
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002278:	6a94      	ldr	r4, [r2, #40]	; 0x28
 800227a:	f843 4c28 	str.w	r4, [r3, #-40]
	while(blkCnt--)
 800227e:	1c4c      	adds	r4, r1, #1
     *pbR = *peR; *pbI = -*peI; pbR+=2; pbI+=2; peR-=2; peI-=2;
 8002280:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 8002284:	eef1 7a67 	vneg.f32	s15, s15
 8002288:	ed43 7a09 	vstr	s15, [r3, #-36]	; 0xffffffdc
	while(blkCnt--)
 800228c:	d1d5      	bne.n	800223a <SDR_mirror_LSB+0x22>
	}
}
 800228e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop

08002298 <SDR_compute_IIR_parms>:
// ------------------------------------------------------
// Compute the parameters for the double IIR filter used for the narrow CW mode
void SDR_compute_IIR_parms(void)
{
 8002298:	b508      	push	{r3, lr}

   r = Qfactor;

   a1 = a2 = b0 = 0.f; 
   r2 = r*r;
   wr = 2.f * cwpitch / rate * myPI;
 800229a:	4a2b      	ldr	r2, [pc, #172]	; (8002348 <SDR_compute_IIR_parms+0xb0>)
	 float rate = SamplingRate/256; //SamplingRate / decimation
 800229c:	4b2b      	ldr	r3, [pc, #172]	; (800234c <SDR_compute_IIR_parms+0xb4>)
   wr = 2.f * cwpitch / rate * myPI;
 800229e:	edd2 7a00 	vldr	s15, [r2]
	 float rate = SamplingRate/256; //SamplingRate / decimation
 80022a2:	ed93 7a00 	vldr	s14, [r3]
 80022a6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8002350 <SDR_compute_IIR_parms+0xb8>
   wr = 2.f * cwpitch / rate * myPI;
 80022aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
   r = Qfactor;
 80022ae:	4b29      	ldr	r3, [pc, #164]	; (8002354 <SDR_compute_IIR_parms+0xbc>)
	 float rate = SamplingRate/256; //SamplingRate / decimation
 80022b0:	ee27 7a26 	vmul.f32	s14, s14, s13
   wr = 2.f * cwpitch / rate * myPI;
 80022b4:	eddf 6a28 	vldr	s13, [pc, #160]	; 8002358 <SDR_compute_IIR_parms+0xc0>
{
 80022b8:	ed2d 8b06 	vpush	{d8-d10}
   wr = 2.f * cwpitch / rate * myPI;
 80022bc:	eec7 8a87 	vdiv.f32	s17, s15, s14
   r = Qfactor;
 80022c0:	edd3 9a00 	vldr	s19, [r3]
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 80022c4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   r2 = r*r;
 80022c8:	ee69 aaa9 	vmul.f32	s21, s19, s19
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 80022cc:	ee39 aaa9 	vadd.f32	s20, s19, s19
 80022d0:	ee3a 9a88 	vadd.f32	s18, s21, s16
										                         // (see the Proakis & Manolakis book)
   a1 = -2.f * r * cosw0;
   a2 = r2;
// b0 is normalized for gain ~ 2dB on all the band
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 80022d4:	ee38 8a69 	vsub.f32	s16, s16, s19
   wr = 2.f * cwpitch / rate * myPI;
 80022d8:	ee68 8aa6 	vmul.f32	s17, s17, s13
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 80022dc:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 80022e0:	f00a feaa 	bl	800d038 <cos>
 80022e4:	ee8a 6a09 	vdiv.f32	s12, s20, s18
   a1 = -2.f * r * cosw0;
 80022e8:	4b1c      	ldr	r3, [pc, #112]	; (800235c <SDR_compute_IIR_parms+0xc4>)
   a2 = r2;
 80022ea:	4a1d      	ldr	r2, [pc, #116]	; (8002360 <SDR_compute_IIR_parms+0xc8>)
 80022ec:	edc2 aa00 	vstr	s21, [r2]
   a1 = -2.f * r * cosw0;
 80022f0:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 80022f4:	ee78 8aa8 	vadd.f32	s17, s17, s17
 80022f8:	eeb7 aaca 	vcvt.f64.f32	d10, s20
   a1 = -2.f * r * cosw0;
 80022fc:	ee69 7aa7 	vmul.f32	s15, s19, s15
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 8002300:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8002304:	ee26 6b00 	vmul.f64	d6, d6, d0
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002308:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
   cosw0 = (2.f * r / (1.f + r2)) * cos(wr); // resonance frequency correction
 800230c:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
   a1 = -2.f * r * cosw0;
 8002310:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002314:	ed83 6a00 	vstr	s12, [r3]
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002318:	f00a fe8e 	bl	800d038 <cos>
 800231c:	eeb7 6ac9 	vcvt.f64.f32	d6, s18
 8002320:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002364 <SDR_compute_IIR_parms+0xcc>
 8002324:	4b10      	ldr	r3, [pc, #64]	; (8002368 <SDR_compute_IIR_parms+0xd0>)
 8002326:	ee28 7a07 	vmul.f32	s14, s16, s14
 800232a:	eeaa 6b40 	vfms.f64	d6, d10, d0
 800232e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
}
 8002332:	ecbd 8b06 	vpop	{d8-d10}
   b0 = 1.2f * (1.f - r) * sqrt(1.f + r2 - 2.f * r * cos(2.f*wr));
 8002336:	eeb1 5bc6 	vsqrt.f64	d5, d6
 800233a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800233e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 8002342:	ed83 7a00 	vstr	s14, [r3]
}
 8002346:	bd08      	pop	{r3, pc}
 8002348:	24009cd4 	.word	0x24009cd4
 800234c:	24004300 	.word	0x24004300
 8002350:	3b800000 	.word	0x3b800000
 8002354:	24008cc4 	.word	0x24008cc4
 8002358:	40490fdb 	.word	0x40490fdb
 800235c:	240042d8 	.word	0x240042d8
 8002360:	24008cc0 	.word	0x24008cc0
 8002364:	3f99999a 	.word	0x3f99999a
 8002368:	2400c1e8 	.word	0x2400c1e8

0800236c <SDR_CWPeak>:
// Double IIR resonator with two poles at wr e -wr. Used for the narrow CW mode
void SDR_CWPeak(float *buf, uint32_t blockSize)
{
   static float y1a=0.f, y2a=0.f, y1b=0.f, y2b=0.f;
	 register float x0, y0;
   uint32_t blkCnt = blockSize >> 2u;       /* loop counter */
 800236c:	0889      	lsrs	r1, r1, #2
	
// Compute 4 outputs at a time, loop unrolled for performance     
	 while(blkCnt--)
 800236e:	2900      	cmp	r1, #0
 8002370:	d076      	beq.n	8002460 <SDR_CWPeak+0xf4>
 8002372:	1e4b      	subs	r3, r1, #1
 8002374:	f8df c104 	ldr.w	ip, [pc, #260]	; 800247c <SDR_CWPeak+0x110>
 8002378:	493a      	ldr	r1, [pc, #232]	; (8002464 <SDR_CWPeak+0xf8>)
 800237a:	3010      	adds	r0, #16
 800237c:	4a3a      	ldr	r2, [pc, #232]	; (8002468 <SDR_CWPeak+0xfc>)
 800237e:	eddc 4a00 	vldr	s9, [ip]
 8002382:	edd1 2a00 	vldr	s5, [r1]
 8002386:	edd2 5a00 	vldr	s11, [r2]
{
 800238a:	b4f0      	push	{r4, r5, r6, r7}
 800238c:	4c37      	ldr	r4, [pc, #220]	; (800246c <SDR_CWPeak+0x100>)
 800238e:	4f38      	ldr	r7, [pc, #224]	; (8002470 <SDR_CWPeak+0x104>)
 8002390:	edd4 7a00 	vldr	s15, [r4]
 8002394:	4d37      	ldr	r5, [pc, #220]	; (8002474 <SDR_CWPeak+0x108>)
 8002396:	4e38      	ldr	r6, [pc, #224]	; (8002478 <SDR_CWPeak+0x10c>)
 8002398:	eef1 7a67 	vneg.f32	s15, s15
 800239c:	ed97 7a00 	vldr	s14, [r7]
 80023a0:	edd5 6a00 	vldr	s13, [r5]
 80023a4:	ed96 5a00 	vldr	s10, [r6]
   {  
		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80023a8:	ee62 3ac7 	vnmul.f32	s7, s5, s14
 80023ac:	ed10 7a04 	vldr	s14, [r0, #-16]
	   y2a = y1a;
	   y1a = y0;
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80023b0:	ee22 4ae6 	vnmul.f32	s8, s5, s13
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80023b4:	ed10 6a03 	vldr	s12, [r0, #-12]
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80023b8:	ed50 6a02 	vldr	s13, [r0, #-8]
	 while(blkCnt--)
 80023bc:	3b01      	subs	r3, #1
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80023be:	eee7 3aa4 	vfma.f32	s7, s15, s9
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;

		 x0 = *buf;
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80023c2:	ed10 2a01 	vldr	s4, [r0, #-4]
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80023c6:	eea7 4a85 	vfma.f32	s8, s15, s10
	 while(blkCnt--)
 80023ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ce:	f100 0010 	add.w	r0, r0, #16
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80023d2:	eee7 3a25 	vfma.f32	s7, s14, s11
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 80023d6:	eea3 4aa5 	vfma.f32	s8, s7, s11
	   *buf++ = y0;
 80023da:	ed00 4a08 	vstr	s8, [r0, #-32]	; 0xffffffe0
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80023de:	edd2 5a00 	vldr	s11, [r2]
 80023e2:	edd1 2a00 	vldr	s5, [r1]
 80023e6:	ee25 6a86 	vmul.f32	s12, s11, s12
 80023ea:	edd4 7a00 	vldr	s15, [r4]
 80023ee:	eeb1 3a62 	vneg.f32	s6, s5
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80023f2:	ee25 7aa6 	vmul.f32	s14, s11, s13
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 80023f6:	eef0 6a46 	vmov.f32	s13, s12
 80023fa:	eef1 7a67 	vneg.f32	s15, s15
 80023fe:	eea3 7a23 	vfma.f32	s14, s6, s7
 8002402:	eee3 6a24 	vfma.f32	s13, s6, s9
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002406:	ee65 4a82 	vmul.f32	s9, s11, s4
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 800240a:	eee7 6aa3 	vfma.f32	s13, s15, s7
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800240e:	ee25 6aa6 	vmul.f32	s12, s11, s13
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002412:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8002416:	eee3 4a26 	vfma.f32	s9, s6, s13
 800241a:	eea7 6a84 	vfma.f32	s12, s15, s8
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800241e:	ee65 6a87 	vmul.f32	s13, s11, s14
	   y0 = -a1 * y1a - a2 * y2a + b0 * x0;
 8002422:	eee7 4a87 	vfma.f32	s9, s15, s14
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002426:	eea3 6a05 	vfma.f32	s12, s6, s10
 800242a:	eee3 6a04 	vfma.f32	s13, s6, s8
	   y2a = y1a;
	   y1a = y0;
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 800242e:	ee25 5aa4 	vmul.f32	s10, s11, s9
	   *buf++ = y0;
 8002432:	ed00 6a07 	vstr	s12, [r0, #-28]	; 0xffffffe4
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002436:	eee7 6a86 	vfma.f32	s13, s15, s12
 800243a:	eea3 5a06 	vfma.f32	s10, s6, s12
	   *buf++ = y0;
 800243e:	ed40 6a06 	vstr	s13, [r0, #-24]	; 0xffffffe8
	   y0 = -a1 * y1b - a2 * y2b + b0 * y0;
 8002442:	eea7 5aa6 	vfma.f32	s10, s15, s13
	   y2b = y1b;
	   y1b = y0;
	   *buf++ = y0;
 8002446:	ed00 5a05 	vstr	s10, [r0, #-20]	; 0xffffffec
	 while(blkCnt--)
 800244a:	d1ad      	bne.n	80023a8 <SDR_CWPeak+0x3c>
 800244c:	ed87 7a00 	vstr	s14, [r7]
 8002450:	ed86 5a00 	vstr	s10, [r6]
 8002454:	edc5 6a00 	vstr	s13, [r5]
 8002458:	edcc 4a00 	vstr	s9, [ip]
   }
}
 800245c:	bcf0      	pop	{r4, r5, r6, r7}
 800245e:	4770      	bx	lr
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	24008cc0 	.word	0x24008cc0
 8002468:	2400c1e8 	.word	0x2400c1e8
 800246c:	240042d8 	.word	0x240042d8
 8002470:	240004b4 	.word	0x240004b4
 8002474:	240004b8 	.word	0x240004b8
 8002478:	240004b0 	.word	0x240004b0
 800247c:	240004ac 	.word	0x240004ac

08002480 <SDR_demodAM_AGC>:
// ------------------------------------------------------
// AM demodulation with AGC
void SDR_demodAM_AGC(float32_t * tmpSamp, float32_t * fAudio)
{
 8002480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	  arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod

	  if(pk < audiotmp)
	  {
			pk = audiotmp;
		  hangcnt = Hcount[AM]; 
 8002484:	4b32      	ldr	r3, [pc, #200]	; (8002550 <SDR_demodAM_AGC+0xd0>)
{
 8002486:	b082      	sub	sp, #8
 8002488:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 800256c <SDR_demodAM_AGC+0xec>
 800248c:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
 8002490:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8002570 <SDR_demodAM_AGC+0xf0>
 8002494:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 8002574 <SDR_demodAM_AGC+0xf4>
		  hangcnt = Hcount[AM]; 
 8002498:	881f      	ldrh	r7, [r3, #0]
 800249a:	ed98 7a00 	vldr	s14, [r8]
 800249e:	f8dc 3000 	ldr.w	r3, [ip]
 80024a2:	ed9e 6a00 	vldr	s12, [lr]
 80024a6:	4c2b      	ldr	r4, [pc, #172]	; (8002554 <SDR_demodAM_AGC+0xd4>)
 80024a8:	4a2b      	ldr	r2, [pc, #172]	; (8002558 <SDR_demodAM_AGC+0xd8>)

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 80024aa:	eddf 4a2c 	vldr	s9, [pc, #176]	; 800255c <SDR_demodAM_AGC+0xdc>
	  }

    audiotmp /= max(pk, AgcThreshold);  
		
	  if(hangcnt == 0)
		  pk  *= Decay[AM];
 80024ae:	4e2c      	ldr	r6, [pc, #176]	; (8002560 <SDR_demodAM_AGC+0xe0>)
		
// DC removal filter -----------------------
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80024b0:	ed9f 5a2c 	vldr	s10, [pc, #176]	; 8002564 <SDR_demodAM_AGC+0xe4>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80024b4:	edd0 7a01 	vldr	s15, [r0, #4]
 80024b8:	3008      	adds	r0, #8
 80024ba:	ed50 6a02 	vldr	s13, [r0, #-8]
 80024be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80024c2:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80024c6:	edcd 7a01 	vstr	s15, [sp, #4]
	  arm_sqrt_f32(tmp, &audiotmp);      // implement also the AM demod
 80024ca:	eddd 7a01 	vldr	s15, [sp, #4]
    if (in >= 0.0f)
 80024ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      *pOut = __builtin_sqrtf(in);
 80024d6:	bfa8      	it	ge
 80024d8:	eef1 6ae7 	vsqrtge.f32	s13, s15
    audiotmp /= max(pk, AgcThreshold);  
 80024dc:	edd4 7a00 	vldr	s15, [r4]
      *pOut = 0.0f;
 80024e0:	bfb8      	it	lt
 80024e2:	eef0 6a64 	vmovlt.f32	s13, s9
	  if(pk < audiotmp)
 80024e6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80024ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ee:	d502      	bpl.n	80024f6 <SDR_demodAM_AGC+0x76>
 80024f0:	eeb0 7a66 	vmov.f32	s14, s13
		  hangcnt = Hcount[AM]; 
 80024f4:	463b      	mov	r3, r7
    audiotmp /= max(pk, AgcThreshold);  
 80024f6:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 80024fa:	eec6 5aa7 	vdiv.f32	s11, s13, s15
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 80024fe:	eef0 7a65 	vmov.f32	s15, s11
    audiotmp /= max(pk, AgcThreshold);  
 8002502:	edc2 5a00 	vstr	s11, [r2]
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8002506:	eee6 7a05 	vfma.f32	s15, s12, s10
	  if(hangcnt == 0)
 800250a:	b91b      	cbnz	r3, 8002514 <SDR_demodAM_AGC+0x94>
		  pk  *= Decay[AM];
 800250c:	edd6 6a00 	vldr	s13, [r6]
 8002510:	ee27 7a26 	vmul.f32	s14, s14, s13
	  w = audiotmp + wold * 0.96f; // increasing this constant gives more bass response...
 8002514:	edcd 7a00 	vstr	s15, [sp]
	for(k=j=0; k<BSIZE*2; k+=2)
 8002518:	4285      	cmp	r5, r0
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 800251a:	eddd 7a00 	vldr	s15, [sp]
 800251e:	ee77 7ac6 	vsub.f32	s15, s15, s12
	  wold = w;
 8002522:	ed9d 6a00 	vldr	s12, [sp]
	  fAudio[j++] = w - wold;      // .... but keep it ALWAYS less than 1 ....  !
 8002526:	ece1 7a01 	vstmia	r1!, {s15}
	for(k=j=0; k<BSIZE*2; k+=2)
 800252a:	d1c3      	bne.n	80024b4 <SDR_demodAM_AGC+0x34>
// -----------------------------------------
	}
    PeakAudioValue=pk;
 800252c:	4a0e      	ldr	r2, [pc, #56]	; (8002568 <SDR_demodAM_AGC+0xe8>)
	if(hangcnt > 0)  hangcnt--;
 800252e:	2b00      	cmp	r3, #0
 8002530:	ed88 7a00 	vstr	s14, [r8]
 8002534:	f8cc 3000 	str.w	r3, [ip]
 8002538:	ed8e 6a00 	vstr	s12, [lr]
    PeakAudioValue=pk;
 800253c:	ed82 7a00 	vstr	s14, [r2]
	if(hangcnt > 0)  hangcnt--;
 8002540:	dd02      	ble.n	8002548 <SDR_demodAM_AGC+0xc8>
 8002542:	3b01      	subs	r3, #1
 8002544:	f8cc 3000 	str.w	r3, [ip]
}
 8002548:	b002      	add	sp, #8
 800254a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800254e:	bf00      	nop
 8002550:	24007e90 	.word	0x24007e90
 8002554:	24009cd0 	.word	0x24009cd0
 8002558:	24000914 	.word	0x24000914
 800255c:	00000000 	.word	0x00000000
 8002560:	24002918 	.word	0x24002918
 8002564:	3f75c28f 	.word	0x3f75c28f
 8002568:	24008718 	.word	0x24008718
 800256c:	240000ec 	.word	0x240000ec
 8002570:	24000498 	.word	0x24000498
 8002574:	240004a8 	.word	0x240004a8

08002578 <SDR_demodSSB_CW_AGC>:
	  arm_sqrt_f32(tmp, &sav);  

	  if(pk < sav)
	  {
			pk = sav;
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 8002578:	4a4a      	ldr	r2, [pc, #296]	; (80026a4 <SDR_demodSSB_CW_AGC+0x12c>)
      else
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 800257a:	4b4b      	ldr	r3, [pc, #300]	; (80026a8 <SDR_demodSSB_CW_AGC+0x130>)
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 800257c:	7812      	ldrb	r2, [r2, #0]
 800257e:	f8b3 c006 	ldrh.w	ip, [r3, #6]
 8002582:	2a01      	cmp	r2, #1
{
 8002584:	b4f0      	push	{r4, r5, r6, r7}
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8002586:	885c      	ldrh	r4, [r3, #2]
 8002588:	4e48      	ldr	r6, [pc, #288]	; (80026ac <SDR_demodSSB_CW_AGC+0x134>)
 800258a:	4f49      	ldr	r7, [pc, #292]	; (80026b0 <SDR_demodSSB_CW_AGC+0x138>)
 800258c:	889d      	ldrh	r5, [r3, #4]
 800258e:	bf08      	it	eq
 8002590:	4625      	moveq	r5, r4
 8002592:	6833      	ldr	r3, [r6, #0]
 8002594:	ed97 7a00 	vldr	s14, [r7]
 8002598:	d05b      	beq.n	8002652 <SDR_demodSSB_CW_AGC+0xda>
 800259a:	2a03      	cmp	r2, #3
 800259c:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 80025a0:	4a44      	ldr	r2, [pc, #272]	; (80026b4 <SDR_demodSSB_CW_AGC+0x13c>)
 80025a2:	d032      	beq.n	800260a <SDR_demodSSB_CW_AGC+0x92>
		
	  if(hangcnt == 0)
    {  
      if(CurrentMode == CW) pk  *= Decay[CW];
      else
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 80025a4:	f8df c118 	ldr.w	ip, [pc, #280]	; 80026c0 <SDR_demodSSB_CW_AGC+0x148>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 80025a8:	edd0 7a01 	vldr	s15, [r0, #4]
 80025ac:	3008      	adds	r0, #8
 80025ae:	ed10 6a02 	vldr	s12, [r0, #-8]
 80025b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80025b6:	eee6 7a06 	vfma.f32	s15, s12, s12
      *pOut = __builtin_sqrtf(in);
 80025ba:	eef1 6ae7 	vsqrt.f32	s13, s15
	  if(pk < sav)
 80025be:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80025c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c6:	d502      	bpl.n	80025ce <SDR_demodSSB_CW_AGC+0x56>
 80025c8:	eeb0 7a66 	vmov.f32	s14, s13
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 80025cc:	462b      	mov	r3, r5
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 80025ce:	edd2 7a00 	vldr	s15, [r2]
 80025d2:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 80025d6:	eec6 5a27 	vdiv.f32	s11, s12, s15
 80025da:	ece1 5a01 	vstmia	r1!, {s11}
	  if(hangcnt == 0)
 80025de:	b91b      	cbnz	r3, 80025e8 <SDR_demodSSB_CW_AGC+0x70>
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 80025e0:	eddc 7a02 	vldr	s15, [ip, #8]
 80025e4:	ee27 7a27 	vmul.f32	s14, s14, s15
	for(k=j=0; k<BSIZE*2; k+=2)
 80025e8:	4284      	cmp	r4, r0
 80025ea:	d1dd      	bne.n	80025a8 <SDR_demodSSB_CW_AGC+0x30>
 80025ec:	4932      	ldr	r1, [pc, #200]	; (80026b8 <SDR_demodSSB_CW_AGC+0x140>)
    }  
	}
	PeakAudioValue=pk;
	if(hangcnt > 0)  hangcnt--;
 80025ee:	2b00      	cmp	r3, #0
	PeakAudioValue=pk;
 80025f0:	4a32      	ldr	r2, [pc, #200]	; (80026bc <SDR_demodSSB_CW_AGC+0x144>)
 80025f2:	ed87 7a00 	vstr	s14, [r7]
 80025f6:	6033      	str	r3, [r6, #0]
 80025f8:	edc1 6a00 	vstr	s13, [r1]
 80025fc:	ed82 7a00 	vstr	s14, [r2]
	if(hangcnt > 0)  hangcnt--;
 8002600:	dd01      	ble.n	8002606 <SDR_demodSSB_CW_AGC+0x8e>
 8002602:	3b01      	subs	r3, #1
 8002604:	6033      	str	r3, [r6, #0]
}
 8002606:	bcf0      	pop	{r4, r5, r6, r7}
 8002608:	4770      	bx	lr
      if(CurrentMode == CW) pk  *= Decay[CW];
 800260a:	4d2d      	ldr	r5, [pc, #180]	; (80026c0 <SDR_demodSSB_CW_AGC+0x148>)
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 800260c:	edd0 7a01 	vldr	s15, [r0, #4]
 8002610:	3008      	adds	r0, #8
 8002612:	ed10 6a02 	vldr	s12, [r0, #-8]
 8002616:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800261a:	eee6 7a06 	vfma.f32	s15, s12, s12
 800261e:	eef1 6ae7 	vsqrt.f32	s13, s15
	  if(pk < sav)
 8002622:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800262a:	d502      	bpl.n	8002632 <SDR_demodSSB_CW_AGC+0xba>
 800262c:	eeb0 7a66 	vmov.f32	s14, s13
      if(CurrentMode == CW) hangcnt = Hcount[CW];
 8002630:	4663      	mov	r3, ip
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 8002632:	edd2 7a00 	vldr	s15, [r2]
 8002636:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 800263a:	eec6 5a27 	vdiv.f32	s11, s12, s15
 800263e:	ece1 5a01 	vstmia	r1!, {s11}
	  if(hangcnt == 0)
 8002642:	b91b      	cbnz	r3, 800264c <SDR_demodSSB_CW_AGC+0xd4>
      if(CurrentMode == CW) pk  *= Decay[CW];
 8002644:	edd5 7a03 	vldr	s15, [r5, #12]
 8002648:	ee27 7a27 	vmul.f32	s14, s14, s15
	for(k=j=0; k<BSIZE*2; k+=2)
 800264c:	4284      	cmp	r4, r0
 800264e:	d1dd      	bne.n	800260c <SDR_demodSSB_CW_AGC+0x94>
 8002650:	e7cc      	b.n	80025ec <SDR_demodSSB_CW_AGC+0x74>
 8002652:	4a18      	ldr	r2, [pc, #96]	; (80026b4 <SDR_demodSSB_CW_AGC+0x13c>)
 8002654:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8002658:	f8df c064 	ldr.w	ip, [pc, #100]	; 80026c0 <SDR_demodSSB_CW_AGC+0x148>
	  tmp = tmpSamp[k]*tmpSamp[k] + tmpSamp[k+1]*tmpSamp[k+1];
 800265c:	edd0 7a01 	vldr	s15, [r0, #4]
 8002660:	3008      	adds	r0, #8
 8002662:	ed10 6a02 	vldr	s12, [r0, #-8]
 8002666:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800266a:	eee6 7a06 	vfma.f32	s15, s12, s12
 800266e:	eef1 6ae7 	vsqrt.f32	s13, s15
	  if(pk < sav)
 8002672:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267a:	d502      	bpl.n	8002682 <SDR_demodSSB_CW_AGC+0x10a>
 800267c:	eeb0 7a66 	vmov.f32	s14, s13
        hangcnt = (CurrentMode == LSB) ? Hcount[LSB] : Hcount[USB];
 8002680:	462b      	mov	r3, r5
    fAudio[j++] = tmpSamp[k] / max(pk, AgcThreshold);  
 8002682:	edd2 7a00 	vldr	s15, [r2]
 8002686:	fec7 7a27 	vmaxnm.f32	s15, s14, s15
 800268a:	eec6 5a27 	vdiv.f32	s11, s12, s15
 800268e:	ece1 5a01 	vstmia	r1!, {s11}
	  if(hangcnt == 0)
 8002692:	b91b      	cbnz	r3, 800269c <SDR_demodSSB_CW_AGC+0x124>
		    pk  *= (CurrentMode == LSB) ? Decay[LSB] : Decay[USB];
 8002694:	eddc 7a01 	vldr	s15, [ip, #4]
 8002698:	ee27 7a27 	vmul.f32	s14, s14, s15
	for(k=j=0; k<BSIZE*2; k+=2)
 800269c:	42a0      	cmp	r0, r4
 800269e:	d1dd      	bne.n	800265c <SDR_demodSSB_CW_AGC+0xe4>
 80026a0:	e7a4      	b.n	80025ec <SDR_demodSSB_CW_AGC+0x74>
 80026a2:	bf00      	nop
 80026a4:	2400c1fc 	.word	0x2400c1fc
 80026a8:	24007e90 	.word	0x24007e90
 80026ac:	2400049c 	.word	0x2400049c
 80026b0:	240000f0 	.word	0x240000f0
 80026b4:	24009cd0 	.word	0x24009cd0
 80026b8:	240004a0 	.word	0x240004a0
 80026bc:	24008718 	.word	0x24008718
 80026c0:	24002918 	.word	0x24002918

080026c4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode
  * @param  AdcHandle : ADC handle

  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 80026c4:	b508      	push	{r3, lr}
    uint32_t op_addr = (uint32_t)addr;
 80026c6:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_ADC_ConvCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 80026c8:	f3bf 8f4f 	dsb	sy
      SCB->DCIMVAC = op_addr;
 80026cc:	490a      	ldr	r1, [pc, #40]	; (80026f8 <HAL_ADC_ConvCpltCallback+0x34>)
 80026ce:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 80026d2:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80026d6:	3320      	adds	r3, #32
    while (op_size > 0) {
 80026d8:	4293      	cmp	r3, r2
 80026da:	d1fa      	bne.n	80026d2 <HAL_ADC_ConvCpltCallback+0xe>
 80026dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80026e0:	f3bf 8f6f 	isb	sy
  /* Invalidate Data Cache to get the updated content of the SRAM on the second half of the ADC converted data buffer: 32 bytes */
#ifdef USE_DCACHE
	 SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[BSIZE/2], 4*BSIZE/2);
#endif
	 ADC_Stream0_Handler(1);
 80026e4:	2001      	movs	r0, #1
 80026e6:	f7fe ff89 	bl	80015fc <ADC_Stream0_Handler>
  /* Set variable to report DMA transfer status to main program */
  ubADCDualConversionComplete = SET;
 80026ea:	4b04      	ldr	r3, [pc, #16]	; (80026fc <HAL_ADC_ConvCpltCallback+0x38>)
 80026ec:	2201      	movs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]
}
 80026f0:	bd08      	pop	{r3, pc}
 80026f2:	bf00      	nop
 80026f4:	2400ce00 	.word	0x2400ce00
 80026f8:	e000ed00 	.word	0xe000ed00
 80026fc:	240004e9 	.word	0x240004e9

08002700 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode
  * @param  hadc: ADC handle
  * */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002700:	b508      	push	{r3, lr}
    uint32_t op_addr = (uint32_t)addr;
 8002702:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_ADC_ConvHalfCpltCallback+0x30>)
  __ASM volatile ("dsb 0xF":::"memory");
 8002704:	f3bf 8f4f 	dsb	sy
      SCB->DCIMVAC = op_addr;
 8002708:	490a      	ldr	r1, [pc, #40]	; (8002734 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 800270a:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 800270e:	f8c1 325c 	str.w	r3, [r1, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8002712:	3320      	adds	r3, #32
    while (op_size > 0) {
 8002714:	4293      	cmp	r3, r2
 8002716:	d1fa      	bne.n	800270e <HAL_ADC_ConvHalfCpltCallback+0xe>
 8002718:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800271c:	f3bf 8f6f 	isb	sy
  /* Invalidate Data Cache to get the updated content of the SRAM on the first half of the ADC converted data buffer: 32 bytes */
#ifdef USE_DCACHE
	SCB_InvalidateDCache_by_Addr((uint32_t *) &aADCDualConvertedValues[0], 4*BSIZE/2);
#endif
	ADC_Stream0_Handler(0);
 8002720:	2000      	movs	r0, #0
 8002722:	f7fe ff6b 	bl	80015fc <ADC_Stream0_Handler>
  /* Reset variable to report DMA transfer status to main program */
  ubADCDualConversionComplete = RESET;
 8002726:	4b04      	ldr	r3, [pc, #16]	; (8002738 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
}
 800272c:	bd08      	pop	{r3, pc}
 800272e:	bf00      	nop
 8002730:	2400ca00 	.word	0x2400ca00
 8002734:	e000ed00 	.word	0xe000ed00
 8002738:	240004e9 	.word	0x240004e9

0800273c <HAL_DACEx_ConvCpltCallbackCh2>:

void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800273c:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[BSIZE];
 800273e:	4b05      	ldr	r3, [pc, #20]	; (8002754 <HAL_DACEx_ConvCpltCallbackCh2+0x18>)
	 LED_RED_ON;
 8002740:	2201      	movs	r2, #1
	ValidAudioHalf = &AudioOut[BSIZE];
 8002742:	4c05      	ldr	r4, [pc, #20]	; (8002758 <HAL_DACEx_ConvCpltCallbackCh2+0x1c>)
	 LED_RED_ON;
 8002744:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002748:	4804      	ldr	r0, [pc, #16]	; (800275c <HAL_DACEx_ConvCpltCallbackCh2+0x20>)
	ValidAudioHalf = &AudioOut[BSIZE];
 800274a:	601c      	str	r4, [r3, #0]
}
 800274c:	f85d 4b04 	ldr.w	r4, [sp], #4
	 LED_RED_ON;
 8002750:	f003 bb0a 	b.w	8005d68 <HAL_GPIO_WritePin>
 8002754:	24004304 	.word	0x24004304
 8002758:	24007120 	.word	0x24007120
 800275c:	58020400 	.word	0x58020400

08002760 <HAL_DACEx_ConvHalfCpltCallbackCh2>:

void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002760:	b410      	push	{r4}
	ValidAudioHalf = &AudioOut[0];
 8002762:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_DACEx_ConvHalfCpltCallbackCh2+0x18>)
	LED_RED_OFF;
 8002764:	2200      	movs	r2, #0
	ValidAudioHalf = &AudioOut[0];
 8002766:	4c05      	ldr	r4, [pc, #20]	; (800277c <HAL_DACEx_ConvHalfCpltCallbackCh2+0x1c>)
	LED_RED_OFF;
 8002768:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800276c:	4804      	ldr	r0, [pc, #16]	; (8002780 <HAL_DACEx_ConvHalfCpltCallbackCh2+0x20>)
	ValidAudioHalf = &AudioOut[0];
 800276e:	601c      	str	r4, [r3, #0]
}
 8002770:	f85d 4b04 	ldr.w	r4, [sp], #4
	LED_RED_OFF;
 8002774:	f003 baf8 	b.w	8005d68 <HAL_GPIO_WritePin>
 8002778:	24004304 	.word	0x24004304
 800277c:	24006d20 	.word	0x24006d20
 8002780:	58020400 	.word	0x58020400

08002784 <DisplayStatus>:
	static char StringWidth[8];
	static char StringAGC[8];
	static char StringStep[8];


	switch(Fstep)
 8002784:	4b57      	ldr	r3, [pc, #348]	; (80028e4 <DisplayStatus+0x160>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b64      	cmp	r3, #100	; 0x64
{
 800278a:	b570      	push	{r4, r5, r6, lr}
 800278c:	b086      	sub	sp, #24
	switch(Fstep)
 800278e:	f000 809f 	beq.w	80028d0 <DisplayStatus+0x14c>
 8002792:	d969      	bls.n	8002868 <DisplayStatus+0xe4>
 8002794:	f242 7210 	movw	r2, #10000	; 0x2710
 8002798:	4293      	cmp	r3, r2
 800279a:	d07d      	beq.n	8002898 <DisplayStatus+0x114>
 800279c:	4a52      	ldr	r2, [pc, #328]	; (80028e8 <DisplayStatus+0x164>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	f000 808f 	beq.w	80028c2 <DisplayStatus+0x13e>
 80027a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027a8:	d07d      	beq.n	80028a6 <DisplayStatus+0x122>
 80027aa:	4c50      	ldr	r4, [pc, #320]	; (80028ec <DisplayStatus+0x168>)
	case 1000: strcpy(StringStep,"  1K"); break;
	case 10000: strcpy(StringStep," 10K"); break;
	case 100000: strcpy(StringStep,"100K"); break;
	}

	switch(CurrentMode)
 80027ac:	4b50      	ldr	r3, [pc, #320]	; (80028f0 <DisplayStatus+0x16c>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b03      	cmp	r3, #3
 80027b2:	f200 8094 	bhi.w	80028de <DisplayStatus+0x15a>
 80027b6:	e8df f003 	tbb	[pc, r3]
 80027ba:	5155      	.short	0x5155
 80027bc:	0238      	.short	0x0238
	{
	case LSB: strcpy(StringMode,"LSB"); break;
	case USB: strcpy(StringMode,"USB"); break;
	case AM: strcpy(StringMode,"AM"); break;
	case CW: strcpy(StringMode,"CW"); break;
 80027be:	4b4d      	ldr	r3, [pc, #308]	; (80028f4 <DisplayStatus+0x170>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4d4d      	ldr	r5, [pc, #308]	; (80028f8 <DisplayStatus+0x174>)
 80027c4:	0c1a      	lsrs	r2, r3, #16
 80027c6:	802b      	strh	r3, [r5, #0]
 80027c8:	70aa      	strb	r2, [r5, #2]
	}
	switch (CurrentAGC)
 80027ca:	4b4c      	ldr	r3, [pc, #304]	; (80028fc <DisplayStatus+0x178>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d032      	beq.n	8002838 <DisplayStatus+0xb4>
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d059      	beq.n	800288a <DisplayStatus+0x106>
 80027d6:	4a4a      	ldr	r2, [pc, #296]	; (8002900 <DisplayStatus+0x17c>)
	{
	case Fast: strcpy(StringAGC,"Fast"); break;
	case Slow: strcpy(StringAGC,"Slow"); break;
	}
	switch (CurrentBW)
 80027d8:	4b4a      	ldr	r3, [pc, #296]	; (8002904 <DisplayStatus+0x180>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d035      	beq.n	800284c <DisplayStatus+0xc8>
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d04c      	beq.n	800287e <DisplayStatus+0xfa>
 80027e4:	4b48      	ldr	r3, [pc, #288]	; (8002908 <DisplayStatus+0x184>)
	{
	case Narrow: strcpy(StringWidth,"Narrow"); break;
	case Wide: strcpy(StringWidth,"Wide"); break;
	}
	sprintf(UartTXString, "          Freq %.0f Step %s Mode %s BW %s AGG %s Volume %1.1f   \r", LOfreq, StringStep, StringMode, StringWidth, StringAGC, volume);
 80027e6:	4849      	ldr	r0, [pc, #292]	; (800290c <DisplayStatus+0x188>)
 80027e8:	4949      	ldr	r1, [pc, #292]	; (8002910 <DisplayStatus+0x18c>)
 80027ea:	ed90 7a00 	vldr	s14, [r0]
 80027ee:	edd1 6a00 	vldr	s13, [r1]
 80027f2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80027f6:	4947      	ldr	r1, [pc, #284]	; (8002914 <DisplayStatus+0x190>)
 80027f8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80027fc:	4846      	ldr	r0, [pc, #280]	; (8002918 <DisplayStatus+0x194>)
 80027fe:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8002802:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002806:	ec53 2b16 	vmov	r2, r3, d6
 800280a:	e9cd 4500 	strd	r4, r5, [sp]
 800280e:	f009 f897 	bl	800b940 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *) UartTXString, strlen(UartTXString), 100);
 8002812:	4841      	ldr	r0, [pc, #260]	; (8002918 <DisplayStatus+0x194>)
 8002814:	f7fd fdc4 	bl	80003a0 <strlen>
 8002818:	2364      	movs	r3, #100	; 0x64
 800281a:	b282      	uxth	r2, r0
 800281c:	493e      	ldr	r1, [pc, #248]	; (8002918 <DisplayStatus+0x194>)
 800281e:	483f      	ldr	r0, [pc, #252]	; (800291c <DisplayStatus+0x198>)
}
 8002820:	b006      	add	sp, #24
 8002822:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			HAL_UART_Transmit(&huart3, (uint8_t *) UartTXString, strlen(UartTXString), 100);
 8002826:	f005 bc49 	b.w	80080bc <HAL_UART_Transmit>
	case USB: strcpy(StringMode,"USB"); break;
 800282a:	4b3d      	ldr	r3, [pc, #244]	; (8002920 <DisplayStatus+0x19c>)
 800282c:	4d32      	ldr	r5, [pc, #200]	; (80028f8 <DisplayStatus+0x174>)
 800282e:	602b      	str	r3, [r5, #0]
	switch (CurrentAGC)
 8002830:	4b32      	ldr	r3, [pc, #200]	; (80028fc <DisplayStatus+0x178>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1cc      	bne.n	80027d2 <DisplayStatus+0x4e>
	case Fast: strcpy(StringAGC,"Fast"); break;
 8002838:	4b3a      	ldr	r3, [pc, #232]	; (8002924 <DisplayStatus+0x1a0>)
 800283a:	4a31      	ldr	r2, [pc, #196]	; (8002900 <DisplayStatus+0x17c>)
 800283c:	e893 0003 	ldmia.w	r3, {r0, r1}
	switch (CurrentBW)
 8002840:	4b30      	ldr	r3, [pc, #192]	; (8002904 <DisplayStatus+0x180>)
	case Fast: strcpy(StringAGC,"Fast"); break;
 8002842:	6010      	str	r0, [r2, #0]
	switch (CurrentBW)
 8002844:	781b      	ldrb	r3, [r3, #0]
	case Fast: strcpy(StringAGC,"Fast"); break;
 8002846:	7111      	strb	r1, [r2, #4]
	switch (CurrentBW)
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1c9      	bne.n	80027e0 <DisplayStatus+0x5c>
	case Narrow: strcpy(StringWidth,"Narrow"); break;
 800284c:	4936      	ldr	r1, [pc, #216]	; (8002928 <DisplayStatus+0x1a4>)
 800284e:	4b2e      	ldr	r3, [pc, #184]	; (8002908 <DisplayStatus+0x184>)
 8002850:	c903      	ldmia	r1, {r0, r1}
 8002852:	0c0e      	lsrs	r6, r1, #16
 8002854:	6018      	str	r0, [r3, #0]
 8002856:	8099      	strh	r1, [r3, #4]
 8002858:	719e      	strb	r6, [r3, #6]
 800285a:	e7c4      	b.n	80027e6 <DisplayStatus+0x62>
	case LSB: strcpy(StringMode,"LSB"); break;
 800285c:	4d26      	ldr	r5, [pc, #152]	; (80028f8 <DisplayStatus+0x174>)
 800285e:	4b33      	ldr	r3, [pc, #204]	; (800292c <DisplayStatus+0x1a8>)
 8002860:	602b      	str	r3, [r5, #0]
 8002862:	e7b2      	b.n	80027ca <DisplayStatus+0x46>
	case AM: strcpy(StringMode,"AM"); break;
 8002864:	4b32      	ldr	r3, [pc, #200]	; (8002930 <DisplayStatus+0x1ac>)
 8002866:	e7ab      	b.n	80027c0 <DisplayStatus+0x3c>
	switch(Fstep)
 8002868:	2b01      	cmp	r3, #1
 800286a:	d023      	beq.n	80028b4 <DisplayStatus+0x130>
 800286c:	2b0a      	cmp	r3, #10
 800286e:	d19c      	bne.n	80027aa <DisplayStatus+0x26>
	case 10: strcpy(StringStep,"  10"); break;
 8002870:	4b30      	ldr	r3, [pc, #192]	; (8002934 <DisplayStatus+0x1b0>)
 8002872:	4c1e      	ldr	r4, [pc, #120]	; (80028ec <DisplayStatus+0x168>)
 8002874:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002878:	6020      	str	r0, [r4, #0]
 800287a:	7121      	strb	r1, [r4, #4]
 800287c:	e796      	b.n	80027ac <DisplayStatus+0x28>
	case Wide: strcpy(StringWidth,"Wide"); break;
 800287e:	492e      	ldr	r1, [pc, #184]	; (8002938 <DisplayStatus+0x1b4>)
 8002880:	4b21      	ldr	r3, [pc, #132]	; (8002908 <DisplayStatus+0x184>)
 8002882:	c903      	ldmia	r1, {r0, r1}
 8002884:	6018      	str	r0, [r3, #0]
 8002886:	7119      	strb	r1, [r3, #4]
 8002888:	e7ad      	b.n	80027e6 <DisplayStatus+0x62>
	case Slow: strcpy(StringAGC,"Slow"); break;
 800288a:	4b2c      	ldr	r3, [pc, #176]	; (800293c <DisplayStatus+0x1b8>)
 800288c:	4a1c      	ldr	r2, [pc, #112]	; (8002900 <DisplayStatus+0x17c>)
 800288e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002892:	6010      	str	r0, [r2, #0]
 8002894:	7111      	strb	r1, [r2, #4]
 8002896:	e79f      	b.n	80027d8 <DisplayStatus+0x54>
	case 10000: strcpy(StringStep," 10K"); break;
 8002898:	4b29      	ldr	r3, [pc, #164]	; (8002940 <DisplayStatus+0x1bc>)
 800289a:	4c14      	ldr	r4, [pc, #80]	; (80028ec <DisplayStatus+0x168>)
 800289c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028a0:	6020      	str	r0, [r4, #0]
 80028a2:	7121      	strb	r1, [r4, #4]
 80028a4:	e782      	b.n	80027ac <DisplayStatus+0x28>
	case 1000: strcpy(StringStep,"  1K"); break;
 80028a6:	4b27      	ldr	r3, [pc, #156]	; (8002944 <DisplayStatus+0x1c0>)
 80028a8:	4c10      	ldr	r4, [pc, #64]	; (80028ec <DisplayStatus+0x168>)
 80028aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028ae:	6020      	str	r0, [r4, #0]
 80028b0:	7121      	strb	r1, [r4, #4]
 80028b2:	e77b      	b.n	80027ac <DisplayStatus+0x28>
	case 1: strcpy(StringStep,"   1"); break;
 80028b4:	4b24      	ldr	r3, [pc, #144]	; (8002948 <DisplayStatus+0x1c4>)
 80028b6:	4c0d      	ldr	r4, [pc, #52]	; (80028ec <DisplayStatus+0x168>)
 80028b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028bc:	6020      	str	r0, [r4, #0]
 80028be:	7121      	strb	r1, [r4, #4]
 80028c0:	e774      	b.n	80027ac <DisplayStatus+0x28>
	case 100000: strcpy(StringStep,"100K"); break;
 80028c2:	4b22      	ldr	r3, [pc, #136]	; (800294c <DisplayStatus+0x1c8>)
 80028c4:	4c09      	ldr	r4, [pc, #36]	; (80028ec <DisplayStatus+0x168>)
 80028c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028ca:	6020      	str	r0, [r4, #0]
 80028cc:	7121      	strb	r1, [r4, #4]
 80028ce:	e76d      	b.n	80027ac <DisplayStatus+0x28>
	case 100: strcpy(StringStep," 100"); break;
 80028d0:	4b1f      	ldr	r3, [pc, #124]	; (8002950 <DisplayStatus+0x1cc>)
 80028d2:	4c06      	ldr	r4, [pc, #24]	; (80028ec <DisplayStatus+0x168>)
 80028d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80028d8:	6020      	str	r0, [r4, #0]
 80028da:	7121      	strb	r1, [r4, #4]
 80028dc:	e766      	b.n	80027ac <DisplayStatus+0x28>
 80028de:	4d06      	ldr	r5, [pc, #24]	; (80028f8 <DisplayStatus+0x174>)
 80028e0:	e773      	b.n	80027ca <DisplayStatus+0x46>
 80028e2:	bf00      	nop
 80028e4:	2400c1f4 	.word	0x2400c1f4
 80028e8:	000186a0 	.word	0x000186a0
 80028ec:	240004d8 	.word	0x240004d8
 80028f0:	2400c1fc 	.word	0x2400c1fc
 80028f4:	0801abec 	.word	0x0801abec
 80028f8:	240004d0 	.word	0x240004d0
 80028fc:	24000500 	.word	0x24000500
 8002900:	240004c8 	.word	0x240004c8
 8002904:	24000910 	.word	0x24000910
 8002908:	240004e0 	.word	0x240004e0
 800290c:	240042d4 	.word	0x240042d4
 8002910:	24009cdc 	.word	0x24009cdc
 8002914:	0801ac10 	.word	0x0801ac10
 8002918:	24007520 	.word	0x24007520
 800291c:	240029b4 	.word	0x240029b4
 8002920:	00425355 	.word	0x00425355
 8002924:	0801abf0 	.word	0x0801abf0
 8002928:	0801ac00 	.word	0x0801ac00
 800292c:	0042534c 	.word	0x0042534c
 8002930:	0801abe8 	.word	0x0801abe8
 8002934:	0801abc0 	.word	0x0801abc0
 8002938:	0801ac08 	.word	0x0801ac08
 800293c:	0801abf8 	.word	0x0801abf8
 8002940:	0801abd8 	.word	0x0801abd8
 8002944:	0801abd0 	.word	0x0801abd0
 8002948:	0801abb8 	.word	0x0801abb8
 800294c:	0801abe0 	.word	0x0801abe0
 8002950:	0801abc8 	.word	0x0801abc8

08002954 <HAL_UART_RxCpltCallback>:
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{

  /* Turn LED2 on: Transfer in reception process is correct */
LED_RED_OFF;
 8002954:	2200      	movs	r2, #0
 8002956:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800295a:	4801      	ldr	r0, [pc, #4]	; (8002960 <HAL_UART_RxCpltCallback+0xc>)
 800295c:	f003 ba04 	b.w	8005d68 <HAL_GPIO_WritePin>
 8002960:	58020400 	.word	0x58020400

08002964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002964:	4e07      	ldr	r6, [pc, #28]	; (8002984 <Error_Handler+0x20>)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	 while(1)
	  {
		  if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 8002966:	2532      	movs	r5, #50	; 0x32
 8002968:	4c07      	ldr	r4, [pc, #28]	; (8002988 <Error_Handler+0x24>)
{
 800296a:	b508      	push	{r3, lr}
		  if((os_time % 50) == 0)  // blink fast the two leds in case of errors
 800296c:	6832      	ldr	r2, [r6, #0]
 800296e:	fba4 1302 	umull	r1, r3, r4, r2
 8002972:	091b      	lsrs	r3, r3, #4
 8002974:	fb05 2313 	mls	r3, r5, r3, r2
 8002978:	b103      	cbz	r3, 800297c <Error_Handler+0x18>
 800297a:	e7fe      	b.n	800297a <Error_Handler+0x16>
	      LED_switch();
 800297c:	f7fe fc8c 	bl	8001298 <LED_switch>
 8002980:	e7f4      	b.n	800296c <Error_Handler+0x8>
 8002982:	bf00      	nop
 8002984:	24009ce0 	.word	0x24009ce0
 8002988:	51eb851f 	.word	0x51eb851f

0800298c <SystemClock_Config_For_OC>:
{
 800298c:	b570      	push	{r4, r5, r6, lr}
 800298e:	b0cc      	sub	sp, #304	; 0x130
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002990:	224c      	movs	r2, #76	; 0x4c
 8002992:	2100      	movs	r1, #0
 8002994:	a80a      	add	r0, sp, #40	; 0x28
 8002996:	f008 fb8f 	bl	800b0b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800299a:	2220      	movs	r2, #32
 800299c:	2100      	movs	r1, #0
 800299e:	a802      	add	r0, sp, #8
 80029a0:	f008 fb8a 	bl	800b0b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029a4:	22bc      	movs	r2, #188	; 0xbc
 80029a6:	2100      	movs	r1, #0
 80029a8:	a81d      	add	r0, sp, #116	; 0x74
 80029aa:	f008 fb85 	bl	800b0b8 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80029ae:	2002      	movs	r0, #2
 80029b0:	f003 f9ec 	bl	8005d8c <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80029b4:	4b30      	ldr	r3, [pc, #192]	; (8002a78 <SystemClock_Config_For_OC+0xec>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	4930      	ldr	r1, [pc, #192]	; (8002a7c <SystemClock_Config_For_OC+0xf0>)
 80029ba:	9201      	str	r2, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80029bc:	461a      	mov	r2, r3
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80029be:	6998      	ldr	r0, [r3, #24]
 80029c0:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 80029c4:	6198      	str	r0, [r3, #24]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029cc:	9301      	str	r3, [sp, #4]
 80029ce:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	62cb      	str	r3, [r1, #44]	; 0x2c
 80029d6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	9301      	str	r3, [sp, #4]
 80029de:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80029e0:	6993      	ldr	r3, [r2, #24]
 80029e2:	049b      	lsls	r3, r3, #18
 80029e4:	d5fc      	bpl.n	80029e0 <SystemClock_Config_For_OC+0x54>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80029e6:	4a26      	ldr	r2, [pc, #152]	; (8002a80 <SystemClock_Config_For_OC+0xf4>)
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029e8:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80029ea:	2001      	movs	r0, #1
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80029ec:	2504      	movs	r5, #4
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80029ee:	6a93      	ldr	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029f0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80029f4:	f023 0303 	bic.w	r3, r3, #3
 80029f8:	4323      	orrs	r3, r4
 80029fa:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80029fc:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLN = 300;
 80029fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a02:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a04:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a06:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002a08:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002a0a:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLM = 2;
 8002a0c:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002a0e:	9518      	str	r5, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002a10:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 300;
 8002a12:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a14:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002a18:	e9cd 531a 	strd	r5, r3, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a1c:	f003 f9dc 	bl	8005dd8 <HAL_RCC_OscConfig>
 8002a20:	bb40      	cbnz	r0, 8002a74 <SystemClock_Config_For_OC+0xe8>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a22:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002a24:	2208      	movs	r2, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a26:	213f      	movs	r1, #63	; 0x3f
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002a28:	2640      	movs	r6, #64	; 0x40
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a2a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002a30:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a32:	eb0d 0002 	add.w	r0, sp, r2
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a36:	9102      	str	r1, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a38:	4629      	mov	r1, r5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002a3a:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002a3c:	9606      	str	r6, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002a3e:	9607      	str	r6, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002a40:	e9cd 3608 	strd	r3, r6, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a44:	f003 fd24 	bl	8006490 <HAL_RCC_ClockConfig>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	b998      	cbnz	r0, 8002a74 <SystemClock_Config_For_OC+0xe8>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC;
 8002a4c:	490d      	ldr	r1, [pc, #52]	; (8002a84 <SystemClock_Config_For_OC+0xf8>)
  PeriphClkInitStruct.PLL2.PLL2N = 320;
 8002a4e:	f44f 72a0 	mov.w	r2, #320	; 0x140
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a52:	a81d      	add	r0, sp, #116	; 0x74
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8002a54:	951e      	str	r5, [sp, #120]	; 0x78
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a56:	933a      	str	r3, [sp, #232]	; 0xe8
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002a58:	9345      	str	r3, [sp, #276]	; 0x114
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_ADC;
 8002a5a:	911d      	str	r1, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLL2.PLL2N = 320;
 8002a5c:	921f      	str	r2, [sp, #124]	; 0x7c
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002a5e:	e9cd 5420 	strd	r5, r4, [sp, #128]	; 0x80
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8002a62:	e9cd 4622 	strd	r4, r6, [sp, #136]	; 0x88
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002a66:	e9cd 3324 	strd	r3, r3, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a6a:	f004 f93b 	bl	8006ce4 <HAL_RCCEx_PeriphCLKConfig>
 8002a6e:	b908      	cbnz	r0, 8002a74 <SystemClock_Config_For_OC+0xe8>
}
 8002a70:	b04c      	add	sp, #304	; 0x130
 8002a72:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8002a74:	f7ff ff76 	bl	8002964 <Error_Handler>
 8002a78:	58024800 	.word	0x58024800
 8002a7c:	58000400 	.word	0x58000400
 8002a80:	58024400 	.word	0x58024400
 8002a84:	00080002 	.word	0x00080002

08002a88 <MX_TIM6_Init_Custom_Rate>:
{
 8002a88:	b510      	push	{r4, lr}
	htim6.Instance = TIM6;
 8002a8a:	4810      	ldr	r0, [pc, #64]	; (8002acc <MX_TIM6_Init_Custom_Rate+0x44>)
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a8c:	2300      	movs	r3, #0
	htim6.Instance = TIM6;
 8002a8e:	4c10      	ldr	r4, [pc, #64]	; (8002ad0 <MX_TIM6_Init_Custom_Rate+0x48>)
{
 8002a90:	b084      	sub	sp, #16
	htim6.Init.Period = 7679;
 8002a92:	f641 51ff 	movw	r1, #7679	; 0x1dff
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a96:	2280      	movs	r2, #128	; 0x80
	htim6.Instance = TIM6;
 8002a98:	6020      	str	r0, [r4, #0]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002a9a:	4620      	mov	r0, r4
	htim6.Init.Period = 7679;
 8002a9c:	60e1      	str	r1, [r4, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a9e:	61a2      	str	r2, [r4, #24]
	htim6.Init.Prescaler = 0;
 8002aa0:	6063      	str	r3, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa2:	9301      	str	r3, [sp, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa4:	60a3      	str	r3, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa6:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002aaa:	f005 f951 	bl	8007d50 <HAL_TIM_Base_Init>
 8002aae:	b950      	cbnz	r0, 8002ac6 <MX_TIM6_Init_Custom_Rate+0x3e>
 8002ab0:	4603      	mov	r3, r0
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002ab2:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002ab4:	a901      	add	r1, sp, #4
 8002ab6:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ab8:	9303      	str	r3, [sp, #12]
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002aba:	9201      	str	r2, [sp, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002abc:	f005 fa9e 	bl	8007ffc <HAL_TIMEx_MasterConfigSynchronization>
 8002ac0:	b908      	cbnz	r0, 8002ac6 <MX_TIM6_Init_Custom_Rate+0x3e>
}
 8002ac2:	b004      	add	sp, #16
 8002ac4:	bd10      	pop	{r4, pc}
		Error_Handler();
 8002ac6:	f7ff ff4d 	bl	8002964 <Error_Handler>
 8002aca:	bf00      	nop
 8002acc:	40001000 	.word	0x40001000
 8002ad0:	24008c80 	.word	0x24008c80
 8002ad4:	00000000 	.word	0x00000000

08002ad8 <main>:
{
 8002ad8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002adc:	b0ab      	sub	sp, #172	; 0xac
  HAL_Init();
 8002ade:	f000 fe85 	bl	80037ec <HAL_Init>
  __ASM volatile ("dsb 0xF":::"memory");
 8002ae2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ae6:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002aea:	48d1      	ldr	r0, [pc, #836]	; (8002e30 <main+0x358>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	f8c0 2250 	str.w	r2, [r0, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002af2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002af6:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002afa:	6943      	ldr	r3, [r0, #20]
 8002afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b00:	6143      	str	r3, [r0, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b06:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002b0a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002b0e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002b12:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002b16:	f643 7ce0 	movw	ip, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002b1a:	f3c3 06c9 	ubfx	r6, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002b1e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002b22:	07b7      	lsls	r7, r6, #30
 8002b24:	015d      	lsls	r5, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002b26:	ea05 040c 	and.w	r4, r5, ip
 8002b2a:	4639      	mov	r1, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002b2c:	4632      	mov	r2, r6
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002b2e:	ea41 0304 	orr.w	r3, r1, r4
      } while (ways-- != 0U);
 8002b32:	3a01      	subs	r2, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002b34:	f101 4140 	add.w	r1, r1, #3221225472	; 0xc0000000
 8002b38:	f8c0 3260 	str.w	r3, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8002b3c:	1c53      	adds	r3, r2, #1
 8002b3e:	d1f6      	bne.n	8002b2e <main+0x56>
 8002b40:	3d20      	subs	r5, #32
    } while(sets-- != 0U);
 8002b42:	f115 0f20 	cmn.w	r5, #32
 8002b46:	d1ee      	bne.n	8002b26 <main+0x4e>
 8002b48:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002b4c:	6943      	ldr	r3, [r0, #20]
 8002b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b52:	6143      	str	r3, [r0, #20]
 8002b54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b58:	f3bf 8f6f 	isb	sy
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5c:	2700      	movs	r7, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b5e:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 8002e50 <main+0x378>
  SystemClock_Config_For_OC();
 8002b62:	f7ff ff13 	bl	800298c <SystemClock_Config_For_OC>
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b66:	2401      	movs	r4, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b68:	9722      	str	r7, [sp, #136]	; 0x88
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6a:	2502      	movs	r5, #2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6c:	9723      	str	r7, [sp, #140]	; 0x8c
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002b6e:	463a      	mov	r2, r7
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	9724      	str	r7, [sp, #144]	; 0x90
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002b72:	f44f 4181 	mov.w	r1, #16512	; 0x4080
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b76:	9725      	str	r7, [sp, #148]	; 0x94
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002b78:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	9721      	str	r7, [sp, #132]	; 0x84
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b7e:	f04f 090b 	mov.w	r9, #11
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b82:	f8d8 60e0 	ldr.w	r6, [r8, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002b86:	48ab      	ldr	r0, [pc, #684]	; (8002e34 <main+0x35c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b88:	f046 0604 	orr.w	r6, r6, #4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b8c:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 8002e54 <main+0x37c>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b90:	f8c8 60e0 	str.w	r6, [r8, #224]	; 0xe0
 8002b94:	f8d8 60e0 	ldr.w	r6, [r8, #224]	; 0xe0
 8002b98:	f006 0604 	and.w	r6, r6, #4
 8002b9c:	9606      	str	r6, [sp, #24]
 8002b9e:	9e06      	ldr	r6, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ba0:	f8d8 60e0 	ldr.w	r6, [r8, #224]	; 0xe0
 8002ba4:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8002ba8:	f8c8 60e0 	str.w	r6, [r8, #224]	; 0xe0
 8002bac:	f8d8 60e0 	ldr.w	r6, [r8, #224]	; 0xe0
 8002bb0:	f006 0680 	and.w	r6, r6, #128	; 0x80
 8002bb4:	9607      	str	r6, [sp, #28]
 8002bb6:	9e07      	ldr	r6, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb8:	f8d8 60e0 	ldr.w	r6, [r8, #224]	; 0xe0
 8002bbc:	4326      	orrs	r6, r4
 8002bbe:	f8c8 60e0 	str.w	r6, [r8, #224]	; 0xe0
 8002bc2:	f8d8 60e0 	ldr.w	r6, [r8, #224]	; 0xe0
 8002bc6:	4026      	ands	r6, r4
 8002bc8:	9608      	str	r6, [sp, #32]
 8002bca:	9e08      	ldr	r6, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bcc:	f8d8 60e0 	ldr.w	r6, [r8, #224]	; 0xe0
 8002bd0:	432e      	orrs	r6, r5
 8002bd2:	f8c8 60e0 	str.w	r6, [r8, #224]	; 0xe0
 8002bd6:	f8d8 60e0 	ldr.w	r6, [r8, #224]	; 0xe0
 8002bda:	402e      	ands	r6, r5
 8002bdc:	9609      	str	r6, [sp, #36]	; 0x24
 8002bde:	9e09      	ldr	r6, [sp, #36]	; 0x24
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002be0:	f8d8 60e0 	ldr.w	r6, [r8, #224]	; 0xe0
 8002be4:	f046 0610 	orr.w	r6, r6, #16
 8002be8:	f8c8 60e0 	str.w	r6, [r8, #224]	; 0xe0
 8002bec:	f8d8 60e0 	ldr.w	r6, [r8, #224]	; 0xe0
 8002bf0:	f006 0610 	and.w	r6, r6, #16
 8002bf4:	960a      	str	r6, [sp, #40]	; 0x28
 8002bf6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bf8:	f8d8 60e0 	ldr.w	r6, [r8, #224]	; 0xe0
 8002bfc:	f046 0608 	orr.w	r6, r6, #8
 8002c00:	f8c8 60e0 	str.w	r6, [r8, #224]	; 0xe0
 8002c04:	f8d8 60e0 	ldr.w	r6, [r8, #224]	; 0xe0
 8002c08:	f006 0608 	and.w	r6, r6, #8
 8002c0c:	960b      	str	r6, [sp, #44]	; 0x2c
 8002c0e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c10:	f8d8 60e0 	ldr.w	r6, [r8, #224]	; 0xe0
 8002c14:	f046 0640 	orr.w	r6, r6, #64	; 0x40
 8002c18:	f8c8 60e0 	str.w	r6, [r8, #224]	; 0xe0
 8002c1c:	f8d8 60e0 	ldr.w	r6, [r8, #224]	; 0xe0
 8002c20:	f006 0640 	and.w	r6, r6, #64	; 0x40
 8002c24:	960c      	str	r6, [sp, #48]	; 0x30
 8002c26:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002c28:	f003 f89e 	bl	8005d68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002c2c:	463a      	mov	r2, r7
 8002c2e:	2140      	movs	r1, #64	; 0x40
 8002c30:	4881      	ldr	r0, [pc, #516]	; (8002e38 <main+0x360>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002c32:	2680      	movs	r6, #128	; 0x80
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002c34:	f003 f898 	bl	8005d68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8002c38:	463a      	mov	r2, r7
 8002c3a:	4629      	mov	r1, r5
 8002c3c:	487f      	ldr	r0, [pc, #508]	; (8002e3c <main+0x364>)
 8002c3e:	f003 f893 	bl	8005d68 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002c42:	a921      	add	r1, sp, #132	; 0x84
 8002c44:	487e      	ldr	r0, [pc, #504]	; (8002e40 <main+0x368>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c46:	9723      	str	r7, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c48:	e9cd ba21 	strd	fp, sl, [sp, #132]	; 0x84
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002c4c:	f002 ff6e 	bl	8005b2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SwInt1_Pin;
 8002c50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 8002c54:	a921      	add	r1, sp, #132	; 0x84
 8002c56:	487a      	ldr	r0, [pc, #488]	; (8002e40 <main+0x368>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c58:	9423      	str	r4, [sp, #140]	; 0x8c
  GPIO_InitStruct.Pin = SwInt1_Pin;
 8002c5a:	e9cd 2a21 	strd	r2, sl, [sp, #132]	; 0x84
  HAL_GPIO_Init(SwInt1_GPIO_Port, &GPIO_InitStruct);
 8002c5e:	f002 ff65 	bl	8005b2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002c62:	2232      	movs	r2, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c64:	a921      	add	r1, sp, #132	; 0x84
 8002c66:	4876      	ldr	r0, [pc, #472]	; (8002e40 <main+0x368>)
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002c68:	9221      	str	r2, [sp, #132]	; 0x84
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6a:	9522      	str	r5, [sp, #136]	; 0x88
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c6c:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c70:	e9cd 7723 	strd	r7, r7, [sp, #140]	; 0x8c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c74:	f002 ff5a 	bl	8005b2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002c78:	2286      	movs	r2, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c7a:	a921      	add	r1, sp, #132	; 0x84
 8002c7c:	4871      	ldr	r0, [pc, #452]	; (8002e44 <main+0x36c>)
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002c7e:	9221      	str	r2, [sp, #132]	; 0x84
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c80:	e9cd 5722 	strd	r5, r7, [sp, #136]	; 0x88
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c84:	e9cd 7924 	strd	r7, r9, [sp, #144]	; 0x90
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c88:	f002 ff50 	bl	8005b2c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c90:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c92:	a921      	add	r1, sp, #132	; 0x84
 8002c94:	4869      	ldr	r0, [pc, #420]	; (8002e3c <main+0x364>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	9723      	str	r7, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c98:	e9cd 2321 	strd	r2, r3, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c9c:	f002 ff46 	bl	8005b2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ca0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ca4:	a921      	add	r1, sp, #132	; 0x84
 8002ca6:	4865      	ldr	r0, [pc, #404]	; (8002e3c <main+0x364>)
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ca8:	9321      	str	r3, [sp, #132]	; 0x84
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	e9cd a722 	strd	sl, r7, [sp, #136]	; 0x88
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cae:	f002 ff3d 	bl	8005b2c <HAL_GPIO_Init>
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002cb2:	a921      	add	r1, sp, #132	; 0x84
 8002cb4:	485f      	ldr	r0, [pc, #380]	; (8002e34 <main+0x35c>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002cb6:	f04f 0a08 	mov.w	sl, #8
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002cba:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbe:	e9cd b521 	strd	fp, r5, [sp, #132]	; 0x84
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc2:	e9cd 7723 	strd	r7, r7, [sp, #140]	; 0x8c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002cc6:	f002 ff31 	bl	8005b2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002cca:	f44f 4281 	mov.w	r2, #16512	; 0x4080
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cce:	a921      	add	r1, sp, #132	; 0x84
 8002cd0:	4858      	ldr	r0, [pc, #352]	; (8002e34 <main+0x35c>)
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8002cd2:	9221      	str	r2, [sp, #132]	; 0x84
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8002cd4:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd8:	9724      	str	r7, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	e9cd 4722 	strd	r4, r7, [sp, #136]	; 0x88
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cde:	f002 ff25 	bl	8005b2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002ce2:	2240      	movs	r2, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002ce4:	a921      	add	r1, sp, #132	; 0x84
 8002ce6:	4854      	ldr	r0, [pc, #336]	; (8002e38 <main+0x360>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002ce8:	9221      	str	r2, [sp, #132]	; 0x84
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cea:	9724      	str	r7, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cec:	e9cd 4722 	strd	r4, r7, [sp, #136]	; 0x88
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002cf0:	f002 ff1c 	bl	8005b2c <HAL_GPIO_Init>
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002cf4:	a921      	add	r1, sp, #132	; 0x84
 8002cf6:	4850      	ldr	r0, [pc, #320]	; (8002e38 <main+0x360>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002cf8:	9621      	str	r6, [sp, #132]	; 0x84
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfa:	e9cd 7722 	strd	r7, r7, [sp, #136]	; 0x88
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002cfe:	f002 ff15 	bl	8005b2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002d02:	f44f 50e8 	mov.w	r0, #7424	; 0x1d00
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002d06:	220a      	movs	r2, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d08:	a921      	add	r1, sp, #132	; 0x84
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002d0a:	9021      	str	r0, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0c:	484d      	ldr	r0, [pc, #308]	; (8002e44 <main+0x36c>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002d0e:	9225      	str	r2, [sp, #148]	; 0x94
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d10:	9724      	str	r7, [sp, #144]	; 0x90
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d12:	e9cd 5722 	strd	r5, r7, [sp, #136]	; 0x88
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d16:	f002 ff09 	bl	8005b2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002d1a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d1e:	a921      	add	r1, sp, #132	; 0x84
 8002d20:	4845      	ldr	r0, [pc, #276]	; (8002e38 <main+0x360>)
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002d22:	9221      	str	r2, [sp, #132]	; 0x84
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d24:	e9cd 5722 	strd	r5, r7, [sp, #136]	; 0x88
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d28:	e9cd 7924 	strd	r7, r9, [sp, #144]	; 0x90
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002d2c:	f002 fefe 	bl	8005b2c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d30:	a921      	add	r1, sp, #132	; 0x84
 8002d32:	4842      	ldr	r0, [pc, #264]	; (8002e3c <main+0x364>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d34:	e9cd 5421 	strd	r5, r4, [sp, #132]	; 0x84
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d38:	e9cd 7723 	strd	r7, r7, [sp, #140]	; 0x8c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d3c:	f002 fef6 	bl	8005b2c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 4, 0);
 8002d40:	463a      	mov	r2, r7
 8002d42:	2104      	movs	r1, #4
 8002d44:	2028      	movs	r0, #40	; 0x28
 8002d46:	f001 fba5 	bl	8004494 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d4a:	2028      	movs	r0, #40	; 0x28
 8002d4c:	f001 fbd8 	bl	8004500 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d50:	f8d8 30d8 	ldr.w	r3, [r8, #216]	; 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002d54:	463a      	mov	r2, r7
 8002d56:	4639      	mov	r1, r7
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d58:	4323      	orrs	r3, r4
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002d5a:	4648      	mov	r0, r9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d5c:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
 8002d60:	f8d8 30d8 	ldr.w	r3, [r8, #216]	; 0xd8
 8002d64:	4023      	ands	r3, r4
 8002d66:	9305      	str	r3, [sp, #20]
 8002d68:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002d6a:	f001 fb93 	bl	8004494 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002d6e:	4648      	mov	r0, r9
  hadc1.Instance = ADC1;
 8002d70:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8002e58 <main+0x380>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002d74:	f001 fbc4 	bl	8004500 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 2, 0);
 8002d78:	4629      	mov	r1, r5
 8002d7a:	463a      	mov	r2, r7
 8002d7c:	200c      	movs	r0, #12
 8002d7e:	f001 fb89 	bl	8004494 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002d82:	200c      	movs	r0, #12
 8002d84:	f001 fbbc 	bl	8004500 <HAL_NVIC_EnableIRQ>
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d88:	2504      	movs	r5, #4
  hadc1.Instance = ADC1;
 8002d8a:	492f      	ldr	r1, [pc, #188]	; (8002e48 <main+0x370>)
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002d8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8002d90:	2303      	movs	r3, #3
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d92:	4648      	mov	r0, r9
  ADC_MultiModeTypeDef multimode = {0};
 8002d94:	9710      	str	r7, [sp, #64]	; 0x40
  ADC_ChannelConfTypeDef sConfig = {0};
 8002d96:	971a      	str	r7, [sp, #104]	; 0x68
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8002d98:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002d9c:	f8c9 700c 	str.w	r7, [r9, #12]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002da0:	f889 7014 	strb.w	r7, [r9, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002da4:	f889 4015 	strb.w	r4, [r9, #21]
  hadc1.Init.NbrOfConversion = 1;
 8002da8:	f8c9 4018 	str.w	r4, [r9, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002dac:	f889 701c 	strb.w	r7, [r9, #28]
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002db0:	f8c9 7034 	str.w	r7, [r9, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002db4:	f889 7038 	strb.w	r7, [r9, #56]	; 0x38
  hadc1.Instance = ADC1;
 8002db8:	f8c9 1000 	str.w	r1, [r9]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002dbc:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002dc0:	f8c9 5010 	str.w	r5, [r9, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002dc4:	e9c9 7709 	strd	r7, r7, [r9, #36]	; 0x24
  ADC_MultiModeTypeDef multimode = {0};
 8002dc8:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
  ADC_ChannelConfTypeDef sConfig = {0};
 8002dcc:	e9cd 771b 	strd	r7, r7, [sp, #108]	; 0x6c
 8002dd0:	e9cd 771d 	strd	r7, r7, [sp, #116]	; 0x74
 8002dd4:	e9cd 771f 	strd	r7, r7, [sp, #124]	; 0x7c
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002dd8:	e9c9 ba01 	strd	fp, sl, [r9, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ddc:	f001 f8fa 	bl	8003fd4 <HAL_ADC_Init>
 8002de0:	2800      	cmp	r0, #0
 8002de2:	f040 80d4 	bne.w	8002f8e <main+0x4b6>
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8002de6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  multimode.Mode = ADC_DUALMODE_INTERL;
 8002dea:	2207      	movs	r2, #7
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002dec:	a910      	add	r1, sp, #64	; 0x40
 8002dee:	4648      	mov	r0, r9
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8002df0:	9311      	str	r3, [sp, #68]	; 0x44
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 8002df2:	f44f 7380 	mov.w	r3, #256	; 0x100
  multimode.Mode = ADC_DUALMODE_INTERL;
 8002df6:	9210      	str	r2, [sp, #64]	; 0x40
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_2CYCLES;
 8002df8:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002dfa:	f001 fad7 	bl	80043ac <HAL_ADCEx_MultiModeConfigChannel>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	2800      	cmp	r0, #0
 8002e02:	f040 80c4 	bne.w	8002f8e <main+0x4b6>
  sConfig.Channel = ADC_CHANNEL_5;
 8002e06:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <main+0x374>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e08:	f04f 0806 	mov.w	r8, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002e0c:	f240 77ff 	movw	r7, #2047	; 0x7ff
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e10:	a91a      	add	r1, sp, #104	; 0x68
 8002e12:	4648      	mov	r0, r9
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002e14:	921c      	str	r2, [sp, #112]	; 0x70
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002e16:	971d      	str	r7, [sp, #116]	; 0x74
  sConfig.Offset = 0;
 8002e18:	e9cd 521e 	strd	r5, r2, [sp, #120]	; 0x78
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e1c:	e9cd 381a 	strd	r3, r8, [sp, #104]	; 0x68
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e20:	f000 fd8a 	bl	8003938 <HAL_ADC_ConfigChannel>
 8002e24:	4602      	mov	r2, r0
 8002e26:	2800      	cmp	r0, #0
 8002e28:	f040 80b1 	bne.w	8002f8e <main+0x4b6>
 8002e2c:	e016      	b.n	8002e5c <main+0x384>
 8002e2e:	bf00      	nop
 8002e30:	e000ed00 	.word	0xe000ed00
 8002e34:	58020400 	.word	0x58020400
 8002e38:	58021800 	.word	0x58021800
 8002e3c:	58021000 	.word	0x58021000
 8002e40:	58020800 	.word	0x58020800
 8002e44:	58020000 	.word	0x58020000
 8002e48:	40022000 	.word	0x40022000
 8002e4c:	14f00020 	.word	0x14f00020
 8002e50:	58024400 	.word	0x58024400
 8002e54:	11110000 	.word	0x11110000
 8002e58:	24007624 	.word	0x24007624
  hadc2.Instance = ADC2;
 8002e5c:	4b78      	ldr	r3, [pc, #480]	; (8003040 <main+0x568>)
 8002e5e:	4979      	ldr	r1, [pc, #484]	; (8003044 <main+0x56c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8002e60:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002e62:	4618      	mov	r0, r3
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002e64:	751a      	strb	r2, [r3, #20]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002e66:	771a      	strb	r2, [r3, #28]
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002e68:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8002e6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8002e6e:	f8c3 b004 	str.w	fp, [r3, #4]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e72:	611d      	str	r5, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002e74:	755c      	strb	r4, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8002e76:	619c      	str	r4, [r3, #24]
  hadc2.Instance = ADC2;
 8002e78:	6019      	str	r1, [r3, #0]
 8002e7a:	9303      	str	r3, [sp, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002e7c:	e9c3 a202 	strd	sl, r2, [r3, #8]
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002e80:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
  ADC_ChannelConfTypeDef sConfig = {0};
 8002e84:	e9cd 2214 	strd	r2, r2, [sp, #80]	; 0x50
 8002e88:	e9cd 2216 	strd	r2, r2, [sp, #88]	; 0x58
 8002e8c:	e9cd 2218 	strd	r2, r2, [sp, #96]	; 0x60
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002e90:	f001 f8a0 	bl	8003fd4 <HAL_ADC_Init>
 8002e94:	4602      	mov	r2, r0
 8002e96:	2800      	cmp	r0, #0
 8002e98:	d179      	bne.n	8002f8e <main+0x4b6>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002e9a:	9b03      	ldr	r3, [sp, #12]
 8002e9c:	a913      	add	r1, sp, #76	; 0x4c
 8002e9e:	4618      	mov	r0, r3
  sConfig.Channel = ADC_CHANNEL_5;
 8002ea0:	4b69      	ldr	r3, [pc, #420]	; (8003048 <main+0x570>)
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002ea2:	e9cd 2715 	strd	r2, r7, [sp, #84]	; 0x54
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ea6:	e9cd 3813 	strd	r3, r8, [sp, #76]	; 0x4c
  sConfig.Offset = 0;
 8002eaa:	e9cd 5217 	strd	r5, r2, [sp, #92]	; 0x5c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002eae:	f000 fd43 	bl	8003938 <HAL_ADC_ConfigChannel>
 8002eb2:	4601      	mov	r1, r0
 8002eb4:	2800      	cmp	r0, #0
 8002eb6:	d16a      	bne.n	8002f8e <main+0x4b6>
  DAC_ChannelConfTypeDef sConfig = {0};
 8002eb8:	2224      	movs	r2, #36	; 0x24
  hdac1.Instance = DAC1;
 8002eba:	4d64      	ldr	r5, [pc, #400]	; (800304c <main+0x574>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8002ebc:	a821      	add	r0, sp, #132	; 0x84
 8002ebe:	f008 f8fb 	bl	800b0b8 <memset>
  hdac1.Instance = DAC1;
 8002ec2:	4b63      	ldr	r3, [pc, #396]	; (8003050 <main+0x578>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002ec4:	4628      	mov	r0, r5
  hdac1.Instance = DAC1;
 8002ec6:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002ec8:	f001 fb40 	bl	800454c <HAL_DAC_Init>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2800      	cmp	r0, #0
 8002ed0:	d15d      	bne.n	8002f8e <main+0x4b6>
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8002ed2:	2716      	movs	r7, #22
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002ed4:	a921      	add	r1, sp, #132	; 0x84
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	2210      	movs	r2, #16
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002eda:	9321      	str	r3, [sp, #132]	; 0x84
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002edc:	9323      	str	r3, [sp, #140]	; 0x8c
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8002ede:	9722      	str	r7, [sp, #136]	; 0x88
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002ee0:	e9cd 4324 	strd	r4, r3, [sp, #144]	; 0x90
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002ee4:	f001 fc4a 	bl	800477c <HAL_DAC_ConfigChannel>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2800      	cmp	r0, #0
 8002eec:	d14f      	bne.n	8002f8e <main+0x4b6>
  htim6.Instance = TIM6;
 8002eee:	4a59      	ldr	r2, [pc, #356]	; (8003054 <main+0x57c>)
  htim6.Init.Period = 8191;
 8002ef0:	f641 71ff 	movw	r1, #8191	; 0x1fff
  htim6.Instance = TIM6;
 8002ef4:	4c58      	ldr	r4, [pc, #352]	; (8003058 <main+0x580>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ef6:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002ef8:	4610      	mov	r0, r2
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002efa:	6196      	str	r6, [r2, #24]
  htim6.Instance = TIM6;
 8002efc:	6014      	str	r4, [r2, #0]
  htim6.Init.Period = 8191;
 8002efe:	60d1      	str	r1, [r2, #12]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f00:	e9c2 3301 	strd	r3, r3, [r2, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f04:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002f08:	f004 ff22 	bl	8007d50 <HAL_TIM_Base_Init>
 8002f0c:	2800      	cmp	r0, #0
 8002f0e:	d13e      	bne.n	8002f8e <main+0x4b6>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f10:	2300      	movs	r3, #0
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002f12:	2220      	movs	r2, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002f14:	a90d      	add	r1, sp, #52	; 0x34
 8002f16:	484f      	ldr	r0, [pc, #316]	; (8003054 <main+0x57c>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f18:	930f      	str	r3, [sp, #60]	; 0x3c
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002f1a:	920d      	str	r2, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002f1c:	f005 f86e 	bl	8007ffc <HAL_TIMEx_MasterConfigSynchronization>
 8002f20:	4603      	mov	r3, r0
 8002f22:	bba0      	cbnz	r0, 8002f8e <main+0x4b6>
  huart3.Instance = USART3;
 8002f24:	4e4d      	ldr	r6, [pc, #308]	; (800305c <main+0x584>)
  huart3.Init.BaudRate = 115200;
 8002f26:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f2a:	220c      	movs	r2, #12
  huart3.Instance = USART3;
 8002f2c:	f504 5460 	add.w	r4, r4, #14336	; 0x3800
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f30:	4630      	mov	r0, r6
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f32:	6133      	str	r3, [r6, #16]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f34:	62b3      	str	r3, [r6, #40]	; 0x28
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f36:	6172      	str	r2, [r6, #20]
  huart3.Init.BaudRate = 115200;
 8002f38:	e9c6 4100 	strd	r4, r1, [r6]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f3c:	e9c6 3302 	strd	r3, r3, [r6, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f40:	e9c6 3306 	strd	r3, r3, [r6, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f44:	e9c6 3308 	strd	r3, r3, [r6, #32]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f48:	f005 fc8a 	bl	8008860 <HAL_UART_Init>
 8002f4c:	4601      	mov	r1, r0
 8002f4e:	b9f0      	cbnz	r0, 8002f8e <main+0x4b6>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f50:	4630      	mov	r0, r6
 8002f52:	f006 fed7 	bl	8009d04 <HAL_UARTEx_SetTxFifoThreshold>
 8002f56:	4601      	mov	r1, r0
 8002f58:	b9c8      	cbnz	r0, 8002f8e <main+0x4b6>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f5a:	4630      	mov	r0, r6
 8002f5c:	f006 ff24 	bl	8009da8 <HAL_UARTEx_SetRxFifoThreshold>
 8002f60:	b9a8      	cbnz	r0, 8002f8e <main+0x4b6>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002f62:	4630      	mov	r0, r6
 8002f64:	f006 feb0 	bl	8009cc8 <HAL_UARTEx_DisableFifoMode>
 8002f68:	4604      	mov	r4, r0
 8002f6a:	b980      	cbnz	r0, 8002f8e <main+0x4b6>
  MX_TIM6_Init_Custom_Rate();
 8002f6c:	f7ff fd8c 	bl	8002a88 <MX_TIM6_Init_Custom_Rate>
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 8002f70:	4621      	mov	r1, r4
 8002f72:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002f76:	483a      	ldr	r0, [pc, #232]	; (8003060 <main+0x588>)
 8002f78:	f001 f944 	bl	8004204 <HAL_ADCEx_Calibration_Start>
 8002f7c:	b938      	cbnz	r0, 8002f8e <main+0x4b6>
  if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 8002f7e:	4601      	mov	r1, r0
 8002f80:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002f84:	482e      	ldr	r0, [pc, #184]	; (8003040 <main+0x568>)
 8002f86:	f001 f93d 	bl	8004204 <HAL_ADCEx_Calibration_Start>
 8002f8a:	4605      	mov	r5, r0
 8002f8c:	b108      	cbz	r0, 8002f92 <main+0x4ba>
    Error_Handler();
 8002f8e:	f7ff fce9 	bl	8002964 <Error_Handler>
  volume= 0.1;
 8002f92:	4b34      	ldr	r3, [pc, #208]	; (8003064 <main+0x58c>)
    SetFstep(2);
 8002f94:	2002      	movs	r0, #2
  volume= 0.1;
 8002f96:	f8df a14c 	ldr.w	sl, [pc, #332]	; 80030e4 <main+0x60c>
    AMindex  = LSBindex = 1;
 8002f9a:	2401      	movs	r4, #1
   arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8002f9c:	f44f 6800 	mov.w	r8, #2048	; 0x800
 8002fa0:	4f31      	ldr	r7, [pc, #196]	; (8003068 <main+0x590>)
  volume= 0.1;
 8002fa2:	f8ca 3000 	str.w	r3, [sl]
    SetFstep(2);
 8002fa6:	f7fd fef7 	bl	8000d98 <SetFstep>
    cwpitch = CWPITCH;
 8002faa:	4b30      	ldr	r3, [pc, #192]	; (800306c <main+0x594>)
    bw[AM]   = bw[LSB]  = Wide;
 8002fac:	f04f 3001 	mov.w	r0, #16843009	; 0x1010101
    cwpitch = CWPITCH;
 8002fb0:	492f      	ldr	r1, [pc, #188]	; (8003070 <main+0x598>)
    os_time = 0;
 8002fb2:	4a30      	ldr	r2, [pc, #192]	; (8003074 <main+0x59c>)
    cwpitch = CWPITCH;
 8002fb4:	6019      	str	r1, [r3, #0]
    meanavg = 0.f;
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	4b2f      	ldr	r3, [pc, #188]	; (8003078 <main+0x5a0>)
    os_time = 0;
 8002fba:	6015      	str	r5, [r2, #0]
    meanavg = 0.f;
 8002fbc:	6019      	str	r1, [r3, #0]
    Qfactor = 0.987f;         // Q factor for the CW peak filter
 8002fbe:	4a2f      	ldr	r2, [pc, #188]	; (800307c <main+0x5a4>)
 8002fc0:	492f      	ldr	r1, [pc, #188]	; (8003080 <main+0x5a8>)
    Muted   = false;
 8002fc2:	4b30      	ldr	r3, [pc, #192]	; (8003084 <main+0x5ac>)
    Qfactor = 0.987f;         // Q factor for the CW peak filter
 8002fc4:	6011      	str	r1, [r2, #0]
    AMindex  = LSBindex = 1;
 8002fc6:	4930      	ldr	r1, [pc, #192]	; (8003088 <main+0x5b0>)
    Muted   = false;
 8002fc8:	701d      	strb	r5, [r3, #0]
    AMindex  = LSBindex = 1;
 8002fca:	800c      	strh	r4, [r1, #0]
 8002fcc:	4b2f      	ldr	r3, [pc, #188]	; (800308c <main+0x5b4>)
    USBindex = CWindex  = 1;
 8002fce:	4a30      	ldr	r2, [pc, #192]	; (8003090 <main+0x5b8>)
 8002fd0:	4930      	ldr	r1, [pc, #192]	; (8003094 <main+0x5bc>)
    AMindex  = LSBindex = 1;
 8002fd2:	801c      	strh	r4, [r3, #0]
    USBindex = CWindex  = 1;
 8002fd4:	800c      	strh	r4, [r1, #0]
 8002fd6:	8014      	strh	r4, [r2, #0]
    bw[AM]   = bw[LSB]  = Wide;
 8002fd8:	4b2f      	ldr	r3, [pc, #188]	; (8003098 <main+0x5c0>)
    agc[AM]  = agc[LSB] = Slow;
 8002fda:	4a30      	ldr	r2, [pc, #192]	; (800309c <main+0x5c4>)
 8002fdc:	4930      	ldr	r1, [pc, #192]	; (80030a0 <main+0x5c8>)
    bw[AM]   = bw[LSB]  = Wide;
 8002fde:	6018      	str	r0, [r3, #0]
    agc[AM]  = agc[LSB] = Slow;
 8002fe0:	6011      	str	r1, [r2, #0]
    AGC_decay[Fast] = 0.9995f;
 8002fe2:	4b30      	ldr	r3, [pc, #192]	; (80030a4 <main+0x5cc>)
 8002fe4:	4830      	ldr	r0, [pc, #192]	; (80030a8 <main+0x5d0>)
    AGC_decay[Slow] = 0.99995f;
 8002fe6:	4a31      	ldr	r2, [pc, #196]	; (80030ac <main+0x5d4>)
    AGC_decay[Fast] = 0.9995f;
 8002fe8:	6018      	str	r0, [r3, #0]
    AGC_decay[Slow] = 0.99995f;
 8002fea:	605a      	str	r2, [r3, #4]
    Hangcount[Fast] = 2;
 8002fec:	4930      	ldr	r1, [pc, #192]	; (80030b0 <main+0x5d8>)
 8002fee:	4831      	ldr	r0, [pc, #196]	; (80030b4 <main+0x5dc>)
    AgcThreshold    = 1.92e-4f;
 8002ff0:	4b31      	ldr	r3, [pc, #196]	; (80030b8 <main+0x5e0>)
 8002ff2:	4a32      	ldr	r2, [pc, #200]	; (80030bc <main+0x5e4>)
    Hangcount[Fast] = 2;
 8002ff4:	6008      	str	r0, [r1, #0]
    AgcThreshold    = 1.92e-4f;
 8002ff6:	601a      	str	r2, [r3, #0]
	SamplingRate = SamplingRate * 4000000.f / 3999300.f; // Correct Xtal error
 8002ff8:	4931      	ldr	r1, [pc, #196]	; (80030c0 <main+0x5e8>)
 8002ffa:	4832      	ldr	r0, [pc, #200]	; (80030c4 <main+0x5ec>)
    AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8002ffc:	4b32      	ldr	r3, [pc, #200]	; (80030c8 <main+0x5f0>)
 8002ffe:	4a33      	ldr	r2, [pc, #204]	; (80030cc <main+0x5f4>)
	SamplingRate = SamplingRate * 4000000.f / 3999300.f; // Correct Xtal error
 8003000:	6008      	str	r0, [r1, #0]
    AudioRate = SamplingRate / 4 /16.f / 4.f; //First decimation was 16, now is 64
 8003002:	601a      	str	r2, [r3, #0]
  SDR_compute_IIR_parms();  // compute the IIR parms for the CW peak filter
 8003004:	f7ff f948 	bl	8002298 <SDR_compute_IIR_parms>
   arc = arm_fir_decimate_init_f32(&SfirR, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1R, BSIZE*4);
 8003008:	4b31      	ldr	r3, [pc, #196]	; (80030d0 <main+0x5f8>)
 800300a:	2204      	movs	r2, #4
 800300c:	f8cd 8004 	str.w	r8, [sp, #4]
 8003010:	2140      	movs	r1, #64	; 0x40
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	482f      	ldr	r0, [pc, #188]	; (80030d4 <main+0x5fc>)
 8003016:	4b30      	ldr	r3, [pc, #192]	; (80030d8 <main+0x600>)
 8003018:	f007 fab8 	bl	800a58c <arm_fir_decimate_init_f32>
 800301c:	7038      	strb	r0, [r7, #0]
   while(arc != ARM_MATH_SUCCESS)
 800301e:	b100      	cbz	r0, 8003022 <main+0x54a>
 8003020:	e7fe      	b.n	8003020 <main+0x548>
   arc = arm_fir_decimate_init_f32(&SfirI, NUMFIRCOEFS, 4, FIRcoefs, FIRstate1I, BSIZE*4);
 8003022:	4b2e      	ldr	r3, [pc, #184]	; (80030dc <main+0x604>)
 8003024:	2204      	movs	r2, #4
 8003026:	f8cd 8004 	str.w	r8, [sp, #4]
 800302a:	2140      	movs	r1, #64	; 0x40
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	482c      	ldr	r0, [pc, #176]	; (80030e0 <main+0x608>)
 8003030:	4b29      	ldr	r3, [pc, #164]	; (80030d8 <main+0x600>)
 8003032:	f007 faab 	bl	800a58c <arm_fir_decimate_init_f32>
 8003036:	7038      	strb	r0, [r7, #0]
   while(arc != ARM_MATH_SUCCESS)
 8003038:	2800      	cmp	r0, #0
 800303a:	d055      	beq.n	80030e8 <main+0x610>
 800303c:	e7fe      	b.n	800303c <main+0x564>
 800303e:	bf00      	nop
 8003040:	24002a40 	.word	0x24002a40
 8003044:	40022100 	.word	0x40022100
 8003048:	14f00020 	.word	0x14f00020
 800304c:	240029a0 	.word	0x240029a0
 8003050:	40007400 	.word	0x40007400
 8003054:	24008c80 	.word	0x24008c80
 8003058:	40001000 	.word	0x40001000
 800305c:	240029b4 	.word	0x240029b4
 8003060:	24007624 	.word	0x24007624
 8003064:	3dcccccd 	.word	0x3dcccccd
 8003068:	2400c1e4 	.word	0x2400c1e4
 800306c:	24009cd4 	.word	0x24009cd4
 8003070:	44228000 	.word	0x44228000
 8003074:	24009ce0 	.word	0x24009ce0
 8003078:	2400c1e0 	.word	0x2400c1e0
 800307c:	24008cc4 	.word	0x24008cc4
 8003080:	3f7cac08 	.word	0x3f7cac08
 8003084:	24007620 	.word	0x24007620
 8003088:	2400d600 	.word	0x2400d600
 800308c:	2400d602 	.word	0x2400d602
 8003090:	24008cc8 	.word	0x24008cc8
 8003094:	24007e9c 	.word	0x24007e9c
 8003098:	24008ccc 	.word	0x24008ccc
 800309c:	24007688 	.word	0x24007688
 80030a0:	00010101 	.word	0x00010101
 80030a4:	2400c1ec 	.word	0x2400c1ec
 80030a8:	3f7fdf3b 	.word	0x3f7fdf3b
 80030ac:	3f7ffcb9 	.word	0x3f7ffcb9
 80030b0:	24009cd8 	.word	0x24009cd8
 80030b4:	001e0002 	.word	0x001e0002
 80030b8:	24009cd0 	.word	0x24009cd0
 80030bc:	3949539c 	.word	0x3949539c
 80030c0:	24004300 	.word	0x24004300
 80030c4:	4b189d57 	.word	0x4b189d57
 80030c8:	24007e98 	.word	0x24007e98
 80030cc:	47189d57 	.word	0x47189d57
 80030d0:	24004c08 	.word	0x24004c08
 80030d4:	24000504 	.word	0x24000504
 80030d8:	240000f8 	.word	0x240000f8
 80030dc:	24009ce4 	.word	0x24009ce4
 80030e0:	2400871c 	.word	0x2400871c
 80030e4:	240042d4 	.word	0x240042d4
      Load_Presets();
 80030e8:	f7fd fb32 	bl	8000750 <Load_Presets>
      Tune_Preset(1);      // Set the initial tuning to Preset 1
 80030ec:	4620      	mov	r0, r4
 80030ee:	f7fd fbcb 	bl	8000888 <Tune_Preset>
      DisplayStatus();    // Display status, it would not be shown until a user input was given
 80030f2:	f7ff fb47 	bl	8002784 <DisplayStatus>
  if (HAL_ADCEx_MultiModeStart_DMA(&hadc1,
 80030f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030fa:	497b      	ldr	r1, [pc, #492]	; (80032e8 <main+0x810>)
 80030fc:	487b      	ldr	r0, [pc, #492]	; (80032ec <main+0x814>)
 80030fe:	f001 f8d5 	bl	80042ac <HAL_ADCEx_MultiModeStart_DMA>
 8003102:	2800      	cmp	r0, #0
 8003104:	f47f af43 	bne.w	8002f8e <main+0x4b6>
  HAL_TIM_Base_Start(&htim6);
 8003108:	4879      	ldr	r0, [pc, #484]	; (80032f0 <main+0x818>)
				if (volume < 0)
 800310a:	f04f 0b00 	mov.w	fp, #0
  HAL_TIM_Base_Start(&htim6);
 800310e:	f004 fe9b 	bl	8007e48 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8003112:	2110      	movs	r1, #16
 8003114:	4877      	ldr	r0, [pc, #476]	; (80032f4 <main+0x81c>)
 8003116:	f001 fa2f 	bl	8004578 <HAL_DAC_Start>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t*)AudioOut, BSIZE * 2, DAC_ALIGN_12B_R);
 800311a:	2200      	movs	r2, #0
 800311c:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 8003308 <main+0x830>
 8003120:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003124:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8003310 <main+0x838>
 8003128:	2110      	movs	r1, #16
 800312a:	4f73      	ldr	r7, [pc, #460]	; (80032f8 <main+0x820>)
	result = (HAL_UART_Receive_IT(&huart3, (uint8_t *) UartRXString, 1 )) ;
 800312c:	4d73      	ldr	r5, [pc, #460]	; (80032fc <main+0x824>)
	  sprintf((char*)UartTXString, "S %-4.1f\r", SValue);
 800312e:	4c74      	ldr	r4, [pc, #464]	; (8003300 <main+0x828>)
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t*)AudioOut, BSIZE * 2, DAC_ALIGN_12B_R);
 8003130:	9200      	str	r2, [sp, #0]
 8003132:	4870      	ldr	r0, [pc, #448]	; (80032f4 <main+0x81c>)
 8003134:	4a73      	ldr	r2, [pc, #460]	; (8003304 <main+0x82c>)
 8003136:	f001 fa4d 	bl	80045d4 <HAL_DAC_Start_DMA>
					volume += 0.1;
 800313a:	ed9f ab65 	vldr	d10, [pc, #404]	; 80032d0 <main+0x7f8>
	  SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 800313e:	ed9f 9b66 	vldr	d9, [pc, #408]	; 80032d8 <main+0x800>
 8003142:	ed9f 8b67 	vldr	d8, [pc, #412]	; 80032e0 <main+0x808>
	__HAL_UART_SEND_REQ (&huart3, UART_RXDATA_FLUSH_REQUEST);
 8003146:	6833      	ldr	r3, [r6, #0]
	__HAL_UART_CLEAR_OREFLAG (&huart3);
 8003148:	f04f 0e08 	mov.w	lr, #8
	result = (HAL_UART_Receive_IT(&huart3, (uint8_t *) UartRXString, 1 )) ;
 800314c:	2201      	movs	r2, #1
 800314e:	496e      	ldr	r1, [pc, #440]	; (8003308 <main+0x830>)
	__HAL_UART_SEND_REQ (&huart3, UART_RXDATA_FLUSH_REQUEST);
 8003150:	f8d3 c018 	ldr.w	ip, [r3, #24]
	result = (HAL_UART_Receive_IT(&huart3, (uint8_t *) UartRXString, 1 )) ;
 8003154:	4628      	mov	r0, r5
	__HAL_UART_SEND_REQ (&huart3, UART_RXDATA_FLUSH_REQUEST);
 8003156:	ea4c 0c0e 	orr.w	ip, ip, lr
 800315a:	f8c3 c018 	str.w	ip, [r3, #24]
	__HAL_UART_CLEAR_OREFLAG (&huart3);
 800315e:	f8c3 e020 	str.w	lr, [r3, #32]
	result = (HAL_UART_Receive_IT(&huart3, (uint8_t *) UartRXString, 1 )) ;
 8003162:	f005 f867 	bl	8008234 <HAL_UART_Receive_IT>
 8003166:	f88d 0084 	strb.w	r0, [sp, #132]	; 0x84
	if (result == HAL_OK)
 800316a:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 800316e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003172:	bba3      	cbnz	r3, 80031de <main+0x706>
		switch (UartRXString[0])
 8003174:	f899 3000 	ldrb.w	r3, [r9]
		UartRXDataReady = RESET;
 8003178:	f888 2000 	strb.w	r2, [r8]
		switch (UartRXString[0])
 800317c:	3b2b      	subs	r3, #43	; 0x2b
 800317e:	2b4c      	cmp	r3, #76	; 0x4c
 8003180:	d82b      	bhi.n	80031da <main+0x702>
 8003182:	e8df f003 	tbb	[pc, r3]
 8003186:	2a8e      	.short	0x2a8e
 8003188:	2a2a2a7e 	.word	0x2a2a2a7e
 800318c:	767a9b9e 	.word	0x767a9b9e
 8003190:	666a6e72 	.word	0x666a6e72
 8003194:	2a2a2a2a 	.word	0x2a2a2a2a
 8003198:	2a2a2a2a 	.word	0x2a2a2a2a
 800319c:	2a2a2a2a 	.word	0x2a2a2a2a
 80031a0:	2a2a2a2a 	.word	0x2a2a2a2a
 80031a4:	2a2a2a2a 	.word	0x2a2a2a2a
 80031a8:	2a2a2a2a 	.word	0x2a2a2a2a
 80031ac:	2a2a2a2a 	.word	0x2a2a2a2a
 80031b0:	2a2a2a2a 	.word	0x2a2a2a2a
 80031b4:	2a2a2a2a 	.word	0x2a2a2a2a
 80031b8:	2a2a2a2a 	.word	0x2a2a2a2a
 80031bc:	2a5e2a62 	.word	0x2a5e2a62
 80031c0:	2a2a5a2a 	.word	0x2a2a5a2a
 80031c4:	562a2a2a 	.word	0x562a2a2a
 80031c8:	2a2a522a 	.word	0x2a2a522a
 80031cc:	2a4a2a2a 	.word	0x2a4a2a2a
 80031d0:	2a4e      	.short	0x2a4e
 80031d2:	27          	.byte	0x27
 80031d3:	00          	.byte	0x00
			SetBW((Bwidth)Wide);  break;
 80031d4:	2001      	movs	r0, #1
 80031d6:	f7fd fae5 	bl	80007a4 <SetBW>
	DisplayStatus();
 80031da:	f7ff fad3 	bl	8002784 <DisplayStatus>
	  SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 80031de:	ed97 0a00 	vldr	s0, [r7]
 80031e2:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80031e6:	ee20 0b09 	vmul.f64	d0, d0, d9
 80031ea:	f009 ff9d 	bl	800d128 <log10>
	  sprintf((char*)UartTXString, "S %-4.1f\r", SValue);
 80031ee:	4947      	ldr	r1, [pc, #284]	; (800330c <main+0x834>)
 80031f0:	4620      	mov	r0, r4
	  SValue = 10 / 3.01 * log10(PeakAudioValue * 2000.0);
 80031f2:	ee20 0b08 	vmul.f64	d0, d0, d8
 80031f6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
	  sprintf((char*)UartTXString, "S %-4.1f\r", SValue);
 80031fa:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 80031fe:	ec53 2b17 	vmov	r2, r3, d7
 8003202:	f008 fb9d 	bl	800b940 <siprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t *) UartTXString, strlen(UartTXString), 100);
 8003206:	4620      	mov	r0, r4
 8003208:	f7fd f8ca 	bl	80003a0 <strlen>
 800320c:	2364      	movs	r3, #100	; 0x64
 800320e:	b282      	uxth	r2, r0
 8003210:	4621      	mov	r1, r4
 8003212:	4628      	mov	r0, r5
 8003214:	f004 ff52 	bl	80080bc <HAL_UART_Transmit>
 8003218:	e795      	b.n	8003146 <main+0x66e>
			SetAGC((Agctype)Slow);  break;
 800321a:	2001      	movs	r0, #1
 800321c:	f7fd fc78 	bl	8000b10 <SetAGC>
 8003220:	e7db      	b.n	80031da <main+0x702>
			SetMode((Mode)USB); break;
 8003222:	2002      	movs	r0, #2
 8003224:	f7fd fcca 	bl	8000bbc <SetMode>
 8003228:	e7d7      	b.n	80031da <main+0x702>
			SetBW((Bwidth)Narrow);  break;
 800322a:	2000      	movs	r0, #0
 800322c:	f7fd faba 	bl	80007a4 <SetBW>
 8003230:	e7d3      	b.n	80031da <main+0x702>
			SetMode((Mode)LSB); break;
 8003232:	2001      	movs	r0, #1
 8003234:	f7fd fcc2 	bl	8000bbc <SetMode>
 8003238:	e7cf      	b.n	80031da <main+0x702>
			SetAGC((Agctype)Fast);  break;
 800323a:	2000      	movs	r0, #0
 800323c:	f7fd fc68 	bl	8000b10 <SetAGC>
 8003240:	e7cb      	b.n	80031da <main+0x702>
			SetMode((Mode)CW); break;
 8003242:	2003      	movs	r0, #3
 8003244:	f7fd fcba 	bl	8000bbc <SetMode>
 8003248:	e7c7      	b.n	80031da <main+0x702>
			SetMode((Mode)AM); break;
 800324a:	2000      	movs	r0, #0
 800324c:	f7fd fcb6 	bl	8000bbc <SetMode>
 8003250:	e7c3      	b.n	80031da <main+0x702>
			SetFstep(0); break;
 8003252:	2000      	movs	r0, #0
 8003254:	f7fd fda0 	bl	8000d98 <SetFstep>
 8003258:	e7bf      	b.n	80031da <main+0x702>
			SetFstep(1); break;
 800325a:	2001      	movs	r0, #1
 800325c:	f7fd fd9c 	bl	8000d98 <SetFstep>
 8003260:	e7bb      	b.n	80031da <main+0x702>
			SetFstep(2);  break;
 8003262:	2002      	movs	r0, #2
 8003264:	f7fd fd98 	bl	8000d98 <SetFstep>
 8003268:	e7b7      	b.n	80031da <main+0x702>
			SetFstep(3);  break;
 800326a:	2003      	movs	r0, #3
 800326c:	f7fd fd94 	bl	8000d98 <SetFstep>
 8003270:	e7b3      	b.n	80031da <main+0x702>
			SetFstep(4);  break;
 8003272:	2004      	movs	r0, #4
 8003274:	f7fd fd90 	bl	8000d98 <SetFstep>
 8003278:	e7af      	b.n	80031da <main+0x702>
			SetFstep(5);  break;
 800327a:	2005      	movs	r0, #5
 800327c:	f7fd fd8c 	bl	8000d98 <SetFstep>
 8003280:	e7ab      	b.n	80031da <main+0x702>
			volume -= 0.1;
 8003282:	ed9a 7a00 	vldr	s14, [sl]
 8003286:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800328a:	ee37 7b4a 	vsub.f64	d7, d7, d10
 800328e:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
				if (volume < 0)
 8003292:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8003296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329a:	d415      	bmi.n	80032c8 <main+0x7f0>
					volume += 0.1;
 800329c:	ed8a 7a00 	vstr	s14, [sl]
 80032a0:	e79b      	b.n	80031da <main+0x702>
 80032a2:	ed9a 7a00 	vldr	s14, [sl]
						if (volume > 1.0)
 80032a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
					volume += 0.1;
 80032aa:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80032ae:	ee37 7b0a 	vadd.f64	d7, d7, d10
 80032b2:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80032b6:	fe87 7a66 	vminnm.f32	s14, s14, s13
 80032ba:	e7ef      	b.n	800329c <main+0x7c4>
			FplusClicked(); break;
 80032bc:	f7fd fd80 	bl	8000dc0 <FplusClicked>
 80032c0:	e78b      	b.n	80031da <main+0x702>
			FminusClicked(); break;
 80032c2:	f7fd feb3 	bl	800102c <FminusClicked>
 80032c6:	e788      	b.n	80031da <main+0x702>
					volume = 0;
 80032c8:	f8ca b000 	str.w	fp, [sl]
 80032cc:	e785      	b.n	80031da <main+0x702>
 80032ce:	bf00      	nop
 80032d0:	9999999a 	.word	0x9999999a
 80032d4:	3fb99999 	.word	0x3fb99999
 80032d8:	00000000 	.word	0x00000000
 80032dc:	409f4000 	.word	0x409f4000
 80032e0:	9916f6a6 	.word	0x9916f6a6
 80032e4:	400a93fc 	.word	0x400a93fc
 80032e8:	2400ca00 	.word	0x2400ca00
 80032ec:	24007624 	.word	0x24007624
 80032f0:	24008c80 	.word	0x24008c80
 80032f4:	240029a0 	.word	0x240029a0
 80032f8:	24008718 	.word	0x24008718
 80032fc:	240029b4 	.word	0x240029b4
 8003300:	24007520 	.word	0x24007520
 8003304:	24006d20 	.word	0x24006d20
 8003308:	24004308 	.word	0x24004308
 800330c:	0801ac54 	.word	0x0801ac54
 8003310:	240004e8 	.word	0x240004e8

08003314 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003314:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <HAL_MspInit+0x2c>)

  /* System interrupt init*/
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 8003316:	2102      	movs	r1, #2
 8003318:	2200      	movs	r2, #0
 800331a:	f06f 0004 	mvn.w	r0, #4
{
 800331e:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003320:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
{
 8003324:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003326:	430c      	orrs	r4, r1
 8003328:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
 800332c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003330:	400b      	ands	r3, r1
 8003332:	9301      	str	r3, [sp, #4]
 8003334:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003336:	b003      	add	sp, #12
 8003338:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 800333c:	f001 b8aa 	b.w	8004494 <HAL_NVIC_SetPriority>
 8003340:	58024400 	.word	0x58024400

08003344 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8003344:	4943      	ldr	r1, [pc, #268]	; (8003454 <HAL_ADC_MspInit+0x110>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003346:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8003348:	6802      	ldr	r2, [r0, #0]
{
 800334a:	b570      	push	{r4, r5, r6, lr}
  if(hadc->Instance==ADC1)
 800334c:	428a      	cmp	r2, r1
{
 800334e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003350:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003354:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003358:	9309      	str	r3, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 800335a:	d01f      	beq.n	800339c <HAL_ADC_MspInit+0x58>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800335c:	4b3e      	ldr	r3, [pc, #248]	; (8003458 <HAL_ADC_MspInit+0x114>)
 800335e:	429a      	cmp	r2, r3
 8003360:	d001      	beq.n	8003366 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003362:	b00a      	add	sp, #40	; 0x28
 8003364:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003366:	4a3d      	ldr	r2, [pc, #244]	; (800345c <HAL_ADC_MspInit+0x118>)
 8003368:	6813      	ldr	r3, [r2, #0]
 800336a:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800336c:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800336e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003370:	d061      	beq.n	8003436 <HAL_ADC_MspInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003372:	4b3b      	ldr	r3, [pc, #236]	; (8003460 <HAL_ADC_MspInit+0x11c>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003374:	2502      	movs	r5, #2
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003376:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003378:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800337a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800337e:	4839      	ldr	r0, [pc, #228]	; (8003464 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003380:	432a      	orrs	r2, r5
 8003382:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800338a:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800338c:	402b      	ands	r3, r5
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800338e:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003390:	9304      	str	r3, [sp, #16]
 8003392:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003394:	f002 fbca 	bl	8005b2c <HAL_GPIO_Init>
}
 8003398:	b00a      	add	sp, #40	; 0x28
 800339a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_RCC_ADC12_CLK_ENABLED++;
 800339c:	4a2f      	ldr	r2, [pc, #188]	; (800345c <HAL_ADC_MspInit+0x118>)
 800339e:	4605      	mov	r5, r0
 80033a0:	6813      	ldr	r3, [r2, #0]
 80033a2:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80033a4:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80033a6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80033a8:	d037      	beq.n	800341a <HAL_ADC_MspInit+0xd6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033aa:	4b2d      	ldr	r3, [pc, #180]	; (8003460 <HAL_ADC_MspInit+0x11c>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80033ac:	2402      	movs	r4, #2
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033ae:	2603      	movs	r6, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b0:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033b2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b6:	482b      	ldr	r0, [pc, #172]	; (8003464 <HAL_ADC_MspInit+0x120>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033b8:	4322      	orrs	r2, r4
 80033ba:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80033be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80033c2:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033c4:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033c6:	9606      	str	r6, [sp, #24]
    hdma_adc1.Instance = DMA1_Stream0;
 80033c8:	4c27      	ldr	r4, [pc, #156]	; (8003468 <HAL_ADC_MspInit+0x124>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ca:	9302      	str	r3, [sp, #8]
 80033cc:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ce:	f002 fbad 	bl	8005b2c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Stream0;
 80033d2:	4826      	ldr	r0, [pc, #152]	; (800346c <HAL_ADC_MspInit+0x128>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80033d4:	2109      	movs	r1, #9
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80033d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_adc1.Instance = DMA1_Stream0;
 80033de:	6020      	str	r0, [r4, #0]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80033e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80033e4:	6061      	str	r1, [r4, #4]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80033e6:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80033ea:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80033ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033f0:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033f2:	2300      	movs	r3, #0
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80033f4:	61a0      	str	r0, [r4, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80033f6:	4620      	mov	r0, r4
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033f8:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80033fa:	e9c4 1207 	strd	r1, r2, [r4, #28]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80033fe:	e9c4 3302 	strd	r3, r3, [r4, #8]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003402:	f001 faff 	bl	8004a04 <HAL_DMA_Init>
 8003406:	b918      	cbnz	r0, 8003410 <HAL_ADC_MspInit+0xcc>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003408:	64ec      	str	r4, [r5, #76]	; 0x4c
 800340a:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800340c:	b00a      	add	sp, #40	; 0x28
 800340e:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8003410:	f7ff faa8 	bl	8002964 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003414:	64ec      	str	r4, [r5, #76]	; 0x4c
 8003416:	63a5      	str	r5, [r4, #56]	; 0x38
 8003418:	e7f8      	b.n	800340c <HAL_ADC_MspInit+0xc8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800341a:	4b11      	ldr	r3, [pc, #68]	; (8003460 <HAL_ADC_MspInit+0x11c>)
 800341c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8003420:	f042 0220 	orr.w	r2, r2, #32
 8003424:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8003428:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	9301      	str	r3, [sp, #4]
 8003432:	9b01      	ldr	r3, [sp, #4]
 8003434:	e7b9      	b.n	80033aa <HAL_ADC_MspInit+0x66>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003436:	4b0a      	ldr	r3, [pc, #40]	; (8003460 <HAL_ADC_MspInit+0x11c>)
 8003438:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800343c:	f042 0220 	orr.w	r2, r2, #32
 8003440:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8003444:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003448:	f003 0320 	and.w	r3, r3, #32
 800344c:	9303      	str	r3, [sp, #12]
 800344e:	9b03      	ldr	r3, [sp, #12]
 8003450:	e78f      	b.n	8003372 <HAL_ADC_MspInit+0x2e>
 8003452:	bf00      	nop
 8003454:	40022000 	.word	0x40022000
 8003458:	40022100 	.word	0x40022100
 800345c:	240004ec 	.word	0x240004ec
 8003460:	58024400 	.word	0x58024400
 8003464:	58020400 	.word	0x58020400
 8003468:	240086a0 	.word	0x240086a0
 800346c:	40020010 	.word	0x40020010

08003470 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8003470:	4b2d      	ldr	r3, [pc, #180]	; (8003528 <HAL_DAC_MspInit+0xb8>)
 8003472:	6802      	ldr	r2, [r0, #0]
{
 8003474:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hdac->Instance==DAC1)
 8003476:	429a      	cmp	r2, r3
{
 8003478:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800347a:	f04f 0400 	mov.w	r4, #0
 800347e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003482:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8003486:	9407      	str	r4, [sp, #28]
  if(hdac->Instance==DAC1)
 8003488:	d001      	beq.n	800348e <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800348a:	b009      	add	sp, #36	; 0x24
 800348c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 800348e:	4b27      	ldr	r3, [pc, #156]	; (800352c <HAL_DAC_MspInit+0xbc>)
 8003490:	4606      	mov	r6, r0
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003492:	2020      	movs	r0, #32
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003494:	2503      	movs	r5, #3
    __HAL_RCC_DAC12_CLK_ENABLE();
 8003496:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800349a:	a903      	add	r1, sp, #12
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800349c:	f44f 6780 	mov.w	r7, #1024	; 0x400
    __HAL_RCC_DAC12_CLK_ENABLE();
 80034a0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80034a4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80034a8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80034ac:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80034b0:	9201      	str	r2, [sp, #4]
 80034b2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80034b8:	f042 0201 	orr.w	r2, r2, #1
 80034bc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80034c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80034c4:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c6:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ca:	4819      	ldr	r0, [pc, #100]	; (8003530 <HAL_DAC_MspInit+0xc0>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034cc:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ce:	9302      	str	r3, [sp, #8]
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 80034d0:	4d18      	ldr	r5, [pc, #96]	; (8003534 <HAL_DAC_MspInit+0xc4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d2:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d4:	f002 fb2a 	bl	8005b2c <HAL_GPIO_Init>
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 80034d8:	4b17      	ldr	r3, [pc, #92]	; (8003538 <HAL_DAC_MspInit+0xc8>)
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034da:	2040      	movs	r0, #64	; 0x40
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 80034dc:	f04f 0c44 	mov.w	ip, #68	; 0x44
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80034e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80034e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 80034e8:	602b      	str	r3, [r5, #0]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 80034ea:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80034ee:	60ec      	str	r4, [r5, #12]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034f0:	e9c5 c001 	strd	ip, r0, [r5, #4]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 80034f4:	4628      	mov	r0, r5
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034f6:	e9c5 4408 	strd	r4, r4, [r5, #32]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80034fa:	e9c5 7104 	strd	r7, r1, [r5, #16]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 80034fe:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8003502:	f001 fa7f 	bl	8004a04 <HAL_DMA_Init>
 8003506:	b958      	cbnz	r0, 8003520 <HAL_DAC_MspInit+0xb0>
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8003508:	60f5      	str	r5, [r6, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800350a:	2200      	movs	r2, #0
 800350c:	2101      	movs	r1, #1
 800350e:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8003510:	63ae      	str	r6, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003512:	f000 ffbf 	bl	8004494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003516:	2036      	movs	r0, #54	; 0x36
 8003518:	f000 fff2 	bl	8004500 <HAL_NVIC_EnableIRQ>
}
 800351c:	b009      	add	sp, #36	; 0x24
 800351e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8003520:	f7ff fa20 	bl	8002964 <Error_Handler>
 8003524:	e7f0      	b.n	8003508 <HAL_DAC_MspInit+0x98>
 8003526:	bf00      	nop
 8003528:	40007400 	.word	0x40007400
 800352c:	58024400 	.word	0x58024400
 8003530:	58020000 	.word	0x58020000
 8003534:	24002928 	.word	0x24002928
 8003538:	40020028 	.word	0x40020028

0800353c <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 800353c:	6802      	ldr	r2, [r0, #0]
 800353e:	4b0f      	ldr	r3, [pc, #60]	; (800357c <HAL_TIM_Base_MspInit+0x40>)
 8003540:	429a      	cmp	r2, r3
 8003542:	d000      	beq.n	8003546 <HAL_TIM_Base_MspInit+0xa>
 8003544:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003546:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <HAL_TIM_Base_MspInit+0x44>)
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003548:	2200      	movs	r2, #0
 800354a:	2101      	movs	r1, #1
 800354c:	2036      	movs	r0, #54	; 0x36
{
 800354e:	b510      	push	{r4, lr}
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003550:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
{
 8003554:	b082      	sub	sp, #8
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003556:	f044 0410 	orr.w	r4, r4, #16
 800355a:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 800355e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003562:	f003 0310 	and.w	r3, r3, #16
 8003566:	9301      	str	r3, [sp, #4]
 8003568:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800356a:	f000 ff93 	bl	8004494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800356e:	2036      	movs	r0, #54	; 0x36
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003570:	b002      	add	sp, #8
 8003572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003576:	f000 bfc3 	b.w	8004500 <HAL_NVIC_EnableIRQ>
 800357a:	bf00      	nop
 800357c:	40001000 	.word	0x40001000
 8003580:	58024400 	.word	0x58024400

08003584 <HAL_UART_MspInit>:
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART3)
 8003584:	6802      	ldr	r2, [r0, #0]
 8003586:	4b1e      	ldr	r3, [pc, #120]	; (8003600 <HAL_UART_MspInit+0x7c>)
{
 8003588:	b570      	push	{r4, r5, r6, lr}
  if(huart->Instance==USART3)
 800358a:	429a      	cmp	r2, r3
{
 800358c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800358e:	f04f 0400 	mov.w	r4, #0
 8003592:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8003596:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800359a:	9407      	str	r4, [sp, #28]
  if(huart->Instance==USART3)
 800359c:	d001      	beq.n	80035a2 <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800359e:	b008      	add	sp, #32
 80035a0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 80035a2:	4b18      	ldr	r3, [pc, #96]	; (8003604 <HAL_UART_MspInit+0x80>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80035a4:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a8:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80035aa:	2507      	movs	r5, #7
    __HAL_RCC_USART3_CLK_ENABLE();
 80035ac:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035b0:	a903      	add	r1, sp, #12
    __HAL_RCC_USART3_CLK_ENABLE();
 80035b2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80035b6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80035ba:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80035be:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80035c2:	9201      	str	r2, [sp, #4]
 80035c4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035c6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80035ca:	f042 0208 	orr.w	r2, r2, #8
 80035ce:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80035d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80035d6:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035d8:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035dc:	480a      	ldr	r0, [pc, #40]	; (8003608 <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035de:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035e0:	9302      	str	r3, [sp, #8]
 80035e2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80035e4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035e6:	f002 faa1 	bl	8005b2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 80035ea:	4622      	mov	r2, r4
 80035ec:	2101      	movs	r1, #1
 80035ee:	2027      	movs	r0, #39	; 0x27
 80035f0:	f000 ff50 	bl	8004494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80035f4:	2027      	movs	r0, #39	; 0x27
 80035f6:	f000 ff83 	bl	8004500 <HAL_NVIC_EnableIRQ>
}
 80035fa:	b008      	add	sp, #32
 80035fc:	bd70      	pop	{r4, r5, r6, pc}
 80035fe:	bf00      	nop
 8003600:	40004800 	.word	0x40004800
 8003604:	58024400 	.word	0x58024400
 8003608:	58020c00 	.word	0x58020c00

0800360c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop

08003610 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003610:	e7fe      	b.n	8003610 <HardFault_Handler>
 8003612:	bf00      	nop

08003614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003614:	e7fe      	b.n	8003614 <MemManage_Handler>
 8003616:	bf00      	nop

08003618 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003618:	e7fe      	b.n	8003618 <BusFault_Handler>
 800361a:	bf00      	nop

0800361c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800361c:	e7fe      	b.n	800361c <UsageFault_Handler>
 800361e:	bf00      	nop

08003620 <SVC_Handler>:
{
  /* USER CODE BEGIN SVCall_IRQn 0 */

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
	EXTI1_IRQHandler();
 8003620:	f000 b8bc 	b.w	800379c <ADC3_IRQHandler>

08003624 <DebugMon_Handler>:
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop

08003628 <PendSV_Handler>:
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop

0800362c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800362c:	f000 b910 	b.w	8003850 <HAL_IncTick>

08003630 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003630:	4801      	ldr	r0, [pc, #4]	; (8003638 <DMA1_Stream0_IRQHandler+0x8>)
 8003632:	f001 bf3f 	b.w	80054b4 <HAL_DMA_IRQHandler>
 8003636:	bf00      	nop
 8003638:	240086a0 	.word	0x240086a0

0800363c <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 800363c:	4801      	ldr	r0, [pc, #4]	; (8003644 <DMA1_Stream1_IRQHandler+0x8>)
 800363e:	f001 bf39 	b.w	80054b4 <HAL_DMA_IRQHandler>
 8003642:	bf00      	nop
 8003644:	24002928 	.word	0x24002928

08003648 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003648:	4801      	ldr	r0, [pc, #4]	; (8003650 <USART3_IRQHandler+0x8>)
 800364a:	f004 bfab 	b.w	80085a4 <HAL_UART_IRQHandler>
 800364e:	bf00      	nop
 8003650:	240029b4 	.word	0x240029b4

08003654 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003654:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003656:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800365a:	f002 fb89 	bl	8005d70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800365e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003662:	f002 fb85 	bl	8005d70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003666:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800366a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800366e:	f002 bb7f 	b.w	8005d70 <HAL_GPIO_EXTI_IRQHandler>
 8003672:	bf00      	nop

08003674 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003674:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8003676:	4804      	ldr	r0, [pc, #16]	; (8003688 <TIM6_DAC_IRQHandler+0x14>)
 8003678:	f001 f84c 	bl	8004714 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800367c:	4803      	ldr	r0, [pc, #12]	; (800368c <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800367e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 8003682:	f004 bc03 	b.w	8007e8c <HAL_TIM_IRQHandler>
 8003686:	bf00      	nop
 8003688:	240029a0 	.word	0x240029a0
 800368c:	24008c80 	.word	0x24008c80

08003690 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003690:	4a0c      	ldr	r2, [pc, #48]	; (80036c4 <_sbrk+0x34>)
{
 8003692:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8003694:	6813      	ldr	r3, [r2, #0]
 8003696:	b133      	cbz	r3, 80036a6 <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8003698:	4418      	add	r0, r3
 800369a:	4669      	mov	r1, sp
 800369c:	4288      	cmp	r0, r1
 800369e:	d809      	bhi.n	80036b4 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80036a0:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80036a6:	4908      	ldr	r1, [pc, #32]	; (80036c8 <_sbrk+0x38>)
 80036a8:	460b      	mov	r3, r1
 80036aa:	6011      	str	r1, [r2, #0]
	if (heap_end + incr > stack_ptr)
 80036ac:	4669      	mov	r1, sp
 80036ae:	4418      	add	r0, r3
 80036b0:	4288      	cmp	r0, r1
 80036b2:	d9f5      	bls.n	80036a0 <_sbrk+0x10>
		errno = ENOMEM;
 80036b4:	f007 fcd6 	bl	800b064 <__errno>
 80036b8:	220c      	movs	r2, #12
		return (caddr_t) -1;
 80036ba:	f04f 33ff 	mov.w	r3, #4294967295
		errno = ENOMEM;
 80036be:	6002      	str	r2, [r0, #0]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	bd08      	pop	{r3, pc}
 80036c4:	240004f0 	.word	0x240004f0
 80036c8:	20000000 	.word	0x20000000

080036cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80036cc:	b430      	push	{r4, r5}
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80036ce:	4c19      	ldr	r4, [pc, #100]	; (8003734 <SystemInit+0x68>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80036d0:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 80036d2:	4b19      	ldr	r3, [pc, #100]	; (8003738 <SystemInit+0x6c>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80036d4:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80036d8:	4818      	ldr	r0, [pc, #96]	; (800373c <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80036da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80036de:	4d18      	ldr	r5, [pc, #96]	; (8003740 <SystemInit+0x74>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80036e0:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 80036e4:	681c      	ldr	r4, [r3, #0]
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80036e6:	4917      	ldr	r1, [pc, #92]	; (8003744 <SystemInit+0x78>)
  RCC->CR |= RCC_CR_HSION;
 80036e8:	f044 0401 	orr.w	r4, r4, #1
 80036ec:	601c      	str	r4, [r3, #0]
  RCC->CFGR = 0x00000000;
 80036ee:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80036f0:	681c      	ldr	r4, [r3, #0]
 80036f2:	4020      	ands	r0, r4
 80036f4:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 80036f6:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80036f8:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80036fa:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 80036fc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
 80036fe:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
 8003700:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 8003702:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
 8003704:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 8003706:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
 8003708:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 800370a:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8003712:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8003714:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003716:	682b      	ldr	r3, [r5, #0]
 8003718:	4019      	ands	r1, r3
 800371a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800371e:	d202      	bcs.n	8003726 <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003720:	4b09      	ldr	r3, [pc, #36]	; (8003748 <SystemInit+0x7c>)
 8003722:	2201      	movs	r2, #1
 8003724:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003726:	4b03      	ldr	r3, [pc, #12]	; (8003734 <SystemInit+0x68>)
 8003728:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800372c:	bc30      	pop	{r4, r5}
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800372e:	609a      	str	r2, [r3, #8]
}
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	e000ed00 	.word	0xe000ed00
 8003738:	58024400 	.word	0x58024400
 800373c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003740:	5c001000 	.word	0x5c001000
 8003744:	ffff0000 	.word	0xffff0000
 8003748:	51008108 	.word	0x51008108

0800374c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800374c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003784 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003750:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003752:	e003      	b.n	800375c <LoopCopyDataInit>

08003754 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003754:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003756:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003758:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800375a:	3104      	adds	r1, #4

0800375c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800375c:	480b      	ldr	r0, [pc, #44]	; (800378c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800375e:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003760:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003762:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003764:	d3f6      	bcc.n	8003754 <CopyDataInit>
  ldr  r2, =_sbss
 8003766:	4a0b      	ldr	r2, [pc, #44]	; (8003794 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003768:	e002      	b.n	8003770 <LoopFillZerobss>

0800376a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800376a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800376c:	f842 3b04 	str.w	r3, [r2], #4

08003770 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003770:	4b09      	ldr	r3, [pc, #36]	; (8003798 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003772:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003774:	d3f9      	bcc.n	800376a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003776:	f7ff ffa9 	bl	80036cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800377a:	f007 fc79 	bl	800b070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800377e:	f7ff f9ab 	bl	8002ad8 <main>
  bx  lr    
 8003782:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003784:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8003788:	0801df68 	.word	0x0801df68
  ldr  r0, =_sdata
 800378c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8003790:	240003dc 	.word	0x240003dc
  ldr  r2, =_sbss
 8003794:	240003e0 	.word	0x240003e0
  ldr  r3, = _ebss
 8003798:	2400d608 	.word	0x2400d608

0800379c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800379c:	e7fe      	b.n	800379c <ADC3_IRQHandler>
	...

080037a0 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80037a0:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <HAL_InitTick+0x40>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	b90b      	cbnz	r3, 80037aa <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80037a6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80037a8:	4770      	bx	lr
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80037aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037ae:	490d      	ldr	r1, [pc, #52]	; (80037e4 <HAL_InitTick+0x44>)
 80037b0:	fbb2 f3f3 	udiv	r3, r2, r3
{
 80037b4:	b510      	push	{r4, lr}
 80037b6:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80037b8:	6808      	ldr	r0, [r1, #0]
 80037ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80037be:	f000 fead 	bl	800451c <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037c2:	2c0f      	cmp	r4, #15
 80037c4:	d800      	bhi.n	80037c8 <HAL_InitTick+0x28>
 80037c6:	b108      	cbz	r0, 80037cc <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80037c8:	2001      	movs	r0, #1
}
 80037ca:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037cc:	2200      	movs	r2, #0
 80037ce:	4621      	mov	r1, r4
 80037d0:	f04f 30ff 	mov.w	r0, #4294967295
 80037d4:	f000 fe5e 	bl	8004494 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037d8:	4b03      	ldr	r3, [pc, #12]	; (80037e8 <HAL_InitTick+0x48>)
 80037da:	2000      	movs	r0, #0
 80037dc:	601c      	str	r4, [r3, #0]
}
 80037de:	bd10      	pop	{r4, pc}
 80037e0:	24000200 	.word	0x24000200
 80037e4:	240001f8 	.word	0x240001f8
 80037e8:	24000204 	.word	0x24000204

080037ec <HAL_Init>:
{
 80037ec:	b530      	push	{r4, r5, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037ee:	2003      	movs	r0, #3
{
 80037f0:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037f2:	f000 fe3b 	bl	800446c <HAL_NVIC_SetPriorityGrouping>
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037f6:	4c12      	ldr	r4, [pc, #72]	; (8003840 <HAL_Init+0x54>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80037f8:	f002 fdbe 	bl	8006378 <HAL_RCC_GetSysClockFreq>
 80037fc:	4a11      	ldr	r2, [pc, #68]	; (8003844 <HAL_Init+0x58>)
 80037fe:	4912      	ldr	r1, [pc, #72]	; (8003848 <HAL_Init+0x5c>)
 8003800:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003802:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003804:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 8003808:	4d10      	ldr	r5, [pc, #64]	; (800384c <HAL_Init+0x60>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800380a:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800380e:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003810:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003812:	f003 031f 	and.w	r3, r3, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003816:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800381a:	fa20 f303 	lsr.w	r3, r0, r3
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800381e:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003820:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 8003824:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003826:	6022      	str	r2, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003828:	f7ff ffba 	bl	80037a0 <HAL_InitTick>
 800382c:	b110      	cbz	r0, 8003834 <HAL_Init+0x48>
    return HAL_ERROR;
 800382e:	2001      	movs	r0, #1
}
 8003830:	b003      	add	sp, #12
 8003832:	bd30      	pop	{r4, r5, pc}
 8003834:	9001      	str	r0, [sp, #4]
  HAL_MspInit();
 8003836:	f7ff fd6d 	bl	8003314 <HAL_MspInit>
  return HAL_OK;
 800383a:	9801      	ldr	r0, [sp, #4]
}
 800383c:	b003      	add	sp, #12
 800383e:	bd30      	pop	{r4, r5, pc}
 8003840:	240001fc 	.word	0x240001fc
 8003844:	58024400 	.word	0x58024400
 8003848:	0801ac60 	.word	0x0801ac60
 800384c:	240001f8 	.word	0x240001f8

08003850 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003850:	4a03      	ldr	r2, [pc, #12]	; (8003860 <HAL_IncTick+0x10>)
 8003852:	4b04      	ldr	r3, [pc, #16]	; (8003864 <HAL_IncTick+0x14>)
 8003854:	6811      	ldr	r1, [r2, #0]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	440b      	add	r3, r1
 800385a:	6013      	str	r3, [r2, #0]
}
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	240042fc 	.word	0x240042fc
 8003864:	24000200 	.word	0x24000200

08003868 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003868:	4b01      	ldr	r3, [pc, #4]	; (8003870 <HAL_GetTick+0x8>)
 800386a:	6818      	ldr	r0, [r3, #0]
}
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	240042fc 	.word	0x240042fc

08003874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003874:	b538      	push	{r3, r4, r5, lr}
 8003876:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003878:	f7ff fff6 	bl	8003868 <HAL_GetTick>
 800387c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800387e:	1c63      	adds	r3, r4, #1
 8003880:	d002      	beq.n	8003888 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003882:	4b04      	ldr	r3, [pc, #16]	; (8003894 <HAL_Delay+0x20>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003888:	f7ff ffee 	bl	8003868 <HAL_GetTick>
 800388c:	1b40      	subs	r0, r0, r5
 800388e:	42a0      	cmp	r0, r4
 8003890:	d3fa      	bcc.n	8003888 <HAL_Delay+0x14>
  {
  }
}
 8003892:	bd38      	pop	{r3, r4, r5, pc}
 8003894:	24000200 	.word	0x24000200

08003898 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8003898:	4b01      	ldr	r3, [pc, #4]	; (80038a0 <HAL_GetREVID+0x8>)
 800389a:	6818      	ldr	r0, [r3, #0]
}
 800389c:	0c00      	lsrs	r0, r0, #16
 800389e:	4770      	bx	lr
 80038a0:	5c001000 	.word	0x5c001000

080038a4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80038a4:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80038a6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80038a8:	f7fe ff2a 	bl	8002700 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038ac:	bd08      	pop	{r3, pc}
 80038ae:	bf00      	nop

080038b0 <HAL_ADC_ErrorCallback>:
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop

080038b4 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80038b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038b8:	f012 0f50 	tst.w	r2, #80	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
{
 80038be:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80038c0:	d11d      	bne.n	80038fe <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80038c2:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038c8:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80038ca:	680a      	ldr	r2, [r1, #0]
 80038cc:	f012 0f08 	tst.w	r2, #8
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80038d0:	68ca      	ldr	r2, [r1, #12]
 80038d2:	d01b      	beq.n	800390c <ADC_DMAConvCplt+0x58>
 80038d4:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80038d8:	d10d      	bne.n	80038f6 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80038da:	68ca      	ldr	r2, [r1, #12]
 80038dc:	0494      	lsls	r4, r2, #18
 80038de:	d40a      	bmi.n	80038f6 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038e6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038ea:	04d1      	lsls	r1, r2, #19
 80038ec:	d403      	bmi.n	80038f6 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038f0:	f042 0201 	orr.w	r2, r2, #1
 80038f4:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fe fee4 	bl	80026c4 <HAL_ADC_ConvCpltCallback>
}
 80038fc:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80038fe:	06d2      	lsls	r2, r2, #27
 8003900:	d407      	bmi.n	8003912 <ADC_DMAConvCplt+0x5e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390a:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800390c:	0790      	lsls	r0, r2, #30
 800390e:	d1f2      	bne.n	80038f6 <ADC_DMAConvCplt+0x42>
 8003910:	e7e6      	b.n	80038e0 <ADC_DMAConvCplt+0x2c>
      HAL_ADC_ErrorCallback(hadc);
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff ffcc 	bl	80038b0 <HAL_ADC_ErrorCallback>
}
 8003918:	bd10      	pop	{r4, pc}
 800391a:	bf00      	nop

0800391c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800391c:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800391e:	6b83      	ldr	r3, [r0, #56]	; 0x38

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003920:	6d5a      	ldr	r2, [r3, #84]	; 0x54

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003922:	4618      	mov	r0, r3
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003928:	655a      	str	r2, [r3, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800392a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800392c:	f042 0204 	orr.w	r2, r2, #4
 8003930:	659a      	str	r2, [r3, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc);
 8003932:	f7ff ffbd 	bl	80038b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003936:	bd08      	pop	{r3, pc}

08003938 <HAL_ADC_ConfigChannel>:
{
 8003938:	4602      	mov	r2, r0
  __IO uint32_t wait_loop_index = 0;
 800393a:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 800393c:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
{
 8003940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 8003944:	2b01      	cmp	r3, #1
{
 8003946:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8003948:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800394a:	f000 8134 	beq.w	8003bb6 <HAL_ADC_ConfigChannel+0x27e>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800394e:	6813      	ldr	r3, [r2, #0]
  __HAL_LOCK(hadc);
 8003950:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003952:	689c      	ldr	r4, [r3, #8]
 8003954:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
 8003958:	0767      	lsls	r7, r4, #29
 800395a:	d443      	bmi.n	80039e4 <HAL_ADC_ConfigChannel+0xac>
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800395c:	680c      	ldr	r4, [r1, #0]
 800395e:	f3c4 0513 	ubfx	r5, r4, #0, #20
 8003962:	f3c4 6784 	ubfx	r7, r4, #26, #5
 8003966:	2d00      	cmp	r5, #0
 8003968:	f040 80a5 	bne.w	8003ab6 <HAL_ADC_ConfigChannel+0x17e>
 800396c:	40b8      	lsls	r0, r7
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800396e:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 8003970:	f04f 0c1f 	mov.w	ip, #31
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003974:	69dd      	ldr	r5, [r3, #28]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003976:	09a6      	lsrs	r6, r4, #6
  MODIFY_REG(*preg,
 8003978:	ea04 040c 	and.w	r4, r4, ip
 800397c:	4328      	orrs	r0, r5
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800397e:	f103 0530 	add.w	r5, r3, #48	; 0x30
 8003982:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 8003986:	fa0c fc04 	lsl.w	ip, ip, r4
 800398a:	61d8      	str	r0, [r3, #28]
 800398c:	fa07 f404 	lsl.w	r4, r7, r4
 8003990:	5970      	ldr	r0, [r6, r5]
 8003992:	ea20 000c 	bic.w	r0, r0, ip
 8003996:	4320      	orrs	r0, r4
 8003998:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800399a:	6898      	ldr	r0, [r3, #8]
 800399c:	0746      	lsls	r6, r0, #29
 800399e:	f100 8088 	bmi.w	8003ab2 <HAL_ADC_ConfigChannel+0x17a>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80039a2:	689d      	ldr	r5, [r3, #8]
 80039a4:	f015 0508 	ands.w	r5, r5, #8
 80039a8:	d026      	beq.n	80039f8 <HAL_ADC_ConfigChannel+0xc0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80039aa:	6898      	ldr	r0, [r3, #8]
 80039ac:	07c5      	lsls	r5, r0, #31
 80039ae:	d417      	bmi.n	80039e0 <HAL_ADC_ConfigChannel+0xa8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80039b0:	68ce      	ldr	r6, [r1, #12]
 80039b2:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 80039b4:	f006 0718 	and.w	r7, r6, #24
 80039b8:	48bc      	ldr	r0, [pc, #752]	; (8003cac <HAL_ADC_ConfigChannel+0x374>)
 80039ba:	f8d3 50c0 	ldr.w	r5, [r3, #192]	; 0xc0
 80039be:	40f8      	lsrs	r0, r7
 80039c0:	f3c4 0713 	ubfx	r7, r4, #0, #20
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039c4:	f8df c30c 	ldr.w	ip, [pc, #780]	; 8003cd4 <HAL_ADC_ConfigChannel+0x39c>
 80039c8:	4020      	ands	r0, r4
 80039ca:	ea25 0507 	bic.w	r5, r5, r7
 80039ce:	4566      	cmp	r6, ip
 80039d0:	ea40 0005 	orr.w	r0, r0, r5
 80039d4:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
 80039d8:	f000 80a6 	beq.w	8003b28 <HAL_ADC_ConfigChannel+0x1f0>
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80039dc:	2c00      	cmp	r4, #0
 80039de:	db72      	blt.n	8003ac6 <HAL_ADC_ConfigChannel+0x18e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039e0:	2000      	movs	r0, #0
 80039e2:	e003      	b.n	80039ec <HAL_ADC_ConfigChannel+0xb4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039e4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80039e6:	f043 0320 	orr.w	r3, r3, #32
 80039ea:	6553      	str	r3, [r2, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 80039ec:	2300      	movs	r3, #0
 80039ee:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
}
 80039f2:	b002      	add	sp, #8
 80039f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80039f8:	680c      	ldr	r4, [r1, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80039fa:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 80039fe:	2007      	movs	r0, #7
 8003a00:	688f      	ldr	r7, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003a02:	ea4f 5cd4 	mov.w	ip, r4, lsr #23
  MODIFY_REG(*preg,
 8003a06:	f3c4 5404 	ubfx	r4, r4, #20, #5
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003a0a:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 8003a0e:	fa00 fe04 	lsl.w	lr, r0, r4
 8003a12:	fa07 f404 	lsl.w	r4, r7, r4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a16:	4fa6      	ldr	r7, [pc, #664]	; (8003cb0 <HAL_ADC_ConfigChannel+0x378>)
 8003a18:	f85c 0006 	ldr.w	r0, [ip, r6]
 8003a1c:	ea20 000e 	bic.w	r0, r0, lr
 8003a20:	4320      	orrs	r0, r4
 8003a22:	f84c 0006 	str.w	r0, [ip, r6]
 8003a26:	6838      	ldr	r0, [r7, #0]
 8003a28:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
 8003a2c:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
 8003a30:	f000 80b8 	beq.w	8003ba4 <HAL_ADC_ConfigChannel+0x26c>
 8003a34:	68dc      	ldr	r4, [r3, #12]
 8003a36:	6948      	ldr	r0, [r1, #20]
 8003a38:	f014 0f10 	tst.w	r4, #16
 8003a3c:	68dc      	ldr	r4, [r3, #12]
 8003a3e:	f040 80d9 	bne.w	8003bf4 <HAL_ADC_ConfigChannel+0x2bc>
 8003a42:	f3c4 0482 	ubfx	r4, r4, #2, #3
 8003a46:	0064      	lsls	r4, r4, #1
 8003a48:	fa00 fc04 	lsl.w	ip, r0, r4
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003a4c:	f8d1 e010 	ldr.w	lr, [r1, #16]
 8003a50:	6808      	ldr	r0, [r1, #0]
 8003a52:	f1be 0f04 	cmp.w	lr, #4
 8003a56:	f000 80b2 	beq.w	8003bbe <HAL_ADC_ConfigChannel+0x286>
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a5a:	f103 0660 	add.w	r6, r3, #96	; 0x60
  MODIFY_REG(*preg,
 8003a5e:	f000 44f8 	and.w	r4, r0, #2080374784	; 0x7c000000
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003a62:	7e4f      	ldrb	r7, [r1, #25]
 8003a64:	f856 002e 	ldr.w	r0, [r6, lr, lsl #2]
 8003a68:	2f01      	cmp	r7, #1
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003a6a:	7e0f      	ldrb	r7, [r1, #24]
 8003a6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003a70:	bf14      	ite	ne
 8003a72:	f04f 0800 	movne.w	r8, #0
 8003a76:	f04f 4800 	moveq.w	r8, #2147483648	; 0x80000000
 8003a7a:	4320      	orrs	r0, r4
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003a7c:	2f01      	cmp	r7, #1
 8003a7e:	ea40 000c 	orr.w	r0, r0, ip
 8003a82:	f846 002e 	str.w	r0, [r6, lr, lsl #2]
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003a86:	690c      	ldr	r4, [r1, #16]
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003a88:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003a8c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003a90:	ea40 0008 	orr.w	r0, r0, r8
 8003a94:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003a98:	6908      	ldr	r0, [r1, #16]
 8003a9a:	d104      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x16e>
 8003a9c:	f000 001f 	and.w	r0, r0, #31
 8003aa0:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8003aa4:	4085      	lsls	r5, r0
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003aa6:	6918      	ldr	r0, [r3, #16]
 8003aa8:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
 8003aac:	4305      	orrs	r5, r0
 8003aae:	611d      	str	r5, [r3, #16]
 8003ab0:	e77b      	b.n	80039aa <HAL_ADC_ConfigChannel+0x72>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ab2:	6898      	ldr	r0, [r3, #8]
 8003ab4:	e779      	b.n	80039aa <HAL_ADC_ConfigChannel+0x72>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab6:	fa94 f4a4 	rbit	r4, r4
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003aba:	fab4 f484 	clz	r4, r4
 8003abe:	f004 041f 	and.w	r4, r4, #31
 8003ac2:	40a0      	lsls	r0, r4
 8003ac4:	e753      	b.n	800396e <HAL_ADC_ConfigChannel+0x36>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ac6:	497b      	ldr	r1, [pc, #492]	; (8003cb4 <HAL_ADC_ConfigChannel+0x37c>)
 8003ac8:	428b      	cmp	r3, r1
 8003aca:	f000 80bd 	beq.w	8003c48 <HAL_ADC_ConfigChannel+0x310>
 8003ace:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8003ad2:	428b      	cmp	r3, r1
 8003ad4:	f000 80b8 	beq.w	8003c48 <HAL_ADC_ConfigChannel+0x310>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ad8:	4e77      	ldr	r6, [pc, #476]	; (8003cb8 <HAL_ADC_ConfigChannel+0x380>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003ada:	4d78      	ldr	r5, [pc, #480]	; (8003cbc <HAL_ADC_ConfigChannel+0x384>)
 8003adc:	68a8      	ldr	r0, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ade:	68b1      	ldr	r1, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003ae0:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8003ae4:	43c9      	mvns	r1, r1
 8003ae6:	f001 0101 	and.w	r1, r1, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003aea:	2900      	cmp	r1, #0
 8003aec:	f000 80ba 	beq.w	8003c64 <HAL_ADC_ConfigChannel+0x32c>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003af0:	4973      	ldr	r1, [pc, #460]	; (8003cc0 <HAL_ADC_ConfigChannel+0x388>)
 8003af2:	428c      	cmp	r4, r1
 8003af4:	f000 80f0 	beq.w	8003cd8 <HAL_ADC_ConfigChannel+0x3a0>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003af8:	4972      	ldr	r1, [pc, #456]	; (8003cc4 <HAL_ADC_ConfigChannel+0x38c>)
 8003afa:	428c      	cmp	r4, r1
 8003afc:	f000 810e 	beq.w	8003d1c <HAL_ADC_ConfigChannel+0x3e4>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b00:	4971      	ldr	r1, [pc, #452]	; (8003cc8 <HAL_ADC_ConfigChannel+0x390>)
 8003b02:	428c      	cmp	r4, r1
 8003b04:	f47f af6c 	bne.w	80039e0 <HAL_ADC_ConfigChannel+0xa8>
            if (ADC_VREFINT_INSTANCE(hadc))
 8003b08:	0241      	lsls	r1, r0, #9
 8003b0a:	f53f af69 	bmi.w	80039e0 <HAL_ADC_ConfigChannel+0xa8>
 8003b0e:	496a      	ldr	r1, [pc, #424]	; (8003cb8 <HAL_ADC_ConfigChannel+0x380>)
 8003b10:	428b      	cmp	r3, r1
 8003b12:	f47f af65 	bne.w	80039e0 <HAL_ADC_ConfigChannel+0xa8>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b16:	68a9      	ldr	r1, [r5, #8]
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003b18:	f446 0380 	orr.w	r3, r6, #4194304	; 0x400000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003b22:	430b      	orrs	r3, r1
 8003b24:	60ab      	str	r3, [r5, #8]
 8003b26:	e761      	b.n	80039ec <HAL_ADC_ConfigChannel+0xb4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b28:	2f00      	cmp	r7, #0
 8003b2a:	d069      	beq.n	8003c00 <HAL_ADC_ConfigChannel+0x2c8>
 8003b2c:	fa94 f0a4 	rbit	r0, r4
 8003b30:	fab0 f080 	clz	r0, r0
 8003b34:	3001      	adds	r0, #1
 8003b36:	f000 001f 	and.w	r0, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b3a:	2809      	cmp	r0, #9
 8003b3c:	f200 8098 	bhi.w	8003c70 <HAL_ADC_ConfigChannel+0x338>
 8003b40:	fa94 f0a4 	rbit	r0, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b44:	fab0 f080 	clz	r0, r0
 8003b48:	fa94 f5a4 	rbit	r5, r4
 8003b4c:	2601      	movs	r6, #1
 8003b4e:	fab5 f585 	clz	r5, r5
 8003b52:	3001      	adds	r0, #1
 8003b54:	4435      	add	r5, r6
 8003b56:	0680      	lsls	r0, r0, #26
 8003b58:	f005 051f 	and.w	r5, r5, #31
 8003b5c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003b60:	fa06 f505 	lsl.w	r5, r6, r5
 8003b64:	4328      	orrs	r0, r5
 8003b66:	fa94 f4a4 	rbit	r4, r4
 8003b6a:	fab4 f484 	clz	r4, r4
 8003b6e:	4434      	add	r4, r6
 8003b70:	f004 041f 	and.w	r4, r4, #31
 8003b74:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003b78:	0524      	lsls	r4, r4, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b7a:	4304      	orrs	r4, r0
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b7c:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 8003b80:	f04f 0c07 	mov.w	ip, #7
 8003b84:	6888      	ldr	r0, [r1, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b86:	0de7      	lsrs	r7, r4, #23
  MODIFY_REG(*preg,
 8003b88:	f3c4 5404 	ubfx	r4, r4, #20, #5
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b8c:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 8003b90:	fa0c fc04 	lsl.w	ip, ip, r4
 8003b94:	40a0      	lsls	r0, r4
 8003b96:	59bd      	ldr	r5, [r7, r6]
 8003b98:	ea25 040c 	bic.w	r4, r5, ip
 8003b9c:	4304      	orrs	r4, r0
 8003b9e:	51bc      	str	r4, [r7, r6]
 8003ba0:	680c      	ldr	r4, [r1, #0]
 8003ba2:	e71b      	b.n	80039dc <HAL_ADC_ConfigChannel+0xa4>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ba4:	68dc      	ldr	r4, [r3, #12]
 8003ba6:	6948      	ldr	r0, [r1, #20]
 8003ba8:	f3c4 0c82 	ubfx	ip, r4, #2, #3
 8003bac:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003bb0:	fa00 fc0c 	lsl.w	ip, r0, ip
 8003bb4:	e74a      	b.n	8003a4c <HAL_ADC_ConfigChannel+0x114>
  __HAL_LOCK(hadc);
 8003bb6:	2002      	movs	r0, #2
}
 8003bb8:	b002      	add	sp, #8
 8003bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003bbe:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8003bc0:	0680      	lsls	r0, r0, #26
 8003bc2:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003bc6:	4284      	cmp	r4, r0
 8003bc8:	d039      	beq.n	8003c3e <HAL_ADC_ConfigChannel+0x306>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003bca:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8003bcc:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003bd0:	42a0      	cmp	r0, r4
 8003bd2:	d02f      	beq.n	8003c34 <HAL_ADC_ConfigChannel+0x2fc>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003bd4:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8003bd6:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003bda:	42a0      	cmp	r0, r4
 8003bdc:	d025      	beq.n	8003c2a <HAL_ADC_ConfigChannel+0x2f2>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003bde:	6edc      	ldr	r4, [r3, #108]	; 0x6c
 8003be0:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003be4:	42a0      	cmp	r0, r4
 8003be6:	f47f aee0 	bne.w	80039aa <HAL_ADC_ConfigChannel+0x72>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003bea:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003bec:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003bf0:	66d8      	str	r0, [r3, #108]	; 0x6c
 8003bf2:	e6da      	b.n	80039aa <HAL_ADC_ConfigChannel+0x72>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003bf4:	0864      	lsrs	r4, r4, #1
 8003bf6:	f004 0408 	and.w	r4, r4, #8
 8003bfa:	fa00 fc04 	lsl.w	ip, r0, r4
 8003bfe:	e725      	b.n	8003a4c <HAL_ADC_ConfigChannel+0x114>
 8003c00:	2001      	movs	r0, #1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c02:	0ea4      	lsrs	r4, r4, #26
 8003c04:	4404      	add	r4, r0
 8003c06:	f004 051f 	and.w	r5, r4, #31
 8003c0a:	06a4      	lsls	r4, r4, #26
 8003c0c:	fa00 f605 	lsl.w	r6, r0, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c10:	2d09      	cmp	r5, #9
 8003c12:	f004 40f8 	and.w	r0, r4, #2080374784	; 0x7c000000
 8003c16:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8003c1a:	ea40 0006 	orr.w	r0, r0, r6
 8003c1e:	d9ab      	bls.n	8003b78 <HAL_ADC_ConfigChannel+0x240>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c20:	3c1e      	subs	r4, #30
 8003c22:	0524      	lsls	r4, r4, #20
 8003c24:	f044 7400 	orr.w	r4, r4, #33554432	; 0x2000000
 8003c28:	e7a7      	b.n	8003b7a <HAL_ADC_ConfigChannel+0x242>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003c2a:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 8003c2c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003c30:	669c      	str	r4, [r3, #104]	; 0x68
 8003c32:	e7d4      	b.n	8003bde <HAL_ADC_ConfigChannel+0x2a6>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003c34:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8003c36:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003c3a:	665c      	str	r4, [r3, #100]	; 0x64
 8003c3c:	e7ca      	b.n	8003bd4 <HAL_ADC_ConfigChannel+0x29c>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003c3e:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8003c40:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003c44:	661c      	str	r4, [r3, #96]	; 0x60
 8003c46:	e7c0      	b.n	8003bca <HAL_ADC_ConfigChannel+0x292>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003c48:	4920      	ldr	r1, [pc, #128]	; (8003ccc <HAL_ADC_ConfigChannel+0x394>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c4a:	4e21      	ldr	r6, [pc, #132]	; (8003cd0 <HAL_ADC_ConfigChannel+0x398>)
 8003c4c:	4f19      	ldr	r7, [pc, #100]	; (8003cb4 <HAL_ADC_ConfigChannel+0x37c>)
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c4e:	460d      	mov	r5, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003c50:	6888      	ldr	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c52:	68bf      	ldr	r7, [r7, #8]
 8003c54:	68b1      	ldr	r1, [r6, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003c56:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8003c5a:	4339      	orrs	r1, r7
 8003c5c:	43c9      	mvns	r1, r1
 8003c5e:	f001 0101 	and.w	r1, r1, #1
 8003c62:	e742      	b.n	8003aea <HAL_ADC_ConfigChannel+0x1b2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c64:	6d53      	ldr	r3, [r2, #84]	; 0x54
          tmp_hal_status = HAL_ERROR;
 8003c66:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c68:	f043 0320 	orr.w	r3, r3, #32
 8003c6c:	6553      	str	r3, [r2, #84]	; 0x54
 8003c6e:	e6bd      	b.n	80039ec <HAL_ADC_ConfigChannel+0xb4>
 8003c70:	fa94 f0a4 	rbit	r0, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c74:	fab0 f080 	clz	r0, r0
 8003c78:	fa94 f5a4 	rbit	r5, r4
 8003c7c:	2601      	movs	r6, #1
 8003c7e:	fab5 f585 	clz	r5, r5
 8003c82:	3001      	adds	r0, #1
 8003c84:	4435      	add	r5, r6
 8003c86:	0680      	lsls	r0, r0, #26
 8003c88:	f005 051f 	and.w	r5, r5, #31
 8003c8c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8003c90:	fa06 f505 	lsl.w	r5, r6, r5
 8003c94:	4328      	orrs	r0, r5
 8003c96:	fa94 f4a4 	rbit	r4, r4
 8003c9a:	fab4 f484 	clz	r4, r4
 8003c9e:	4434      	add	r4, r6
 8003ca0:	f004 041f 	and.w	r4, r4, #31
 8003ca4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003ca8:	e7ba      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x2e8>
 8003caa:	bf00      	nop
 8003cac:	000fffff 	.word	0x000fffff
 8003cb0:	5c001000 	.word	0x5c001000
 8003cb4:	40022000 	.word	0x40022000
 8003cb8:	58026000 	.word	0x58026000
 8003cbc:	58026300 	.word	0x58026300
 8003cc0:	cb840000 	.word	0xcb840000
 8003cc4:	c7520000 	.word	0xc7520000
 8003cc8:	cfb80000 	.word	0xcfb80000
 8003ccc:	40022300 	.word	0x40022300
 8003cd0:	40022100 	.word	0x40022100
 8003cd4:	47ff0000 	.word	0x47ff0000
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003cd8:	0204      	lsls	r4, r0, #8
 8003cda:	f53f ae81 	bmi.w	80039e0 <HAL_ADC_ConfigChannel+0xa8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cde:	4917      	ldr	r1, [pc, #92]	; (8003d3c <HAL_ADC_ConfigChannel+0x404>)
 8003ce0:	428b      	cmp	r3, r1
 8003ce2:	f47f ae7d 	bne.w	80039e0 <HAL_ADC_ConfigChannel+0xa8>
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003ce6:	4b16      	ldr	r3, [pc, #88]	; (8003d40 <HAL_ADC_ConfigChannel+0x408>)
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003ce8:	f446 0100 	orr.w	r1, r6, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003cec:	68a8      	ldr	r0, [r5, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f020 70e0 	bic.w	r0, r0, #29360128	; 0x1c00000
 8003cf4:	4c13      	ldr	r4, [pc, #76]	; (8003d44 <HAL_ADC_ConfigChannel+0x40c>)
 8003cf6:	099b      	lsrs	r3, r3, #6
 8003cf8:	4301      	orrs	r1, r0
 8003cfa:	fba4 0303 	umull	r0, r3, r4, r3
 8003cfe:	60a9      	str	r1, [r5, #8]
 8003d00:	099b      	lsrs	r3, r3, #6
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	9301      	str	r3, [sp, #4]
              while(wait_loop_index != 0UL)
 8003d06:	9b01      	ldr	r3, [sp, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f43f ae69 	beq.w	80039e0 <HAL_ADC_ConfigChannel+0xa8>
                wait_loop_index--;
 8003d0e:	9b01      	ldr	r3, [sp, #4]
 8003d10:	3b01      	subs	r3, #1
 8003d12:	9301      	str	r3, [sp, #4]
              while(wait_loop_index != 0UL)
 8003d14:	9b01      	ldr	r3, [sp, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f9      	bne.n	8003d0e <HAL_ADC_ConfigChannel+0x3d6>
 8003d1a:	e661      	b.n	80039e0 <HAL_ADC_ConfigChannel+0xa8>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d1c:	01c0      	lsls	r0, r0, #7
 8003d1e:	f53f ae5f 	bmi.w	80039e0 <HAL_ADC_ConfigChannel+0xa8>
 8003d22:	4906      	ldr	r1, [pc, #24]	; (8003d3c <HAL_ADC_ConfigChannel+0x404>)
 8003d24:	428b      	cmp	r3, r1
 8003d26:	f47f ae5b 	bne.w	80039e0 <HAL_ADC_ConfigChannel+0xa8>
 8003d2a:	68a9      	ldr	r1, [r5, #8]
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003d2c:	f046 7380 	orr.w	r3, r6, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d30:	2000      	movs	r0, #0
 8003d32:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8003d36:	430b      	orrs	r3, r1
 8003d38:	60ab      	str	r3, [r5, #8]
 8003d3a:	e657      	b.n	80039ec <HAL_ADC_ConfigChannel+0xb4>
 8003d3c:	58026000 	.word	0x58026000
 8003d40:	240001f8 	.word	0x240001f8
 8003d44:	053e2d63 	.word	0x053e2d63

08003d48 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d48:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d4a:	6891      	ldr	r1, [r2, #8]
 8003d4c:	07cb      	lsls	r3, r1, #31
 8003d4e:	d40e      	bmi.n	8003d6e <ADC_Enable+0x26>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003d50:	4926      	ldr	r1, [pc, #152]	; (8003dec <ADC_Enable+0xa4>)
{
 8003d52:	b570      	push	{r4, r5, r6, lr}
 8003d54:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003d56:	6890      	ldr	r0, [r2, #8]
 8003d58:	4208      	tst	r0, r1
 8003d5a:	d00a      	beq.n	8003d72 <ADC_Enable+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d5c:	6d62      	ldr	r2, [r4, #84]	; 0x54
      return HAL_ERROR;
 8003d5e:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d60:	f042 0210 	orr.w	r2, r2, #16
 8003d64:	6562      	str	r2, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d66:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003d68:	4302      	orrs	r2, r0
 8003d6a:	65a2      	str	r2, [r4, #88]	; 0x58
}
 8003d6c:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003d6e:	2000      	movs	r0, #0
}
 8003d70:	4770      	bx	lr
  MODIFY_REG(ADCx->CR,
 8003d72:	6891      	ldr	r1, [r2, #8]
 8003d74:	4b1e      	ldr	r3, [pc, #120]	; (8003df0 <ADC_Enable+0xa8>)
 8003d76:	400b      	ands	r3, r1
 8003d78:	f043 0301 	orr.w	r3, r3, #1
 8003d7c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003d7e:	f7ff fd73 	bl	8003868 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	4a1b      	ldr	r2, [pc, #108]	; (8003df4 <ADC_Enable+0xac>)
    tickstart = HAL_GetTick();
 8003d86:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d026      	beq.n	8003dda <ADC_Enable+0x92>
 8003d8c:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d022      	beq.n	8003dda <ADC_Enable+0x92>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003d94:	4a18      	ldr	r2, [pc, #96]	; (8003df8 <ADC_Enable+0xb0>)
 8003d96:	6892      	ldr	r2, [r2, #8]
  MODIFY_REG(ADCx->CR,
 8003d98:	4e15      	ldr	r6, [pc, #84]	; (8003df0 <ADC_Enable+0xa8>)
 8003d9a:	e00a      	b.n	8003db2 <ADC_Enable+0x6a>
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	4032      	ands	r2, r6
 8003da0:	f042 0201 	orr.w	r2, r2, #1
 8003da4:	609a      	str	r2, [r3, #8]
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003da6:	f7ff fd5f 	bl	8003868 <HAL_GetTick>
 8003daa:	1b40      	subs	r0, r0, r5
 8003dac:	2802      	cmp	r0, #2
 8003dae:	d80b      	bhi.n	8003dc8 <ADC_Enable+0x80>
 8003db0:	6823      	ldr	r3, [r4, #0]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	07d2      	lsls	r2, r2, #31
 8003db6:	d417      	bmi.n	8003de8 <ADC_Enable+0xa0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	07d1      	lsls	r1, r2, #31
 8003dbc:	d5ee      	bpl.n	8003d9c <ADC_Enable+0x54>
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003dbe:	f7ff fd53 	bl	8003868 <HAL_GetTick>
 8003dc2:	1b40      	subs	r0, r0, r5
 8003dc4:	2802      	cmp	r0, #2
 8003dc6:	d9f3      	bls.n	8003db0 <ADC_Enable+0x68>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dc8:	6d63      	ldr	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8003dca:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dcc:	f043 0310 	orr.w	r3, r3, #16
 8003dd0:	6563      	str	r3, [r4, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003dd4:	4303      	orrs	r3, r0
 8003dd6:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8003dd8:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003dda:	4a08      	ldr	r2, [pc, #32]	; (8003dfc <ADC_Enable+0xb4>)
 8003ddc:	6892      	ldr	r2, [r2, #8]
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003dde:	06d0      	lsls	r0, r2, #27
 8003de0:	d0da      	beq.n	8003d98 <ADC_Enable+0x50>
    if (    (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003de2:	4a07      	ldr	r2, [pc, #28]	; (8003e00 <ADC_Enable+0xb8>)
         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d1d7      	bne.n	8003d98 <ADC_Enable+0x50>
  return HAL_OK;
 8003de8:	2000      	movs	r0, #0
}
 8003dea:	bd70      	pop	{r4, r5, r6, pc}
 8003dec:	8000003f 	.word	0x8000003f
 8003df0:	7fffffc0 	.word	0x7fffffc0
 8003df4:	40022000 	.word	0x40022000
 8003df8:	58026300 	.word	0x58026300
 8003dfc:	40022300 	.word	0x40022300
 8003e00:	40022100 	.word	0x40022100

08003e04 <ADC_Disable>:
{
 8003e04:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003e06:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003e08:	6899      	ldr	r1, [r3, #8]
 8003e0a:	0789      	lsls	r1, r1, #30
 8003e0c:	d502      	bpl.n	8003e14 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e0e:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8003e10:	2000      	movs	r0, #0
}
 8003e12:	bd38      	pop	{r3, r4, r5, pc}
 8003e14:	6899      	ldr	r1, [r3, #8]
 8003e16:	07ca      	lsls	r2, r1, #31
 8003e18:	d523      	bpl.n	8003e62 <ADC_Disable+0x5e>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e1a:	6899      	ldr	r1, [r3, #8]
 8003e1c:	4604      	mov	r4, r0
 8003e1e:	f001 010d 	and.w	r1, r1, #13
 8003e22:	2901      	cmp	r1, #1
 8003e24:	d008      	beq.n	8003e38 <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e26:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8003e28:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e2a:	f043 0310 	orr.w	r3, r3, #16
 8003e2e:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e32:	4303      	orrs	r3, r0
 8003e34:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8003e36:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8003e38:	6898      	ldr	r0, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e3a:	2103      	movs	r1, #3
 8003e3c:	4a0a      	ldr	r2, [pc, #40]	; (8003e68 <ADC_Disable+0x64>)
 8003e3e:	4002      	ands	r2, r0
 8003e40:	f042 0202 	orr.w	r2, r2, #2
 8003e44:	609a      	str	r2, [r3, #8]
 8003e46:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8003e48:	f7ff fd0e 	bl	8003868 <HAL_GetTick>
 8003e4c:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e4e:	e004      	b.n	8003e5a <ADC_Disable+0x56>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e50:	f7ff fd0a 	bl	8003868 <HAL_GetTick>
 8003e54:	1b40      	subs	r0, r0, r5
 8003e56:	2802      	cmp	r0, #2
 8003e58:	d8e5      	bhi.n	8003e26 <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e5a:	6823      	ldr	r3, [r4, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	07db      	lsls	r3, r3, #31
 8003e60:	d4f6      	bmi.n	8003e50 <ADC_Disable+0x4c>
  return HAL_OK;
 8003e62:	2000      	movs	r0, #0
}
 8003e64:	bd38      	pop	{r3, r4, r5, pc}
 8003e66:	bf00      	nop
 8003e68:	7fffffc0 	.word	0x7fffffc0

08003e6c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8003e6c:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003e6e:	4a52      	ldr	r2, [pc, #328]	; (8003fb8 <ADC_ConfigureBoostMode+0x14c>)
{
 8003e70:	4605      	mov	r5, r0
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003e72:	6803      	ldr	r3, [r0, #0]
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d027      	beq.n	8003ec8 <ADC_ConfigureBoostMode+0x5c>
 8003e78:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d023      	beq.n	8003ec8 <ADC_ConfigureBoostMode+0x5c>
 8003e80:	4b4e      	ldr	r3, [pc, #312]	; (8003fbc <ADC_ConfigureBoostMode+0x150>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8003e88:	bf14      	ite	ne
 8003e8a:	2301      	movne	r3, #1
 8003e8c:	2300      	moveq	r3, #0
 8003e8e:	b323      	cbz	r3, 8003eda <ADC_ConfigureBoostMode+0x6e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003e90:	f002 fc28 	bl	80066e4 <HAL_RCC_GetHCLKFreq>
    switch(hadc->Init.ClockPrescaler)
 8003e94:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8003e96:	4604      	mov	r4, r0
    switch(hadc->Init.ClockPrescaler)
 8003e98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e9c:	d062      	beq.n	8003f64 <ADC_ConfigureBoostMode+0xf8>
 8003e9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ea2:	d072      	beq.n	8003f8a <ADC_ConfigureBoostMode+0x11e>
 8003ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea8:	d05c      	beq.n	8003f64 <ADC_ConfigureBoostMode+0xf8>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003eaa:	f7ff fcf5 	bl	8003898 <HAL_GetREVID>
 8003eae:	f241 0303 	movw	r3, #4099	; 0x1003
 8003eb2:	4298      	cmp	r0, r3
 8003eb4:	d832      	bhi.n	8003f1c <ADC_ConfigureBoostMode+0xb0>
  {
    if(freq > 20000000UL)
 8003eb6:	4a42      	ldr	r2, [pc, #264]	; (8003fc0 <ADC_ConfigureBoostMode+0x154>)
 8003eb8:	682b      	ldr	r3, [r5, #0]
 8003eba:	4294      	cmp	r4, r2
 8003ebc:	d928      	bls.n	8003f10 <ADC_ConfigureBoostMode+0xa4>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ec4:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003ec6:	bd38      	pop	{r3, r4, r5, pc}
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003ec8:	4b3e      	ldr	r3, [pc, #248]	; (8003fc4 <ADC_ConfigureBoostMode+0x158>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8003ed0:	bf14      	ite	ne
 8003ed2:	2301      	movne	r3, #1
 8003ed4:	2300      	moveq	r3, #0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1da      	bne.n	8003e90 <ADC_ConfigureBoostMode+0x24>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003eda:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003ede:	f003 fe29 	bl	8007b34 <HAL_RCCEx_GetPeriphCLKFreq>
    switch(hadc->Init.ClockPrescaler)
 8003ee2:	686b      	ldr	r3, [r5, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003ee4:	4604      	mov	r4, r0
    switch(hadc->Init.ClockPrescaler)
 8003ee6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003eea:	d049      	beq.n	8003f80 <ADC_ConfigureBoostMode+0x114>
 8003eec:	d93e      	bls.n	8003f6c <ADC_ConfigureBoostMode+0x100>
 8003eee:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003ef2:	d04e      	beq.n	8003f92 <ADC_ConfigureBoostMode+0x126>
 8003ef4:	d927      	bls.n	8003f46 <ADC_ConfigureBoostMode+0xda>
 8003ef6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003efa:	d048      	beq.n	8003f8e <ADC_ConfigureBoostMode+0x122>
 8003efc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003f00:	d1d3      	bne.n	8003eaa <ADC_ConfigureBoostMode+0x3e>
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003f02:	f7ff fcc9 	bl	8003898 <HAL_GetREVID>
 8003f06:	f241 0303 	movw	r3, #4099	; 0x1003
 8003f0a:	4298      	cmp	r0, r3
 8003f0c:	d805      	bhi.n	8003f1a <ADC_ConfigureBoostMode+0xae>
 8003f0e:	682b      	ldr	r3, [r5, #0]
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f16:	609a      	str	r2, [r3, #8]
}
 8003f18:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 256UL;
 8003f1a:	0a24      	lsrs	r4, r4, #8
    freq /= 2U; /* divider by 2 for Rev.V */
 8003f1c:	0864      	lsrs	r4, r4, #1
    if (freq <= 6250000UL)
 8003f1e:	4a2a      	ldr	r2, [pc, #168]	; (8003fc8 <ADC_ConfigureBoostMode+0x15c>)
 8003f20:	682b      	ldr	r3, [r5, #0]
 8003f22:	4294      	cmp	r4, r2
 8003f24:	d90a      	bls.n	8003f3c <ADC_ConfigureBoostMode+0xd0>
    else if(freq <= 12500000UL)
 8003f26:	4a29      	ldr	r2, [pc, #164]	; (8003fcc <ADC_ConfigureBoostMode+0x160>)
 8003f28:	4294      	cmp	r4, r2
 8003f2a:	d914      	bls.n	8003f56 <ADC_ConfigureBoostMode+0xea>
    else if(freq <= 25000000UL)
 8003f2c:	4a28      	ldr	r2, [pc, #160]	; (8003fd0 <ADC_ConfigureBoostMode+0x164>)
 8003f2e:	4294      	cmp	r4, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003f30:	689a      	ldr	r2, [r3, #8]
    else if(freq <= 25000000UL)
 8003f32:	d932      	bls.n	8003f9a <ADC_ConfigureBoostMode+0x12e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003f34:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003f38:	609a      	str	r2, [r3, #8]
}
 8003f3a:	bd38      	pop	{r3, r4, r5, pc}
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f42:	609a      	str	r2, [r3, #8]
}
 8003f44:	bd38      	pop	{r3, r4, r5, pc}
    switch(hadc->Init.ClockPrescaler)
 8003f46:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003f4a:	d024      	beq.n	8003f96 <ADC_ConfigureBoostMode+0x12a>
 8003f4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f50:	d1ab      	bne.n	8003eaa <ADC_ConfigureBoostMode+0x3e>
        freq /= 32UL;
 8003f52:	0944      	lsrs	r4, r0, #5
        break;
 8003f54:	e7a9      	b.n	8003eaa <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f60:	609a      	str	r2, [r3, #8]
}
 8003f62:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003f64:	0c1b      	lsrs	r3, r3, #16
 8003f66:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8003f6a:	e79e      	b.n	8003eaa <ADC_ConfigureBoostMode+0x3e>
    switch(hadc->Init.ClockPrescaler)
 8003f6c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003f70:	d006      	beq.n	8003f80 <ADC_ConfigureBoostMode+0x114>
 8003f72:	d818      	bhi.n	8003fa6 <ADC_ConfigureBoostMode+0x13a>
 8003f74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f78:	d002      	beq.n	8003f80 <ADC_ConfigureBoostMode+0x114>
 8003f7a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f7e:	d194      	bne.n	8003eaa <ADC_ConfigureBoostMode+0x3e>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003f80:	0c9b      	lsrs	r3, r3, #18
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	fbb4 f4f3 	udiv	r4, r4, r3
        break;
 8003f88:	e78f      	b.n	8003eaa <ADC_ConfigureBoostMode+0x3e>
        freq /= 4UL;
 8003f8a:	0884      	lsrs	r4, r0, #2
        break;
 8003f8c:	e78d      	b.n	8003eaa <ADC_ConfigureBoostMode+0x3e>
        freq /= 128UL;
 8003f8e:	09c4      	lsrs	r4, r0, #7
        break;
 8003f90:	e78b      	b.n	8003eaa <ADC_ConfigureBoostMode+0x3e>
        freq /= 64UL;
 8003f92:	0984      	lsrs	r4, r0, #6
        break;
 8003f94:	e789      	b.n	8003eaa <ADC_ConfigureBoostMode+0x3e>
        freq /= 16UL;
 8003f96:	0904      	lsrs	r4, r0, #4
      break;
 8003f98:	e787      	b.n	8003eaa <ADC_ConfigureBoostMode+0x3e>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003f9a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fa2:	609a      	str	r2, [r3, #8]
}
 8003fa4:	bd38      	pop	{r3, r4, r5, pc}
    switch(hadc->Init.ClockPrescaler)
 8003fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003faa:	d0e9      	beq.n	8003f80 <ADC_ConfigureBoostMode+0x114>
 8003fac:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003fb0:	f47f af7b 	bne.w	8003eaa <ADC_ConfigureBoostMode+0x3e>
 8003fb4:	e7e4      	b.n	8003f80 <ADC_ConfigureBoostMode+0x114>
 8003fb6:	bf00      	nop
 8003fb8:	40022000 	.word	0x40022000
 8003fbc:	58026300 	.word	0x58026300
 8003fc0:	01312d00 	.word	0x01312d00
 8003fc4:	40022300 	.word	0x40022300
 8003fc8:	005f5e10 	.word	0x005f5e10
 8003fcc:	00bebc20 	.word	0x00bebc20
 8003fd0:	017d7840 	.word	0x017d7840

08003fd4 <HAL_ADC_Init>:
{
 8003fd4:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8003fd6:	2300      	movs	r3, #0
{
 8003fd8:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8003fda:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	f000 80aa 	beq.w	8004136 <HAL_ADC_Init+0x162>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003fe2:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8003fe4:	4604      	mov	r4, r0
 8003fe6:	2d00      	cmp	r5, #0
 8003fe8:	f000 809a 	beq.w	8004120 <HAL_ADC_Init+0x14c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003fec:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003fee:	6893      	ldr	r3, [r2, #8]
 8003ff0:	009d      	lsls	r5, r3, #2
 8003ff2:	d503      	bpl.n	8003ffc <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ff4:	6891      	ldr	r1, [r2, #8]
 8003ff6:	4b77      	ldr	r3, [pc, #476]	; (80041d4 <HAL_ADC_Init+0x200>)
 8003ff8:	400b      	ands	r3, r1
 8003ffa:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ffc:	6893      	ldr	r3, [r2, #8]
 8003ffe:	00d8      	lsls	r0, r3, #3
 8004000:	d415      	bmi.n	800402e <HAL_ADC_Init+0x5a>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004002:	4b75      	ldr	r3, [pc, #468]	; (80041d8 <HAL_ADC_Init+0x204>)
  MODIFY_REG(ADCx->CR,
 8004004:	6890      	ldr	r0, [r2, #8]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4d74      	ldr	r5, [pc, #464]	; (80041dc <HAL_ADC_Init+0x208>)
 800400a:	099b      	lsrs	r3, r3, #6
 800400c:	4974      	ldr	r1, [pc, #464]	; (80041e0 <HAL_ADC_Init+0x20c>)
 800400e:	fba5 5303 	umull	r5, r3, r5, r3
 8004012:	4001      	ands	r1, r0
 8004014:	099b      	lsrs	r3, r3, #6
 8004016:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800401a:	6091      	str	r1, [r2, #8]
 800401c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800401e:	9b01      	ldr	r3, [sp, #4]
 8004020:	b12b      	cbz	r3, 800402e <HAL_ADC_Init+0x5a>
      wait_loop_index--;
 8004022:	9b01      	ldr	r3, [sp, #4]
 8004024:	3b01      	subs	r3, #1
 8004026:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8004028:	9b01      	ldr	r3, [sp, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f9      	bne.n	8004022 <HAL_ADC_Init+0x4e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800402e:	6893      	ldr	r3, [r2, #8]
 8004030:	00d9      	lsls	r1, r3, #3
 8004032:	d467      	bmi.n	8004104 <HAL_ADC_Init+0x130>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004034:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8004036:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004038:	f043 0310 	orr.w	r3, r3, #16
 800403c:	6563      	str	r3, [r4, #84]	; 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800403e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004040:	432b      	orrs	r3, r5
 8004042:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004044:	6893      	ldr	r3, [r2, #8]
 8004046:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800404a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800404c:	d160      	bne.n	8004110 <HAL_ADC_Init+0x13c>
 800404e:	06db      	lsls	r3, r3, #27
 8004050:	d45e      	bmi.n	8004110 <HAL_ADC_Init+0x13c>
    ADC_STATE_CLR_SET(hadc->State,
 8004052:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004054:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004058:	f043 0302 	orr.w	r3, r3, #2
 800405c:	6563      	str	r3, [r4, #84]	; 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800405e:	6893      	ldr	r3, [r2, #8]
 8004060:	07de      	lsls	r6, r3, #31
 8004062:	d413      	bmi.n	800408c <HAL_ADC_Init+0xb8>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004064:	4b5f      	ldr	r3, [pc, #380]	; (80041e4 <HAL_ADC_Init+0x210>)
 8004066:	429a      	cmp	r2, r3
 8004068:	f000 8092 	beq.w	8004190 <HAL_ADC_Init+0x1bc>
 800406c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004070:	429a      	cmp	r2, r3
 8004072:	f000 808d 	beq.w	8004190 <HAL_ADC_Init+0x1bc>
 8004076:	4b5c      	ldr	r3, [pc, #368]	; (80041e8 <HAL_ADC_Init+0x214>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	07d9      	lsls	r1, r3, #31
 800407c:	d406      	bmi.n	800408c <HAL_ADC_Init+0xb8>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800407e:	4a5b      	ldr	r2, [pc, #364]	; (80041ec <HAL_ADC_Init+0x218>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004080:	6893      	ldr	r3, [r2, #8]
 8004082:	6861      	ldr	r1, [r4, #4]
 8004084:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8004088:	430b      	orrs	r3, r1
 800408a:	6093      	str	r3, [r2, #8]
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800408c:	f7ff fc04 	bl	8003898 <HAL_GetREVID>
 8004090:	f241 0303 	movw	r3, #4099	; 0x1003
 8004094:	7d62      	ldrb	r2, [r4, #21]
 8004096:	4298      	cmp	r0, r3
 8004098:	7f21      	ldrb	r1, [r4, #28]
 800409a:	d96c      	bls.n	8004176 <HAL_ADC_Init+0x1a2>
 800409c:	68a3      	ldr	r3, [r4, #8]
 800409e:	0352      	lsls	r2, r2, #13
 80040a0:	040e      	lsls	r6, r1, #16
 80040a2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80040a4:	2b10      	cmp	r3, #16
 80040a6:	f000 808e 	beq.w	80041c6 <HAL_ADC_Init+0x1f2>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040aa:	431a      	orrs	r2, r3
 80040ac:	4332      	orrs	r2, r6
 80040ae:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040b0:	2901      	cmp	r1, #1
 80040b2:	d103      	bne.n	80040bc <HAL_ADC_Init+0xe8>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80040b4:	6a23      	ldr	r3, [r4, #32]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040be:	b123      	cbz	r3, 80040ca <HAL_ADC_Init+0xf6>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80040c0:	f403 7378 	and.w	r3, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80040c4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80040c6:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80040c8:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80040ca:	6823      	ldr	r3, [r4, #0]
 80040cc:	4948      	ldr	r1, [pc, #288]	; (80041f0 <HAL_ADC_Init+0x21c>)
 80040ce:	68d8      	ldr	r0, [r3, #12]
 80040d0:	4001      	ands	r1, r0
 80040d2:	430a      	orrs	r2, r1
 80040d4:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80040dc:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040de:	d101      	bne.n	80040e4 <HAL_ADC_Init+0x110>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80040e0:	0712      	lsls	r2, r2, #28
 80040e2:	d52c      	bpl.n	800413e <HAL_ADC_Init+0x16a>
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040e4:	68e2      	ldr	r2, [r4, #12]
 80040e6:	2a01      	cmp	r2, #1
 80040e8:	d04a      	beq.n	8004180 <HAL_ADC_Init+0x1ac>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80040ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ec:	f022 020f 	bic.w	r2, r2, #15
 80040f0:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80040f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
}
 80040f4:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80040f6:	f023 0303 	bic.w	r3, r3, #3
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	6563      	str	r3, [r4, #84]	; 0x54
}
 8004100:	b002      	add	sp, #8
 8004102:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004104:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004106:	2500      	movs	r5, #0
 8004108:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800410c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800410e:	d09e      	beq.n	800404e <HAL_ADC_Init+0x7a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004110:	6d63      	ldr	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8004112:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004114:	f043 0310 	orr.w	r3, r3, #16
}
 8004118:	4628      	mov	r0, r5
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800411a:	6563      	str	r3, [r4, #84]	; 0x54
}
 800411c:	b002      	add	sp, #8
 800411e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8004120:	f7ff f910 	bl	8003344 <HAL_ADC_MspInit>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004124:	6822      	ldr	r2, [r4, #0]
    ADC_CLEAR_ERRORCODE(hadc);
 8004126:	65a5      	str	r5, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004128:	6893      	ldr	r3, [r2, #8]
    hadc->Lock = HAL_UNLOCKED;
 800412a:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 800412e:	009d      	lsls	r5, r3, #2
 8004130:	f57f af64 	bpl.w	8003ffc <HAL_ADC_Init+0x28>
 8004134:	e75e      	b.n	8003ff4 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 8004136:	2501      	movs	r5, #1
}
 8004138:	4628      	mov	r0, r5
 800413a:	b002      	add	sp, #8
 800413c:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800413e:	68d8      	ldr	r0, [r3, #12]
 8004140:	4a2c      	ldr	r2, [pc, #176]	; (80041f4 <HAL_ADC_Init+0x220>)
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004142:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004144:	4002      	ands	r2, r0
 8004146:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004148:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
      if (hadc->Init.OversamplingMode == ENABLE)
 800414c:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004150:	4302      	orrs	r2, r0
      if (hadc->Init.OversamplingMode == ENABLE)
 8004152:	2901      	cmp	r1, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004154:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8004156:	d025      	beq.n	80041a4 <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004158:	691a      	ldr	r2, [r3, #16]
 800415a:	f022 0201 	bic.w	r2, r2, #1
 800415e:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004160:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 8004162:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004164:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004166:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800416a:	430a      	orrs	r2, r1
 800416c:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 800416e:	f7ff fe7d 	bl	8003e6c <ADC_ConfigureBoostMode>
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	e7b6      	b.n	80040e4 <HAL_ADC_Init+0x110>
 8004176:	0352      	lsls	r2, r2, #13
 8004178:	68a3      	ldr	r3, [r4, #8]
 800417a:	040e      	lsls	r6, r1, #16
 800417c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800417e:	e794      	b.n	80040aa <HAL_ADC_Init+0xd6>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004180:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004182:	69a2      	ldr	r2, [r4, #24]
 8004184:	f021 010f 	bic.w	r1, r1, #15
 8004188:	3a01      	subs	r2, #1
 800418a:	430a      	orrs	r2, r1
 800418c:	631a      	str	r2, [r3, #48]	; 0x30
 800418e:	e7b0      	b.n	80040f2 <HAL_ADC_Init+0x11e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004190:	4a14      	ldr	r2, [pc, #80]	; (80041e4 <HAL_ADC_Init+0x210>)
 8004192:	4b19      	ldr	r3, [pc, #100]	; (80041f8 <HAL_ADC_Init+0x224>)
 8004194:	6892      	ldr	r2, [r2, #8]
 8004196:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004198:	4313      	orrs	r3, r2
 800419a:	07d8      	lsls	r0, r3, #31
 800419c:	f53f af76 	bmi.w	800408c <HAL_ADC_Init+0xb8>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80041a0:	4a16      	ldr	r2, [pc, #88]	; (80041fc <HAL_ADC_Init+0x228>)
 80041a2:	e76d      	b.n	8004080 <HAL_ADC_Init+0xac>
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80041a4:	e9d4 2110 	ldrd	r2, r1, [r4, #64]	; 0x40
 80041a8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80041aa:	430a      	orrs	r2, r1
 80041ac:	4e14      	ldr	r6, [pc, #80]	; (8004200 <HAL_ADC_Init+0x22c>)
 80041ae:	6919      	ldr	r1, [r3, #16]
 80041b0:	f042 0201 	orr.w	r2, r2, #1
 80041b4:	400e      	ands	r6, r1
 80041b6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80041b8:	4302      	orrs	r2, r0
 80041ba:	3901      	subs	r1, #1
 80041bc:	4332      	orrs	r2, r6
 80041be:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80041c2:	611a      	str	r2, [r3, #16]
 80041c4:	e7cc      	b.n	8004160 <HAL_ADC_Init+0x18c>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80041c6:	f040 031c 	orr.w	r3, r0, #28
 80041ca:	4313      	orrs	r3, r2
 80041cc:	ea43 0206 	orr.w	r2, r3, r6
 80041d0:	e76e      	b.n	80040b0 <HAL_ADC_Init+0xdc>
 80041d2:	bf00      	nop
 80041d4:	5fffffc0 	.word	0x5fffffc0
 80041d8:	240001f8 	.word	0x240001f8
 80041dc:	053e2d63 	.word	0x053e2d63
 80041e0:	6fffffc0 	.word	0x6fffffc0
 80041e4:	40022000 	.word	0x40022000
 80041e8:	58026000 	.word	0x58026000
 80041ec:	58026300 	.word	0x58026300
 80041f0:	fff0c003 	.word	0xfff0c003
 80041f4:	ffffbffc 	.word	0xffffbffc
 80041f8:	40022100 	.word	0x40022100
 80041fc:	40022300 	.word	0x40022300
 8004200:	fc00f81e 	.word	0xfc00f81e

08004204 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004204:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004206:	f890 5050 	ldrb.w	r5, [r0, #80]	; 0x50
{
 800420a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 800420c:	2600      	movs	r6, #0
  __HAL_LOCK(hadc);
 800420e:	2d01      	cmp	r5, #1
  __IO uint32_t wait_loop_index = 0UL;
 8004210:	9601      	str	r6, [sp, #4]
  __HAL_LOCK(hadc);
 8004212:	d036      	beq.n	8004282 <HAL_ADCEx_Calibration_Start+0x7e>
 8004214:	2301      	movs	r3, #1
 8004216:	4604      	mov	r4, r0
 8004218:	4615      	mov	r5, r2
 800421a:	460e      	mov	r6, r1
 800421c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004220:	f7ff fdf0 	bl	8003e04 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004224:	bb20      	cbnz	r0, 8004270 <HAL_ADCEx_Calibration_Start+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004226:	6d67      	ldr	r7, [r4, #84]	; 0x54
  MODIFY_REG(ADCx->CR,
 8004228:	f005 4380 	and.w	r3, r5, #1073741824	; 0x40000000
 800422c:	4d1c      	ldr	r5, [pc, #112]	; (80042a0 <HAL_ADCEx_Calibration_Start+0x9c>)
 800422e:	f406 3180 	and.w	r1, r6, #65536	; 0x10000
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance , CalibrationMode, SingleDiff );
 8004232:	6822      	ldr	r2, [r4, #0]
 8004234:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ADC_STATE_CLR_SET(hadc->State,
 8004238:	403d      	ands	r5, r7
 800423a:	4e1a      	ldr	r6, [pc, #104]	; (80042a4 <HAL_ADCEx_Calibration_Start+0xa0>)
 800423c:	430b      	orrs	r3, r1

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800423e:	491a      	ldr	r1, [pc, #104]	; (80042a8 <HAL_ADCEx_Calibration_Start+0xa4>)
    ADC_STATE_CLR_SET(hadc->State,
 8004240:	f045 0502 	orr.w	r5, r5, #2
 8004244:	6565      	str	r5, [r4, #84]	; 0x54
 8004246:	6895      	ldr	r5, [r2, #8]
 8004248:	402e      	ands	r6, r5
 800424a:	4333      	orrs	r3, r6
 800424c:	6093      	str	r3, [r2, #8]
 800424e:	e005      	b.n	800425c <HAL_ADCEx_Calibration_Start+0x58>
      wait_loop_index++;
 8004250:	9b01      	ldr	r3, [sp, #4]
 8004252:	3301      	adds	r3, #1
 8004254:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004256:	9b01      	ldr	r3, [sp, #4]
 8004258:	428b      	cmp	r3, r1
 800425a:	d815      	bhi.n	8004288 <HAL_ADCEx_Calibration_Start+0x84>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800425c:	6893      	ldr	r3, [r2, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	dbf6      	blt.n	8004250 <HAL_ADCEx_Calibration_Start+0x4c>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004262:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004264:	f023 0303 	bic.w	r3, r3, #3
 8004268:	f043 0301 	orr.w	r3, r3, #1
 800426c:	6563      	str	r3, [r4, #84]	; 0x54
 800426e:	e003      	b.n	8004278 <HAL_ADCEx_Calibration_Start+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004270:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004272:	f043 0310 	orr.w	r3, r3, #16
 8004276:	6563      	str	r3, [r4, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004278:	2300      	movs	r3, #0
 800427a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
}
 800427e:	b003      	add	sp, #12
 8004280:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hadc);
 8004282:	2002      	movs	r0, #2
}
 8004284:	b003      	add	sp, #12
 8004286:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ADC_STATE_CLR_SET(hadc->State,
 8004288:	6d63      	ldr	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 800428a:	2200      	movs	r2, #0
        return HAL_ERROR;
 800428c:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 800428e:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8004292:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
        ADC_STATE_CLR_SET(hadc->State,
 8004296:	f043 0310 	orr.w	r3, r3, #16
 800429a:	6563      	str	r3, [r4, #84]	; 0x54
}
 800429c:	b003      	add	sp, #12
 800429e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042a0:	ffffeefd 	.word	0xffffeefd
 80042a4:	3ffeffc0 	.word	0x3ffeffc0
 80042a8:	25c3f7ff 	.word	0x25c3f7ff

080042ac <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80042ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80042b0:	6807      	ldr	r7, [r0, #0]
{
 80042b2:	b09a      	sub	sp, #104	; 0x68
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042b4:	68bd      	ldr	r5, [r7, #8]
 80042b6:	f015 0504 	ands.w	r5, r5, #4
 80042ba:	d123      	bne.n	8004304 <HAL_ADCEx_MultiModeStart_DMA+0x58>
    return HAL_BUSY;
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80042bc:	f890 6050 	ldrb.w	r6, [r0, #80]	; 0x50
 80042c0:	4604      	mov	r4, r0
 80042c2:	2e01      	cmp	r6, #1
 80042c4:	d01e      	beq.n	8004304 <HAL_ADCEx_MultiModeStart_DMA+0x58>

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80042c6:	4b30      	ldr	r3, [pc, #192]	; (8004388 <HAL_ADCEx_MultiModeStart_DMA+0xdc>)
    __HAL_LOCK(hadc);
 80042c8:	2601      	movs	r6, #1
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80042ca:	429f      	cmp	r7, r3
    __HAL_LOCK(hadc);
 80042cc:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80042d0:	d009      	beq.n	80042e6 <HAL_ADCEx_MultiModeStart_DMA+0x3a>

    if (tmphadcSlave.Instance == NULL)
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042d2:	6d43      	ldr	r3, [r0, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);

      return HAL_ERROR;
 80042d4:	4630      	mov	r0, r6
      __HAL_UNLOCK(hadc);
 80042d6:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042da:	f043 0320 	orr.w	r3, r3, #32
 80042de:	6563      	str	r3, [r4, #84]	; 0x54
    }

    /* Return function status */
    return tmp_hal_status;
  }
}
 80042e0:	b01a      	add	sp, #104	; 0x68
 80042e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042e6:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80043a0 <HAL_ADCEx_MultiModeStart_DMA+0xf4>
 80042ea:	4616      	mov	r6, r2
 80042ec:	460d      	mov	r5, r1
 80042ee:	f8cd 8004 	str.w	r8, [sp, #4]
    tmp_hal_status = ADC_Enable(hadc);
 80042f2:	f7ff fd29 	bl	8003d48 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80042f6:	b148      	cbz	r0, 800430c <HAL_ADCEx_MultiModeStart_DMA+0x60>
      __HAL_UNLOCK(hadc);
 80042f8:	2300      	movs	r3, #0
 80042fa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80042fe:	b01a      	add	sp, #104	; 0x68
 8004300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004304:	2002      	movs	r0, #2
}
 8004306:	b01a      	add	sp, #104	; 0x68
 8004308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 800430c:	a801      	add	r0, sp, #4
 800430e:	f7ff fd1b 	bl	8003d48 <ADC_Enable>
 8004312:	4602      	mov	r2, r0
    if (tmp_hal_status == HAL_OK)
 8004314:	2800      	cmp	r0, #0
 8004316:	d1ef      	bne.n	80042f8 <HAL_ADCEx_MultiModeStart_DMA+0x4c>
      ADC_STATE_CLR_SET(hadc->State,
 8004318:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800431a:	4b1c      	ldr	r3, [pc, #112]	; (800438c <HAL_ADCEx_MultiModeStart_DMA+0xe0>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800431c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
      ADC_STATE_CLR_SET(hadc->State,
 800431e:	400b      	ands	r3, r1
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004320:	f8df c080 	ldr.w	ip, [pc, #128]	; 80043a4 <HAL_ADCEx_MultiModeStart_DMA+0xf8>
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004324:	f8df e080 	ldr.w	lr, [pc, #128]	; 80043a8 <HAL_ADCEx_MultiModeStart_DMA+0xfc>
      ADC_STATE_CLR_SET(hadc->State,
 8004328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 800432c:	4918      	ldr	r1, [pc, #96]	; (8004390 <HAL_ADCEx_MultiModeStart_DMA+0xe4>)
      ADC_STATE_CLR_SET(hadc->State,
 800432e:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8004330:	65a2      	str	r2, [r4, #88]	; 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004332:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004336:	f8d4 c000 	ldr.w	ip, [r4]
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800433a:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800433e:	45bc      	cmp	ip, r7
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8004340:	64c1      	str	r1, [r0, #76]	; 0x4c
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004342:	d01e      	beq.n	8004382 <HAL_ADCEx_MultiModeStart_DMA+0xd6>
 8004344:	45c4      	cmp	ip, r8
 8004346:	d01c      	beq.n	8004382 <HAL_ADCEx_MultiModeStart_DMA+0xd6>
 8004348:	4912      	ldr	r1, [pc, #72]	; (8004394 <HAL_ADCEx_MultiModeStart_DMA+0xe8>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800434a:	f04f 0e1c 	mov.w	lr, #28
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 800434e:	462a      	mov	r2, r5
      __HAL_UNLOCK(hadc);
 8004350:	2700      	movs	r7, #0
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8004352:	4633      	mov	r3, r6
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004354:	f8cc e000 	str.w	lr, [ip]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8004358:	310c      	adds	r1, #12
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800435a:	f8dc 5004 	ldr.w	r5, [ip, #4]
      __HAL_UNLOCK(hadc);
 800435e:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004362:	f045 0510 	orr.w	r5, r5, #16
 8004366:	f8cc 5004 	str.w	r5, [ip, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 800436a:	f000 fe17 	bl	8004f9c <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 800436e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8004370:	4b09      	ldr	r3, [pc, #36]	; (8004398 <HAL_ADCEx_MultiModeStart_DMA+0xec>)
 8004372:	6891      	ldr	r1, [r2, #8]
 8004374:	400b      	ands	r3, r1
 8004376:	f043 0304 	orr.w	r3, r3, #4
 800437a:	6093      	str	r3, [r2, #8]
}
 800437c:	b01a      	add	sp, #104	; 0x68
 800437e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004382:	4906      	ldr	r1, [pc, #24]	; (800439c <HAL_ADCEx_MultiModeStart_DMA+0xf0>)
 8004384:	e7e1      	b.n	800434a <HAL_ADCEx_MultiModeStart_DMA+0x9e>
 8004386:	bf00      	nop
 8004388:	40022000 	.word	0x40022000
 800438c:	fffff0fe 	.word	0xfffff0fe
 8004390:	0800391d 	.word	0x0800391d
 8004394:	58026300 	.word	0x58026300
 8004398:	7fffffc0 	.word	0x7fffffc0
 800439c:	40022300 	.word	0x40022300
 80043a0:	40022100 	.word	0x40022100
 80043a4:	080038b5 	.word	0x080038b5
 80043a8:	080038a5 	.word	0x080038a5

080043ac <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043ac:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
 80043b0:	2a01      	cmp	r2, #1
 80043b2:	d04b      	beq.n	800444c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80043b4:	4603      	mov	r3, r0

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80043b6:	4a29      	ldr	r2, [pc, #164]	; (800445c <HAL_ADCEx_MultiModeConfigChannel+0xb0>)
  __HAL_LOCK(hadc);
 80043b8:	2001      	movs	r0, #1
{
 80043ba:	b4f0      	push	{r4, r5, r6, r7}
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80043bc:	681c      	ldr	r4, [r3, #0]
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043be:	680e      	ldr	r6, [r1, #0]
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80043c0:	4294      	cmp	r4, r2
  __HAL_LOCK(hadc);
 80043c2:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80043c6:	d008      	beq.n	80043da <HAL_ADCEx_MultiModeConfigChannel+0x2e>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80043ca:	2100      	movs	r1, #0
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043cc:	f042 0220 	orr.w	r2, r2, #32
    __HAL_UNLOCK(hadc);
 80043d0:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043d4:	655a      	str	r2, [r3, #84]	; 0x54
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80043d6:	bcf0      	pop	{r4, r5, r6, r7}
 80043d8:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043da:	4d21      	ldr	r5, [pc, #132]	; (8004460 <HAL_ADCEx_MultiModeConfigChannel+0xb4>)
 80043dc:	68aa      	ldr	r2, [r5, #8]
 80043de:	0752      	lsls	r2, r2, #29
 80043e0:	d50a      	bpl.n	80043f8 <HAL_ADCEx_MultiModeConfigChannel+0x4c>
 80043e2:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 80043e6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043e8:	f042 0220 	orr.w	r2, r2, #32
 80043ec:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 80043f4:	bcf0      	pop	{r4, r5, r6, r7}
 80043f6:	4770      	bx	lr
 80043f8:	68a0      	ldr	r0, [r4, #8]
 80043fa:	f010 0004 	ands.w	r0, r0, #4
 80043fe:	d1f1      	bne.n	80043e4 <HAL_ADCEx_MultiModeConfigChannel+0x38>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004400:	b1c6      	cbz	r6, 8004434 <HAL_ADCEx_MultiModeConfigChannel+0x88>
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004402:	f8df c064 	ldr.w	ip, [pc, #100]	; 8004468 <HAL_ADCEx_MultiModeConfigChannel+0xbc>
 8004406:	684f      	ldr	r7, [r1, #4]
 8004408:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800440c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004410:	433a      	orrs	r2, r7
 8004412:	f8cc 2008 	str.w	r2, [ip, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004416:	68a4      	ldr	r4, [r4, #8]
 8004418:	68aa      	ldr	r2, [r5, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800441a:	4322      	orrs	r2, r4
 800441c:	07d4      	lsls	r4, r2, #31
 800441e:	d413      	bmi.n	8004448 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
        MODIFY_REG(tmpADC_Common->CCR,
 8004420:	688a      	ldr	r2, [r1, #8]
 8004422:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8004426:	490f      	ldr	r1, [pc, #60]	; (8004464 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8004428:	4316      	orrs	r6, r2
 800442a:	4021      	ands	r1, r4
 800442c:	430e      	orrs	r6, r1
 800442e:	f8cc 6008 	str.w	r6, [ip, #8]
 8004432:	e7dc      	b.n	80043ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004434:	490c      	ldr	r1, [pc, #48]	; (8004468 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8004436:	688a      	ldr	r2, [r1, #8]
 8004438:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800443c:	608a      	str	r2, [r1, #8]
 800443e:	68a0      	ldr	r0, [r4, #8]
 8004440:	68aa      	ldr	r2, [r5, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004442:	4302      	orrs	r2, r0
 8004444:	07d0      	lsls	r0, r2, #31
 8004446:	d503      	bpl.n	8004450 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004448:	2000      	movs	r0, #0
 800444a:	e7d0      	b.n	80043ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
  __HAL_LOCK(hadc);
 800444c:	2002      	movs	r0, #2
}
 800444e:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004450:	688c      	ldr	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004452:	4630      	mov	r0, r6
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004454:	4a03      	ldr	r2, [pc, #12]	; (8004464 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8004456:	4022      	ands	r2, r4
 8004458:	608a      	str	r2, [r1, #8]
 800445a:	e7c8      	b.n	80043ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800445c:	40022000 	.word	0x40022000
 8004460:	40022100 	.word	0x40022100
 8004464:	fffff0e0 	.word	0xfffff0e0
 8004468:	40022300 	.word	0x40022300

0800446c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800446c:	4907      	ldr	r1, [pc, #28]	; (800448c <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800446e:	0200      	lsls	r0, r0, #8
 8004470:	4b07      	ldr	r3, [pc, #28]	; (8004490 <HAL_NVIC_SetPriorityGrouping+0x24>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004472:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004474:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004478:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800447a:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 800447e:	4022      	ands	r2, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004480:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004484:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004486:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 8004488:	60c8      	str	r0, [r1, #12]
 800448a:	4770      	bx	lr
 800448c:	e000ed00 	.word	0xe000ed00
 8004490:	05fa0000 	.word	0x05fa0000

08004494 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004494:	4b17      	ldr	r3, [pc, #92]	; (80044f4 <HAL_NVIC_SetPriority+0x60>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800449c:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800449e:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044a2:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044a4:	2d04      	cmp	r5, #4
 80044a6:	bf28      	it	cs
 80044a8:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044aa:	2c06      	cmp	r4, #6
 80044ac:	d918      	bls.n	80044e0 <HAL_NVIC_SetPriority+0x4c>
 80044ae:	3b03      	subs	r3, #3
 80044b0:	f04f 34ff 	mov.w	r4, #4294967295
 80044b4:	409c      	lsls	r4, r3
 80044b6:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044ba:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80044be:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044c0:	fa02 f205 	lsl.w	r2, r2, r5
 80044c4:	ea21 0102 	bic.w	r1, r1, r2
 80044c8:	fa01 f203 	lsl.w	r2, r1, r3
 80044cc:	ea42 0204 	orr.w	r2, r2, r4
 80044d0:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80044d4:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 80044d6:	db06      	blt.n	80044e6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044d8:	4b07      	ldr	r3, [pc, #28]	; (80044f8 <HAL_NVIC_SetPriority+0x64>)
 80044da:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80044dc:	bc30      	pop	{r4, r5}
 80044de:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044e0:	2400      	movs	r4, #0
 80044e2:	4623      	mov	r3, r4
 80044e4:	e7e9      	b.n	80044ba <HAL_NVIC_SetPriority+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044e6:	f000 000f 	and.w	r0, r0, #15
 80044ea:	4b04      	ldr	r3, [pc, #16]	; (80044fc <HAL_NVIC_SetPriority+0x68>)
 80044ec:	541a      	strb	r2, [r3, r0]
 80044ee:	bc30      	pop	{r4, r5}
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	e000ed00 	.word	0xe000ed00
 80044f8:	e000e400 	.word	0xe000e400
 80044fc:	e000ed14 	.word	0xe000ed14

08004500 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004500:	2800      	cmp	r0, #0
 8004502:	db07      	blt.n	8004514 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004504:	f000 011f 	and.w	r1, r0, #31
 8004508:	2301      	movs	r3, #1
 800450a:	0940      	lsrs	r0, r0, #5
 800450c:	4a02      	ldr	r2, [pc, #8]	; (8004518 <HAL_NVIC_EnableIRQ+0x18>)
 800450e:	408b      	lsls	r3, r1
 8004510:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	e000e100 	.word	0xe000e100

0800451c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800451c:	3801      	subs	r0, #1
 800451e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004522:	d20d      	bcs.n	8004540 <HAL_SYSTICK_Config+0x24>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004524:	4b07      	ldr	r3, [pc, #28]	; (8004544 <HAL_SYSTICK_Config+0x28>)
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004526:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004528:	2107      	movs	r1, #7
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800452a:	b430      	push	{r4, r5}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800452c:	25f0      	movs	r5, #240	; 0xf0
 800452e:	4c06      	ldr	r4, [pc, #24]	; (8004548 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004530:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004532:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004534:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800453a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800453c:	bc30      	pop	{r4, r5}
 800453e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004540:	2001      	movs	r0, #1
 8004542:	4770      	bx	lr
 8004544:	e000e010 	.word	0xe000e010
 8004548:	e000ed00 	.word	0xe000ed00

0800454c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 800454c:	b188      	cbz	r0, 8004572 <HAL_DAC_Init+0x26>
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800454e:	7903      	ldrb	r3, [r0, #4]
{
 8004550:	b510      	push	{r4, lr}
  if (hdac->State == HAL_DAC_STATE_RESET)
 8004552:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004556:	4604      	mov	r4, r0
 8004558:	b13b      	cbz	r3, 800456a <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800455a:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 800455c:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800455e:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8004560:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8004562:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004564:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8004566:	7122      	strb	r2, [r4, #4]
}
 8004568:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 800456a:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 800456c:	f7fe ff80 	bl	8003470 <HAL_DAC_MspInit>
 8004570:	e7f3      	b.n	800455a <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8004572:	2001      	movs	r0, #1
}
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop

08004578 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004578:	7942      	ldrb	r2, [r0, #5]
 800457a:	2a01      	cmp	r2, #1
 800457c:	d028      	beq.n	80045d0 <HAL_DAC_Start+0x58>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800457e:	6802      	ldr	r2, [r0, #0]
 8004580:	4603      	mov	r3, r0
{
 8004582:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdac);
 8004584:	2501      	movs	r5, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8004586:	2402      	movs	r4, #2
  __HAL_DAC_ENABLE(hdac, Channel);
 8004588:	f001 0610 	and.w	r6, r1, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 800458c:	7104      	strb	r4, [r0, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 800458e:	fa05 f006 	lsl.w	r0, r5, r6
 8004592:	6817      	ldr	r7, [r2, #0]
  __HAL_LOCK(hdac);
 8004594:	715d      	strb	r5, [r3, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8004596:	4338      	orrs	r0, r7
 8004598:	6010      	str	r0, [r2, #0]

  if (Channel == DAC_CHANNEL_1)
 800459a:	b971      	cbnz	r1, 80045ba <HAL_DAC_Start+0x42>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800459c:	6811      	ldr	r1, [r2, #0]
 800459e:	f001 013e 	and.w	r1, r1, #62	; 0x3e
 80045a2:	42a1      	cmp	r1, r4
 80045a4:	d102      	bne.n	80045ac <HAL_DAC_Start+0x34>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80045a6:	6851      	ldr	r1, [r2, #4]
 80045a8:	4329      	orrs	r1, r5
 80045aa:	6051      	str	r1, [r2, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80045ac:	2200      	movs	r2, #0
  hdac->State = HAL_DAC_STATE_READY;
 80045ae:	2101      	movs	r1, #1

  /* Return function status */
  return HAL_OK;
 80045b0:	4610      	mov	r0, r2
  hdac->State = HAL_DAC_STATE_READY;
 80045b2:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 80045b4:	715a      	strb	r2, [r3, #5]
}
 80045b6:	bcf0      	pop	{r4, r5, r6, r7}
 80045b8:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80045ba:	6811      	ldr	r1, [r2, #0]
 80045bc:	40b4      	lsls	r4, r6
 80045be:	f401 1178 	and.w	r1, r1, #4063232	; 0x3e0000
 80045c2:	42a1      	cmp	r1, r4
 80045c4:	d1f2      	bne.n	80045ac <HAL_DAC_Start+0x34>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80045c6:	6851      	ldr	r1, [r2, #4]
 80045c8:	f041 0102 	orr.w	r1, r1, #2
 80045cc:	6051      	str	r1, [r2, #4]
 80045ce:	e7ed      	b.n	80045ac <HAL_DAC_Start+0x34>
  __HAL_LOCK(hdac);
 80045d0:	2002      	movs	r0, #2
}
 80045d2:	4770      	bx	lr

080045d4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80045d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80045d6:	7944      	ldrb	r4, [r0, #5]
{
 80045d8:	9f06      	ldr	r7, [sp, #24]
  __HAL_LOCK(hdac);
 80045da:	2c01      	cmp	r4, #1
 80045dc:	d05e      	beq.n	800469c <HAL_DAC_Start_DMA+0xc8>
 80045de:	4604      	mov	r4, r0
 80045e0:	460e      	mov	r6, r1
 80045e2:	2001      	movs	r0, #1
 80045e4:	4611      	mov	r1, r2
 80045e6:	6825      	ldr	r5, [r4, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80045e8:	2202      	movs	r2, #2
  __HAL_LOCK(hdac);
 80045ea:	7160      	strb	r0, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 80045ec:	7122      	strb	r2, [r4, #4]

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80045ee:	682a      	ldr	r2, [r5, #0]
  if (Channel == DAC_CHANNEL_1)
 80045f0:	bb4e      	cbnz	r6, 8004646 <HAL_DAC_Start_DMA+0x72>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80045f2:	68a0      	ldr	r0, [r4, #8]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80045f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80045f8:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 80046b8 <HAL_DAC_Start_DMA+0xe4>

    /* Case of use of channel 1 */
    switch (Alignment)
 80045fc:	2f04      	cmp	r7, #4
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80045fe:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 80046bc <HAL_DAC_Start_DMA+0xe8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004602:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004606:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 80046c0 <HAL_DAC_Start_DMA+0xec>
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800460a:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800460e:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004612:	602a      	str	r2, [r5, #0]
    switch (Alignment)
 8004614:	d04d      	beq.n	80046b2 <HAL_DAC_Start_DMA+0xde>
 8004616:	2f08      	cmp	r7, #8
 8004618:	d048      	beq.n	80046ac <HAL_DAC_Start_DMA+0xd8>
 800461a:	2f00      	cmp	r7, #0
 800461c:	d038      	beq.n	8004690 <HAL_DAC_Start_DMA+0xbc>
        break;
    }
  }

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800461e:	2200      	movs	r2, #0
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004620:	682f      	ldr	r7, [r5, #0]
 8004622:	f447 5700 	orr.w	r7, r7, #8192	; 0x2000
 8004626:	602f      	str	r7, [r5, #0]

   /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004628:	f000 fcb8 	bl	8004f9c <HAL_DMA_Start_IT>
    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800462c:	2300      	movs	r3, #0
 800462e:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8004630:	bb48      	cbnz	r0, 8004686 <HAL_DAC_Start_DMA+0xb2>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	2101      	movs	r1, #1
 8004636:	f006 0610 	and.w	r6, r6, #16
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	fa01 f606 	lsl.w	r6, r1, r6
 8004640:	4316      	orrs	r6, r2
 8004642:	601e      	str	r6, [r3, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8004644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004646:	68e0      	ldr	r0, [r4, #12]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004648:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800464c:	f8df c074 	ldr.w	ip, [pc, #116]	; 80046c4 <HAL_DAC_Start_DMA+0xf0>
    switch (Alignment)
 8004650:	2f04      	cmp	r7, #4
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004652:	f8df e074 	ldr.w	lr, [pc, #116]	; 80046c8 <HAL_DAC_Start_DMA+0xf4>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004656:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800465a:	f8df c070 	ldr.w	ip, [pc, #112]	; 80046cc <HAL_DAC_Start_DMA+0xf8>
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800465e:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004662:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004666:	602a      	str	r2, [r5, #0]
    switch (Alignment)
 8004668:	d01d      	beq.n	80046a6 <HAL_DAC_Start_DMA+0xd2>
 800466a:	2f08      	cmp	r7, #8
 800466c:	d018      	beq.n	80046a0 <HAL_DAC_Start_DMA+0xcc>
 800466e:	b197      	cbz	r7, 8004696 <HAL_DAC_Start_DMA+0xc2>
  if (Channel == DAC_CHANNEL_1)
 8004670:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004672:	682f      	ldr	r7, [r5, #0]
 8004674:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 8004678:	602f      	str	r7, [r5, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800467a:	f000 fc8f 	bl	8004f9c <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 800467e:	2300      	movs	r3, #0
 8004680:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8004682:	2800      	cmp	r0, #0
 8004684:	d0d5      	beq.n	8004632 <HAL_DAC_Start_DMA+0x5e>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004686:	6923      	ldr	r3, [r4, #16]
 8004688:	f043 0304 	orr.w	r3, r3, #4
 800468c:	6123      	str	r3, [r4, #16]
}
 800468e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004690:	f105 0208 	add.w	r2, r5, #8
        break;
 8004694:	e7c4      	b.n	8004620 <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004696:	f105 0214 	add.w	r2, r5, #20
        break;
 800469a:	e7ea      	b.n	8004672 <HAL_DAC_Start_DMA+0x9e>
  __HAL_LOCK(hdac);
 800469c:	2002      	movs	r0, #2
}
 800469e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80046a0:	f105 021c 	add.w	r2, r5, #28
        break;
 80046a4:	e7e5      	b.n	8004672 <HAL_DAC_Start_DMA+0x9e>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80046a6:	f105 0218 	add.w	r2, r5, #24
        break;
 80046aa:	e7e2      	b.n	8004672 <HAL_DAC_Start_DMA+0x9e>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80046ac:	f105 0210 	add.w	r2, r5, #16
        break;
 80046b0:	e7b6      	b.n	8004620 <HAL_DAC_Start_DMA+0x4c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80046b2:	f105 020c 	add.w	r2, r5, #12
        break;
 80046b6:	e7b3      	b.n	8004620 <HAL_DAC_Start_DMA+0x4c>
 80046b8:	080046d5 	.word	0x080046d5
 80046bc:	080046e9 	.word	0x080046e9
 80046c0:	080046f9 	.word	0x080046f9
 80046c4:	080048d1 	.word	0x080048d1
 80046c8:	080048e1 	.word	0x080048e1
 80046cc:	080048f1 	.word	0x080048f1

080046d0 <HAL_DAC_ConvCpltCallbackCh1>:
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop

080046d4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80046d4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046d6:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80046d8:	4620      	mov	r0, r4
 80046da:	f7ff fff9 	bl	80046d0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80046de:	2301      	movs	r3, #1
 80046e0:	7123      	strb	r3, [r4, #4]
}
 80046e2:	bd10      	pop	{r4, pc}

080046e4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop

080046e8 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80046e8:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80046ea:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80046ec:	f7ff fffa 	bl	80046e4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80046f0:	bd08      	pop	{r3, pc}
 80046f2:	bf00      	nop

080046f4 <HAL_DAC_ErrorCallbackCh1>:
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop

080046f8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80046f8:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046fa:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80046fc:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80046fe:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004700:	f043 0304 	orr.w	r3, r3, #4
 8004704:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004706:	f7ff fff5 	bl	80046f4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800470a:	2301      	movs	r3, #1
 800470c:	7123      	strb	r3, [r4, #4]
}
 800470e:	bd10      	pop	{r4, pc}

08004710 <HAL_DAC_DMAUnderrunCallbackCh1>:
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop

08004714 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004714:	6803      	ldr	r3, [r0, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	0491      	lsls	r1, r2, #18
{
 800471a:	b510      	push	{r4, lr}
 800471c:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800471e:	d502      	bpl.n	8004726 <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004722:	0492      	lsls	r2, r2, #18
 8004724:	d418      	bmi.n	8004758 <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	0091      	lsls	r1, r2, #2
 800472a:	d502      	bpl.n	8004732 <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800472c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800472e:	0092      	lsls	r2, r2, #2
 8004730:	d400      	bmi.n	8004734 <HAL_DAC_IRQHandler+0x20>
}
 8004732:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8004734:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004736:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800473a:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 800473c:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800473e:	6922      	ldr	r2, [r4, #16]
 8004740:	f042 0202 	orr.w	r2, r2, #2
 8004744:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004746:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 800474e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004752:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004754:	f000 b8d8 	b.w	8004908 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8004758:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800475a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 800475e:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004760:	6902      	ldr	r2, [r0, #16]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004768:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004770:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004772:	f7ff ffcd 	bl	8004710 <HAL_DAC_DMAUnderrunCallbackCh1>
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	e7d5      	b.n	8004726 <HAL_DAC_IRQHandler+0x12>
 800477a:	bf00      	nop

0800477c <HAL_DAC_ConfigChannel>:
  __HAL_LOCK(hdac);
 800477c:	7943      	ldrb	r3, [r0, #5]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d057      	beq.n	8004832 <HAL_DAC_ConfigChannel+0xb6>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8004782:	680b      	ldr	r3, [r1, #0]
{
 8004784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004788:	2b04      	cmp	r3, #4
 800478a:	4617      	mov	r7, r2
 800478c:	460e      	mov	r6, r1
  hdac->State = HAL_DAC_STATE_BUSY;
 800478e:	f04f 0202 	mov.w	r2, #2
  __HAL_LOCK(hdac);
 8004792:	f04f 0101 	mov.w	r1, #1
 8004796:	4604      	mov	r4, r0
  hdac->State = HAL_DAC_STATE_BUSY;
 8004798:	7102      	strb	r2, [r0, #4]
  __HAL_LOCK(hdac);
 800479a:	7141      	strb	r1, [r0, #5]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800479c:	d04d      	beq.n	800483a <HAL_DAC_ConfigChannel+0xbe>
 800479e:	f007 0210 	and.w	r2, r7, #16
 80047a2:	6805      	ldr	r5, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80047a4:	6931      	ldr	r1, [r6, #16]
 80047a6:	2901      	cmp	r1, #1
 80047a8:	d039      	beq.n	800481e <HAL_DAC_ConfigChannel+0xa2>
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80047aa:	2107      	movs	r1, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80047ac:	68f0      	ldr	r0, [r6, #12]
  tmpreg1 = hdac->Instance->MCR;
 80047ae:	f8d5 c03c 	ldr.w	ip, [r5, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80047b2:	4091      	lsls	r1, r2
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80047b4:	2801      	cmp	r0, #1
 80047b6:	68b7      	ldr	r7, [r6, #8]
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80047b8:	ea2c 0101 	bic.w	r1, ip, r1
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80047bc:	d02d      	beq.n	800481a <HAL_DAC_ConfigChannel+0x9e>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80047be:	2802      	cmp	r0, #2
 80047c0:	d039      	beq.n	8004836 <HAL_DAC_ConfigChannel+0xba>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80047c2:	fab7 f087 	clz	r0, r7
 80047c6:	0940      	lsrs	r0, r0, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80047c8:	433b      	orrs	r3, r7
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80047ca:	f44f 4880 	mov.w	r8, #16384	; 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80047ce:	6876      	ldr	r6, [r6, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80047d0:	f640 77fe 	movw	r7, #4094	; 0xffe
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80047d4:	4303      	orrs	r3, r0
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80047d6:	fa08 f802 	lsl.w	r8, r8, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80047da:	4097      	lsls	r7, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80047dc:	4096      	lsls	r6, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80047de:	4093      	lsls	r3, r2
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80047e0:	20c0      	movs	r0, #192	; 0xc0
  __HAL_UNLOCK(hdac);
 80047e2:	f04f 0c00 	mov.w	ip, #0
  hdac->State = HAL_DAC_STATE_READY;
 80047e6:	f04f 0e01 	mov.w	lr, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80047ea:	430b      	orrs	r3, r1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80047ec:	fa00 f102 	lsl.w	r1, r0, r2
  return HAL_OK;
 80047f0:	4660      	mov	r0, ip
  hdac->Instance->MCR = tmpreg1;
 80047f2:	63eb      	str	r3, [r5, #60]	; 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80047f4:	682b      	ldr	r3, [r5, #0]
 80047f6:	ea23 0308 	bic.w	r3, r3, r8
 80047fa:	602b      	str	r3, [r5, #0]
  tmpreg1 = hdac->Instance->CR;
 80047fc:	682b      	ldr	r3, [r5, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80047fe:	ea23 0307 	bic.w	r3, r3, r7
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004802:	4333      	orrs	r3, r6
  hdac->Instance->CR = tmpreg1;
 8004804:	602b      	str	r3, [r5, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004806:	682a      	ldr	r2, [r5, #0]
 8004808:	ea22 0201 	bic.w	r2, r2, r1
 800480c:	602a      	str	r2, [r5, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800480e:	f884 e004 	strb.w	lr, [r4, #4]
  __HAL_UNLOCK(hdac);
 8004812:	f884 c005 	strb.w	ip, [r4, #5]
}
 8004816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 800481a:	2000      	movs	r0, #0
 800481c:	e7d4      	b.n	80047c8 <HAL_DAC_ConfigChannel+0x4c>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800481e:	271f      	movs	r7, #31
    tmpreg1 = hdac->Instance->CCR;
 8004820:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004822:	6971      	ldr	r1, [r6, #20]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004824:	4097      	lsls	r7, r2
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004826:	4091      	lsls	r1, r2
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004828:	ea20 0007 	bic.w	r0, r0, r7
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800482c:	4301      	orrs	r1, r0
    hdac->Instance->CCR = tmpreg1;
 800482e:	63a9      	str	r1, [r5, #56]	; 0x38
 8004830:	e7bb      	b.n	80047aa <HAL_DAC_ConfigChannel+0x2e>
  __HAL_LOCK(hdac);
 8004832:	2002      	movs	r0, #2
}
 8004834:	4770      	bx	lr
    connectOnChip = DAC_MCR_MODE1_0;
 8004836:	2001      	movs	r0, #1
 8004838:	e7c6      	b.n	80047c8 <HAL_DAC_ConfigChannel+0x4c>
    tickstart = HAL_GetTick();
 800483a:	f7ff f815 	bl	8003868 <HAL_GetTick>
 800483e:	4605      	mov	r5, r0
    if (Channel == DAC_CHANNEL_1)
 8004840:	b9c7      	cbnz	r7, 8004874 <HAL_DAC_ConfigChannel+0xf8>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004842:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80048cc <HAL_DAC_ConfigChannel+0x150>
 8004846:	e004      	b.n	8004852 <HAL_DAC_ConfigChannel+0xd6>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004848:	f7ff f80e 	bl	8003868 <HAL_GetTick>
 800484c:	1b40      	subs	r0, r0, r5
 800484e:	2801      	cmp	r0, #1
 8004850:	d833      	bhi.n	80048ba <HAL_DAC_ConfigChannel+0x13e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004852:	6823      	ldr	r3, [r4, #0]
 8004854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004856:	ea13 0f08 	tst.w	r3, r8
 800485a:	d1f5      	bne.n	8004848 <HAL_DAC_ConfigChannel+0xcc>
      HAL_Delay(1);
 800485c:	2001      	movs	r0, #1
 800485e:	f7ff f809 	bl	8003874 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004862:	6825      	ldr	r5, [r4, #0]
 8004864:	69b3      	ldr	r3, [r6, #24]
 8004866:	642b      	str	r3, [r5, #64]	; 0x40
 8004868:	e00e      	b.n	8004888 <HAL_DAC_ConfigChannel+0x10c>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800486a:	f7fe fffd 	bl	8003868 <HAL_GetTick>
 800486e:	1b40      	subs	r0, r0, r5
 8004870:	2801      	cmp	r0, #1
 8004872:	d822      	bhi.n	80048ba <HAL_DAC_ConfigChannel+0x13e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004874:	6823      	ldr	r3, [r4, #0]
 8004876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004878:	2b00      	cmp	r3, #0
 800487a:	dbf6      	blt.n	800486a <HAL_DAC_ConfigChannel+0xee>
      HAL_Delay(1U);
 800487c:	2001      	movs	r0, #1
 800487e:	f7fe fff9 	bl	8003874 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004882:	6825      	ldr	r5, [r4, #0]
 8004884:	69b3      	ldr	r3, [r6, #24]
 8004886:	646b      	str	r3, [r5, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004888:	f007 0210 	and.w	r2, r7, #16
 800488c:	f240 3cff 	movw	ip, #1023	; 0x3ff
 8004890:	6cab      	ldr	r3, [r5, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004892:	21ff      	movs	r1, #255	; 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004894:	69f0      	ldr	r0, [r6, #28]
 8004896:	fa0c fc02 	lsl.w	ip, ip, r2
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800489a:	fa01 f702 	lsl.w	r7, r1, r2
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800489e:	4090      	lsls	r0, r2
 80048a0:	ea23 030c 	bic.w	r3, r3, ip
 80048a4:	4303      	orrs	r3, r0
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80048a6:	6a30      	ldr	r0, [r6, #32]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80048a8:	64ab      	str	r3, [r5, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80048aa:	4090      	lsls	r0, r2
 80048ac:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80048ae:	6833      	ldr	r3, [r6, #0]
 80048b0:	ea21 0107 	bic.w	r1, r1, r7
 80048b4:	4301      	orrs	r1, r0
 80048b6:	64e9      	str	r1, [r5, #76]	; 0x4c
 80048b8:	e774      	b.n	80047a4 <HAL_DAC_ConfigChannel+0x28>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80048ba:	6923      	ldr	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80048bc:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80048be:	f043 0308 	orr.w	r3, r3, #8
          return HAL_TIMEOUT;
 80048c2:	4610      	mov	r0, r2
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80048c4:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80048c6:	7122      	strb	r2, [r4, #4]
          return HAL_TIMEOUT;
 80048c8:	e7a5      	b.n	8004816 <HAL_DAC_ConfigChannel+0x9a>
 80048ca:	bf00      	nop
 80048cc:	20008000 	.word	0x20008000

080048d0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80048d0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048d2:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80048d4:	4620      	mov	r0, r4
 80048d6:	f7fd ff31 	bl	800273c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80048da:	2301      	movs	r3, #1
 80048dc:	7123      	strb	r3, [r4, #4]
}
 80048de:	bd10      	pop	{r4, pc}

080048e0 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80048e0:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80048e2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80048e4:	f7fd ff3c 	bl	8002760 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80048e8:	bd08      	pop	{r3, pc}
 80048ea:	bf00      	nop

080048ec <HAL_DACEx_ErrorCallbackCh2>:
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop

080048f0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80048f0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048f2:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80048f4:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80048f6:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80048f8:	f043 0304 	orr.w	r3, r3, #4
 80048fc:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80048fe:	f7ff fff5 	bl	80048ec <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004902:	2301      	movs	r3, #1
 8004904:	7123      	strb	r3, [r4, #4]
}
 8004906:	bd10      	pop	{r4, pc}

08004908 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop

0800490c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800490c:	6802      	ldr	r2, [r0, #0]
{
 800490e:	4601      	mov	r1, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004910:	4b34      	ldr	r3, [pc, #208]	; (80049e4 <DMA_CalcBaseAndBitshift+0xd8>)
 8004912:	4835      	ldr	r0, [pc, #212]	; (80049e8 <DMA_CalcBaseAndBitshift+0xdc>)
{
 8004914:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004916:	4c35      	ldr	r4, [pc, #212]	; (80049ec <DMA_CalcBaseAndBitshift+0xe0>)
 8004918:	4d35      	ldr	r5, [pc, #212]	; (80049f0 <DMA_CalcBaseAndBitshift+0xe4>)
 800491a:	42a2      	cmp	r2, r4
 800491c:	bf18      	it	ne
 800491e:	429a      	cmpne	r2, r3
 8004920:	f104 0448 	add.w	r4, r4, #72	; 0x48
 8004924:	bf0c      	ite	eq
 8004926:	2301      	moveq	r3, #1
 8004928:	2300      	movne	r3, #0
 800492a:	4282      	cmp	r2, r0
 800492c:	bf08      	it	eq
 800492e:	f043 0301 	orreq.w	r3, r3, #1
 8004932:	3048      	adds	r0, #72	; 0x48
 8004934:	42aa      	cmp	r2, r5
 8004936:	bf08      	it	eq
 8004938:	f043 0301 	orreq.w	r3, r3, #1
 800493c:	3548      	adds	r5, #72	; 0x48
 800493e:	42a2      	cmp	r2, r4
 8004940:	bf08      	it	eq
 8004942:	f043 0301 	orreq.w	r3, r3, #1
 8004946:	3448      	adds	r4, #72	; 0x48
 8004948:	4282      	cmp	r2, r0
 800494a:	bf08      	it	eq
 800494c:	f043 0301 	orreq.w	r3, r3, #1
 8004950:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8004954:	42aa      	cmp	r2, r5
 8004956:	bf08      	it	eq
 8004958:	f043 0301 	orreq.w	r3, r3, #1
 800495c:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8004960:	42a2      	cmp	r2, r4
 8004962:	bf08      	it	eq
 8004964:	f043 0301 	orreq.w	r3, r3, #1
 8004968:	f504 7462 	add.w	r4, r4, #904	; 0x388
 800496c:	4282      	cmp	r2, r0
 800496e:	bf08      	it	eq
 8004970:	f043 0301 	orreq.w	r3, r3, #1
 8004974:	3048      	adds	r0, #72	; 0x48
 8004976:	42aa      	cmp	r2, r5
 8004978:	bf08      	it	eq
 800497a:	f043 0301 	orreq.w	r3, r3, #1
 800497e:	3548      	adds	r5, #72	; 0x48
 8004980:	42a2      	cmp	r2, r4
 8004982:	bf08      	it	eq
 8004984:	f043 0301 	orreq.w	r3, r3, #1
 8004988:	3448      	adds	r4, #72	; 0x48
 800498a:	4282      	cmp	r2, r0
 800498c:	bf08      	it	eq
 800498e:	f043 0301 	orreq.w	r3, r3, #1
 8004992:	3048      	adds	r0, #72	; 0x48
 8004994:	42aa      	cmp	r2, r5
 8004996:	bf08      	it	eq
 8004998:	f043 0301 	orreq.w	r3, r3, #1
 800499c:	42a2      	cmp	r2, r4
 800499e:	bf08      	it	eq
 80049a0:	f043 0301 	orreq.w	r3, r3, #1
 80049a4:	4282      	cmp	r2, r0
 80049a6:	bf08      	it	eq
 80049a8:	f043 0301 	orreq.w	r3, r3, #1
 80049ac:	b913      	cbnz	r3, 80049b4 <DMA_CalcBaseAndBitshift+0xa8>
 80049ae:	4b11      	ldr	r3, [pc, #68]	; (80049f4 <DMA_CalcBaseAndBitshift+0xe8>)
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d112      	bne.n	80049da <DMA_CalcBaseAndBitshift+0xce>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80049b4:	b2d3      	uxtb	r3, r2
 80049b6:	4d10      	ldr	r5, [pc, #64]	; (80049f8 <DMA_CalcBaseAndBitshift+0xec>)
 80049b8:	4810      	ldr	r0, [pc, #64]	; (80049fc <DMA_CalcBaseAndBitshift+0xf0>)
 80049ba:	3b10      	subs	r3, #16

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80049bc:	4c10      	ldr	r4, [pc, #64]	; (8004a00 <DMA_CalcBaseAndBitshift+0xf4>)
 80049be:	4010      	ands	r0, r2
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80049c0:	fba5 5303 	umull	r5, r3, r5, r3
 80049c4:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80049c6:	f003 0207 	and.w	r2, r3, #7

    if (stream_number > 3U)
 80049ca:	2b03      	cmp	r3, #3
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80049cc:	5ca2      	ldrb	r2, [r4, r2]
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80049ce:	bf88      	it	hi
 80049d0:	3004      	addhi	r0, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80049d2:	65ca      	str	r2, [r1, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80049d4:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 80049d6:	bc30      	pop	{r4, r5}
 80049d8:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80049da:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 80049de:	6588      	str	r0, [r1, #88]	; 0x58
 80049e0:	e7f9      	b.n	80049d6 <DMA_CalcBaseAndBitshift+0xca>
 80049e2:	bf00      	nop
 80049e4:	40020010 	.word	0x40020010
 80049e8:	40020040 	.word	0x40020040
 80049ec:	40020028 	.word	0x40020028
 80049f0:	40020058 	.word	0x40020058
 80049f4:	400204b8 	.word	0x400204b8
 80049f8:	aaaaaaab 	.word	0xaaaaaaab
 80049fc:	fffffc00 	.word	0xfffffc00
 8004a00:	0801ac70 	.word	0x0801ac70

08004a04 <HAL_DMA_Init>:
{
 8004a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a08:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004a0a:	f7fe ff2d 	bl	8003868 <HAL_GetTick>
  if(hdma == NULL)
 8004a0e:	2c00      	cmp	r4, #0
 8004a10:	f000 8182 	beq.w	8004d18 <HAL_DMA_Init+0x314>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	4605      	mov	r5, r0
 8004a18:	4a2b      	ldr	r2, [pc, #172]	; (8004ac8 <HAL_DMA_Init+0xc4>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d049      	beq.n	8004ab2 <HAL_DMA_Init+0xae>
 8004a1e:	3218      	adds	r2, #24
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d046      	beq.n	8004ab2 <HAL_DMA_Init+0xae>
 8004a24:	3230      	adds	r2, #48	; 0x30
 8004a26:	4829      	ldr	r0, [pc, #164]	; (8004acc <HAL_DMA_Init+0xc8>)
 8004a28:	4929      	ldr	r1, [pc, #164]	; (8004ad0 <HAL_DMA_Init+0xcc>)
 8004a2a:	4283      	cmp	r3, r0
 8004a2c:	bf18      	it	ne
 8004a2e:	4293      	cmpne	r3, r2
 8004a30:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8004a34:	bf0c      	ite	eq
 8004a36:	2201      	moveq	r2, #1
 8004a38:	2200      	movne	r2, #0
 8004a3a:	428b      	cmp	r3, r1
 8004a3c:	bf08      	it	eq
 8004a3e:	f042 0201 	orreq.w	r2, r2, #1
 8004a42:	3130      	adds	r1, #48	; 0x30
 8004a44:	4283      	cmp	r3, r0
 8004a46:	bf08      	it	eq
 8004a48:	f042 0201 	orreq.w	r2, r2, #1
 8004a4c:	3030      	adds	r0, #48	; 0x30
 8004a4e:	428b      	cmp	r3, r1
 8004a50:	bf08      	it	eq
 8004a52:	f042 0201 	orreq.w	r2, r2, #1
 8004a56:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8004a5a:	4283      	cmp	r3, r0
 8004a5c:	bf08      	it	eq
 8004a5e:	f042 0201 	orreq.w	r2, r2, #1
 8004a62:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8004a66:	428b      	cmp	r3, r1
 8004a68:	bf08      	it	eq
 8004a6a:	f042 0201 	orreq.w	r2, r2, #1
 8004a6e:	3130      	adds	r1, #48	; 0x30
 8004a70:	4283      	cmp	r3, r0
 8004a72:	bf08      	it	eq
 8004a74:	f042 0201 	orreq.w	r2, r2, #1
 8004a78:	3030      	adds	r0, #48	; 0x30
 8004a7a:	428b      	cmp	r3, r1
 8004a7c:	bf08      	it	eq
 8004a7e:	f042 0201 	orreq.w	r2, r2, #1
 8004a82:	3130      	adds	r1, #48	; 0x30
 8004a84:	4283      	cmp	r3, r0
 8004a86:	bf08      	it	eq
 8004a88:	f042 0201 	orreq.w	r2, r2, #1
 8004a8c:	3030      	adds	r0, #48	; 0x30
 8004a8e:	428b      	cmp	r3, r1
 8004a90:	bf08      	it	eq
 8004a92:	f042 0201 	orreq.w	r2, r2, #1
 8004a96:	3130      	adds	r1, #48	; 0x30
 8004a98:	4283      	cmp	r3, r0
 8004a9a:	bf08      	it	eq
 8004a9c:	f042 0201 	orreq.w	r2, r2, #1
 8004aa0:	428b      	cmp	r3, r1
 8004aa2:	bf08      	it	eq
 8004aa4:	f042 0201 	orreq.w	r2, r2, #1
 8004aa8:	b91a      	cbnz	r2, 8004ab2 <HAL_DMA_Init+0xae>
 8004aaa:	4a0a      	ldr	r2, [pc, #40]	; (8004ad4 <HAL_DMA_Init+0xd0>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	f040 81bf 	bne.w	8004e30 <HAL_DMA_Init+0x42c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ab2:	2202      	movs	r2, #2
    __HAL_UNLOCK(hdma);
 8004ab4:	2100      	movs	r1, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ab6:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8004aba:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(hdma);
 8004abc:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 8004ac0:	f022 0201 	bic.w	r2, r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	e00e      	b.n	8004ae6 <HAL_DMA_Init+0xe2>
 8004ac8:	40020010 	.word	0x40020010
 8004acc:	40020040 	.word	0x40020040
 8004ad0:	40020070 	.word	0x40020070
 8004ad4:	400204b8 	.word	0x400204b8
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ad8:	f7fe fec6 	bl	8003868 <HAL_GetTick>
 8004adc:	1b40      	subs	r0, r0, r5
 8004ade:	2805      	cmp	r0, #5
 8004ae0:	f200 8112 	bhi.w	8004d08 <HAL_DMA_Init+0x304>
 8004ae4:	6823      	ldr	r3, [r4, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	07d6      	lsls	r6, r2, #31
 8004aea:	d4f5      	bmi.n	8004ad8 <HAL_DMA_Init+0xd4>
    registerValue |=  hdma->Init.Direction           |
 8004aec:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004af0:	6920      	ldr	r0, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 8004af2:	430a      	orrs	r2, r1
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004af4:	681f      	ldr	r7, [r3, #0]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004af6:	e9d4 6105 	ldrd	r6, r1, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004afa:	4302      	orrs	r2, r0
 8004afc:	4332      	orrs	r2, r6
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004afe:	4eb5      	ldr	r6, [pc, #724]	; (8004dd4 <HAL_DMA_Init+0x3d0>)
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b00:	e9d4 5007 	ldrd	r5, r0, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b04:	430a      	orrs	r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b06:	403e      	ands	r6, r7
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b08:	432a      	orrs	r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b0a:	6a65      	ldr	r5, [r4, #36]	; 0x24
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b0c:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b0e:	2d04      	cmp	r5, #4
    registerValue |=  hdma->Init.Direction           |
 8004b10:	ea42 0206 	orr.w	r2, r2, r6
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b14:	f000 8103 	beq.w	8004d1e <HAL_DMA_Init+0x31a>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004b18:	4eaf      	ldr	r6, [pc, #700]	; (8004dd8 <HAL_DMA_Init+0x3d4>)
 8004b1a:	48b0      	ldr	r0, [pc, #704]	; (8004ddc <HAL_DMA_Init+0x3d8>)
 8004b1c:	6836      	ldr	r6, [r6, #0]
 8004b1e:	4030      	ands	r0, r6
 8004b20:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8004b24:	f080 8108 	bcs.w	8004d38 <HAL_DMA_Init+0x334>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004b28:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004b2a:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b2c:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8004b30:	432a      	orrs	r2, r5
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004b32:	615a      	str	r2, [r3, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b34:	4620      	mov	r0, r4
 8004b36:	f7ff fee9 	bl	800490c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b3a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004b3c:	233f      	movs	r3, #63	; 0x3f
 8004b3e:	f002 021f 	and.w	r2, r2, #31
 8004b42:	4093      	lsls	r3, r2
 8004b44:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b46:	6822      	ldr	r2, [r4, #0]
 8004b48:	4ba5      	ldr	r3, [pc, #660]	; (8004de0 <HAL_DMA_Init+0x3dc>)
 8004b4a:	48a6      	ldr	r0, [pc, #664]	; (8004de4 <HAL_DMA_Init+0x3e0>)
 8004b4c:	49a6      	ldr	r1, [pc, #664]	; (8004de8 <HAL_DMA_Init+0x3e4>)
 8004b4e:	4282      	cmp	r2, r0
 8004b50:	bf18      	it	ne
 8004b52:	429a      	cmpne	r2, r3
 8004b54:	4ea5      	ldr	r6, [pc, #660]	; (8004dec <HAL_DMA_Init+0x3e8>)
 8004b56:	4da6      	ldr	r5, [pc, #664]	; (8004df0 <HAL_DMA_Init+0x3ec>)
 8004b58:	f100 0060 	add.w	r0, r0, #96	; 0x60
 8004b5c:	bf0c      	ite	eq
 8004b5e:	2301      	moveq	r3, #1
 8004b60:	2300      	movne	r3, #0
 8004b62:	f8df c2b8 	ldr.w	ip, [pc, #696]	; 8004e1c <HAL_DMA_Init+0x418>
 8004b66:	428a      	cmp	r2, r1
 8004b68:	bf08      	it	eq
 8004b6a:	f043 0301 	orreq.w	r3, r3, #1
 8004b6e:	3160      	adds	r1, #96	; 0x60
 8004b70:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 8004e20 <HAL_DMA_Init+0x41c>
 8004b74:	42b2      	cmp	r2, r6
 8004b76:	bf08      	it	eq
 8004b78:	f043 0301 	orreq.w	r3, r3, #1
 8004b7c:	f8df e2a4 	ldr.w	lr, [pc, #676]	; 8004e24 <HAL_DMA_Init+0x420>
 8004b80:	4f9c      	ldr	r7, [pc, #624]	; (8004df4 <HAL_DMA_Init+0x3f0>)
 8004b82:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004b86:	42aa      	cmp	r2, r5
 8004b88:	bf08      	it	eq
 8004b8a:	f043 0301 	orreq.w	r3, r3, #1
 8004b8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004b92:	f8df a284 	ldr.w	sl, [pc, #644]	; 8004e18 <HAL_DMA_Init+0x414>
 8004b96:	4282      	cmp	r2, r0
 8004b98:	bf08      	it	eq
 8004b9a:	f043 0301 	orreq.w	r3, r3, #1
 8004b9e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004ba2:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8004e28 <HAL_DMA_Init+0x424>
 8004ba6:	428a      	cmp	r2, r1
 8004ba8:	bf08      	it	eq
 8004baa:	f043 0301 	orreq.w	r3, r3, #1
 8004bae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004bb2:	4562      	cmp	r2, ip
 8004bb4:	bf08      	it	eq
 8004bb6:	f043 0301 	orreq.w	r3, r3, #1
 8004bba:	f8df c254 	ldr.w	ip, [pc, #596]	; 8004e10 <HAL_DMA_Init+0x40c>
 8004bbe:	4542      	cmp	r2, r8
 8004bc0:	bf08      	it	eq
 8004bc2:	f043 0301 	orreq.w	r3, r3, #1
 8004bc6:	eba2 0c0c 	sub.w	ip, r2, ip
 8004bca:	f8df 8248 	ldr.w	r8, [pc, #584]	; 8004e14 <HAL_DMA_Init+0x410>
 8004bce:	4572      	cmp	r2, lr
 8004bd0:	bf08      	it	eq
 8004bd2:	f043 0301 	orreq.w	r3, r3, #1
 8004bd6:	fabc fc8c 	clz	ip, ip
 8004bda:	eba2 0808 	sub.w	r8, r2, r8
 8004bde:	f8df e24c 	ldr.w	lr, [pc, #588]	; 8004e2c <HAL_DMA_Init+0x428>
 8004be2:	42ba      	cmp	r2, r7
 8004be4:	bf08      	it	eq
 8004be6:	f043 0301 	orreq.w	r3, r3, #1
 8004bea:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8004bee:	eba2 070a 	sub.w	r7, r2, sl
 8004bf2:	fab8 f888 	clz	r8, r8
 8004bf6:	42b2      	cmp	r2, r6
 8004bf8:	bf08      	it	eq
 8004bfa:	f043 0301 	orreq.w	r3, r3, #1
 8004bfe:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 8004c02:	eba2 060e 	sub.w	r6, r2, lr
 8004c06:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8004c0a:	42aa      	cmp	r2, r5
 8004c0c:	bf08      	it	eq
 8004c0e:	f043 0301 	orreq.w	r3, r3, #1
 8004c12:	fab7 f787 	clz	r7, r7
 8004c16:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8004c1a:	eba2 050a 	sub.w	r5, r2, sl
 8004c1e:	4282      	cmp	r2, r0
 8004c20:	bf08      	it	eq
 8004c22:	f043 0301 	orreq.w	r3, r3, #1
 8004c26:	097f      	lsrs	r7, r7, #5
 8004c28:	fab6 f686 	clz	r6, r6
 8004c2c:	eba2 000e 	sub.w	r0, r2, lr
 8004c30:	428a      	cmp	r2, r1
 8004c32:	bf08      	it	eq
 8004c34:	f043 0301 	orreq.w	r3, r3, #1
 8004c38:	fab5 f585 	clz	r5, r5
 8004c3c:	0976      	lsrs	r6, r6, #5
 8004c3e:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 8004c42:	454a      	cmp	r2, r9
 8004c44:	bf08      	it	eq
 8004c46:	f043 0301 	orreq.w	r3, r3, #1
 8004c4a:	096d      	lsrs	r5, r5, #5
 8004c4c:	fab0 f080 	clz	r0, r0
 8004c50:	eba2 010a 	sub.w	r1, r2, sl
 8004c54:	ea4c 0303 	orr.w	r3, ip, r3
 8004c58:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 8004c5c:	0940      	lsrs	r0, r0, #5
 8004c5e:	fab1 f181 	clz	r1, r1
 8004c62:	ea48 0303 	orr.w	r3, r8, r3
 8004c66:	eba2 0e0e 	sub.w	lr, r2, lr
 8004c6a:	0949      	lsrs	r1, r1, #5
 8004c6c:	433b      	orrs	r3, r7
 8004c6e:	fabe fe8e 	clz	lr, lr
 8004c72:	4333      	orrs	r3, r6
 8004c74:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8004c78:	432b      	orrs	r3, r5
 8004c7a:	4303      	orrs	r3, r0
 8004c7c:	430b      	orrs	r3, r1
 8004c7e:	d102      	bne.n	8004c86 <HAL_DMA_Init+0x282>
 8004c80:	f1be 0f00 	cmp.w	lr, #0
 8004c84:	d039      	beq.n	8004cfa <HAL_DMA_Init+0x2f6>
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c86:	ea4c 0c08 	orr.w	ip, ip, r8
 8004c8a:	b2d3      	uxtb	r3, r2
 8004c8c:	ea47 070c 	orr.w	r7, r7, ip
 8004c90:	433e      	orrs	r6, r7
 8004c92:	4335      	orrs	r5, r6
 8004c94:	4328      	orrs	r0, r5
 8004c96:	4301      	orrs	r1, r0
 8004c98:	ea5e 0101 	orrs.w	r1, lr, r1
 8004c9c:	f000 8127 	beq.w	8004eee <HAL_DMA_Init+0x4ea>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004ca0:	4d55      	ldr	r5, [pc, #340]	; (8004df8 <HAL_DMA_Init+0x3f4>)
 8004ca2:	3b08      	subs	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004ca4:	4a55      	ldr	r2, [pc, #340]	; (8004dfc <HAL_DMA_Init+0x3f8>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ca6:	2001      	movs	r0, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004ca8:	fba5 5303 	umull	r5, r3, r5, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004cac:	4d54      	ldr	r5, [pc, #336]	; (8004e00 <HAL_DMA_Init+0x3fc>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004cae:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004cb0:	6665      	str	r5, [r4, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004cb2:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004cb4:	f003 031f 	and.w	r3, r3, #31
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004cb8:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004cba:	fa00 f303 	lsl.w	r3, r0, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004cbe:	6622      	str	r2, [r4, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004cc0:	66a3      	str	r3, [r4, #104]	; 0x68
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004cc2:	68a0      	ldr	r0, [r4, #8]
 8004cc4:	2880      	cmp	r0, #128	; 0x80
 8004cc6:	d069      	beq.n	8004d9c <HAL_DMA_Init+0x398>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004cc8:	6860      	ldr	r0, [r4, #4]
 8004cca:	b2c6      	uxtb	r6, r0
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004ccc:	3801      	subs	r0, #1
 8004cce:	2807      	cmp	r0, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004cd0:	6016      	str	r6, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cd2:	606b      	str	r3, [r5, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004cd4:	d866      	bhi.n	8004da4 <HAL_DMA_Init+0x3a0>
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004cd6:	1e70      	subs	r0, r6, #1
 8004cd8:	2807      	cmp	r0, #7
 8004cda:	d868      	bhi.n	8004dae <HAL_DMA_Init+0x3aa>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004cdc:	2900      	cmp	r1, #0
 8004cde:	f000 8133 	beq.w	8004f48 <HAL_DMA_Init+0x544>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ce2:	4b48      	ldr	r3, [pc, #288]	; (8004e04 <HAL_DMA_Init+0x400>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004ce4:	4948      	ldr	r1, [pc, #288]	; (8004e08 <HAL_DMA_Init+0x404>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ce6:	4433      	add	r3, r6
 8004ce8:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004cea:	2201      	movs	r2, #1
 8004cec:	4082      	lsls	r2, r0
 8004cee:	e9c4 311b 	strd	r3, r1, [r4, #108]	; 0x6c
 8004cf2:	6762      	str	r2, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	6018      	str	r0, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cf8:	604a      	str	r2, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cfa:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8004cfc:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cfe:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004d00:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8004d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d08:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8004d0a:	2303      	movs	r3, #3
        return HAL_ERROR;
 8004d0c:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d0e:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8004d10:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8004d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 8004d18:	2001      	movs	r0, #1
}
 8004d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004d1e:	482e      	ldr	r0, [pc, #184]	; (8004dd8 <HAL_DMA_Init+0x3d4>)
 8004d20:	4e2e      	ldr	r6, [pc, #184]	; (8004ddc <HAL_DMA_Init+0x3d8>)
 8004d22:	6807      	ldr	r7, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d24:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004d26:	403e      	ands	r6, r7
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d28:	6b27      	ldr	r7, [r4, #48]	; 0x30
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004d2a:	f1b6 5f00 	cmp.w	r6, #536870912	; 0x20000000
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d2e:	ea40 0707 	orr.w	r7, r0, r7
 8004d32:	ea42 0207 	orr.w	r2, r2, r7
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004d36:	d346      	bcc.n	8004dc6 <HAL_DMA_Init+0x3c2>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004d38:	6866      	ldr	r6, [r4, #4]
 8004d3a:	f1a6 0729 	sub.w	r7, r6, #41	; 0x29
 8004d3e:	2f1f      	cmp	r7, #31
 8004d40:	d925      	bls.n	8004d8e <HAL_DMA_Init+0x38a>
 8004d42:	3e4f      	subs	r6, #79	; 0x4f
 8004d44:	2e03      	cmp	r6, #3
 8004d46:	d926      	bls.n	8004d96 <HAL_DMA_Init+0x392>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004d48:	601a      	str	r2, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d4a:	2d04      	cmp	r5, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004d4c:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d4e:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8004d52:	ea42 0205 	orr.w	r2, r2, r5
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d56:	f47f aeec 	bne.w	8004b32 <HAL_DMA_Init+0x12e>
 8004d5a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8004d5c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004d5e:	432a      	orrs	r2, r5
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d60:	2800      	cmp	r0, #0
 8004d62:	f43f aee6 	beq.w	8004b32 <HAL_DMA_Init+0x12e>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d66:	b331      	cbz	r1, 8004db6 <HAL_DMA_Init+0x3b2>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d68:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004d6c:	f000 80dd 	beq.w	8004f2a <HAL_DMA_Init+0x526>
    switch (hdma->Init.FIFOThreshold)
 8004d70:	2d02      	cmp	r5, #2
 8004d72:	d905      	bls.n	8004d80 <HAL_DMA_Init+0x37c>
 8004d74:	2d03      	cmp	r5, #3
 8004d76:	f47f aedc 	bne.w	8004b32 <HAL_DMA_Init+0x12e>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d7a:	01c1      	lsls	r1, r0, #7
 8004d7c:	f57f aed9 	bpl.w	8004b32 <HAL_DMA_Init+0x12e>
          hdma->State = HAL_DMA_STATE_READY;
 8004d80:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d82:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8004d84:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d86:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8004d88:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          return HAL_ERROR;
 8004d8c:	e7c2      	b.n	8004d14 <HAL_DMA_Init+0x310>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004d8e:	481f      	ldr	r0, [pc, #124]	; (8004e0c <HAL_DMA_Init+0x408>)
 8004d90:	40f8      	lsrs	r0, r7
 8004d92:	07c0      	lsls	r0, r0, #31
 8004d94:	d5d5      	bpl.n	8004d42 <HAL_DMA_Init+0x33e>
        registerValue |= DMA_SxCR_TRBUFF;
 8004d96:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004d9a:	e7d5      	b.n	8004d48 <HAL_DMA_Init+0x344>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	6061      	str	r1, [r4, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004da0:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004da2:	606b      	str	r3, [r5, #4]
      hdma->DMAmuxRequestGen = 0U;
 8004da4:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8004da6:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004daa:	6763      	str	r3, [r4, #116]	; 0x74
 8004dac:	e7a5      	b.n	8004cfa <HAL_DMA_Init+0x2f6>
 8004dae:	e9d4 311b 	ldrd	r3, r1, [r4, #108]	; 0x6c
 8004db2:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8004db4:	e79e      	b.n	8004cf4 <HAL_DMA_Init+0x2f0>
    switch (hdma->Init.FIFOThreshold)
 8004db6:	2d01      	cmp	r5, #1
 8004db8:	f000 80b2 	beq.w	8004f20 <HAL_DMA_Init+0x51c>
 8004dbc:	d3dd      	bcc.n	8004d7a <HAL_DMA_Init+0x376>
 8004dbe:	2d02      	cmp	r5, #2
 8004dc0:	f47f aeb7 	bne.w	8004b32 <HAL_DMA_Init+0x12e>
 8004dc4:	e7d9      	b.n	8004d7a <HAL_DMA_Init+0x376>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004dc6:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004dc8:	695a      	ldr	r2, [r3, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004dca:	f022 0207 	bic.w	r2, r2, #7
    registerValue |= hdma->Init.FIFOMode;
 8004dce:	f042 0204 	orr.w	r2, r2, #4
 8004dd2:	e7c3      	b.n	8004d5c <HAL_DMA_Init+0x358>
 8004dd4:	fe10803f 	.word	0xfe10803f
 8004dd8:	5c001000 	.word	0x5c001000
 8004ddc:	ffff0000 	.word	0xffff0000
 8004de0:	40020010 	.word	0x40020010
 8004de4:	40020028 	.word	0x40020028
 8004de8:	40020040 	.word	0x40020040
 8004dec:	40020058 	.word	0x40020058
 8004df0:	40020070 	.word	0x40020070
 8004df4:	40020440 	.word	0x40020440
 8004df8:	cccccccd 	.word	0xcccccccd
 8004dfc:	16009600 	.word	0x16009600
 8004e00:	58025880 	.word	0x58025880
 8004e04:	1600963f 	.word	0x1600963f
 8004e08:	58025940 	.word	0x58025940
 8004e0c:	c3c0003f 	.word	0xc3c0003f
 8004e10:	58025408 	.word	0x58025408
 8004e14:	5802541c 	.word	0x5802541c
 8004e18:	58025430 	.word	0x58025430
 8004e1c:	400200b8 	.word	0x400200b8
 8004e20:	40020410 	.word	0x40020410
 8004e24:	40020428 	.word	0x40020428
 8004e28:	400204b8 	.word	0x400204b8
 8004e2c:	58025444 	.word	0x58025444
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e30:	4a4c      	ldr	r2, [pc, #304]	; (8004f64 <HAL_DMA_Init+0x560>)
 8004e32:	494d      	ldr	r1, [pc, #308]	; (8004f68 <HAL_DMA_Init+0x564>)
 8004e34:	484d      	ldr	r0, [pc, #308]	; (8004f6c <HAL_DMA_Init+0x568>)
 8004e36:	428b      	cmp	r3, r1
 8004e38:	bf18      	it	ne
 8004e3a:	4293      	cmpne	r3, r2
 8004e3c:	f101 0128 	add.w	r1, r1, #40	; 0x28
 8004e40:	4d4b      	ldr	r5, [pc, #300]	; (8004f70 <HAL_DMA_Init+0x56c>)
 8004e42:	bf0c      	ite	eq
 8004e44:	2201      	moveq	r2, #1
 8004e46:	2200      	movne	r2, #0
 8004e48:	4283      	cmp	r3, r0
 8004e4a:	bf08      	it	eq
 8004e4c:	f042 0201 	orreq.w	r2, r2, #1
 8004e50:	303c      	adds	r0, #60	; 0x3c
 8004e52:	428b      	cmp	r3, r1
 8004e54:	bf08      	it	eq
 8004e56:	f042 0201 	orreq.w	r2, r2, #1
 8004e5a:	313c      	adds	r1, #60	; 0x3c
 8004e5c:	42ab      	cmp	r3, r5
 8004e5e:	bf08      	it	eq
 8004e60:	f042 0201 	orreq.w	r2, r2, #1
 8004e64:	4283      	cmp	r3, r0
 8004e66:	bf08      	it	eq
 8004e68:	f042 0201 	orreq.w	r2, r2, #1
 8004e6c:	428b      	cmp	r3, r1
 8004e6e:	bf08      	it	eq
 8004e70:	f042 0201 	orreq.w	r2, r2, #1
 8004e74:	b912      	cbnz	r2, 8004e7c <HAL_DMA_Init+0x478>
 8004e76:	4a3f      	ldr	r2, [pc, #252]	; (8004f74 <HAL_DMA_Init+0x570>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d16c      	bne.n	8004f56 <HAL_DMA_Init+0x552>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e7c:	2002      	movs	r0, #2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e7e:	68a2      	ldr	r2, [r4, #8]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004e80:	493d      	ldr	r1, [pc, #244]	; (8004f78 <HAL_DMA_Init+0x574>)
    __HAL_UNLOCK(hdma);
 8004e82:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e84:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e88:	2a40      	cmp	r2, #64	; 0x40
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004e8a:	6818      	ldr	r0, [r3, #0]
    __HAL_UNLOCK(hdma);
 8004e8c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004e90:	ea01 0100 	and.w	r1, r1, r0
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e94:	d05d      	beq.n	8004f52 <HAL_DMA_Init+0x54e>
 8004e96:	2a80      	cmp	r2, #128	; 0x80
 8004e98:	bf14      	ite	ne
 8004e9a:	462f      	movne	r7, r5
 8004e9c:	f44f 4780 	moveq.w	r7, #16384	; 0x4000
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004ea0:	6922      	ldr	r2, [r4, #16]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ea2:	4620      	mov	r0, r4
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004ea4:	68e6      	ldr	r6, [r4, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004ea6:	08d2      	lsrs	r2, r2, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ea8:	6965      	ldr	r5, [r4, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004eaa:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 8004f98 <HAL_DMA_Init+0x594>
 8004eae:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004eb2:	69a6      	ldr	r6, [r4, #24]
 8004eb4:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004eb8:	69e5      	ldr	r5, [r4, #28]
 8004eba:	ea42 02d6 	orr.w	r2, r2, r6, lsr #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004ebe:	4e2f      	ldr	r6, [pc, #188]	; (8004f7c <HAL_DMA_Init+0x578>)
 8004ec0:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
 8004ec4:	441e      	add	r6, r3
 8004ec6:	6a25      	ldr	r5, [r4, #32]
 8004ec8:	ea42 1215 	orr.w	r2, r2, r5, lsr #4
 8004ecc:	fbac 5606 	umull	r5, r6, ip, r6
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	0931      	lsrs	r1, r6, #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ed4:	433a      	orrs	r2, r7
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004ed6:	0089      	lsls	r1, r1, #2
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004ed8:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004eda:	65e1      	str	r1, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004edc:	f7ff fd16 	bl	800490c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ee0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	f002 021f 	and.w	r2, r2, #31
 8004ee8:	4093      	lsls	r3, r2
 8004eea:	6043      	str	r3, [r0, #4]
 8004eec:	e62b      	b.n	8004b46 <HAL_DMA_Init+0x142>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004eee:	f1a3 0010 	sub.w	r0, r3, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004ef2:	4b23      	ldr	r3, [pc, #140]	; (8004f80 <HAL_DMA_Init+0x57c>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ef4:	4d23      	ldr	r5, [pc, #140]	; (8004f84 <HAL_DMA_Init+0x580>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004ef6:	4413      	add	r3, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ef8:	fba5 5000 	umull	r5, r0, r5, r0
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004efc:	2ba8      	cmp	r3, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004efe:	ea4f 1010 	mov.w	r0, r0, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004f02:	d800      	bhi.n	8004f06 <HAL_DMA_Init+0x502>
      stream_number += 8U;
 8004f04:	3008      	adds	r0, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004f06:	4a20      	ldr	r2, [pc, #128]	; (8004f88 <HAL_DMA_Init+0x584>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f08:	f000 051f 	and.w	r5, r0, #31
 8004f0c:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004f0e:	4402      	add	r2, r0
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f10:	481e      	ldr	r0, [pc, #120]	; (8004f8c <HAL_DMA_Init+0x588>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f12:	40ab      	lsls	r3, r5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004f14:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f16:	4605      	mov	r5, r0
 8004f18:	66a3      	str	r3, [r4, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f1a:	e9c4 2018 	strd	r2, r0, [r4, #96]	; 0x60
 8004f1e:	e6d0      	b.n	8004cc2 <HAL_DMA_Init+0x2be>
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f20:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8004f24:	f47f ae05 	bne.w	8004b32 <HAL_DMA_Init+0x12e>
 8004f28:	e72a      	b.n	8004d80 <HAL_DMA_Init+0x37c>
    switch (hdma->Init.FIFOThreshold)
 8004f2a:	2d03      	cmp	r5, #3
 8004f2c:	f63f ae01 	bhi.w	8004b32 <HAL_DMA_Init+0x12e>
 8004f30:	a101      	add	r1, pc, #4	; (adr r1, 8004f38 <HAL_DMA_Init+0x534>)
 8004f32:	f851 f025 	ldr.w	pc, [r1, r5, lsl #2]
 8004f36:	bf00      	nop
 8004f38:	08004d81 	.word	0x08004d81
 8004f3c:	08004d7b 	.word	0x08004d7b
 8004f40:	08004d81 	.word	0x08004d81
 8004f44:	08004f21 	.word	0x08004f21
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f48:	4b11      	ldr	r3, [pc, #68]	; (8004f90 <HAL_DMA_Init+0x58c>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004f4a:	4912      	ldr	r1, [pc, #72]	; (8004f94 <HAL_DMA_Init+0x590>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004f4c:	4433      	add	r3, r6
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	e6cb      	b.n	8004cea <HAL_DMA_Init+0x2e6>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004f52:	2710      	movs	r7, #16
 8004f54:	e7a4      	b.n	8004ea0 <HAL_DMA_Init+0x49c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f56:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004f58:	2303      	movs	r3, #3
    return HAL_ERROR;
 8004f5a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f5c:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004f5e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8004f62:	e6d7      	b.n	8004d14 <HAL_DMA_Init+0x310>
 8004f64:	58025408 	.word	0x58025408
 8004f68:	5802541c 	.word	0x5802541c
 8004f6c:	58025430 	.word	0x58025430
 8004f70:	58025458 	.word	0x58025458
 8004f74:	58025494 	.word	0x58025494
 8004f78:	fffe000f 	.word	0xfffe000f
 8004f7c:	a7fdabf8 	.word	0xa7fdabf8
 8004f80:	bffdfbf0 	.word	0xbffdfbf0
 8004f84:	aaaaaaab 	.word	0xaaaaaaab
 8004f88:	10008200 	.word	0x10008200
 8004f8c:	40020880 	.word	0x40020880
 8004f90:	1000823f 	.word	0x1000823f
 8004f94:	40020940 	.word	0x40020940
 8004f98:	cccccccd 	.word	0xcccccccd

08004f9c <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	f000 8104 	beq.w	80051aa <HAL_DMA_Start_IT+0x20e>
{
 8004fa2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa6:	4605      	mov	r5, r0
  __HAL_LOCK(hdma);
 8004fa8:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004fac:	2801      	cmp	r0, #1
 8004fae:	f000 8138 	beq.w	8005222 <HAL_DMA_Start_IT+0x286>
 8004fb2:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8004fb4:	f895 4035 	ldrb.w	r4, [r5, #53]	; 0x35
 8004fb8:	4284      	cmp	r4, r0
  __HAL_LOCK(hdma);
 8004fba:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004fbe:	d007      	beq.n	8004fd0 <HAL_DMA_Start_IT+0x34>
    __HAL_UNLOCK(hdma);
 8004fc0:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004fc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8004fc6:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004fca:	656b      	str	r3, [r5, #84]	; 0x54
}
 8004fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_DMA_DISABLE(hdma);
 8004fd0:	682c      	ldr	r4, [r5, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fd2:	f04f 0e02 	mov.w	lr, #2
    __HAL_DMA_DISABLE(hdma);
 8004fd6:	489b      	ldr	r0, [pc, #620]	; (8005244 <HAL_DMA_Start_IT+0x2a8>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fd8:	f04f 0c00 	mov.w	ip, #0
    __HAL_DMA_DISABLE(hdma);
 8004fdc:	4f9a      	ldr	r7, [pc, #616]	; (8005248 <HAL_DMA_Start_IT+0x2ac>)
 8004fde:	4e9b      	ldr	r6, [pc, #620]	; (800524c <HAL_DMA_Start_IT+0x2b0>)
 8004fe0:	42bc      	cmp	r4, r7
 8004fe2:	bf18      	it	ne
 8004fe4:	4284      	cmpne	r4, r0
 8004fe6:	f107 0748 	add.w	r7, r7, #72	; 0x48
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fea:	f885 e035 	strb.w	lr, [r5, #53]	; 0x35
 8004fee:	bf0c      	ite	eq
 8004ff0:	2001      	moveq	r0, #1
 8004ff2:	2000      	movne	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8004ff4:	f8df e264 	ldr.w	lr, [pc, #612]	; 800525c <HAL_DMA_Start_IT+0x2c0>
 8004ff8:	42b4      	cmp	r4, r6
 8004ffa:	bf08      	it	eq
 8004ffc:	f040 0001 	orreq.w	r0, r0, #1
 8005000:	3630      	adds	r6, #48	; 0x30
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005002:	f8c5 c054 	str.w	ip, [r5, #84]	; 0x54
 8005006:	42bc      	cmp	r4, r7
 8005008:	bf08      	it	eq
 800500a:	f040 0001 	orreq.w	r0, r0, #1
    __HAL_DMA_DISABLE(hdma);
 800500e:	f507 7762 	add.w	r7, r7, #904	; 0x388
 8005012:	f8df c24c 	ldr.w	ip, [pc, #588]	; 8005260 <HAL_DMA_Start_IT+0x2c4>
 8005016:	42b4      	cmp	r4, r6
 8005018:	bf08      	it	eq
 800501a:	f040 0001 	orreq.w	r0, r0, #1
 800501e:	f506 7662 	add.w	r6, r6, #904	; 0x388
 8005022:	4574      	cmp	r4, lr
 8005024:	bf08      	it	eq
 8005026:	f040 0001 	orreq.w	r0, r0, #1
 800502a:	f50e 7e68 	add.w	lr, lr, #928	; 0x3a0
 800502e:	42bc      	cmp	r4, r7
 8005030:	bf08      	it	eq
 8005032:	f040 0001 	orreq.w	r0, r0, #1
 8005036:	3760      	adds	r7, #96	; 0x60
 8005038:	42b4      	cmp	r4, r6
 800503a:	bf08      	it	eq
 800503c:	f040 0001 	orreq.w	r0, r0, #1
 8005040:	3660      	adds	r6, #96	; 0x60
 8005042:	4564      	cmp	r4, ip
 8005044:	bf08      	it	eq
 8005046:	f040 0001 	orreq.w	r0, r0, #1
 800504a:	f10c 0c60 	add.w	ip, ip, #96	; 0x60
 800504e:	4574      	cmp	r4, lr
 8005050:	bf08      	it	eq
 8005052:	f040 0001 	orreq.w	r0, r0, #1
 8005056:	f10e 0e60 	add.w	lr, lr, #96	; 0x60
 800505a:	42bc      	cmp	r4, r7
 800505c:	bf08      	it	eq
 800505e:	f040 0001 	orreq.w	r0, r0, #1
 8005062:	f5a7 678c 	sub.w	r7, r7, #1120	; 0x460
 8005066:	42b4      	cmp	r4, r6
 8005068:	bf08      	it	eq
 800506a:	f040 0001 	orreq.w	r0, r0, #1
 800506e:	f5a6 668c 	sub.w	r6, r6, #1120	; 0x460
 8005072:	4564      	cmp	r4, ip
 8005074:	bf08      	it	eq
 8005076:	f040 0001 	orreq.w	r0, r0, #1
 800507a:	f8d5 c058 	ldr.w	ip, [r5, #88]	; 0x58
 800507e:	4574      	cmp	r4, lr
 8005080:	bf14      	ite	ne
 8005082:	4682      	movne	sl, r0
 8005084:	f040 0a01 	orreq.w	sl, r0, #1
 8005088:	42b4      	cmp	r4, r6
 800508a:	bf18      	it	ne
 800508c:	42bc      	cmpne	r4, r7
 800508e:	6827      	ldr	r7, [r4, #0]
 8005090:	bf0c      	ite	eq
 8005092:	2601      	moveq	r6, #1
 8005094:	2600      	movne	r6, #0
 8005096:	f027 0701 	bic.w	r7, r7, #1
 800509a:	6027      	str	r7, [r4, #0]
 800509c:	d003      	beq.n	80050a6 <HAL_DMA_Start_IT+0x10a>
 800509e:	f1ba 0f00 	cmp.w	sl, #0
 80050a2:	f000 8084 	beq.w	80051ae <HAL_DMA_Start_IT+0x212>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050a6:	2e00      	cmp	r6, #0
 80050a8:	f000 8081 	beq.w	80051ae <HAL_DMA_Start_IT+0x212>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050ac:	6e6f      	ldr	r7, [r5, #100]	; 0x64
 80050ae:	e9d5 0e1a 	ldrd	r0, lr, [r5, #104]	; 0x68
 80050b2:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80050b4:	f1be 0f00 	cmp.w	lr, #0
 80050b8:	d007      	beq.n	80050ca <HAL_DMA_Start_IT+0x12e>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050ba:	e9d5 701c 	ldrd	r7, r0, [r5, #112]	; 0x70
 80050be:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050c0:	b91e      	cbnz	r6, 80050ca <HAL_DMA_Start_IT+0x12e>
 80050c2:	f1ba 0f00 	cmp.w	sl, #0
 80050c6:	f000 80cd 	beq.w	8005264 <HAL_DMA_Start_IT+0x2c8>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80050ca:	6def      	ldr	r7, [r5, #92]	; 0x5c
 80050cc:	f04f 093f 	mov.w	r9, #63	; 0x3f
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050d0:	f8d5 8008 	ldr.w	r8, [r5, #8]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80050d4:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050d8:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80050dc:	fa09 f707 	lsl.w	r7, r9, r7
 80050e0:	f8cc 7008 	str.w	r7, [ip, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80050e4:	6827      	ldr	r7, [r4, #0]
 80050e6:	f427 2780 	bic.w	r7, r7, #262144	; 0x40000
 80050ea:	6027      	str	r7, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80050ec:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050ee:	f000 80a5 	beq.w	800523c <HAL_DMA_Start_IT+0x2a0>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80050f2:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80050f4:	60e2      	str	r2, [r4, #12]
 80050f6:	6c2f      	ldr	r7, [r5, #64]	; 0x40
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050f8:	2e00      	cmp	r6, #0
 80050fa:	f040 8095 	bne.w	8005228 <HAL_DMA_Start_IT+0x28c>
 80050fe:	f1ba 0f00 	cmp.w	sl, #0
 8005102:	f000 80ee 	beq.w	80052e2 <HAL_DMA_Start_IT+0x346>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	f023 031e 	bic.w	r3, r3, #30
 800510c:	f043 0316 	orr.w	r3, r3, #22
 8005110:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8005112:	b12f      	cbz	r7, 8005120 <HAL_DMA_Start_IT+0x184>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005114:	6823      	ldr	r3, [r4, #0]
 8005116:	f043 0308 	orr.w	r3, r3, #8
 800511a:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800511c:	2e00      	cmp	r6, #0
 800511e:	d12c      	bne.n	800517a <HAL_DMA_Start_IT+0x1de>
 8005120:	4b4b      	ldr	r3, [pc, #300]	; (8005250 <HAL_DMA_Start_IT+0x2b4>)
 8005122:	4a4c      	ldr	r2, [pc, #304]	; (8005254 <HAL_DMA_Start_IT+0x2b8>)
 8005124:	494c      	ldr	r1, [pc, #304]	; (8005258 <HAL_DMA_Start_IT+0x2bc>)
 8005126:	4294      	cmp	r4, r2
 8005128:	bf18      	it	ne
 800512a:	429c      	cmpne	r4, r3
 800512c:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8005130:	bf0c      	ite	eq
 8005132:	2301      	moveq	r3, #1
 8005134:	2300      	movne	r3, #0
 8005136:	428c      	cmp	r4, r1
 8005138:	bf08      	it	eq
 800513a:	f043 0301 	orreq.w	r3, r3, #1
 800513e:	3128      	adds	r1, #40	; 0x28
 8005140:	4294      	cmp	r4, r2
 8005142:	bf08      	it	eq
 8005144:	f043 0301 	orreq.w	r3, r3, #1
 8005148:	3228      	adds	r2, #40	; 0x28
 800514a:	428c      	cmp	r4, r1
 800514c:	bf08      	it	eq
 800514e:	f043 0301 	orreq.w	r3, r3, #1
 8005152:	3128      	adds	r1, #40	; 0x28
 8005154:	4294      	cmp	r4, r2
 8005156:	bf08      	it	eq
 8005158:	f043 0301 	orreq.w	r3, r3, #1
 800515c:	3228      	adds	r2, #40	; 0x28
 800515e:	428c      	cmp	r4, r1
 8005160:	bf08      	it	eq
 8005162:	f043 0301 	orreq.w	r3, r3, #1
 8005166:	4294      	cmp	r4, r2
 8005168:	bf08      	it	eq
 800516a:	f043 0301 	orreq.w	r3, r3, #1
 800516e:	b913      	cbnz	r3, 8005176 <HAL_DMA_Start_IT+0x1da>
 8005170:	f1ba 0f00 	cmp.w	sl, #0
 8005174:	d012      	beq.n	800519c <HAL_DMA_Start_IT+0x200>
 8005176:	f8d5 e06c 	ldr.w	lr, [r5, #108]	; 0x6c
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800517a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	03d2      	lsls	r2, r2, #15
 8005180:	d503      	bpl.n	800518a <HAL_DMA_Start_IT+0x1ee>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005188:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800518a:	f1be 0f00 	cmp.w	lr, #0
 800518e:	d005      	beq.n	800519c <HAL_DMA_Start_IT+0x200>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005190:	f8de 3000 	ldr.w	r3, [lr]
 8005194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005198:	f8ce 3000 	str.w	r3, [lr]
    __HAL_DMA_ENABLE(hdma);
 800519c:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800519e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80051a0:	f043 0301 	orr.w	r3, r3, #1
 80051a4:	6023      	str	r3, [r4, #0]
}
 80051a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_ERROR;
 80051aa:	2001      	movs	r0, #1
}
 80051ac:	4770      	bx	lr
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051ae:	4f28      	ldr	r7, [pc, #160]	; (8005250 <HAL_DMA_Start_IT+0x2b4>)
 80051b0:	f8df e0a0 	ldr.w	lr, [pc, #160]	; 8005254 <HAL_DMA_Start_IT+0x2b8>
 80051b4:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8005258 <HAL_DMA_Start_IT+0x2bc>
 80051b8:	4574      	cmp	r4, lr
 80051ba:	bf18      	it	ne
 80051bc:	42bc      	cmpne	r4, r7
 80051be:	f10e 0e3c 	add.w	lr, lr, #60	; 0x3c
 80051c2:	bf0c      	ite	eq
 80051c4:	2701      	moveq	r7, #1
 80051c6:	2700      	movne	r7, #0
 80051c8:	4544      	cmp	r4, r8
 80051ca:	bf08      	it	eq
 80051cc:	f047 0701 	orreq.w	r7, r7, #1
 80051d0:	f108 0828 	add.w	r8, r8, #40	; 0x28
 80051d4:	4574      	cmp	r4, lr
 80051d6:	bf08      	it	eq
 80051d8:	f047 0701 	orreq.w	r7, r7, #1
 80051dc:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 80051e0:	4544      	cmp	r4, r8
 80051e2:	bf08      	it	eq
 80051e4:	f047 0701 	orreq.w	r7, r7, #1
 80051e8:	f108 0828 	add.w	r8, r8, #40	; 0x28
 80051ec:	4574      	cmp	r4, lr
 80051ee:	bf08      	it	eq
 80051f0:	f047 0701 	orreq.w	r7, r7, #1
 80051f4:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 80051f8:	4544      	cmp	r4, r8
 80051fa:	bf08      	it	eq
 80051fc:	f047 0701 	orreq.w	r7, r7, #1
 8005200:	4574      	cmp	r4, lr
 8005202:	bf08      	it	eq
 8005204:	f047 0701 	orreq.w	r7, r7, #1
 8005208:	b917      	cbnz	r7, 8005210 <HAL_DMA_Start_IT+0x274>
 800520a:	f1ba 0f00 	cmp.w	sl, #0
 800520e:	d029      	beq.n	8005264 <HAL_DMA_Start_IT+0x2c8>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005210:	6e6f      	ldr	r7, [r5, #100]	; 0x64
 8005212:	e9d5 0e1a 	ldrd	r0, lr, [r5, #104]	; 0x68
 8005216:	6078      	str	r0, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8005218:	f1be 0f00 	cmp.w	lr, #0
 800521c:	f47f af4d 	bne.w	80050ba <HAL_DMA_Start_IT+0x11e>
 8005220:	e74f      	b.n	80050c2 <HAL_DMA_Start_IT+0x126>
  __HAL_LOCK(hdma);
 8005222:	2002      	movs	r0, #2
}
 8005224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	f023 031e 	bic.w	r3, r3, #30
 800522e:	f043 0316 	orr.w	r3, r3, #22
 8005232:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8005234:	2f00      	cmp	r7, #0
 8005236:	f47f af6d 	bne.w	8005114 <HAL_DMA_Start_IT+0x178>
 800523a:	e79e      	b.n	800517a <HAL_DMA_Start_IT+0x1de>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800523c:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800523e:	60e1      	str	r1, [r4, #12]
 8005240:	e759      	b.n	80050f6 <HAL_DMA_Start_IT+0x15a>
 8005242:	bf00      	nop
 8005244:	40020058 	.word	0x40020058
 8005248:	40020040 	.word	0x40020040
 800524c:	40020070 	.word	0x40020070
 8005250:	5802541c 	.word	0x5802541c
 8005254:	58025408 	.word	0x58025408
 8005258:	58025430 	.word	0x58025430
 800525c:	400200b8 	.word	0x400200b8
 8005260:	40020440 	.word	0x40020440
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005264:	4f28      	ldr	r7, [pc, #160]	; (8005308 <HAL_DMA_Start_IT+0x36c>)
 8005266:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8005310 <HAL_DMA_Start_IT+0x374>
 800526a:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 8005314 <HAL_DMA_Start_IT+0x378>
 800526e:	4544      	cmp	r4, r8
 8005270:	bf18      	it	ne
 8005272:	42bc      	cmpne	r4, r7
 8005274:	f108 0828 	add.w	r8, r8, #40	; 0x28
 8005278:	bf0c      	ite	eq
 800527a:	2701      	moveq	r7, #1
 800527c:	2700      	movne	r7, #0
 800527e:	4574      	cmp	r4, lr
 8005280:	bf08      	it	eq
 8005282:	f047 0701 	orreq.w	r7, r7, #1
 8005286:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 800528a:	4544      	cmp	r4, r8
 800528c:	bf08      	it	eq
 800528e:	f047 0701 	orreq.w	r7, r7, #1
 8005292:	f108 0828 	add.w	r8, r8, #40	; 0x28
 8005296:	4574      	cmp	r4, lr
 8005298:	bf08      	it	eq
 800529a:	f047 0701 	orreq.w	r7, r7, #1
 800529e:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
 80052a2:	4544      	cmp	r4, r8
 80052a4:	bf08      	it	eq
 80052a6:	f047 0701 	orreq.w	r7, r7, #1
 80052aa:	4574      	cmp	r4, lr
 80052ac:	bf08      	it	eq
 80052ae:	f047 0701 	orreq.w	r7, r7, #1
 80052b2:	b927      	cbnz	r7, 80052be <HAL_DMA_Start_IT+0x322>
 80052b4:	4f15      	ldr	r7, [pc, #84]	; (800530c <HAL_DMA_Start_IT+0x370>)
 80052b6:	42bc      	cmp	r4, r7
 80052b8:	bf18      	it	ne
 80052ba:	6c2f      	ldrne	r7, [r5, #64]	; 0x40
 80052bc:	d111      	bne.n	80052e2 <HAL_DMA_Start_IT+0x346>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80052be:	6def      	ldr	r7, [r5, #92]	; 0x5c
 80052c0:	f04f 0e01 	mov.w	lr, #1
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052c4:	f8d5 8008 	ldr.w	r8, [r5, #8]
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80052c8:	f007 071f 	and.w	r7, r7, #31
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052cc:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80052d0:	fa0e f707 	lsl.w	r7, lr, r7
 80052d4:	f8cc 7004 	str.w	r7, [ip, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80052d8:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052da:	d010      	beq.n	80052fe <HAL_DMA_Start_IT+0x362>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80052dc:	60a1      	str	r1, [r4, #8]
 80052de:	6c2f      	ldr	r7, [r5, #64]	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80052e0:	60e2      	str	r2, [r4, #12]
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80052e2:	6823      	ldr	r3, [r4, #0]
 80052e4:	f023 030e 	bic.w	r3, r3, #14
 80052e8:	f043 030a 	orr.w	r3, r3, #10
 80052ec:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80052ee:	2f00      	cmp	r7, #0
 80052f0:	f43f af16 	beq.w	8005120 <HAL_DMA_Start_IT+0x184>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80052f4:	6823      	ldr	r3, [r4, #0]
 80052f6:	f043 0304 	orr.w	r3, r3, #4
 80052fa:	6023      	str	r3, [r4, #0]
 80052fc:	e710      	b.n	8005120 <HAL_DMA_Start_IT+0x184>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80052fe:	60a2      	str	r2, [r4, #8]
 8005300:	6c2f      	ldr	r7, [r5, #64]	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005302:	60e1      	str	r1, [r4, #12]
 8005304:	e7ed      	b.n	80052e2 <HAL_DMA_Start_IT+0x346>
 8005306:	bf00      	nop
 8005308:	58025408 	.word	0x58025408
 800530c:	58025494 	.word	0x58025494
 8005310:	5802541c 	.word	0x5802541c
 8005314:	58025430 	.word	0x58025430

08005318 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8005318:	2800      	cmp	r0, #0
 800531a:	d060      	beq.n	80053de <HAL_DMA_Abort_IT+0xc6>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800531c:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8005320:	2a02      	cmp	r2, #2
{
 8005322:	b538      	push	{r3, r4, r5, lr}
 8005324:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005326:	d003      	beq.n	8005330 <HAL_DMA_Abort_IT+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005328:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 800532a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800532c:	655a      	str	r2, [r3, #84]	; 0x54
}
 800532e:	bd38      	pop	{r3, r4, r5, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005330:	6801      	ldr	r1, [r0, #0]
 8005332:	4a57      	ldr	r2, [pc, #348]	; (8005490 <HAL_DMA_Abort_IT+0x178>)
 8005334:	4291      	cmp	r1, r2
 8005336:	d049      	beq.n	80053cc <HAL_DMA_Abort_IT+0xb4>
 8005338:	3218      	adds	r2, #24
 800533a:	4291      	cmp	r1, r2
 800533c:	d046      	beq.n	80053cc <HAL_DMA_Abort_IT+0xb4>
 800533e:	3230      	adds	r2, #48	; 0x30
 8005340:	4854      	ldr	r0, [pc, #336]	; (8005494 <HAL_DMA_Abort_IT+0x17c>)
 8005342:	4c55      	ldr	r4, [pc, #340]	; (8005498 <HAL_DMA_Abort_IT+0x180>)
 8005344:	4281      	cmp	r1, r0
 8005346:	bf18      	it	ne
 8005348:	4291      	cmpne	r1, r2
 800534a:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800534e:	4d53      	ldr	r5, [pc, #332]	; (800549c <HAL_DMA_Abort_IT+0x184>)
 8005350:	bf0c      	ite	eq
 8005352:	2201      	moveq	r2, #1
 8005354:	2200      	movne	r2, #0
 8005356:	42a1      	cmp	r1, r4
 8005358:	bf08      	it	eq
 800535a:	f042 0201 	orreq.w	r2, r2, #1
 800535e:	3448      	adds	r4, #72	; 0x48
 8005360:	4281      	cmp	r1, r0
 8005362:	bf08      	it	eq
 8005364:	f042 0201 	orreq.w	r2, r2, #1
 8005368:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800536c:	42a9      	cmp	r1, r5
 800536e:	bf08      	it	eq
 8005370:	f042 0201 	orreq.w	r2, r2, #1
 8005374:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8005378:	42a1      	cmp	r1, r4
 800537a:	bf08      	it	eq
 800537c:	f042 0201 	orreq.w	r2, r2, #1
 8005380:	f504 7462 	add.w	r4, r4, #904	; 0x388
 8005384:	4281      	cmp	r1, r0
 8005386:	bf08      	it	eq
 8005388:	f042 0201 	orreq.w	r2, r2, #1
 800538c:	3048      	adds	r0, #72	; 0x48
 800538e:	42a9      	cmp	r1, r5
 8005390:	bf08      	it	eq
 8005392:	f042 0201 	orreq.w	r2, r2, #1
 8005396:	3548      	adds	r5, #72	; 0x48
 8005398:	42a1      	cmp	r1, r4
 800539a:	bf08      	it	eq
 800539c:	f042 0201 	orreq.w	r2, r2, #1
 80053a0:	3448      	adds	r4, #72	; 0x48
 80053a2:	4281      	cmp	r1, r0
 80053a4:	bf08      	it	eq
 80053a6:	f042 0201 	orreq.w	r2, r2, #1
 80053aa:	3048      	adds	r0, #72	; 0x48
 80053ac:	42a9      	cmp	r1, r5
 80053ae:	bf08      	it	eq
 80053b0:	f042 0201 	orreq.w	r2, r2, #1
 80053b4:	42a1      	cmp	r1, r4
 80053b6:	bf08      	it	eq
 80053b8:	f042 0201 	orreq.w	r2, r2, #1
 80053bc:	4281      	cmp	r1, r0
 80053be:	bf08      	it	eq
 80053c0:	f042 0201 	orreq.w	r2, r2, #1
 80053c4:	b912      	cbnz	r2, 80053cc <HAL_DMA_Abort_IT+0xb4>
 80053c6:	4a36      	ldr	r2, [pc, #216]	; (80054a0 <HAL_DMA_Abort_IT+0x188>)
 80053c8:	4291      	cmp	r1, r2
 80053ca:	d10a      	bne.n	80053e2 <HAL_DMA_Abort_IT+0xca>
      hdma->State = HAL_DMA_STATE_ABORT;
 80053cc:	2204      	movs	r2, #4
  return HAL_OK;
 80053ce:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 80053d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80053d4:	680b      	ldr	r3, [r1, #0]
 80053d6:	f023 0301 	bic.w	r3, r3, #1
 80053da:	600b      	str	r3, [r1, #0]
}
 80053dc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80053de:	2001      	movs	r0, #1
}
 80053e0:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053e2:	f104 54c0 	add.w	r4, r4, #402653184	; 0x18000000
 80053e6:	4a2f      	ldr	r2, [pc, #188]	; (80054a4 <HAL_DMA_Abort_IT+0x18c>)
 80053e8:	482f      	ldr	r0, [pc, #188]	; (80054a8 <HAL_DMA_Abort_IT+0x190>)
 80053ea:	f504 449f 	add.w	r4, r4, #20352	; 0x4f80
 80053ee:	4d2f      	ldr	r5, [pc, #188]	; (80054ac <HAL_DMA_Abort_IT+0x194>)
 80053f0:	42a1      	cmp	r1, r4
 80053f2:	bf18      	it	ne
 80053f4:	4291      	cmpne	r1, r2
 80053f6:	f104 0450 	add.w	r4, r4, #80	; 0x50
 80053fa:	bf0c      	ite	eq
 80053fc:	2201      	moveq	r2, #1
 80053fe:	2200      	movne	r2, #0
 8005400:	4281      	cmp	r1, r0
 8005402:	bf08      	it	eq
 8005404:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005408:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800540a:	42a9      	cmp	r1, r5
 800540c:	bf08      	it	eq
 800540e:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005412:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005416:	3528      	adds	r5, #40	; 0x28
 8005418:	42a1      	cmp	r1, r4
 800541a:	bf08      	it	eq
 800541c:	f042 0201 	orreq.w	r2, r2, #1
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005420:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005422:	3428      	adds	r4, #40	; 0x28
      __HAL_DMA_DISABLE(hdma);
 8005424:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005426:	42a9      	cmp	r1, r5
 8005428:	bf08      	it	eq
 800542a:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800542e:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005432:	42a1      	cmp	r1, r4
 8005434:	bf08      	it	eq
 8005436:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 800543a:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800543c:	b912      	cbnz	r2, 8005444 <HAL_DMA_Abort_IT+0x12c>
 800543e:	4a1c      	ldr	r2, [pc, #112]	; (80054b0 <HAL_DMA_Abort_IT+0x198>)
 8005440:	4291      	cmp	r1, r2
 8005442:	d117      	bne.n	8005474 <HAL_DMA_Abort_IT+0x15c>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005444:	6e1c      	ldr	r4, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005446:	2101      	movs	r1, #1
 8005448:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800544a:	6822      	ldr	r2, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800544c:	f000 001f 	and.w	r0, r0, #31
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005450:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005452:	f422 7280 	bic.w	r2, r2, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005456:	4081      	lsls	r1, r0
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005458:	6e58      	ldr	r0, [r3, #100]	; 0x64
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800545a:	6022      	str	r2, [r4, #0]
        if(hdma->DMAmuxRequestGen != 0U)
 800545c:	e9d3 421a 	ldrd	r4, r2, [r3, #104]	; 0x68
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005460:	6069      	str	r1, [r5, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005462:	6044      	str	r4, [r0, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8005464:	b132      	cbz	r2, 8005474 <HAL_DMA_Abort_IT+0x15c>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005466:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005468:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800546a:	6f5c      	ldr	r4, [r3, #116]	; 0x74
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800546c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005470:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005472:	6044      	str	r4, [r0, #4]
      __HAL_UNLOCK(hdma);
 8005474:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 8005476:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 8005478:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 800547a:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800547e:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 8005482:	b11a      	cbz	r2, 800548c <HAL_DMA_Abort_IT+0x174>
 8005484:	4618      	mov	r0, r3
        hdma->XferAbortCallback(hdma);
 8005486:	4790      	blx	r2
  return HAL_OK;
 8005488:	4620      	mov	r0, r4
}
 800548a:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800548c:	4610      	mov	r0, r2
}
 800548e:	bd38      	pop	{r3, r4, r5, pc}
 8005490:	40020010 	.word	0x40020010
 8005494:	40020040 	.word	0x40020040
 8005498:	40020070 	.word	0x40020070
 800549c:	400200a0 	.word	0x400200a0
 80054a0:	400204b8 	.word	0x400204b8
 80054a4:	5802541c 	.word	0x5802541c
 80054a8:	58025430 	.word	0x58025430
 80054ac:	58025444 	.word	0x58025444
 80054b0:	58025494 	.word	0x58025494

080054b4 <HAL_DMA_IRQHandler>:
{
 80054b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t timeout = SystemCoreClock / 9600U;
 80054b8:	49a4      	ldr	r1, [pc, #656]	; (800574c <HAL_DMA_IRQHandler+0x298>)
{
 80054ba:	b085      	sub	sp, #20
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80054bc:	4ea4      	ldr	r6, [pc, #656]	; (8005750 <HAL_DMA_IRQHandler+0x29c>)
  __IO uint32_t count = 0U;
 80054be:	2400      	movs	r4, #0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80054c0:	6803      	ldr	r3, [r0, #0]
 80054c2:	4aa4      	ldr	r2, [pc, #656]	; (8005754 <HAL_DMA_IRQHandler+0x2a0>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054c4:	f8d0 8058 	ldr.w	r8, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80054c8:	6809      	ldr	r1, [r1, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80054ca:	4293      	cmp	r3, r2
 80054cc:	bf18      	it	ne
 80054ce:	42b3      	cmpne	r3, r6
  __IO uint32_t count = 0U;
 80054d0:	9403      	str	r4, [sp, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80054d2:	9101      	str	r1, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80054d4:	bf08      	it	eq
 80054d6:	2601      	moveq	r6, #1
  tmpisr_dma  = regs_dma->ISR;
 80054d8:	f8d8 5000 	ldr.w	r5, [r8]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80054dc:	bf18      	it	ne
 80054de:	2600      	movne	r6, #0
  tmpisr_bdma = regs_bdma->ISR;
 80054e0:	f8d8 1000 	ldr.w	r1, [r8]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80054e4:	d046      	beq.n	8005574 <HAL_DMA_IRQHandler+0xc0>
 80054e6:	3218      	adds	r2, #24
 80054e8:	4f9b      	ldr	r7, [pc, #620]	; (8005758 <HAL_DMA_IRQHandler+0x2a4>)
 80054ea:	4c9c      	ldr	r4, [pc, #624]	; (800575c <HAL_DMA_IRQHandler+0x2a8>)
 80054ec:	42bb      	cmp	r3, r7
 80054ee:	bf18      	it	ne
 80054f0:	4293      	cmpne	r3, r2
 80054f2:	f107 0730 	add.w	r7, r7, #48	; 0x30
 80054f6:	bf0c      	ite	eq
 80054f8:	2201      	moveq	r2, #1
 80054fa:	2200      	movne	r2, #0
 80054fc:	42a3      	cmp	r3, r4
 80054fe:	bf08      	it	eq
 8005500:	f042 0201 	orreq.w	r2, r2, #1
 8005504:	3430      	adds	r4, #48	; 0x30
 8005506:	42bb      	cmp	r3, r7
 8005508:	bf08      	it	eq
 800550a:	f042 0201 	orreq.w	r2, r2, #1
 800550e:	3730      	adds	r7, #48	; 0x30
 8005510:	42a3      	cmp	r3, r4
 8005512:	bf08      	it	eq
 8005514:	f042 0201 	orreq.w	r2, r2, #1
 8005518:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800551c:	42bb      	cmp	r3, r7
 800551e:	bf08      	it	eq
 8005520:	f042 0201 	orreq.w	r2, r2, #1
 8005524:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8005528:	42a3      	cmp	r3, r4
 800552a:	bf08      	it	eq
 800552c:	f042 0201 	orreq.w	r2, r2, #1
 8005530:	3430      	adds	r4, #48	; 0x30
 8005532:	42bb      	cmp	r3, r7
 8005534:	bf08      	it	eq
 8005536:	f042 0201 	orreq.w	r2, r2, #1
 800553a:	3730      	adds	r7, #48	; 0x30
 800553c:	42a3      	cmp	r3, r4
 800553e:	bf08      	it	eq
 8005540:	f042 0201 	orreq.w	r2, r2, #1
 8005544:	3430      	adds	r4, #48	; 0x30
 8005546:	42bb      	cmp	r3, r7
 8005548:	bf08      	it	eq
 800554a:	f042 0201 	orreq.w	r2, r2, #1
 800554e:	3730      	adds	r7, #48	; 0x30
 8005550:	42a3      	cmp	r3, r4
 8005552:	bf08      	it	eq
 8005554:	f042 0201 	orreq.w	r2, r2, #1
 8005558:	3430      	adds	r4, #48	; 0x30
 800555a:	42bb      	cmp	r3, r7
 800555c:	bf08      	it	eq
 800555e:	f042 0201 	orreq.w	r2, r2, #1
 8005562:	42a3      	cmp	r3, r4
 8005564:	bf08      	it	eq
 8005566:	f042 0201 	orreq.w	r2, r2, #1
 800556a:	b91a      	cbnz	r2, 8005574 <HAL_DMA_IRQHandler+0xc0>
 800556c:	4a7c      	ldr	r2, [pc, #496]	; (8005760 <HAL_DMA_IRQHandler+0x2ac>)
 800556e:	4293      	cmp	r3, r2
 8005570:	f040 81ef 	bne.w	8005952 <HAL_DMA_IRQHandler+0x49e>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005574:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8005576:	2208      	movs	r2, #8
 8005578:	f001 071f 	and.w	r7, r1, #31
 800557c:	40ba      	lsls	r2, r7
 800557e:	422a      	tst	r2, r5
 8005580:	f040 81d8 	bne.w	8005934 <HAL_DMA_IRQHandler+0x480>
 8005584:	4604      	mov	r4, r0
 8005586:	f04f 0c04 	mov.w	ip, #4
 800558a:	2010      	movs	r0, #16
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800558c:	fa25 f207 	lsr.w	r2, r5, r7
 8005590:	fa0c fc07 	lsl.w	ip, ip, r7
 8005594:	40b8      	lsls	r0, r7
 8005596:	07d2      	lsls	r2, r2, #31
 8005598:	ea05 090c 	and.w	r9, r5, ip
 800559c:	ea05 0e00 	and.w	lr, r5, r0
 80055a0:	d560      	bpl.n	8005664 <HAL_DMA_IRQHandler+0x1b0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80055a2:	4a70      	ldr	r2, [pc, #448]	; (8005764 <HAL_DMA_IRQHandler+0x2b0>)
 80055a4:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 8005758 <HAL_DMA_IRQHandler+0x2a4>
 80055a8:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 800575c <HAL_DMA_IRQHandler+0x2a8>
 80055ac:	4293      	cmp	r3, r2
 80055ae:	bf18      	it	ne
 80055b0:	455b      	cmpne	r3, fp
 80055b2:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 80055b6:	bf0c      	ite	eq
 80055b8:	2201      	moveq	r2, #1
 80055ba:	2200      	movne	r2, #0
 80055bc:	4553      	cmp	r3, sl
 80055be:	bf08      	it	eq
 80055c0:	f042 0201 	orreq.w	r2, r2, #1
 80055c4:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 80055c8:	455b      	cmp	r3, fp
 80055ca:	bf08      	it	eq
 80055cc:	f042 0201 	orreq.w	r2, r2, #1
 80055d0:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 80055d4:	4553      	cmp	r3, sl
 80055d6:	bf08      	it	eq
 80055d8:	f042 0201 	orreq.w	r2, r2, #1
 80055dc:	f50a 7a5c 	add.w	sl, sl, #880	; 0x370
 80055e0:	455b      	cmp	r3, fp
 80055e2:	bf08      	it	eq
 80055e4:	f042 0201 	orreq.w	r2, r2, #1
 80055e8:	f50b 7b5c 	add.w	fp, fp, #880	; 0x370
 80055ec:	4553      	cmp	r3, sl
 80055ee:	bf08      	it	eq
 80055f0:	f042 0201 	orreq.w	r2, r2, #1
 80055f4:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 80055f8:	455b      	cmp	r3, fp
 80055fa:	bf08      	it	eq
 80055fc:	f042 0201 	orreq.w	r2, r2, #1
 8005600:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 8005604:	4553      	cmp	r3, sl
 8005606:	bf08      	it	eq
 8005608:	f042 0201 	orreq.w	r2, r2, #1
 800560c:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 8005610:	455b      	cmp	r3, fp
 8005612:	bf08      	it	eq
 8005614:	f042 0201 	orreq.w	r2, r2, #1
 8005618:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 800561c:	4553      	cmp	r3, sl
 800561e:	bf08      	it	eq
 8005620:	f042 0201 	orreq.w	r2, r2, #1
 8005624:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
 8005628:	455b      	cmp	r3, fp
 800562a:	bf08      	it	eq
 800562c:	f042 0201 	orreq.w	r2, r2, #1
 8005630:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 8005634:	4553      	cmp	r3, sl
 8005636:	bf08      	it	eq
 8005638:	f042 0201 	orreq.w	r2, r2, #1
 800563c:	455b      	cmp	r3, fp
 800563e:	bf08      	it	eq
 8005640:	f042 0201 	orreq.w	r2, r2, #1
 8005644:	b912      	cbnz	r2, 800564c <HAL_DMA_IRQHandler+0x198>
 8005646:	2e00      	cmp	r6, #0
 8005648:	f000 8245 	beq.w	8005ad6 <HAL_DMA_IRQHandler+0x622>
 800564c:	695a      	ldr	r2, [r3, #20]
 800564e:	0612      	lsls	r2, r2, #24
 8005650:	d508      	bpl.n	8005664 <HAL_DMA_IRQHandler+0x1b0>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005652:	2201      	movs	r2, #1
 8005654:	fa02 f707 	lsl.w	r7, r2, r7
 8005658:	f8c8 7008 	str.w	r7, [r8, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800565c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800565e:	f042 0202 	orr.w	r2, r2, #2
 8005662:	6562      	str	r2, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005664:	f1b9 0f00 	cmp.w	r9, #0
 8005668:	d055      	beq.n	8005716 <HAL_DMA_IRQHandler+0x262>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800566a:	2e00      	cmp	r6, #0
 800566c:	d14a      	bne.n	8005704 <HAL_DMA_IRQHandler+0x250>
 800566e:	4a3d      	ldr	r2, [pc, #244]	; (8005764 <HAL_DMA_IRQHandler+0x2b0>)
 8005670:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8005758 <HAL_DMA_IRQHandler+0x2a4>
 8005674:	4f39      	ldr	r7, [pc, #228]	; (800575c <HAL_DMA_IRQHandler+0x2a8>)
 8005676:	454b      	cmp	r3, r9
 8005678:	bf18      	it	ne
 800567a:	4293      	cmpne	r3, r2
 800567c:	f109 0930 	add.w	r9, r9, #48	; 0x30
 8005680:	bf0c      	ite	eq
 8005682:	2201      	moveq	r2, #1
 8005684:	2200      	movne	r2, #0
 8005686:	42bb      	cmp	r3, r7
 8005688:	bf08      	it	eq
 800568a:	f042 0201 	orreq.w	r2, r2, #1
 800568e:	3730      	adds	r7, #48	; 0x30
 8005690:	454b      	cmp	r3, r9
 8005692:	bf08      	it	eq
 8005694:	f042 0201 	orreq.w	r2, r2, #1
 8005698:	f109 0930 	add.w	r9, r9, #48	; 0x30
 800569c:	42bb      	cmp	r3, r7
 800569e:	bf08      	it	eq
 80056a0:	f042 0201 	orreq.w	r2, r2, #1
 80056a4:	f507 775c 	add.w	r7, r7, #880	; 0x370
 80056a8:	454b      	cmp	r3, r9
 80056aa:	bf08      	it	eq
 80056ac:	f042 0201 	orreq.w	r2, r2, #1
 80056b0:	f509 795c 	add.w	r9, r9, #880	; 0x370
 80056b4:	42bb      	cmp	r3, r7
 80056b6:	bf08      	it	eq
 80056b8:	f042 0201 	orreq.w	r2, r2, #1
 80056bc:	3730      	adds	r7, #48	; 0x30
 80056be:	454b      	cmp	r3, r9
 80056c0:	bf08      	it	eq
 80056c2:	f042 0201 	orreq.w	r2, r2, #1
 80056c6:	f109 0930 	add.w	r9, r9, #48	; 0x30
 80056ca:	42bb      	cmp	r3, r7
 80056cc:	bf08      	it	eq
 80056ce:	f042 0201 	orreq.w	r2, r2, #1
 80056d2:	3730      	adds	r7, #48	; 0x30
 80056d4:	454b      	cmp	r3, r9
 80056d6:	bf08      	it	eq
 80056d8:	f042 0201 	orreq.w	r2, r2, #1
 80056dc:	f109 0930 	add.w	r9, r9, #48	; 0x30
 80056e0:	42bb      	cmp	r3, r7
 80056e2:	bf08      	it	eq
 80056e4:	f042 0201 	orreq.w	r2, r2, #1
 80056e8:	3730      	adds	r7, #48	; 0x30
 80056ea:	454b      	cmp	r3, r9
 80056ec:	bf08      	it	eq
 80056ee:	f042 0201 	orreq.w	r2, r2, #1
 80056f2:	42bb      	cmp	r3, r7
 80056f4:	bf08      	it	eq
 80056f6:	f042 0201 	orreq.w	r2, r2, #1
 80056fa:	b91a      	cbnz	r2, 8005704 <HAL_DMA_IRQHandler+0x250>
 80056fc:	4a18      	ldr	r2, [pc, #96]	; (8005760 <HAL_DMA_IRQHandler+0x2ac>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	f040 81b4 	bne.w	8005a6c <HAL_DMA_IRQHandler+0x5b8>
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	0792      	lsls	r2, r2, #30
 8005708:	d505      	bpl.n	8005716 <HAL_DMA_IRQHandler+0x262>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800570a:	f8c8 c008 	str.w	ip, [r8, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800570e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005710:	f042 0204 	orr.w	r2, r2, #4
 8005714:	6562      	str	r2, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005716:	f1be 0f00 	cmp.w	lr, #0
 800571a:	d06d      	beq.n	80057f8 <HAL_DMA_IRQHandler+0x344>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800571c:	2e00      	cmp	r6, #0
 800571e:	d155      	bne.n	80057cc <HAL_DMA_IRQHandler+0x318>
 8005720:	4a10      	ldr	r2, [pc, #64]	; (8005764 <HAL_DMA_IRQHandler+0x2b0>)
 8005722:	4f0d      	ldr	r7, [pc, #52]	; (8005758 <HAL_DMA_IRQHandler+0x2a4>)
 8005724:	4e0d      	ldr	r6, [pc, #52]	; (800575c <HAL_DMA_IRQHandler+0x2a8>)
 8005726:	42bb      	cmp	r3, r7
 8005728:	bf18      	it	ne
 800572a:	4293      	cmpne	r3, r2
 800572c:	f107 0730 	add.w	r7, r7, #48	; 0x30
 8005730:	bf0c      	ite	eq
 8005732:	2201      	moveq	r2, #1
 8005734:	2200      	movne	r2, #0
 8005736:	42b3      	cmp	r3, r6
 8005738:	bf08      	it	eq
 800573a:	f042 0201 	orreq.w	r2, r2, #1
 800573e:	3630      	adds	r6, #48	; 0x30
 8005740:	42bb      	cmp	r3, r7
 8005742:	bf08      	it	eq
 8005744:	f042 0201 	orreq.w	r2, r2, #1
 8005748:	3730      	adds	r7, #48	; 0x30
 800574a:	e00d      	b.n	8005768 <HAL_DMA_IRQHandler+0x2b4>
 800574c:	240001f8 	.word	0x240001f8
 8005750:	40020010 	.word	0x40020010
 8005754:	40020028 	.word	0x40020028
 8005758:	40020058 	.word	0x40020058
 800575c:	40020070 	.word	0x40020070
 8005760:	400204b8 	.word	0x400204b8
 8005764:	40020040 	.word	0x40020040
 8005768:	42b3      	cmp	r3, r6
 800576a:	bf08      	it	eq
 800576c:	f042 0201 	orreq.w	r2, r2, #1
 8005770:	f506 765c 	add.w	r6, r6, #880	; 0x370
 8005774:	42bb      	cmp	r3, r7
 8005776:	bf08      	it	eq
 8005778:	f042 0201 	orreq.w	r2, r2, #1
 800577c:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8005780:	42b3      	cmp	r3, r6
 8005782:	bf08      	it	eq
 8005784:	f042 0201 	orreq.w	r2, r2, #1
 8005788:	3630      	adds	r6, #48	; 0x30
 800578a:	42bb      	cmp	r3, r7
 800578c:	bf08      	it	eq
 800578e:	f042 0201 	orreq.w	r2, r2, #1
 8005792:	3730      	adds	r7, #48	; 0x30
 8005794:	42b3      	cmp	r3, r6
 8005796:	bf08      	it	eq
 8005798:	f042 0201 	orreq.w	r2, r2, #1
 800579c:	3630      	adds	r6, #48	; 0x30
 800579e:	42bb      	cmp	r3, r7
 80057a0:	bf08      	it	eq
 80057a2:	f042 0201 	orreq.w	r2, r2, #1
 80057a6:	3730      	adds	r7, #48	; 0x30
 80057a8:	42b3      	cmp	r3, r6
 80057aa:	bf08      	it	eq
 80057ac:	f042 0201 	orreq.w	r2, r2, #1
 80057b0:	3630      	adds	r6, #48	; 0x30
 80057b2:	42bb      	cmp	r3, r7
 80057b4:	bf08      	it	eq
 80057b6:	f042 0201 	orreq.w	r2, r2, #1
 80057ba:	42b3      	cmp	r3, r6
 80057bc:	bf08      	it	eq
 80057be:	f042 0201 	orreq.w	r2, r2, #1
 80057c2:	b91a      	cbnz	r2, 80057cc <HAL_DMA_IRQHandler+0x318>
 80057c4:	4aa0      	ldr	r2, [pc, #640]	; (8005a48 <HAL_DMA_IRQHandler+0x594>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	f040 813a 	bne.w	8005a40 <HAL_DMA_IRQHandler+0x58c>
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80057d2:	b18a      	cbz	r2, 80057f8 <HAL_DMA_IRQHandler+0x344>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057d4:	f8c8 0008 	str.w	r0, [r8, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	0357      	lsls	r7, r2, #13
 80057dc:	f100 80f7 	bmi.w	80059ce <HAL_DMA_IRQHandler+0x51a>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	05d0      	lsls	r0, r2, #23
 80057e4:	d403      	bmi.n	80057ee <HAL_DMA_IRQHandler+0x33a>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	f022 0208 	bic.w	r2, r2, #8
 80057ec:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80057ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057f0:	b113      	cbz	r3, 80057f8 <HAL_DMA_IRQHandler+0x344>
            hdma->XferHalfCpltCallback(hdma);
 80057f2:	4620      	mov	r0, r4
 80057f4:	4798      	blx	r3
 80057f6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057f8:	f001 011f 	and.w	r1, r1, #31
 80057fc:	2220      	movs	r2, #32
 80057fe:	408a      	lsls	r2, r1
 8005800:	422a      	tst	r2, r5
 8005802:	d069      	beq.n	80058d8 <HAL_DMA_IRQHandler+0x424>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005804:	6820      	ldr	r0, [r4, #0]
 8005806:	4b91      	ldr	r3, [pc, #580]	; (8005a4c <HAL_DMA_IRQHandler+0x598>)
 8005808:	4e91      	ldr	r6, [pc, #580]	; (8005a50 <HAL_DMA_IRQHandler+0x59c>)
 800580a:	4d92      	ldr	r5, [pc, #584]	; (8005a54 <HAL_DMA_IRQHandler+0x5a0>)
 800580c:	42b0      	cmp	r0, r6
 800580e:	bf18      	it	ne
 8005810:	4298      	cmpne	r0, r3
 8005812:	f106 0630 	add.w	r6, r6, #48	; 0x30
 8005816:	bf0c      	ite	eq
 8005818:	2301      	moveq	r3, #1
 800581a:	2300      	movne	r3, #0
 800581c:	42a8      	cmp	r0, r5
 800581e:	bf08      	it	eq
 8005820:	f043 0301 	orreq.w	r3, r3, #1
 8005824:	3530      	adds	r5, #48	; 0x30
 8005826:	42b0      	cmp	r0, r6
 8005828:	bf08      	it	eq
 800582a:	f043 0301 	orreq.w	r3, r3, #1
 800582e:	3630      	adds	r6, #48	; 0x30
 8005830:	42a8      	cmp	r0, r5
 8005832:	bf08      	it	eq
 8005834:	f043 0301 	orreq.w	r3, r3, #1
 8005838:	3530      	adds	r5, #48	; 0x30
 800583a:	42b0      	cmp	r0, r6
 800583c:	bf08      	it	eq
 800583e:	f043 0301 	orreq.w	r3, r3, #1
 8005842:	3630      	adds	r6, #48	; 0x30
 8005844:	42a8      	cmp	r0, r5
 8005846:	bf08      	it	eq
 8005848:	f043 0301 	orreq.w	r3, r3, #1
 800584c:	f505 755c 	add.w	r5, r5, #880	; 0x370
 8005850:	42b0      	cmp	r0, r6
 8005852:	bf08      	it	eq
 8005854:	f043 0301 	orreq.w	r3, r3, #1
 8005858:	f506 765c 	add.w	r6, r6, #880	; 0x370
 800585c:	42a8      	cmp	r0, r5
 800585e:	bf08      	it	eq
 8005860:	f043 0301 	orreq.w	r3, r3, #1
 8005864:	3530      	adds	r5, #48	; 0x30
 8005866:	42b0      	cmp	r0, r6
 8005868:	bf08      	it	eq
 800586a:	f043 0301 	orreq.w	r3, r3, #1
 800586e:	3630      	adds	r6, #48	; 0x30
 8005870:	42a8      	cmp	r0, r5
 8005872:	bf08      	it	eq
 8005874:	f043 0301 	orreq.w	r3, r3, #1
 8005878:	3530      	adds	r5, #48	; 0x30
 800587a:	42b0      	cmp	r0, r6
 800587c:	bf08      	it	eq
 800587e:	f043 0301 	orreq.w	r3, r3, #1
 8005882:	3630      	adds	r6, #48	; 0x30
 8005884:	42a8      	cmp	r0, r5
 8005886:	bf08      	it	eq
 8005888:	f043 0301 	orreq.w	r3, r3, #1
 800588c:	3530      	adds	r5, #48	; 0x30
 800588e:	42b0      	cmp	r0, r6
 8005890:	bf08      	it	eq
 8005892:	f043 0301 	orreq.w	r3, r3, #1
 8005896:	42a8      	cmp	r0, r5
 8005898:	bf08      	it	eq
 800589a:	f043 0301 	orreq.w	r3, r3, #1
 800589e:	b91b      	cbnz	r3, 80058a8 <HAL_DMA_IRQHandler+0x3f4>
 80058a0:	4b69      	ldr	r3, [pc, #420]	; (8005a48 <HAL_DMA_IRQHandler+0x594>)
 80058a2:	4298      	cmp	r0, r3
 80058a4:	f040 8121 	bne.w	8005aea <HAL_DMA_IRQHandler+0x636>
 80058a8:	6803      	ldr	r3, [r0, #0]
 80058aa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80058ae:	b19b      	cbz	r3, 80058d8 <HAL_DMA_IRQHandler+0x424>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058b0:	f8c8 2008 	str.w	r2, [r8, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80058b4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80058b8:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058ba:	6803      	ldr	r3, [r0, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80058bc:	f000 8090 	beq.w	80059e0 <HAL_DMA_IRQHandler+0x52c>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80058c0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80058c4:	6803      	ldr	r3, [r0, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80058c6:	f000 80a8 	beq.w	8005a1a <HAL_DMA_IRQHandler+0x566>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80058ca:	0319      	lsls	r1, r3, #12
 80058cc:	f140 80b3 	bpl.w	8005a36 <HAL_DMA_IRQHandler+0x582>
          if(hdma->XferCpltCallback != NULL)
 80058d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80058d2:	b10b      	cbz	r3, 80058d8 <HAL_DMA_IRQHandler+0x424>
            hdma->XferCpltCallback(hdma);
 80058d4:	4620      	mov	r0, r4
 80058d6:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80058d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d074      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x514>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80058de:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80058e0:	07da      	lsls	r2, r3, #31
 80058e2:	d51f      	bpl.n	8005924 <HAL_DMA_IRQHandler+0x470>
        __HAL_DMA_DISABLE(hdma);
 80058e4:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 80058e6:	2004      	movs	r0, #4
  uint32_t timeout = SystemCoreClock / 9600U;
 80058e8:	495b      	ldr	r1, [pc, #364]	; (8005a58 <HAL_DMA_IRQHandler+0x5a4>)
        hdma->State = HAL_DMA_STATE_ABORT;
 80058ea:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 80058ee:	6813      	ldr	r3, [r2, #0]
 80058f0:	f023 0301 	bic.w	r3, r3, #1
 80058f4:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80058f6:	9b01      	ldr	r3, [sp, #4]
 80058f8:	fba1 3103 	umull	r3, r1, r1, r3
 80058fc:	0a89      	lsrs	r1, r1, #10
 80058fe:	e002      	b.n	8005906 <HAL_DMA_IRQHandler+0x452>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005900:	6813      	ldr	r3, [r2, #0]
 8005902:	07db      	lsls	r3, r3, #31
 8005904:	d504      	bpl.n	8005910 <HAL_DMA_IRQHandler+0x45c>
          if (++count > timeout)
 8005906:	9b03      	ldr	r3, [sp, #12]
 8005908:	3301      	adds	r3, #1
 800590a:	428b      	cmp	r3, r1
 800590c:	9303      	str	r3, [sp, #12]
 800590e:	d9f7      	bls.n	8005900 <HAL_DMA_IRQHandler+0x44c>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005910:	6813      	ldr	r3, [r2, #0]
        __HAL_UNLOCK(hdma);
 8005912:	2200      	movs	r2, #0
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005914:	07df      	lsls	r7, r3, #31
        __HAL_UNLOCK(hdma);
 8005916:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_ERROR;
 800591a:	bf4c      	ite	mi
 800591c:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 800591e:	2301      	movpl	r3, #1
 8005920:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 8005924:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005926:	2b00      	cmp	r3, #0
 8005928:	d04e      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x514>
        hdma->XferErrorCallback(hdma);
 800592a:	4620      	mov	r0, r4
}
 800592c:	b005      	add	sp, #20
 800592e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        hdma->XferErrorCallback(hdma);
 8005932:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005934:	681c      	ldr	r4, [r3, #0]
 8005936:	0764      	lsls	r4, r4, #29
 8005938:	f57f ae24 	bpl.w	8005584 <HAL_DMA_IRQHandler+0xd0>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800593c:	681c      	ldr	r4, [r3, #0]
 800593e:	f024 0404 	bic.w	r4, r4, #4
 8005942:	601c      	str	r4, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005944:	f8c8 2008 	str.w	r2, [r8, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005948:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800594a:	f042 0201 	orr.w	r2, r2, #1
 800594e:	6542      	str	r2, [r0, #84]	; 0x54
 8005950:	e618      	b.n	8005584 <HAL_DMA_IRQHandler+0xd0>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005952:	4a42      	ldr	r2, [pc, #264]	; (8005a5c <HAL_DMA_IRQHandler+0x5a8>)
 8005954:	4d42      	ldr	r5, [pc, #264]	; (8005a60 <HAL_DMA_IRQHandler+0x5ac>)
 8005956:	4c43      	ldr	r4, [pc, #268]	; (8005a64 <HAL_DMA_IRQHandler+0x5b0>)
 8005958:	42ab      	cmp	r3, r5
 800595a:	bf18      	it	ne
 800595c:	4293      	cmpne	r3, r2
 800595e:	f105 0528 	add.w	r5, r5, #40	; 0x28
 8005962:	bf0c      	ite	eq
 8005964:	2201      	moveq	r2, #1
 8005966:	2200      	movne	r2, #0
 8005968:	42a3      	cmp	r3, r4
 800596a:	bf08      	it	eq
 800596c:	f042 0201 	orreq.w	r2, r2, #1
 8005970:	3428      	adds	r4, #40	; 0x28
 8005972:	42ab      	cmp	r3, r5
 8005974:	bf08      	it	eq
 8005976:	f042 0201 	orreq.w	r2, r2, #1
 800597a:	3528      	adds	r5, #40	; 0x28
 800597c:	42a3      	cmp	r3, r4
 800597e:	bf08      	it	eq
 8005980:	f042 0201 	orreq.w	r2, r2, #1
 8005984:	3428      	adds	r4, #40	; 0x28
 8005986:	42ab      	cmp	r3, r5
 8005988:	bf08      	it	eq
 800598a:	f042 0201 	orreq.w	r2, r2, #1
 800598e:	42a3      	cmp	r3, r4
 8005990:	bf08      	it	eq
 8005992:	f042 0201 	orreq.w	r2, r2, #1
 8005996:	b912      	cbnz	r2, 800599e <HAL_DMA_IRQHandler+0x4ea>
 8005998:	4a33      	ldr	r2, [pc, #204]	; (8005a68 <HAL_DMA_IRQHandler+0x5b4>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d114      	bne.n	80059c8 <HAL_DMA_IRQHandler+0x514>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800599e:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 80059a0:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80059a2:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80059a4:	f004 041f 	and.w	r4, r4, #31
 80059a8:	40a5      	lsls	r5, r4
 80059aa:	420d      	tst	r5, r1
 80059ac:	d068      	beq.n	8005a80 <HAL_DMA_IRQHandler+0x5cc>
 80059ae:	0756      	lsls	r6, r2, #29
 80059b0:	d566      	bpl.n	8005a80 <HAL_DMA_IRQHandler+0x5cc>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059b2:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80059b4:	f8c8 5004 	str.w	r5, [r8, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059b8:	f140 80ac 	bpl.w	8005b14 <HAL_DMA_IRQHandler+0x660>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80059bc:	03d3      	lsls	r3, r2, #15
 80059be:	f100 80af 	bmi.w	8005b20 <HAL_DMA_IRQHandler+0x66c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80059c2:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1b1      	bne.n	800592c <HAL_DMA_IRQHandler+0x478>
}
 80059c8:	b005      	add	sp, #20
 80059ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	031e      	lsls	r6, r3, #12
 80059d2:	f57f af0c 	bpl.w	80057ee <HAL_DMA_IRQHandler+0x33a>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80059d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f47f af0a 	bne.w	80057f2 <HAL_DMA_IRQHandler+0x33e>
 80059de:	e70b      	b.n	80057f8 <HAL_DMA_IRQHandler+0x344>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059e0:	f023 0316 	bic.w	r3, r3, #22
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059e6:	6003      	str	r3, [r0, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80059e8:	6943      	ldr	r3, [r0, #20]
 80059ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ee:	6143      	str	r3, [r0, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059f0:	2a00      	cmp	r2, #0
 80059f2:	d041      	beq.n	8005a78 <HAL_DMA_IRQHandler+0x5c4>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80059f4:	6803      	ldr	r3, [r0, #0]
 80059f6:	f023 0308 	bic.w	r3, r3, #8
 80059fa:	6003      	str	r3, [r0, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059fc:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 80059fe:	2000      	movs	r0, #0
          hdma->State = HAL_DMA_STATE_READY;
 8005a00:	2201      	movs	r2, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a02:	fa03 f101 	lsl.w	r1, r3, r1
          if(hdma->XferAbortCallback != NULL)
 8005a06:	6d23      	ldr	r3, [r4, #80]	; 0x50
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a08:	f8c8 1008 	str.w	r1, [r8, #8]
          __HAL_UNLOCK(hdma);
 8005a0c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8005a10:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d188      	bne.n	800592a <HAL_DMA_IRQHandler+0x476>
 8005a18:	e7d6      	b.n	80059c8 <HAL_DMA_IRQHandler+0x514>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005a1a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8005a1e:	f47f af57 	bne.w	80058d0 <HAL_DMA_IRQHandler+0x41c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005a22:	6802      	ldr	r2, [r0, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8005a24:	2101      	movs	r1, #1
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005a26:	f022 0210 	bic.w	r2, r2, #16
 8005a2a:	6002      	str	r2, [r0, #0]
            __HAL_UNLOCK(hdma);
 8005a2c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8005a30:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
 8005a34:	e74c      	b.n	80058d0 <HAL_DMA_IRQHandler+0x41c>
            if(hdma->XferM1CpltCallback != NULL)
 8005a36:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f47f af4b 	bne.w	80058d4 <HAL_DMA_IRQHandler+0x420>
 8005a3e:	e74b      	b.n	80058d8 <HAL_DMA_IRQHandler+0x424>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8005a46:	e6c4      	b.n	80057d2 <HAL_DMA_IRQHandler+0x31e>
 8005a48:	400204b8 	.word	0x400204b8
 8005a4c:	40020010 	.word	0x40020010
 8005a50:	40020028 	.word	0x40020028
 8005a54:	40020040 	.word	0x40020040
 8005a58:	1b4e81b5 	.word	0x1b4e81b5
 8005a5c:	58025408 	.word	0x58025408
 8005a60:	5802541c 	.word	0x5802541c
 8005a64:	58025430 	.word	0x58025430
 8005a68:	58025494 	.word	0x58025494
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005a6c:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a6e:	f1be 0f00 	cmp.w	lr, #0
 8005a72:	f43f aec1 	beq.w	80057f8 <HAL_DMA_IRQHandler+0x344>
 8005a76:	e653      	b.n	8005720 <HAL_DMA_IRQHandler+0x26c>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a78:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1ba      	bne.n	80059f4 <HAL_DMA_IRQHandler+0x540>
 8005a7e:	e7bd      	b.n	80059fc <HAL_DMA_IRQHandler+0x548>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005a80:	2502      	movs	r5, #2
 8005a82:	40a5      	lsls	r5, r4
 8005a84:	420d      	tst	r5, r1
 8005a86:	d00c      	beq.n	8005aa2 <HAL_DMA_IRQHandler+0x5ee>
 8005a88:	0796      	lsls	r6, r2, #30
 8005a8a:	d50a      	bpl.n	8005aa2 <HAL_DMA_IRQHandler+0x5ee>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a8c:	0414      	lsls	r4, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005a8e:	f8c8 5004 	str.w	r5, [r8, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a92:	d52e      	bpl.n	8005af2 <HAL_DMA_IRQHandler+0x63e>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005a94:	03d1      	lsls	r1, r2, #15
 8005a96:	d438      	bmi.n	8005b0a <HAL_DMA_IRQHandler+0x656>
          if(hdma->XferM1CpltCallback != NULL)
 8005a98:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f47f af46 	bne.w	800592c <HAL_DMA_IRQHandler+0x478>
 8005aa0:	e792      	b.n	80059c8 <HAL_DMA_IRQHandler+0x514>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005aa2:	2508      	movs	r5, #8
 8005aa4:	40a5      	lsls	r5, r4
 8005aa6:	420d      	tst	r5, r1
 8005aa8:	d08e      	beq.n	80059c8 <HAL_DMA_IRQHandler+0x514>
 8005aaa:	0712      	lsls	r2, r2, #28
 8005aac:	d58c      	bpl.n	80059c8 <HAL_DMA_IRQHandler+0x514>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005aae:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005ab0:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8005ab2:	2500      	movs	r5, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ab4:	f021 010e 	bic.w	r1, r1, #14
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005ab8:	fa02 f404 	lsl.w	r4, r2, r4
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005abc:	6019      	str	r1, [r3, #0]
      if (hdma->XferErrorCallback != NULL)
 8005abe:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005ac0:	f8c8 4004 	str.w	r4, [r8, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005ac4:	6542      	str	r2, [r0, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8005ac6:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005aca:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f47f af2c 	bne.w	800592c <HAL_DMA_IRQHandler+0x478>
 8005ad4:	e778      	b.n	80059c8 <HAL_DMA_IRQHandler+0x514>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005ad6:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ad8:	f1b9 0f00 	cmp.w	r9, #0
 8005adc:	f47f adc7 	bne.w	800566e <HAL_DMA_IRQHandler+0x1ba>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ae0:	f1be 0f00 	cmp.w	lr, #0
 8005ae4:	f43f ae88 	beq.w	80057f8 <HAL_DMA_IRQHandler+0x344>
 8005ae8:	e618      	b.n	800571c <HAL_DMA_IRQHandler+0x268>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005aea:	6803      	ldr	r3, [r0, #0]
 8005aec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005af0:	e6dd      	b.n	80058ae <HAL_DMA_IRQHandler+0x3fa>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005af2:	f012 0220 	ands.w	r2, r2, #32
 8005af6:	d108      	bne.n	8005b0a <HAL_DMA_IRQHandler+0x656>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005af8:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005afa:	2401      	movs	r4, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005afc:	f021 010a 	bic.w	r1, r1, #10
 8005b00:	6019      	str	r1, [r3, #0]
          __HAL_UNLOCK(hdma);
 8005b02:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8005b06:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8005b0a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f47f af0d 	bne.w	800592c <HAL_DMA_IRQHandler+0x478>
 8005b12:	e759      	b.n	80059c8 <HAL_DMA_IRQHandler+0x514>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005b14:	0697      	lsls	r7, r2, #26
 8005b16:	d403      	bmi.n	8005b20 <HAL_DMA_IRQHandler+0x66c>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	f022 0204 	bic.w	r2, r2, #4
 8005b1e:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8005b20:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f47f af02 	bne.w	800592c <HAL_DMA_IRQHandler+0x478>
 8005b28:	e74e      	b.n	80059c8 <HAL_DMA_IRQHandler+0x514>
 8005b2a:	bf00      	nop

08005b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b30:	468e      	mov	lr, r1
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b32:	6809      	ldr	r1, [r1, #0]
{
 8005b34:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005b36:	2900      	cmp	r1, #0
 8005b38:	f000 80cd 	beq.w	8005cd6 <HAL_GPIO_Init+0x1aa>
  uint32_t position = 0x00U;
 8005b3c:	2600      	movs	r6, #0
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005b3e:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8005d54 <HAL_GPIO_Init+0x228>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b42:	2301      	movs	r3, #1
 8005b44:	40b3      	lsls	r3, r6
    if (iocurrent != 0x00U)
 8005b46:	ea13 0501 	ands.w	r5, r3, r1
 8005b4a:	f000 80bf 	beq.w	8005ccc <HAL_GPIO_Init+0x1a0>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005b4e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8005b52:	0077      	lsls	r7, r6, #1
 8005b54:	f04f 0c03 	mov.w	ip, #3
 8005b58:	f022 0910 	bic.w	r9, r2, #16
 8005b5c:	fa0c fc07 	lsl.w	ip, ip, r7
 8005b60:	f109 34ff 	add.w	r4, r9, #4294967295
 8005b64:	ea6f 0c0c 	mvn.w	ip, ip
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b68:	2c01      	cmp	r4, #1
 8005b6a:	d812      	bhi.n	8005b92 <HAL_GPIO_Init+0x66>
        temp = GPIOx->OSPEEDR;
 8005b6c:	6884      	ldr	r4, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005b6e:	f3c2 1a00 	ubfx	sl, r2, #4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b72:	ea04 0b0c 	and.w	fp, r4, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b76:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005b7a:	fa0a fa06 	lsl.w	sl, sl, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b7e:	40bc      	lsls	r4, r7
 8005b80:	ea44 040b 	orr.w	r4, r4, fp
        GPIOx->OSPEEDR = temp;
 8005b84:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8005b86:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b88:	ea24 0303 	bic.w	r3, r4, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005b8c:	ea4a 0303 	orr.w	r3, sl, r3
        GPIOx->OTYPER = temp;
 8005b90:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8005b92:	68c3      	ldr	r3, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005b94:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b98:	f8de 4008 	ldr.w	r4, [lr, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b9c:	ea03 030c 	and.w	r3, r3, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ba0:	fa04 f407 	lsl.w	r4, r4, r7
 8005ba4:	ea44 0403 	orr.w	r4, r4, r3
      GPIOx->PUPDR = temp;
 8005ba8:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005baa:	d115      	bne.n	8005bd8 <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3U];
 8005bac:	08f3      	lsrs	r3, r6, #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005bae:	f006 0907 	and.w	r9, r6, #7
 8005bb2:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005bb6:	f8de 4010 	ldr.w	r4, [lr, #16]
 8005bba:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005bbe:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8005bc2:	f8d3 a020 	ldr.w	sl, [r3, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005bc6:	fa0b fb09 	lsl.w	fp, fp, r9
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005bca:	fa04 f409 	lsl.w	r4, r4, r9
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005bce:	ea2a 0a0b 	bic.w	sl, sl, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005bd2:	ea44 040a 	orr.w	r4, r4, sl
        GPIOx->AFR[position >> 3U] = temp;
 8005bd6:	621c      	str	r4, [r3, #32]
      temp = GPIOx->MODER;
 8005bd8:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bda:	f002 0303 	and.w	r3, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005bde:	ea04 0c0c 	and.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005be2:	40bb      	lsls	r3, r7
 8005be4:	ea43 030c 	orr.w	r3, r3, ip
      GPIOx->MODER = temp;
 8005be8:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005bea:	00d3      	lsls	r3, r2, #3
 8005bec:	d56e      	bpl.n	8005ccc <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bee:	4b53      	ldr	r3, [pc, #332]	; (8005d3c <HAL_GPIO_Init+0x210>)
 8005bf0:	f026 0903 	bic.w	r9, r6, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005bf4:	240f      	movs	r4, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bf6:	f8d3 70f4 	ldr.w	r7, [r3, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005bfa:	f006 0303 	and.w	r3, r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bfe:	f047 0c02 	orr.w	ip, r7, #2
 8005c02:	4f4f      	ldr	r7, [pc, #316]	; (8005d40 <HAL_GPIO_Init+0x214>)
 8005c04:	444f      	add	r7, r9
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c06:	ea4f 0983 	mov.w	r9, r3, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c0a:	4b4c      	ldr	r3, [pc, #304]	; (8005d3c <HAL_GPIO_Init+0x210>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c0c:	fa04 f409 	lsl.w	r4, r4, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c10:	f8c3 c0f4 	str.w	ip, [r3, #244]	; 0xf4
 8005c14:	f8d3 c0f4 	ldr.w	ip, [r3, #244]	; 0xf4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c18:	f5a3 4388 	sub.w	r3, r3, #17408	; 0x4400
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c1c:	f00c 0c02 	and.w	ip, ip, #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c20:	4298      	cmp	r0, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c22:	f8cd c004 	str.w	ip, [sp, #4]
 8005c26:	f8dd c004 	ldr.w	ip, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005c2a:	f8d7 c008 	ldr.w	ip, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c2e:	ea2c 0404 	bic.w	r4, ip, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c32:	d026      	beq.n	8005c82 <HAL_GPIO_Init+0x156>
 8005c34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c38:	4298      	cmp	r0, r3
 8005c3a:	d055      	beq.n	8005ce8 <HAL_GPIO_Init+0x1bc>
 8005c3c:	4b41      	ldr	r3, [pc, #260]	; (8005d44 <HAL_GPIO_Init+0x218>)
 8005c3e:	4298      	cmp	r0, r3
 8005c40:	d04c      	beq.n	8005cdc <HAL_GPIO_Init+0x1b0>
 8005c42:	4b41      	ldr	r3, [pc, #260]	; (8005d48 <HAL_GPIO_Init+0x21c>)
 8005c44:	4298      	cmp	r0, r3
 8005c46:	d05b      	beq.n	8005d00 <HAL_GPIO_Init+0x1d4>
 8005c48:	4b40      	ldr	r3, [pc, #256]	; (8005d4c <HAL_GPIO_Init+0x220>)
 8005c4a:	4298      	cmp	r0, r3
 8005c4c:	d05e      	beq.n	8005d0c <HAL_GPIO_Init+0x1e0>
 8005c4e:	4b40      	ldr	r3, [pc, #256]	; (8005d50 <HAL_GPIO_Init+0x224>)
 8005c50:	4298      	cmp	r0, r3
 8005c52:	d04f      	beq.n	8005cf4 <HAL_GPIO_Init+0x1c8>
 8005c54:	f8df c100 	ldr.w	ip, [pc, #256]	; 8005d58 <HAL_GPIO_Init+0x22c>
 8005c58:	4560      	cmp	r0, ip
 8005c5a:	d05d      	beq.n	8005d18 <HAL_GPIO_Init+0x1ec>
 8005c5c:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8005d5c <HAL_GPIO_Init+0x230>
 8005c60:	4560      	cmp	r0, ip
 8005c62:	d05f      	beq.n	8005d24 <HAL_GPIO_Init+0x1f8>
 8005c64:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8005d60 <HAL_GPIO_Init+0x234>
 8005c68:	4560      	cmp	r0, ip
 8005c6a:	d061      	beq.n	8005d30 <HAL_GPIO_Init+0x204>
 8005c6c:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8005d64 <HAL_GPIO_Init+0x238>
 8005c70:	4560      	cmp	r0, ip
 8005c72:	bf0c      	ite	eq
 8005c74:	f04f 0c09 	moveq.w	ip, #9
 8005c78:	f04f 0c0a 	movne.w	ip, #10
 8005c7c:	fa0c f309 	lsl.w	r3, ip, r9
 8005c80:	431c      	orrs	r4, r3
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c82:	60bc      	str	r4, [r7, #8]
        temp &= ~(iocurrent);
 8005c84:	43ec      	mvns	r4, r5
        temp = EXTI_CurrentCPU->IMR1;
 8005c86:	f8d8 3000 	ldr.w	r3, [r8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005c8a:	03d7      	lsls	r7, r2, #15
        {
          temp |= iocurrent;
 8005c8c:	bf4c      	ite	mi
 8005c8e:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 8005c90:	4023      	andpl	r3, r4
        }
        EXTI_CurrentCPU->IMR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c92:	0397      	lsls	r7, r2, #14
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c94:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->IMR1 = temp;
 8005c98:	f8c8 3000 	str.w	r3, [r8]
        temp = EXTI_CurrentCPU->EMR1;
 8005c9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
          temp |= iocurrent;
 8005ca0:	bf4c      	ite	mi
 8005ca2:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 8005ca4:	4023      	andpl	r3, r4
        EXTI_CurrentCPU->EMR1 = temp;
 8005ca6:	f8c8 3004 	str.w	r3, [r8, #4]
        temp = EXTI->RTSR1;
 8005caa:	683b      	ldr	r3, [r7, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005cac:	02d7      	lsls	r7, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8005cae:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
          temp |= iocurrent;
 8005cb2:	bf4c      	ite	mi
 8005cb4:	432b      	orrmi	r3, r5
        temp &= ~(iocurrent);
 8005cb6:	4023      	andpl	r3, r4

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005cb8:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 8005cba:	603b      	str	r3, [r7, #0]
        temp = EXTI->FTSR1;
 8005cbc:	687b      	ldr	r3, [r7, #4]
        temp &= ~(iocurrent);
 8005cbe:	bf54      	ite	pl
 8005cc0:	ea04 0503 	andpl.w	r5, r4, r3
        {
          temp |= iocurrent;
 8005cc4:	431d      	orrmi	r5, r3
        }
        EXTI->FTSR1 = temp;
 8005cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cca:	605d      	str	r5, [r3, #4]
      }
    }

    position++;
 8005ccc:	3601      	adds	r6, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005cce:	fa31 f306 	lsrs.w	r3, r1, r6
 8005cd2:	f47f af36 	bne.w	8005b42 <HAL_GPIO_Init+0x16>
  }
}
 8005cd6:	b003      	add	sp, #12
 8005cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cdc:	f04f 0c02 	mov.w	ip, #2
 8005ce0:	fa0c f309 	lsl.w	r3, ip, r9
 8005ce4:	431c      	orrs	r4, r3
 8005ce6:	e7cc      	b.n	8005c82 <HAL_GPIO_Init+0x156>
 8005ce8:	f04f 0c01 	mov.w	ip, #1
 8005cec:	fa0c f309 	lsl.w	r3, ip, r9
 8005cf0:	431c      	orrs	r4, r3
 8005cf2:	e7c6      	b.n	8005c82 <HAL_GPIO_Init+0x156>
 8005cf4:	f04f 0c05 	mov.w	ip, #5
 8005cf8:	fa0c f309 	lsl.w	r3, ip, r9
 8005cfc:	431c      	orrs	r4, r3
 8005cfe:	e7c0      	b.n	8005c82 <HAL_GPIO_Init+0x156>
 8005d00:	f04f 0c03 	mov.w	ip, #3
 8005d04:	fa0c f309 	lsl.w	r3, ip, r9
 8005d08:	431c      	orrs	r4, r3
 8005d0a:	e7ba      	b.n	8005c82 <HAL_GPIO_Init+0x156>
 8005d0c:	f04f 0c04 	mov.w	ip, #4
 8005d10:	fa0c f309 	lsl.w	r3, ip, r9
 8005d14:	431c      	orrs	r4, r3
 8005d16:	e7b4      	b.n	8005c82 <HAL_GPIO_Init+0x156>
 8005d18:	f04f 0c06 	mov.w	ip, #6
 8005d1c:	fa0c f309 	lsl.w	r3, ip, r9
 8005d20:	431c      	orrs	r4, r3
 8005d22:	e7ae      	b.n	8005c82 <HAL_GPIO_Init+0x156>
 8005d24:	f04f 0c07 	mov.w	ip, #7
 8005d28:	fa0c f309 	lsl.w	r3, ip, r9
 8005d2c:	431c      	orrs	r4, r3
 8005d2e:	e7a8      	b.n	8005c82 <HAL_GPIO_Init+0x156>
 8005d30:	f04f 0c08 	mov.w	ip, #8
 8005d34:	fa0c f309 	lsl.w	r3, ip, r9
 8005d38:	431c      	orrs	r4, r3
 8005d3a:	e7a2      	b.n	8005c82 <HAL_GPIO_Init+0x156>
 8005d3c:	58024400 	.word	0x58024400
 8005d40:	58000400 	.word	0x58000400
 8005d44:	58020800 	.word	0x58020800
 8005d48:	58020c00 	.word	0x58020c00
 8005d4c:	58021000 	.word	0x58021000
 8005d50:	58021400 	.word	0x58021400
 8005d54:	58000080 	.word	0x58000080
 8005d58:	58021800 	.word	0x58021800
 8005d5c:	58021c00 	.word	0x58021c00
 8005d60:	58022000 	.word	0x58022000
 8005d64:	58022400 	.word	0x58022400

08005d68 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d68:	b902      	cbnz	r2, 8005d6c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d6a:	0409      	lsls	r1, r1, #16
 8005d6c:	6181      	str	r1, [r0, #24]
  }
}
 8005d6e:	4770      	bx	lr

08005d70 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005d70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d74:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8005d78:	4201      	tst	r1, r0
 8005d7a:	d100      	bne.n	8005d7e <HAL_GPIO_EXTI_IRQHandler+0xe>
 8005d7c:	4770      	bx	lr
{
 8005d7e:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d80:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d84:	f7fb fa8a 	bl	800129c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005d88:	bd08      	pop	{r3, pc}
 8005d8a:	bf00      	nop

08005d8c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005d8c:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005d8e:	4b11      	ldr	r3, [pc, #68]	; (8005dd4 <HAL_PWREx_ConfigSupply+0x48>)
 8005d90:	68da      	ldr	r2, [r3, #12]
 8005d92:	0752      	lsls	r2, r2, #29
 8005d94:	d406      	bmi.n	8005da4 <HAL_PWREx_ConfigSupply+0x18>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005d9c:	1a18      	subs	r0, r3, r0
 8005d9e:	bf18      	it	ne
 8005da0:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8005da2:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005da4:	68da      	ldr	r2, [r3, #12]
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005da6:	461c      	mov	r4, r3
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005da8:	f022 0207 	bic.w	r2, r2, #7
 8005dac:	4310      	orrs	r0, r2
 8005dae:	60d8      	str	r0, [r3, #12]
  tickstart = HAL_GetTick ();
 8005db0:	f7fd fd5a 	bl	8003868 <HAL_GetTick>
 8005db4:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005db6:	e005      	b.n	8005dc4 <HAL_PWREx_ConfigSupply+0x38>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005db8:	f7fd fd56 	bl	8003868 <HAL_GetTick>
 8005dbc:	1b40      	subs	r0, r0, r5
 8005dbe:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005dc2:	d804      	bhi.n	8005dce <HAL_PWREx_ConfigSupply+0x42>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005dc4:	6863      	ldr	r3, [r4, #4]
 8005dc6:	049b      	lsls	r3, r3, #18
 8005dc8:	d5f6      	bpl.n	8005db8 <HAL_PWREx_ConfigSupply+0x2c>
  return HAL_OK;
 8005dca:	2000      	movs	r0, #0
}
 8005dcc:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8005dce:	2001      	movs	r0, #1
}
 8005dd0:	bd38      	pop	{r3, r4, r5, pc}
 8005dd2:	bf00      	nop
 8005dd4:	58024800 	.word	0x58024800

08005dd8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	f000 818f 	beq.w	80060fc <HAL_RCC_OscConfig+0x324>
{
 8005dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005de0:	6803      	ldr	r3, [r0, #0]
 8005de2:	4604      	mov	r4, r0
 8005de4:	07d9      	lsls	r1, r3, #31
 8005de6:	d533      	bpl.n	8005e50 <HAL_RCC_OscConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005de8:	49b1      	ldr	r1, [pc, #708]	; (80060b0 <HAL_RCC_OscConfig+0x2d8>)
 8005dea:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005dec:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dee:	f002 0238 	and.w	r2, r2, #56	; 0x38
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005df2:	2a10      	cmp	r2, #16
 8005df4:	f000 8107 	beq.w	8006006 <HAL_RCC_OscConfig+0x22e>
 8005df8:	2a18      	cmp	r2, #24
 8005dfa:	f000 80ff 	beq.w	8005ffc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dfe:	6863      	ldr	r3, [r4, #4]
 8005e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e04:	d010      	beq.n	8005e28 <HAL_RCC_OscConfig+0x50>
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 8161 	beq.w	80060ce <HAL_RCC_OscConfig+0x2f6>
 8005e0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e10:	4ba7      	ldr	r3, [pc, #668]	; (80060b0 <HAL_RCC_OscConfig+0x2d8>)
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	f000 81d1 	beq.w	80061ba <HAL_RCC_OscConfig+0x3e2>
 8005e18:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	e004      	b.n	8005e32 <HAL_RCC_OscConfig+0x5a>
 8005e28:	4aa1      	ldr	r2, [pc, #644]	; (80060b0 <HAL_RCC_OscConfig+0x2d8>)
 8005e2a:	6813      	ldr	r3, [r2, #0]
 8005e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e30:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e32:	f7fd fd19 	bl	8003868 <HAL_GetTick>

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e36:	4d9e      	ldr	r5, [pc, #632]	; (80060b0 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8005e38:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e3a:	e005      	b.n	8005e48 <HAL_RCC_OscConfig+0x70>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e3c:	f7fd fd14 	bl	8003868 <HAL_GetTick>
 8005e40:	1b80      	subs	r0, r0, r6
 8005e42:	2864      	cmp	r0, #100	; 0x64
 8005e44:	f200 8141 	bhi.w	80060ca <HAL_RCC_OscConfig+0x2f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e48:	682b      	ldr	r3, [r5, #0]
 8005e4a:	039f      	lsls	r7, r3, #14
 8005e4c:	d5f6      	bpl.n	8005e3c <HAL_RCC_OscConfig+0x64>
 8005e4e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e50:	0799      	lsls	r1, r3, #30
 8005e52:	f100 808a 	bmi.w	8005f6a <HAL_RCC_OscConfig+0x192>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005e56:	06d9      	lsls	r1, r3, #27
 8005e58:	d530      	bpl.n	8005ebc <HAL_RCC_OscConfig+0xe4>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e5a:	4a95      	ldr	r2, [pc, #596]	; (80060b0 <HAL_RCC_OscConfig+0x2d8>)
 8005e5c:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e5e:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e60:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	f000 80de 	beq.w	8006026 <HAL_RCC_OscConfig+0x24e>
 8005e6a:	2b18      	cmp	r3, #24
 8005e6c:	f000 80d6 	beq.w	800601c <HAL_RCC_OscConfig+0x244>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005e70:	69e3      	ldr	r3, [r4, #28]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f000 816a 	beq.w	800614c <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005e78:	4b8d      	ldr	r3, [pc, #564]	; (80060b0 <HAL_RCC_OscConfig+0x2d8>)
 8005e7a:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e7c:	461d      	mov	r5, r3
        __HAL_RCC_CSI_ENABLE();
 8005e7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e82:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005e84:	f7fd fcf0 	bl	8003868 <HAL_GetTick>
 8005e88:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e8a:	e005      	b.n	8005e98 <HAL_RCC_OscConfig+0xc0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005e8c:	f7fd fcec 	bl	8003868 <HAL_GetTick>
 8005e90:	1b80      	subs	r0, r0, r6
 8005e92:	2802      	cmp	r0, #2
 8005e94:	f200 8119 	bhi.w	80060ca <HAL_RCC_OscConfig+0x2f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005e98:	682b      	ldr	r3, [r5, #0]
 8005e9a:	05db      	lsls	r3, r3, #23
 8005e9c:	d5f6      	bpl.n	8005e8c <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e9e:	f7fd fcfb 	bl	8003898 <HAL_GetREVID>
 8005ea2:	f241 0303 	movw	r3, #4099	; 0x1003
 8005ea6:	4298      	cmp	r0, r3
 8005ea8:	f200 8241 	bhi.w	800632e <HAL_RCC_OscConfig+0x556>
 8005eac:	686b      	ldr	r3, [r5, #4]
 8005eae:	6a22      	ldr	r2, [r4, #32]
 8005eb0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005eb4:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8005eb8:	606b      	str	r3, [r5, #4]
 8005eba:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ebc:	071d      	lsls	r5, r3, #28
 8005ebe:	d517      	bpl.n	8005ef0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ec0:	6963      	ldr	r3, [r4, #20]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f000 811c 	beq.w	8006100 <HAL_RCC_OscConfig+0x328>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ec8:	4b79      	ldr	r3, [pc, #484]	; (80060b0 <HAL_RCC_OscConfig+0x2d8>)
 8005eca:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ecc:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8005ece:	f042 0201 	orr.w	r2, r2, #1
 8005ed2:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8005ed4:	f7fd fcc8 	bl	8003868 <HAL_GetTick>
 8005ed8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005eda:	e005      	b.n	8005ee8 <HAL_RCC_OscConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005edc:	f7fd fcc4 	bl	8003868 <HAL_GetTick>
 8005ee0:	1b80      	subs	r0, r0, r6
 8005ee2:	2802      	cmp	r0, #2
 8005ee4:	f200 80f1 	bhi.w	80060ca <HAL_RCC_OscConfig+0x2f2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ee8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8005eea:	0798      	lsls	r0, r3, #30
 8005eec:	d5f6      	bpl.n	8005edc <HAL_RCC_OscConfig+0x104>
 8005eee:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ef0:	069a      	lsls	r2, r3, #26
 8005ef2:	d517      	bpl.n	8005f24 <HAL_RCC_OscConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005ef4:	69a3      	ldr	r3, [r4, #24]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f000 8115 	beq.w	8006126 <HAL_RCC_OscConfig+0x34e>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005efc:	4b6c      	ldr	r3, [pc, #432]	; (80060b0 <HAL_RCC_OscConfig+0x2d8>)
 8005efe:	681a      	ldr	r2, [r3, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f00:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_ENABLE();
 8005f02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f06:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8005f08:	f7fd fcae 	bl	8003868 <HAL_GetTick>
 8005f0c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f0e:	e005      	b.n	8005f1c <HAL_RCC_OscConfig+0x144>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005f10:	f7fd fcaa 	bl	8003868 <HAL_GetTick>
 8005f14:	1b80      	subs	r0, r0, r6
 8005f16:	2802      	cmp	r0, #2
 8005f18:	f200 80d7 	bhi.w	80060ca <HAL_RCC_OscConfig+0x2f2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005f1c:	682b      	ldr	r3, [r5, #0]
 8005f1e:	049f      	lsls	r7, r3, #18
 8005f20:	d5f6      	bpl.n	8005f10 <HAL_RCC_OscConfig+0x138>
 8005f22:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f24:	0759      	lsls	r1, r3, #29
 8005f26:	f100 8096 	bmi.w	8006056 <HAL_RCC_OscConfig+0x27e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005f2c:	b1d8      	cbz	r0, 8005f66 <HAL_RCC_OscConfig+0x18e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005f2e:	4b60      	ldr	r3, [pc, #384]	; (80060b0 <HAL_RCC_OscConfig+0x2d8>)
 8005f30:	691a      	ldr	r2, [r3, #16]
 8005f32:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8005f36:	2a18      	cmp	r2, #24
 8005f38:	f000 81b1 	beq.w	800629e <HAL_RCC_OscConfig+0x4c6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f3c:	2802      	cmp	r0, #2
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f3e:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f40:	f000 8143 	beq.w	80061ca <HAL_RCC_OscConfig+0x3f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f44:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f48:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 8005f4a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005f4c:	f7fd fc8c 	bl	8003868 <HAL_GetTick>
 8005f50:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f52:	e005      	b.n	8005f60 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f54:	f7fd fc88 	bl	8003868 <HAL_GetTick>
 8005f58:	1b40      	subs	r0, r0, r5
 8005f5a:	2802      	cmp	r0, #2
 8005f5c:	f200 80b5 	bhi.w	80060ca <HAL_RCC_OscConfig+0x2f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f60:	6823      	ldr	r3, [r4, #0]
 8005f62:	019b      	lsls	r3, r3, #6
 8005f64:	d4f6      	bmi.n	8005f54 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8005f66:	2000      	movs	r0, #0
}
 8005f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f6a:	4a51      	ldr	r2, [pc, #324]	; (80060b0 <HAL_RCC_OscConfig+0x2d8>)
 8005f6c:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f6e:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005f70:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8005f74:	d02b      	beq.n	8005fce <HAL_RCC_OscConfig+0x1f6>
 8005f76:	2b18      	cmp	r3, #24
 8005f78:	d027      	beq.n	8005fca <HAL_RCC_OscConfig+0x1f2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f7a:	68e2      	ldr	r2, [r4, #12]
 8005f7c:	2a00      	cmp	r2, #0
 8005f7e:	f000 80f9 	beq.w	8006174 <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f82:	494b      	ldr	r1, [pc, #300]	; (80060b0 <HAL_RCC_OscConfig+0x2d8>)
 8005f84:	680b      	ldr	r3, [r1, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f86:	460d      	mov	r5, r1
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f88:	f023 0319 	bic.w	r3, r3, #25
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8005f90:	f7fd fc6a 	bl	8003868 <HAL_GetTick>
 8005f94:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f96:	e005      	b.n	8005fa4 <HAL_RCC_OscConfig+0x1cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f98:	f7fd fc66 	bl	8003868 <HAL_GetTick>
 8005f9c:	1b80      	subs	r0, r0, r6
 8005f9e:	2802      	cmp	r0, #2
 8005fa0:	f200 8093 	bhi.w	80060ca <HAL_RCC_OscConfig+0x2f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fa4:	682b      	ldr	r3, [r5, #0]
 8005fa6:	075f      	lsls	r7, r3, #29
 8005fa8:	d5f6      	bpl.n	8005f98 <HAL_RCC_OscConfig+0x1c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005faa:	f7fd fc75 	bl	8003898 <HAL_GetREVID>
 8005fae:	f241 0303 	movw	r3, #4099	; 0x1003
 8005fb2:	6922      	ldr	r2, [r4, #16]
 8005fb4:	4298      	cmp	r0, r3
 8005fb6:	686b      	ldr	r3, [r5, #4]
 8005fb8:	f200 81c2 	bhi.w	8006340 <HAL_RCC_OscConfig+0x568>
 8005fbc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005fc0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8005fc4:	606b      	str	r3, [r5, #4]
 8005fc6:	6823      	ldr	r3, [r4, #0]
 8005fc8:	e745      	b.n	8005e56 <HAL_RCC_OscConfig+0x7e>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005fca:	0792      	lsls	r2, r2, #30
 8005fcc:	d1d5      	bne.n	8005f7a <HAL_RCC_OscConfig+0x1a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fce:	4b38      	ldr	r3, [pc, #224]	; (80060b0 <HAL_RCC_OscConfig+0x2d8>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	075b      	lsls	r3, r3, #29
 8005fd4:	d501      	bpl.n	8005fda <HAL_RCC_OscConfig+0x202>
 8005fd6:	68e3      	ldr	r3, [r4, #12]
 8005fd8:	b1f3      	cbz	r3, 8006018 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fda:	f7fd fc5d 	bl	8003898 <HAL_GetREVID>
 8005fde:	f241 0303 	movw	r3, #4099	; 0x1003
 8005fe2:	4a33      	ldr	r2, [pc, #204]	; (80060b0 <HAL_RCC_OscConfig+0x2d8>)
 8005fe4:	4298      	cmp	r0, r3
 8005fe6:	6921      	ldr	r1, [r4, #16]
 8005fe8:	6853      	ldr	r3, [r2, #4]
 8005fea:	f200 80d7 	bhi.w	800619c <HAL_RCC_OscConfig+0x3c4>
 8005fee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005ff2:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8005ff6:	6053      	str	r3, [r2, #4]
 8005ff8:	6823      	ldr	r3, [r4, #0]
 8005ffa:	e72c      	b.n	8005e56 <HAL_RCC_OscConfig+0x7e>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005ffc:	f001 0103 	and.w	r1, r1, #3
 8006000:	2902      	cmp	r1, #2
 8006002:	f47f aefc 	bne.w	8005dfe <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006006:	4a2a      	ldr	r2, [pc, #168]	; (80060b0 <HAL_RCC_OscConfig+0x2d8>)
 8006008:	6812      	ldr	r2, [r2, #0]
 800600a:	0392      	lsls	r2, r2, #14
 800600c:	f57f af20 	bpl.w	8005e50 <HAL_RCC_OscConfig+0x78>
 8006010:	6862      	ldr	r2, [r4, #4]
 8006012:	2a00      	cmp	r2, #0
 8006014:	f47f af1c 	bne.w	8005e50 <HAL_RCC_OscConfig+0x78>
        return HAL_ERROR;
 8006018:	2001      	movs	r0, #1
}
 800601a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800601c:	f002 0203 	and.w	r2, r2, #3
 8006020:	2a01      	cmp	r2, #1
 8006022:	f47f af25 	bne.w	8005e70 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006026:	4b22      	ldr	r3, [pc, #136]	; (80060b0 <HAL_RCC_OscConfig+0x2d8>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	05da      	lsls	r2, r3, #23
 800602c:	d502      	bpl.n	8006034 <HAL_RCC_OscConfig+0x25c>
 800602e:	69e3      	ldr	r3, [r4, #28]
 8006030:	2b80      	cmp	r3, #128	; 0x80
 8006032:	d1f1      	bne.n	8006018 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006034:	f7fd fc30 	bl	8003898 <HAL_GetREVID>
 8006038:	f241 0303 	movw	r3, #4099	; 0x1003
 800603c:	4a1c      	ldr	r2, [pc, #112]	; (80060b0 <HAL_RCC_OscConfig+0x2d8>)
 800603e:	4298      	cmp	r0, r3
 8006040:	6a21      	ldr	r1, [r4, #32]
 8006042:	f200 80b2 	bhi.w	80061aa <HAL_RCC_OscConfig+0x3d2>
 8006046:	6853      	ldr	r3, [r2, #4]
 8006048:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800604c:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8006050:	6053      	str	r3, [r2, #4]
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	e732      	b.n	8005ebc <HAL_RCC_OscConfig+0xe4>
    PWR->CR1 |= PWR_CR1_DBP;
 8006056:	4b17      	ldr	r3, [pc, #92]	; (80060b4 <HAL_RCC_OscConfig+0x2dc>)
 8006058:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800605a:	461d      	mov	r5, r3
    PWR->CR1 |= PWR_CR1_DBP;
 800605c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006060:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8006062:	f7fd fc01 	bl	8003868 <HAL_GetTick>
 8006066:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006068:	e004      	b.n	8006074 <HAL_RCC_OscConfig+0x29c>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800606a:	f7fd fbfd 	bl	8003868 <HAL_GetTick>
 800606e:	1b80      	subs	r0, r0, r6
 8006070:	2864      	cmp	r0, #100	; 0x64
 8006072:	d82a      	bhi.n	80060ca <HAL_RCC_OscConfig+0x2f2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006074:	682b      	ldr	r3, [r5, #0]
 8006076:	05da      	lsls	r2, r3, #23
 8006078:	d5f7      	bpl.n	800606a <HAL_RCC_OscConfig+0x292>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800607a:	68a3      	ldr	r3, [r4, #8]
 800607c:	2b01      	cmp	r3, #1
 800607e:	f000 8166 	beq.w	800634e <HAL_RCC_OscConfig+0x576>
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 8139 	beq.w	80062fa <HAL_RCC_OscConfig+0x522>
 8006088:	2b05      	cmp	r3, #5
 800608a:	4b09      	ldr	r3, [pc, #36]	; (80060b0 <HAL_RCC_OscConfig+0x2d8>)
 800608c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800608e:	f000 8164 	beq.w	800635a <HAL_RCC_OscConfig+0x582>
 8006092:	f022 0201 	bic.w	r2, r2, #1
 8006096:	671a      	str	r2, [r3, #112]	; 0x70
 8006098:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800609a:	f022 0204 	bic.w	r2, r2, #4
 800609e:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80060a0:	f7fd fbe2 	bl	8003868 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060a4:	4d02      	ldr	r5, [pc, #8]	; (80060b0 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80060a6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060a8:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060ac:	e009      	b.n	80060c2 <HAL_RCC_OscConfig+0x2ea>
 80060ae:	bf00      	nop
 80060b0:	58024400 	.word	0x58024400
 80060b4:	58024800 	.word	0x58024800
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060b8:	f7fd fbd6 	bl	8003868 <HAL_GetTick>
 80060bc:	1bc0      	subs	r0, r0, r7
 80060be:	42b0      	cmp	r0, r6
 80060c0:	d803      	bhi.n	80060ca <HAL_RCC_OscConfig+0x2f2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80060c2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80060c4:	079b      	lsls	r3, r3, #30
 80060c6:	d5f7      	bpl.n	80060b8 <HAL_RCC_OscConfig+0x2e0>
 80060c8:	e72f      	b.n	8005f2a <HAL_RCC_OscConfig+0x152>
            return HAL_TIMEOUT;
 80060ca:	2003      	movs	r0, #3
}
 80060cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060ce:	4ba7      	ldr	r3, [pc, #668]	; (800636c <HAL_RCC_OscConfig+0x594>)
 80060d0:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80060d2:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060d4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060e0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80060e2:	f7fd fbc1 	bl	8003868 <HAL_GetTick>
 80060e6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80060e8:	e004      	b.n	80060f4 <HAL_RCC_OscConfig+0x31c>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060ea:	f7fd fbbd 	bl	8003868 <HAL_GetTick>
 80060ee:	1b80      	subs	r0, r0, r6
 80060f0:	2864      	cmp	r0, #100	; 0x64
 80060f2:	d8ea      	bhi.n	80060ca <HAL_RCC_OscConfig+0x2f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80060f4:	682b      	ldr	r3, [r5, #0]
 80060f6:	0398      	lsls	r0, r3, #14
 80060f8:	d4f7      	bmi.n	80060ea <HAL_RCC_OscConfig+0x312>
 80060fa:	e6a8      	b.n	8005e4e <HAL_RCC_OscConfig+0x76>
    return HAL_ERROR;
 80060fc:	2001      	movs	r0, #1
}
 80060fe:	4770      	bx	lr
      __HAL_RCC_LSI_DISABLE();
 8006100:	4b9a      	ldr	r3, [pc, #616]	; (800636c <HAL_RCC_OscConfig+0x594>)
 8006102:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006104:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 8006106:	f022 0201 	bic.w	r2, r2, #1
 800610a:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800610c:	f7fd fbac 	bl	8003868 <HAL_GetTick>
 8006110:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006112:	e004      	b.n	800611e <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006114:	f7fd fba8 	bl	8003868 <HAL_GetTick>
 8006118:	1b80      	subs	r0, r0, r6
 800611a:	2802      	cmp	r0, #2
 800611c:	d8d5      	bhi.n	80060ca <HAL_RCC_OscConfig+0x2f2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800611e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006120:	0799      	lsls	r1, r3, #30
 8006122:	d4f7      	bmi.n	8006114 <HAL_RCC_OscConfig+0x33c>
 8006124:	e6e3      	b.n	8005eee <HAL_RCC_OscConfig+0x116>
      __HAL_RCC_HSI48_DISABLE();
 8006126:	4b91      	ldr	r3, [pc, #580]	; (800636c <HAL_RCC_OscConfig+0x594>)
 8006128:	681a      	ldr	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800612a:	461d      	mov	r5, r3
      __HAL_RCC_HSI48_DISABLE();
 800612c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006130:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006132:	f7fd fb99 	bl	8003868 <HAL_GetTick>
 8006136:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006138:	e004      	b.n	8006144 <HAL_RCC_OscConfig+0x36c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800613a:	f7fd fb95 	bl	8003868 <HAL_GetTick>
 800613e:	1b80      	subs	r0, r0, r6
 8006140:	2802      	cmp	r0, #2
 8006142:	d8c2      	bhi.n	80060ca <HAL_RCC_OscConfig+0x2f2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006144:	682b      	ldr	r3, [r5, #0]
 8006146:	0498      	lsls	r0, r3, #18
 8006148:	d4f7      	bmi.n	800613a <HAL_RCC_OscConfig+0x362>
 800614a:	e6ea      	b.n	8005f22 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_DISABLE();
 800614c:	4b87      	ldr	r3, [pc, #540]	; (800636c <HAL_RCC_OscConfig+0x594>)
 800614e:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006150:	461d      	mov	r5, r3
        __HAL_RCC_CSI_DISABLE();
 8006152:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006156:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006158:	f7fd fb86 	bl	8003868 <HAL_GetTick>
 800615c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800615e:	e004      	b.n	800616a <HAL_RCC_OscConfig+0x392>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006160:	f7fd fb82 	bl	8003868 <HAL_GetTick>
 8006164:	1b80      	subs	r0, r0, r6
 8006166:	2802      	cmp	r0, #2
 8006168:	d8af      	bhi.n	80060ca <HAL_RCC_OscConfig+0x2f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800616a:	682b      	ldr	r3, [r5, #0]
 800616c:	05df      	lsls	r7, r3, #23
 800616e:	d4f7      	bmi.n	8006160 <HAL_RCC_OscConfig+0x388>
 8006170:	6823      	ldr	r3, [r4, #0]
 8006172:	e6a3      	b.n	8005ebc <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_HSI_DISABLE();
 8006174:	4b7d      	ldr	r3, [pc, #500]	; (800636c <HAL_RCC_OscConfig+0x594>)
 8006176:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006178:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 800617a:	f022 0201 	bic.w	r2, r2, #1
 800617e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006180:	f7fd fb72 	bl	8003868 <HAL_GetTick>
 8006184:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006186:	e004      	b.n	8006192 <HAL_RCC_OscConfig+0x3ba>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006188:	f7fd fb6e 	bl	8003868 <HAL_GetTick>
 800618c:	1b80      	subs	r0, r0, r6
 800618e:	2802      	cmp	r0, #2
 8006190:	d89b      	bhi.n	80060ca <HAL_RCC_OscConfig+0x2f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006192:	682b      	ldr	r3, [r5, #0]
 8006194:	0758      	lsls	r0, r3, #29
 8006196:	d4f7      	bmi.n	8006188 <HAL_RCC_OscConfig+0x3b0>
 8006198:	6823      	ldr	r3, [r4, #0]
 800619a:	e65c      	b.n	8005e56 <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800619c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80061a0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80061a4:	6053      	str	r3, [r2, #4]
 80061a6:	6823      	ldr	r3, [r4, #0]
 80061a8:	e655      	b.n	8005e56 <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061aa:	68d3      	ldr	r3, [r2, #12]
 80061ac:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80061b0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80061b4:	60d3      	str	r3, [r2, #12]
 80061b6:	6823      	ldr	r3, [r4, #0]
 80061b8:	e680      	b.n	8005ebc <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061ba:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	e633      	b.n	8005e32 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_PLL_DISABLE();
 80061ca:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061ce:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 80061d0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80061d2:	f7fd fb49 	bl	8003868 <HAL_GetTick>
 80061d6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061d8:	e005      	b.n	80061e6 <HAL_RCC_OscConfig+0x40e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061da:	f7fd fb45 	bl	8003868 <HAL_GetTick>
 80061de:	1b80      	subs	r0, r0, r6
 80061e0:	2802      	cmp	r0, #2
 80061e2:	f63f af72 	bhi.w	80060ca <HAL_RCC_OscConfig+0x2f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061e6:	682b      	ldr	r3, [r5, #0]
 80061e8:	0199      	lsls	r1, r3, #6
 80061ea:	d4f6      	bmi.n	80061da <HAL_RCC_OscConfig+0x402>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061ec:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80061ee:	4b60      	ldr	r3, [pc, #384]	; (8006370 <HAL_RCC_OscConfig+0x598>)
 80061f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80061f2:	4013      	ands	r3, r2
 80061f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80061f6:	495f      	ldr	r1, [pc, #380]	; (8006374 <HAL_RCC_OscConfig+0x59c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061f8:	4303      	orrs	r3, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80061fa:	4e5c      	ldr	r6, [pc, #368]	; (800636c <HAL_RCC_OscConfig+0x594>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061fc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8006200:	62ab      	str	r3, [r5, #40]	; 0x28
 8006202:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8006204:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8006208:	3f01      	subs	r7, #1
 800620a:	1e50      	subs	r0, r2, #1
 800620c:	3b01      	subs	r3, #1
 800620e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006210:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8006214:	025b      	lsls	r3, r3, #9
 8006216:	0400      	lsls	r0, r0, #16
 8006218:	3a01      	subs	r2, #1
 800621a:	b29b      	uxth	r3, r3
 800621c:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8006220:	0612      	lsls	r2, r2, #24
 8006222:	4303      	orrs	r3, r0
 8006224:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006228:	433b      	orrs	r3, r7
 800622a:	4313      	orrs	r3, r2
 800622c:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800622e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006230:	f023 0301 	bic.w	r3, r3, #1
 8006234:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006236:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8006238:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800623a:	4011      	ands	r1, r2
 800623c:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8006240:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006242:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006244:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006246:	f023 030c 	bic.w	r3, r3, #12
 800624a:	4313      	orrs	r3, r2
 800624c:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800624e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006250:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006252:	f023 0302 	bic.w	r3, r3, #2
 8006256:	4313      	orrs	r3, r2
 8006258:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800625a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800625c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006260:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006262:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006268:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800626a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800626c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006270:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8006272:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006274:	f043 0301 	orr.w	r3, r3, #1
 8006278:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800627a:	682b      	ldr	r3, [r5, #0]
 800627c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006280:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006282:	f7fd faf1 	bl	8003868 <HAL_GetTick>
 8006286:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006288:	e005      	b.n	8006296 <HAL_RCC_OscConfig+0x4be>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800628a:	f7fd faed 	bl	8003868 <HAL_GetTick>
 800628e:	1b00      	subs	r0, r0, r4
 8006290:	2802      	cmp	r0, #2
 8006292:	f63f af1a 	bhi.w	80060ca <HAL_RCC_OscConfig+0x2f2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006296:	6833      	ldr	r3, [r6, #0]
 8006298:	019a      	lsls	r2, r3, #6
 800629a:	d5f6      	bpl.n	800628a <HAL_RCC_OscConfig+0x4b2>
 800629c:	e663      	b.n	8005f66 <HAL_RCC_OscConfig+0x18e>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800629e:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80062a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80062a2:	6b1d      	ldr	r5, [r3, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062a4:	f43f ae60 	beq.w	8005f68 <HAL_RCC_OscConfig+0x190>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062a8:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062ac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80062ae:	428b      	cmp	r3, r1
 80062b0:	f47f aeb2 	bne.w	8006018 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80062b4:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80062ba:	429a      	cmp	r2, r3
 80062bc:	f47f aeac 	bne.w	8006018 <HAL_RCC_OscConfig+0x240>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80062c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80062c2:	f3c5 0208 	ubfx	r2, r5, #0, #9
 80062c6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80062c8:	429a      	cmp	r2, r3
 80062ca:	f47f aea5 	bne.w	8006018 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80062ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062d0:	f3c5 2246 	ubfx	r2, r5, #9, #7
 80062d4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80062d6:	429a      	cmp	r2, r3
 80062d8:	f47f ae9e 	bne.w	8006018 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80062dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80062de:	f3c5 4206 	ubfx	r2, r5, #16, #7
 80062e2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80062e4:	429a      	cmp	r2, r3
 80062e6:	f47f ae97 	bne.w	8006018 <HAL_RCC_OscConfig+0x240>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80062ea:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80062ec:	f3c5 6506 	ubfx	r5, r5, #24, #7
 80062f0:	3801      	subs	r0, #1
    return HAL_ERROR;
 80062f2:	1a28      	subs	r0, r5, r0
 80062f4:	bf18      	it	ne
 80062f6:	2001      	movne	r0, #1
 80062f8:	e636      	b.n	8005f68 <HAL_RCC_OscConfig+0x190>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062fa:	4b1c      	ldr	r3, [pc, #112]	; (800636c <HAL_RCC_OscConfig+0x594>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062fc:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006300:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006302:	461d      	mov	r5, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006304:	f022 0201 	bic.w	r2, r2, #1
 8006308:	671a      	str	r2, [r3, #112]	; 0x70
 800630a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800630c:	f022 0204 	bic.w	r2, r2, #4
 8006310:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8006312:	f7fd faa9 	bl	8003868 <HAL_GetTick>
 8006316:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006318:	e005      	b.n	8006326 <HAL_RCC_OscConfig+0x54e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800631a:	f7fd faa5 	bl	8003868 <HAL_GetTick>
 800631e:	1b80      	subs	r0, r0, r6
 8006320:	42b8      	cmp	r0, r7
 8006322:	f63f aed2 	bhi.w	80060ca <HAL_RCC_OscConfig+0x2f2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006326:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006328:	0798      	lsls	r0, r3, #30
 800632a:	d4f6      	bmi.n	800631a <HAL_RCC_OscConfig+0x542>
 800632c:	e5fd      	b.n	8005f2a <HAL_RCC_OscConfig+0x152>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800632e:	68eb      	ldr	r3, [r5, #12]
 8006330:	6a22      	ldr	r2, [r4, #32]
 8006332:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8006336:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800633a:	60eb      	str	r3, [r5, #12]
 800633c:	6823      	ldr	r3, [r4, #0]
 800633e:	e5bd      	b.n	8005ebc <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006340:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006344:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006348:	606b      	str	r3, [r5, #4]
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	e583      	b.n	8005e56 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800634e:	4a07      	ldr	r2, [pc, #28]	; (800636c <HAL_RCC_OscConfig+0x594>)
 8006350:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8006352:	f043 0301 	orr.w	r3, r3, #1
 8006356:	6713      	str	r3, [r2, #112]	; 0x70
 8006358:	e6a2      	b.n	80060a0 <HAL_RCC_OscConfig+0x2c8>
 800635a:	f042 0204 	orr.w	r2, r2, #4
 800635e:	671a      	str	r2, [r3, #112]	; 0x70
 8006360:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006362:	f042 0201 	orr.w	r2, r2, #1
 8006366:	671a      	str	r2, [r3, #112]	; 0x70
 8006368:	e69a      	b.n	80060a0 <HAL_RCC_OscConfig+0x2c8>
 800636a:	bf00      	nop
 800636c:	58024400 	.word	0x58024400
 8006370:	fffffc0c 	.word	0xfffffc0c
 8006374:	ffff0007 	.word	0xffff0007

08006378 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006378:	4a3e      	ldr	r2, [pc, #248]	; (8006474 <HAL_RCC_GetSysClockFreq+0xfc>)
 800637a:	6913      	ldr	r3, [r2, #16]
 800637c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006380:	2b10      	cmp	r3, #16
 8006382:	d04f      	beq.n	8006424 <HAL_RCC_GetSysClockFreq+0xac>
 8006384:	2b18      	cmp	r3, #24
 8006386:	d00b      	beq.n	80063a0 <HAL_RCC_GetSysClockFreq+0x28>
 8006388:	b10b      	cbz	r3, 800638e <HAL_RCC_GetSysClockFreq+0x16>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800638a:	483b      	ldr	r0, [pc, #236]	; (8006478 <HAL_RCC_GetSysClockFreq+0x100>)
 800638c:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800638e:	6813      	ldr	r3, [r2, #0]
 8006390:	0699      	lsls	r1, r3, #26
 8006392:	d549      	bpl.n	8006428 <HAL_RCC_GetSysClockFreq+0xb0>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006394:	6813      	ldr	r3, [r2, #0]
 8006396:	4839      	ldr	r0, [pc, #228]	; (800647c <HAL_RCC_GetSysClockFreq+0x104>)
 8006398:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800639c:	40d8      	lsrs	r0, r3
 800639e:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063a0:	6a91      	ldr	r1, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80063a2:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80063a4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80063a6:	f3c0 1005 	ubfx	r0, r0, #4, #6
{
 80063aa:	b410      	push	{r4}
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80063ac:	6b54      	ldr	r4, [r2, #52]	; 0x34

    if (pllm != 0U)
 80063ae:	b3b0      	cbz	r0, 800641e <HAL_RCC_GetSysClockFreq+0xa6>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80063b0:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80063b4:	f003 0301 	and.w	r3, r3, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063b8:	f001 0103 	and.w	r1, r1, #3
 80063bc:	ee07 0a90 	vmov	s15, r0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80063c0:	fb03 f304 	mul.w	r3, r3, r4
    {
      switch (pllsource)
 80063c4:	2901      	cmp	r1, #1
 80063c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80063ca:	ee07 3a10 	vmov	s14, r3
 80063ce:	eeba 7ae9 	vcvt.f32.s32	s14, s14, #13
      switch (pllsource)
 80063d2:	d002      	beq.n	80063da <HAL_RCC_GetSysClockFreq+0x62>
 80063d4:	d32d      	bcc.n	8006432 <HAL_RCC_GetSysClockFreq+0xba>
 80063d6:	2902      	cmp	r1, #2
 80063d8:	d028      	beq.n	800642c <HAL_RCC_GetSysClockFreq+0xb4>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80063da:	eddf 5a29 	vldr	s11, [pc, #164]	; 8006480 <HAL_RCC_GetSysClockFreq+0x108>
 80063de:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 80063e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80063e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063e8:	ee07 3a90 	vmov	s15, r3
 80063ec:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80063f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063f4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80063f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063fc:	ee27 7a26 	vmul.f32	s14, s14, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006400:	4b1c      	ldr	r3, [pc, #112]	; (8006474 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006404:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006408:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800640a:	ee07 3a90 	vmov	s15, r3
 800640e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006412:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800641a:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 800641e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006422:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8006424:	4817      	ldr	r0, [pc, #92]	; (8006484 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006426:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006428:	4814      	ldr	r0, [pc, #80]	; (800647c <HAL_RCC_GetSysClockFreq+0x104>)
}
 800642a:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800642c:	eddf 5a16 	vldr	s11, [pc, #88]	; 8006488 <HAL_RCC_GetSysClockFreq+0x110>
 8006430:	e7d5      	b.n	80063de <HAL_RCC_GetSysClockFreq+0x66>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006432:	6813      	ldr	r3, [r2, #0]
 8006434:	069b      	lsls	r3, r3, #26
 8006436:	d51a      	bpl.n	800646e <HAL_RCC_GetSysClockFreq+0xf6>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006438:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800643a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800643e:	490f      	ldr	r1, [pc, #60]	; (800647c <HAL_RCC_GetSysClockFreq+0x104>)
 8006440:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006444:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006446:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800644c:	ee06 1a90 	vmov	s13, r1
 8006450:	eef8 5ae6 	vcvt.f32.s32	s11, s13
 8006454:	ee06 3a90 	vmov	s13, r3
 8006458:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 800645c:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8006460:	ee76 7a05 	vadd.f32	s15, s12, s10
 8006464:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006468:	ee26 7a87 	vmul.f32	s14, s13, s14
 800646c:	e7c8      	b.n	8006400 <HAL_RCC_GetSysClockFreq+0x88>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800646e:	eddf 5a07 	vldr	s11, [pc, #28]	; 800648c <HAL_RCC_GetSysClockFreq+0x114>
 8006472:	e7b4      	b.n	80063de <HAL_RCC_GetSysClockFreq+0x66>
 8006474:	58024400 	.word	0x58024400
 8006478:	003d0900 	.word	0x003d0900
 800647c:	03d09000 	.word	0x03d09000
 8006480:	4a742400 	.word	0x4a742400
 8006484:	007a1200 	.word	0x007a1200
 8006488:	4af42400 	.word	0x4af42400
 800648c:	4c742400 	.word	0x4c742400

08006490 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8006490:	b178      	cbz	r0, 80064b2 <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006492:	4a8e      	ldr	r2, [pc, #568]	; (80066cc <HAL_RCC_ClockConfig+0x23c>)
 8006494:	6813      	ldr	r3, [r2, #0]
 8006496:	f003 030f 	and.w	r3, r3, #15
 800649a:	428b      	cmp	r3, r1
 800649c:	d20b      	bcs.n	80064b6 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800649e:	6813      	ldr	r3, [r2, #0]
 80064a0:	f023 030f 	bic.w	r3, r3, #15
 80064a4:	430b      	orrs	r3, r1
 80064a6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064a8:	6813      	ldr	r3, [r2, #0]
 80064aa:	f003 030f 	and.w	r3, r3, #15
 80064ae:	428b      	cmp	r3, r1
 80064b0:	d001      	beq.n	80064b6 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 80064b2:	2001      	movs	r0, #1
}
 80064b4:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80064b6:	6803      	ldr	r3, [r0, #0]
{
 80064b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80064bc:	075d      	lsls	r5, r3, #29
 80064be:	d50b      	bpl.n	80064d8 <HAL_RCC_ClockConfig+0x48>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80064c0:	4c83      	ldr	r4, [pc, #524]	; (80066d0 <HAL_RCC_ClockConfig+0x240>)
 80064c2:	6905      	ldr	r5, [r0, #16]
 80064c4:	69a2      	ldr	r2, [r4, #24]
 80064c6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80064ca:	4295      	cmp	r5, r2
 80064cc:	d904      	bls.n	80064d8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80064ce:	69a2      	ldr	r2, [r4, #24]
 80064d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80064d4:	432a      	orrs	r2, r5
 80064d6:	61a2      	str	r2, [r4, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064d8:	071c      	lsls	r4, r3, #28
 80064da:	d50b      	bpl.n	80064f4 <HAL_RCC_ClockConfig+0x64>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80064dc:	4c7c      	ldr	r4, [pc, #496]	; (80066d0 <HAL_RCC_ClockConfig+0x240>)
 80064de:	6945      	ldr	r5, [r0, #20]
 80064e0:	69e2      	ldr	r2, [r4, #28]
 80064e2:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80064e6:	4295      	cmp	r5, r2
 80064e8:	d904      	bls.n	80064f4 <HAL_RCC_ClockConfig+0x64>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80064ea:	69e2      	ldr	r2, [r4, #28]
 80064ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80064f0:	432a      	orrs	r2, r5
 80064f2:	61e2      	str	r2, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064f4:	06da      	lsls	r2, r3, #27
 80064f6:	d50b      	bpl.n	8006510 <HAL_RCC_ClockConfig+0x80>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80064f8:	4c75      	ldr	r4, [pc, #468]	; (80066d0 <HAL_RCC_ClockConfig+0x240>)
 80064fa:	6985      	ldr	r5, [r0, #24]
 80064fc:	69e2      	ldr	r2, [r4, #28]
 80064fe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8006502:	4295      	cmp	r5, r2
 8006504:	d904      	bls.n	8006510 <HAL_RCC_ClockConfig+0x80>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006506:	69e2      	ldr	r2, [r4, #28]
 8006508:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800650c:	432a      	orrs	r2, r5
 800650e:	61e2      	str	r2, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006510:	069f      	lsls	r7, r3, #26
 8006512:	d50b      	bpl.n	800652c <HAL_RCC_ClockConfig+0x9c>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006514:	4c6e      	ldr	r4, [pc, #440]	; (80066d0 <HAL_RCC_ClockConfig+0x240>)
 8006516:	69c5      	ldr	r5, [r0, #28]
 8006518:	6a22      	ldr	r2, [r4, #32]
 800651a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800651e:	4295      	cmp	r5, r2
 8006520:	d904      	bls.n	800652c <HAL_RCC_ClockConfig+0x9c>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006522:	6a22      	ldr	r2, [r4, #32]
 8006524:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006528:	432a      	orrs	r2, r5
 800652a:	6222      	str	r2, [r4, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800652c:	079e      	lsls	r6, r3, #30
 800652e:	4604      	mov	r4, r0
 8006530:	460d      	mov	r5, r1
 8006532:	f003 0201 	and.w	r2, r3, #1
 8006536:	d55d      	bpl.n	80065f4 <HAL_RCC_ClockConfig+0x164>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006538:	4e65      	ldr	r6, [pc, #404]	; (80066d0 <HAL_RCC_ClockConfig+0x240>)
 800653a:	68c0      	ldr	r0, [r0, #12]
 800653c:	69b1      	ldr	r1, [r6, #24]
 800653e:	f001 010f 	and.w	r1, r1, #15
 8006542:	4288      	cmp	r0, r1
 8006544:	d904      	bls.n	8006550 <HAL_RCC_ClockConfig+0xc0>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006546:	69b1      	ldr	r1, [r6, #24]
 8006548:	f021 010f 	bic.w	r1, r1, #15
 800654c:	4301      	orrs	r1, r0
 800654e:	61b1      	str	r1, [r6, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006550:	2a00      	cmp	r2, #0
 8006552:	d031      	beq.n	80065b8 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006554:	4a5e      	ldr	r2, [pc, #376]	; (80066d0 <HAL_RCC_ClockConfig+0x240>)
 8006556:	68a1      	ldr	r1, [r4, #8]
 8006558:	6993      	ldr	r3, [r2, #24]
 800655a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800655e:	430b      	orrs	r3, r1
 8006560:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006562:	6863      	ldr	r3, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006564:	6812      	ldr	r2, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006566:	2b02      	cmp	r3, #2
 8006568:	f000 80a2 	beq.w	80066b0 <HAL_RCC_ClockConfig+0x220>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800656c:	2b03      	cmp	r3, #3
 800656e:	f000 80a5 	beq.w	80066bc <HAL_RCC_ClockConfig+0x22c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006572:	2b01      	cmp	r3, #1
 8006574:	f000 80a6 	beq.w	80066c4 <HAL_RCC_ClockConfig+0x234>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006578:	0757      	lsls	r7, r2, #29
 800657a:	d538      	bpl.n	80065ee <HAL_RCC_ClockConfig+0x15e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800657c:	4954      	ldr	r1, [pc, #336]	; (80066d0 <HAL_RCC_ClockConfig+0x240>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800657e:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006582:	690a      	ldr	r2, [r1, #16]
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006584:	460e      	mov	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006586:	f022 0207 	bic.w	r2, r2, #7
 800658a:	4313      	orrs	r3, r2
 800658c:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 800658e:	f7fd f96b 	bl	8003868 <HAL_GetTick>
 8006592:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006594:	e005      	b.n	80065a2 <HAL_RCC_ClockConfig+0x112>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006596:	f7fd f967 	bl	8003868 <HAL_GetTick>
 800659a:	1bc0      	subs	r0, r0, r7
 800659c:	4540      	cmp	r0, r8
 800659e:	f200 808b 	bhi.w	80066b8 <HAL_RCC_ClockConfig+0x228>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065a2:	6933      	ldr	r3, [r6, #16]
 80065a4:	6862      	ldr	r2, [r4, #4]
 80065a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065aa:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80065ae:	d1f2      	bne.n	8006596 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065b0:	6823      	ldr	r3, [r4, #0]
 80065b2:	079e      	lsls	r6, r3, #30
 80065b4:	d50b      	bpl.n	80065ce <HAL_RCC_ClockConfig+0x13e>
 80065b6:	68e0      	ldr	r0, [r4, #12]
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80065b8:	4945      	ldr	r1, [pc, #276]	; (80066d0 <HAL_RCC_ClockConfig+0x240>)
 80065ba:	698a      	ldr	r2, [r1, #24]
 80065bc:	f002 020f 	and.w	r2, r2, #15
 80065c0:	4282      	cmp	r2, r0
 80065c2:	d904      	bls.n	80065ce <HAL_RCC_ClockConfig+0x13e>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065c4:	698a      	ldr	r2, [r1, #24]
 80065c6:	f022 020f 	bic.w	r2, r2, #15
 80065ca:	4310      	orrs	r0, r2
 80065cc:	6188      	str	r0, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065ce:	493f      	ldr	r1, [pc, #252]	; (80066cc <HAL_RCC_ClockConfig+0x23c>)
 80065d0:	680a      	ldr	r2, [r1, #0]
 80065d2:	f002 020f 	and.w	r2, r2, #15
 80065d6:	42aa      	cmp	r2, r5
 80065d8:	d914      	bls.n	8006604 <HAL_RCC_ClockConfig+0x174>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065da:	680a      	ldr	r2, [r1, #0]
 80065dc:	f022 020f 	bic.w	r2, r2, #15
 80065e0:	432a      	orrs	r2, r5
 80065e2:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065e4:	680a      	ldr	r2, [r1, #0]
 80065e6:	f002 020f 	and.w	r2, r2, #15
 80065ea:	42aa      	cmp	r2, r5
 80065ec:	d00a      	beq.n	8006604 <HAL_RCC_ClockConfig+0x174>
    return HAL_ERROR;
 80065ee:	2001      	movs	r0, #1
}
 80065f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065f4:	2a00      	cmp	r2, #0
 80065f6:	d1ad      	bne.n	8006554 <HAL_RCC_ClockConfig+0xc4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065f8:	4934      	ldr	r1, [pc, #208]	; (80066cc <HAL_RCC_ClockConfig+0x23c>)
 80065fa:	680a      	ldr	r2, [r1, #0]
 80065fc:	f002 020f 	and.w	r2, r2, #15
 8006600:	42aa      	cmp	r2, r5
 8006602:	d8ea      	bhi.n	80065da <HAL_RCC_ClockConfig+0x14a>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006604:	0758      	lsls	r0, r3, #29
 8006606:	d50b      	bpl.n	8006620 <HAL_RCC_ClockConfig+0x190>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006608:	4931      	ldr	r1, [pc, #196]	; (80066d0 <HAL_RCC_ClockConfig+0x240>)
 800660a:	6920      	ldr	r0, [r4, #16]
 800660c:	698a      	ldr	r2, [r1, #24]
 800660e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8006612:	4290      	cmp	r0, r2
 8006614:	d204      	bcs.n	8006620 <HAL_RCC_ClockConfig+0x190>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006616:	698a      	ldr	r2, [r1, #24]
 8006618:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800661c:	4302      	orrs	r2, r0
 800661e:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006620:	0719      	lsls	r1, r3, #28
 8006622:	d50b      	bpl.n	800663c <HAL_RCC_ClockConfig+0x1ac>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006624:	492a      	ldr	r1, [pc, #168]	; (80066d0 <HAL_RCC_ClockConfig+0x240>)
 8006626:	6960      	ldr	r0, [r4, #20]
 8006628:	69ca      	ldr	r2, [r1, #28]
 800662a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800662e:	4290      	cmp	r0, r2
 8006630:	d204      	bcs.n	800663c <HAL_RCC_ClockConfig+0x1ac>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006632:	69ca      	ldr	r2, [r1, #28]
 8006634:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006638:	4302      	orrs	r2, r0
 800663a:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800663c:	06da      	lsls	r2, r3, #27
 800663e:	d50b      	bpl.n	8006658 <HAL_RCC_ClockConfig+0x1c8>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006640:	4923      	ldr	r1, [pc, #140]	; (80066d0 <HAL_RCC_ClockConfig+0x240>)
 8006642:	69a0      	ldr	r0, [r4, #24]
 8006644:	69ca      	ldr	r2, [r1, #28]
 8006646:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800664a:	4290      	cmp	r0, r2
 800664c:	d204      	bcs.n	8006658 <HAL_RCC_ClockConfig+0x1c8>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800664e:	69ca      	ldr	r2, [r1, #28]
 8006650:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006654:	4302      	orrs	r2, r0
 8006656:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006658:	069b      	lsls	r3, r3, #26
 800665a:	d50b      	bpl.n	8006674 <HAL_RCC_ClockConfig+0x1e4>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800665c:	4a1c      	ldr	r2, [pc, #112]	; (80066d0 <HAL_RCC_ClockConfig+0x240>)
 800665e:	69e1      	ldr	r1, [r4, #28]
 8006660:	6a13      	ldr	r3, [r2, #32]
 8006662:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006666:	4299      	cmp	r1, r3
 8006668:	d204      	bcs.n	8006674 <HAL_RCC_ClockConfig+0x1e4>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800666a:	6a13      	ldr	r3, [r2, #32]
 800666c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006670:	430b      	orrs	r3, r1
 8006672:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006674:	f7ff fe80 	bl	8006378 <HAL_RCC_GetSysClockFreq>
 8006678:	4a15      	ldr	r2, [pc, #84]	; (80066d0 <HAL_RCC_ClockConfig+0x240>)
 800667a:	4916      	ldr	r1, [pc, #88]	; (80066d4 <HAL_RCC_ClockConfig+0x244>)
 800667c:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800667e:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006680:	f3c3 2303 	ubfx	r3, r3, #8, #4
  halstatus = HAL_InitTick (uwTickPrio);
 8006684:	4d14      	ldr	r5, [pc, #80]	; (80066d8 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006686:	f002 020f 	and.w	r2, r2, #15
 800668a:	4c14      	ldr	r4, [pc, #80]	; (80066dc <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800668c:	5ccb      	ldrb	r3, [r1, r3]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800668e:	5c8a      	ldrb	r2, [r1, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006690:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = common_system_clock;
 8006694:	4912      	ldr	r1, [pc, #72]	; (80066e0 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006696:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800669a:	fa20 f303 	lsr.w	r3, r0, r3
  halstatus = HAL_InitTick (uwTickPrio);
 800669e:	6828      	ldr	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80066a0:	fa23 f202 	lsr.w	r2, r3, r2
  SystemCoreClock = common_system_clock;
 80066a4:	600b      	str	r3, [r1, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80066a6:	6022      	str	r2, [r4, #0]
}
 80066a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 80066ac:	f7fd b878 	b.w	80037a0 <HAL_InitTick>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80066b0:	0390      	lsls	r0, r2, #14
 80066b2:	f53f af63 	bmi.w	800657c <HAL_RCC_ClockConfig+0xec>
 80066b6:	e79a      	b.n	80065ee <HAL_RCC_ClockConfig+0x15e>
            return HAL_TIMEOUT;
 80066b8:	2003      	movs	r0, #3
 80066ba:	e799      	b.n	80065f0 <HAL_RCC_ClockConfig+0x160>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066bc:	0191      	lsls	r1, r2, #6
 80066be:	f53f af5d 	bmi.w	800657c <HAL_RCC_ClockConfig+0xec>
 80066c2:	e794      	b.n	80065ee <HAL_RCC_ClockConfig+0x15e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066c4:	05d2      	lsls	r2, r2, #23
 80066c6:	f53f af59 	bmi.w	800657c <HAL_RCC_ClockConfig+0xec>
 80066ca:	e790      	b.n	80065ee <HAL_RCC_ClockConfig+0x15e>
 80066cc:	52002000 	.word	0x52002000
 80066d0:	58024400 	.word	0x58024400
 80066d4:	0801ac60 	.word	0x0801ac60
 80066d8:	24000204 	.word	0x24000204
 80066dc:	240001fc 	.word	0x240001fc
 80066e0:	240001f8 	.word	0x240001f8

080066e4 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066e4:	4a49      	ldr	r2, [pc, #292]	; (800680c <HAL_RCC_GetHCLKFreq+0x128>)
 80066e6:	6913      	ldr	r3, [r2, #16]
 80066e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066ec:	2b10      	cmp	r3, #16
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066ee:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066f0:	d064      	beq.n	80067bc <HAL_RCC_GetHCLKFreq+0xd8>
 80066f2:	2b18      	cmp	r3, #24
 80066f4:	d022      	beq.n	800673c <HAL_RCC_GetHCLKFreq+0x58>
 80066f6:	b1bb      	cbz	r3, 8006728 <HAL_RCC_GetHCLKFreq+0x44>
    sysclockfreq = CSI_VALUE;
 80066f8:	4b45      	ldr	r3, [pc, #276]	; (8006810 <HAL_RCC_GetHCLKFreq+0x12c>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80066fa:	4944      	ldr	r1, [pc, #272]	; (800680c <HAL_RCC_GetHCLKFreq+0x128>)
 80066fc:	4845      	ldr	r0, [pc, #276]	; (8006814 <HAL_RCC_GetHCLKFreq+0x130>)
 80066fe:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006700:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006702:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006706:	4c44      	ldr	r4, [pc, #272]	; (8006818 <HAL_RCC_GetHCLKFreq+0x134>)
 8006708:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800670c:	4d43      	ldr	r5, [pc, #268]	; (800681c <HAL_RCC_GetHCLKFreq+0x138>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800670e:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006710:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006712:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006716:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800671a:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800671c:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8006720:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006722:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8006724:	bc30      	pop	{r4, r5}
 8006726:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006728:	6813      	ldr	r3, [r2, #0]
 800672a:	0699      	lsls	r1, r3, #26
 800672c:	d548      	bpl.n	80067c0 <HAL_RCC_GetHCLKFreq+0xdc>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800672e:	6813      	ldr	r3, [r2, #0]
 8006730:	4a3b      	ldr	r2, [pc, #236]	; (8006820 <HAL_RCC_GetHCLKFreq+0x13c>)
 8006732:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006736:	fa22 f303 	lsr.w	r3, r2, r3
 800673a:	e7de      	b.n	80066fa <HAL_RCC_GetHCLKFreq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800673c:	6a90      	ldr	r0, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800673e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006740:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006742:	f3c3 1305 	ubfx	r3, r3, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006746:	6b54      	ldr	r4, [r2, #52]	; 0x34
    if (pllm != 0U)
 8006748:	2b00      	cmp	r3, #0
 800674a:	d0d6      	beq.n	80066fa <HAL_RCC_GetHCLKFreq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800674c:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006750:	f001 0101 	and.w	r1, r1, #1
 8006754:	ee07 3a90 	vmov	s15, r3
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006758:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800675c:	fb01 f304 	mul.w	r3, r1, r4
 8006760:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 8006764:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006766:	ee07 3a90 	vmov	s15, r3
 800676a:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 800676e:	d002      	beq.n	8006776 <HAL_RCC_GetHCLKFreq+0x92>
 8006770:	d32b      	bcc.n	80067ca <HAL_RCC_GetHCLKFreq+0xe6>
 8006772:	2802      	cmp	r0, #2
 8006774:	d026      	beq.n	80067c4 <HAL_RCC_GetHCLKFreq+0xe0>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006776:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006824 <HAL_RCC_GetHCLKFreq+0x140>
 800677a:	ee87 6a26 	vdiv.f32	s12, s14, s13
 800677e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006784:	ee07 3a10 	vmov	s14, r3
 8006788:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800678c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006790:	ee37 7a25 	vadd.f32	s14, s14, s11
 8006794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006798:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800679c:	4b1b      	ldr	r3, [pc, #108]	; (800680c <HAL_RCC_GetHCLKFreq+0x128>)
 800679e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80067a4:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80067a6:	ee07 3a10 	vmov	s14, r3
 80067aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80067ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80067b2:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80067b6:	ee17 3a90 	vmov	r3, s15
 80067ba:	e79e      	b.n	80066fa <HAL_RCC_GetHCLKFreq+0x16>
    sysclockfreq = HSE_VALUE;
 80067bc:	4b1a      	ldr	r3, [pc, #104]	; (8006828 <HAL_RCC_GetHCLKFreq+0x144>)
 80067be:	e79c      	b.n	80066fa <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80067c0:	4b17      	ldr	r3, [pc, #92]	; (8006820 <HAL_RCC_GetHCLKFreq+0x13c>)
 80067c2:	e79a      	b.n	80066fa <HAL_RCC_GetHCLKFreq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067c4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800682c <HAL_RCC_GetHCLKFreq+0x148>
 80067c8:	e7d7      	b.n	800677a <HAL_RCC_GetHCLKFreq+0x96>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067ca:	6813      	ldr	r3, [r2, #0]
 80067cc:	069b      	lsls	r3, r3, #26
 80067ce:	d51a      	bpl.n	8006806 <HAL_RCC_GetHCLKFreq+0x122>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80067d0:	6810      	ldr	r0, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067d2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80067d6:	4912      	ldr	r1, [pc, #72]	; (8006820 <HAL_RCC_GetHCLKFreq+0x13c>)
 80067d8:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80067de:	40c1      	lsrs	r1, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067e4:	ee07 1a10 	vmov	s14, r1
 80067e8:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80067ec:	ee07 3a10 	vmov	s14, r3
 80067f0:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80067f4:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80067f8:	ee76 6a05 	vadd.f32	s13, s12, s10
 80067fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006804:	e7ca      	b.n	800679c <HAL_RCC_GetHCLKFreq+0xb8>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006806:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8006830 <HAL_RCC_GetHCLKFreq+0x14c>
 800680a:	e7b6      	b.n	800677a <HAL_RCC_GetHCLKFreq+0x96>
 800680c:	58024400 	.word	0x58024400
 8006810:	003d0900 	.word	0x003d0900
 8006814:	0801ac60 	.word	0x0801ac60
 8006818:	240001fc 	.word	0x240001fc
 800681c:	240001f8 	.word	0x240001f8
 8006820:	03d09000 	.word	0x03d09000
 8006824:	4a742400 	.word	0x4a742400
 8006828:	007a1200 	.word	0x007a1200
 800682c:	4af42400 	.word	0x4af42400
 8006830:	4c742400 	.word	0x4c742400

08006834 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006834:	494d      	ldr	r1, [pc, #308]	; (800696c <HAL_RCC_GetPCLK1Freq+0x138>)
 8006836:	690b      	ldr	r3, [r1, #16]
 8006838:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800683c:	2b10      	cmp	r3, #16
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800683e:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006840:	d06b      	beq.n	800691a <HAL_RCC_GetPCLK1Freq+0xe6>
 8006842:	2b18      	cmp	r3, #24
 8006844:	d029      	beq.n	800689a <HAL_RCC_GetPCLK1Freq+0x66>
 8006846:	b1fb      	cbz	r3, 8006888 <HAL_RCC_GetPCLK1Freq+0x54>
    sysclockfreq = CSI_VALUE;
 8006848:	4a49      	ldr	r2, [pc, #292]	; (8006970 <HAL_RCC_GetPCLK1Freq+0x13c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800684a:	4848      	ldr	r0, [pc, #288]	; (800696c <HAL_RCC_GetPCLK1Freq+0x138>)
 800684c:	4949      	ldr	r1, [pc, #292]	; (8006974 <HAL_RCC_GetPCLK1Freq+0x140>)
 800684e:	6984      	ldr	r4, [r0, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006850:	6983      	ldr	r3, [r0, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006852:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 8006856:	4d48      	ldr	r5, [pc, #288]	; (8006978 <HAL_RCC_GetPCLK1Freq+0x144>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006858:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800685c:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800685e:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006860:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006864:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006868:	40e2      	lsrs	r2, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800686a:	4c44      	ldr	r4, [pc, #272]	; (800697c <HAL_RCC_GetPCLK1Freq+0x148>)
 800686c:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 8006870:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006872:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006874:	69c2      	ldr	r2, [r0, #28]
 8006876:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800687a:	5c88      	ldrb	r0, [r1, r2]
 800687c:	f000 001f 	and.w	r0, r0, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006880:	bc30      	pop	{r4, r5}
 8006882:	fa23 f000 	lsr.w	r0, r3, r0
 8006886:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006888:	680b      	ldr	r3, [r1, #0]
 800688a:	069a      	lsls	r2, r3, #26
 800688c:	d547      	bpl.n	800691e <HAL_RCC_GetPCLK1Freq+0xea>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800688e:	680b      	ldr	r3, [r1, #0]
 8006890:	4a3b      	ldr	r2, [pc, #236]	; (8006980 <HAL_RCC_GetPCLK1Freq+0x14c>)
 8006892:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006896:	40da      	lsrs	r2, r3
 8006898:	e7d7      	b.n	800684a <HAL_RCC_GetPCLK1Freq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800689a:	6a88      	ldr	r0, [r1, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800689c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800689e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80068a0:	f3c2 1205 	ubfx	r2, r2, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80068a4:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    if (pllm != 0U)
 80068a6:	2a00      	cmp	r2, #0
 80068a8:	d0cf      	beq.n	800684a <HAL_RCC_GetPCLK1Freq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80068aa:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80068b6:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80068ba:	fb03 f304 	mul.w	r3, r3, r4
 80068be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 80068c2:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80068c4:	ee07 3a90 	vmov	s15, r3
 80068c8:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 80068cc:	d002      	beq.n	80068d4 <HAL_RCC_GetPCLK1Freq+0xa0>
 80068ce:	d32b      	bcc.n	8006928 <HAL_RCC_GetPCLK1Freq+0xf4>
 80068d0:	2802      	cmp	r0, #2
 80068d2:	d026      	beq.n	8006922 <HAL_RCC_GetPCLK1Freq+0xee>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80068d4:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006984 <HAL_RCC_GetPCLK1Freq+0x150>
 80068d8:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80068dc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80068de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068e2:	ee07 3a10 	vmov	s14, r3
 80068e6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80068ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80068ee:	ee37 7a25 	vadd.f32	s14, s14, s11
 80068f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068f6:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80068fa:	4b1c      	ldr	r3, [pc, #112]	; (800696c <HAL_RCC_GetPCLK1Freq+0x138>)
 80068fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fe:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006902:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006904:	ee07 3a10 	vmov	s14, r3
 8006908:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800690c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006910:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8006914:	ee17 2a90 	vmov	r2, s15
 8006918:	e797      	b.n	800684a <HAL_RCC_GetPCLK1Freq+0x16>
    sysclockfreq = HSE_VALUE;
 800691a:	4a1b      	ldr	r2, [pc, #108]	; (8006988 <HAL_RCC_GetPCLK1Freq+0x154>)
 800691c:	e795      	b.n	800684a <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800691e:	4a18      	ldr	r2, [pc, #96]	; (8006980 <HAL_RCC_GetPCLK1Freq+0x14c>)
 8006920:	e793      	b.n	800684a <HAL_RCC_GetPCLK1Freq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006922:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800698c <HAL_RCC_GetPCLK1Freq+0x158>
 8006926:	e7d7      	b.n	80068d8 <HAL_RCC_GetPCLK1Freq+0xa4>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006928:	680b      	ldr	r3, [r1, #0]
 800692a:	069b      	lsls	r3, r3, #26
 800692c:	d51a      	bpl.n	8006964 <HAL_RCC_GetPCLK1Freq+0x130>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800692e:	6808      	ldr	r0, [r1, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006930:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006934:	4a12      	ldr	r2, [pc, #72]	; (8006980 <HAL_RCC_GetPCLK1Freq+0x14c>)
 8006936:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800693a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800693c:	40c2      	lsrs	r2, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800693e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006942:	ee07 2a10 	vmov	s14, r2
 8006946:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800694a:	ee07 3a10 	vmov	s14, r3
 800694e:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8006952:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8006956:	ee76 6a05 	vadd.f32	s13, s12, s10
 800695a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800695e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006962:	e7ca      	b.n	80068fa <HAL_RCC_GetPCLK1Freq+0xc6>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006964:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8006990 <HAL_RCC_GetPCLK1Freq+0x15c>
 8006968:	e7b6      	b.n	80068d8 <HAL_RCC_GetPCLK1Freq+0xa4>
 800696a:	bf00      	nop
 800696c:	58024400 	.word	0x58024400
 8006970:	003d0900 	.word	0x003d0900
 8006974:	0801ac60 	.word	0x0801ac60
 8006978:	240001f8 	.word	0x240001f8
 800697c:	240001fc 	.word	0x240001fc
 8006980:	03d09000 	.word	0x03d09000
 8006984:	4a742400 	.word	0x4a742400
 8006988:	007a1200 	.word	0x007a1200
 800698c:	4af42400 	.word	0x4af42400
 8006990:	4c742400 	.word	0x4c742400

08006994 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006994:	494d      	ldr	r1, [pc, #308]	; (8006acc <HAL_RCC_GetPCLK2Freq+0x138>)
 8006996:	690b      	ldr	r3, [r1, #16]
 8006998:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800699c:	2b10      	cmp	r3, #16
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800699e:	b430      	push	{r4, r5}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069a0:	d06b      	beq.n	8006a7a <HAL_RCC_GetPCLK2Freq+0xe6>
 80069a2:	2b18      	cmp	r3, #24
 80069a4:	d029      	beq.n	80069fa <HAL_RCC_GetPCLK2Freq+0x66>
 80069a6:	b1fb      	cbz	r3, 80069e8 <HAL_RCC_GetPCLK2Freq+0x54>
    sysclockfreq = CSI_VALUE;
 80069a8:	4a49      	ldr	r2, [pc, #292]	; (8006ad0 <HAL_RCC_GetPCLK2Freq+0x13c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80069aa:	4848      	ldr	r0, [pc, #288]	; (8006acc <HAL_RCC_GetPCLK2Freq+0x138>)
 80069ac:	4949      	ldr	r1, [pc, #292]	; (8006ad4 <HAL_RCC_GetPCLK2Freq+0x140>)
 80069ae:	6984      	ldr	r4, [r0, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069b0:	6983      	ldr	r3, [r0, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80069b2:	f3c4 2403 	ubfx	r4, r4, #8, #4
  SystemCoreClock = common_system_clock;
 80069b6:	4d48      	ldr	r5, [pc, #288]	; (8006ad8 <HAL_RCC_GetPCLK2Freq+0x144>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069b8:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80069bc:	5d0c      	ldrb	r4, [r1, r4]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069be:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80069c0:	f004 041f 	and.w	r4, r4, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069c4:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80069c8:	40e2      	lsrs	r2, r4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069ca:	4c44      	ldr	r4, [pc, #272]	; (8006adc <HAL_RCC_GetPCLK2Freq+0x148>)
 80069cc:	fa22 f303 	lsr.w	r3, r2, r3
  SystemCoreClock = common_system_clock;
 80069d0:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80069d2:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80069d4:	69c2      	ldr	r2, [r0, #28]
 80069d6:	f3c2 2202 	ubfx	r2, r2, #8, #3
 80069da:	5c88      	ldrb	r0, [r1, r2]
 80069dc:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80069e0:	bc30      	pop	{r4, r5}
 80069e2:	fa23 f000 	lsr.w	r0, r3, r0
 80069e6:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069e8:	680b      	ldr	r3, [r1, #0]
 80069ea:	069a      	lsls	r2, r3, #26
 80069ec:	d547      	bpl.n	8006a7e <HAL_RCC_GetPCLK2Freq+0xea>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069ee:	680b      	ldr	r3, [r1, #0]
 80069f0:	4a3b      	ldr	r2, [pc, #236]	; (8006ae0 <HAL_RCC_GetPCLK2Freq+0x14c>)
 80069f2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80069f6:	40da      	lsrs	r2, r3
 80069f8:	e7d7      	b.n	80069aa <HAL_RCC_GetPCLK2Freq+0x16>
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069fa:	6a88      	ldr	r0, [r1, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80069fc:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80069fe:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006a00:	f3c2 1205 	ubfx	r2, r2, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006a04:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    if (pllm != 0U)
 8006a06:	2a00      	cmp	r2, #0
 8006a08:	d0cf      	beq.n	80069aa <HAL_RCC_GetPCLK2Freq+0x16>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006a0a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a16:	f000 0003 	and.w	r0, r0, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006a1a:	fb03 f304 	mul.w	r3, r3, r4
 8006a1e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
      switch (pllsource)
 8006a22:	2801      	cmp	r0, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006a24:	ee07 3a90 	vmov	s15, r3
 8006a28:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
      switch (pllsource)
 8006a2c:	d002      	beq.n	8006a34 <HAL_RCC_GetPCLK2Freq+0xa0>
 8006a2e:	d32b      	bcc.n	8006a88 <HAL_RCC_GetPCLK2Freq+0xf4>
 8006a30:	2802      	cmp	r0, #2
 8006a32:	d026      	beq.n	8006a82 <HAL_RCC_GetPCLK2Freq+0xee>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a34:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006ae4 <HAL_RCC_GetPCLK2Freq+0x150>
 8006a38:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8006a3c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8006a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a42:	ee07 3a10 	vmov	s14, r3
 8006a46:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006a4a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006a4e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8006a52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a56:	ee67 7a86 	vmul.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006a5a:	4b1c      	ldr	r3, [pc, #112]	; (8006acc <HAL_RCC_GetPCLK2Freq+0x138>)
 8006a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006a62:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006a64:	ee07 3a10 	vmov	s14, r3
 8006a68:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006a6c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006a70:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8006a74:	ee17 2a90 	vmov	r2, s15
 8006a78:	e797      	b.n	80069aa <HAL_RCC_GetPCLK2Freq+0x16>
    sysclockfreq = HSE_VALUE;
 8006a7a:	4a1b      	ldr	r2, [pc, #108]	; (8006ae8 <HAL_RCC_GetPCLK2Freq+0x154>)
 8006a7c:	e795      	b.n	80069aa <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006a7e:	4a18      	ldr	r2, [pc, #96]	; (8006ae0 <HAL_RCC_GetPCLK2Freq+0x14c>)
 8006a80:	e793      	b.n	80069aa <HAL_RCC_GetPCLK2Freq+0x16>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a82:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8006aec <HAL_RCC_GetPCLK2Freq+0x158>
 8006a86:	e7d7      	b.n	8006a38 <HAL_RCC_GetPCLK2Freq+0xa4>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a88:	680b      	ldr	r3, [r1, #0]
 8006a8a:	069b      	lsls	r3, r3, #26
 8006a8c:	d51a      	bpl.n	8006ac4 <HAL_RCC_GetPCLK2Freq+0x130>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a8e:	6808      	ldr	r0, [r1, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a90:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a94:	4a12      	ldr	r2, [pc, #72]	; (8006ae0 <HAL_RCC_GetPCLK2Freq+0x14c>)
 8006a96:	f3c0 00c1 	ubfx	r0, r0, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a9a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a9c:	40c2      	lsrs	r2, r0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa2:	ee07 2a10 	vmov	s14, r2
 8006aa6:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8006aaa:	ee07 3a10 	vmov	s14, r3
 8006aae:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8006ab2:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8006ab6:	ee76 6a05 	vadd.f32	s13, s12, s10
 8006aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ac2:	e7ca      	b.n	8006a5a <HAL_RCC_GetPCLK2Freq+0xc6>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ac4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8006af0 <HAL_RCC_GetPCLK2Freq+0x15c>
 8006ac8:	e7b6      	b.n	8006a38 <HAL_RCC_GetPCLK2Freq+0xa4>
 8006aca:	bf00      	nop
 8006acc:	58024400 	.word	0x58024400
 8006ad0:	003d0900 	.word	0x003d0900
 8006ad4:	0801ac60 	.word	0x0801ac60
 8006ad8:	240001f8 	.word	0x240001f8
 8006adc:	240001fc 	.word	0x240001fc
 8006ae0:	03d09000 	.word	0x03d09000
 8006ae4:	4a742400 	.word	0x4a742400
 8006ae8:	007a1200 	.word	0x007a1200
 8006aec:	4af42400 	.word	0x4af42400
 8006af0:	4c742400 	.word	0x4c742400

08006af4 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006af4:	4a3b      	ldr	r2, [pc, #236]	; (8006be4 <RCCEx_PLL2_Config+0xf0>)
{
 8006af6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006af8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006afa:	f003 0303 	and.w	r3, r3, #3
 8006afe:	2b03      	cmp	r3, #3
 8006b00:	d067      	beq.n	8006bd2 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006b02:	6813      	ldr	r3, [r2, #0]
 8006b04:	460f      	mov	r7, r1
 8006b06:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b08:	4614      	mov	r4, r2
    __HAL_RCC_PLL2_DISABLE();
 8006b0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b0e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006b10:	f7fc feaa 	bl	8003868 <HAL_GetTick>
 8006b14:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b16:	e004      	b.n	8006b22 <RCCEx_PLL2_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006b18:	f7fc fea6 	bl	8003868 <HAL_GetTick>
 8006b1c:	1b80      	subs	r0, r0, r6
 8006b1e:	2802      	cmp	r0, #2
 8006b20:	d859      	bhi.n	8006bd6 <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b22:	6823      	ldr	r3, [r4, #0]
 8006b24:	011a      	lsls	r2, r3, #4
 8006b26:	d4f7      	bmi.n	8006b18 <RCCEx_PLL2_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006b28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006b2a:	682a      	ldr	r2, [r5, #0]
 8006b2c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006b30:	492d      	ldr	r1, [pc, #180]	; (8006be8 <RCCEx_PLL2_Config+0xf4>)
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006b32:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8006b36:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b38:	686e      	ldr	r6, [r5, #4]
 8006b3a:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8006b3e:	3e01      	subs	r6, #1
 8006b40:	1e50      	subs	r0, r2, #1
 8006b42:	3b01      	subs	r3, #1
 8006b44:	692a      	ldr	r2, [r5, #16]
 8006b46:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8006b4a:	025b      	lsls	r3, r3, #9
 8006b4c:	0400      	lsls	r0, r0, #16
 8006b4e:	3a01      	subs	r2, #1
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8006b56:	0612      	lsls	r2, r2, #24
 8006b58:	4303      	orrs	r3, r0
 8006b5a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006b5e:	4333      	orrs	r3, r6
 8006b60:	4313      	orrs	r3, r2
 8006b62:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006b64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006b66:	696a      	ldr	r2, [r5, #20]
 8006b68:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006b70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006b72:	69aa      	ldr	r2, [r5, #24]
 8006b74:	f023 0320 	bic.w	r3, r3, #32
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006b7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006b7e:	f023 0310 	bic.w	r3, r3, #16
 8006b82:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006b84:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006b86:	69eb      	ldr	r3, [r5, #28]
 8006b88:	4011      	ands	r1, r2
 8006b8a:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8006b8e:	63e1      	str	r1, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006b90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006b92:	f043 0310 	orr.w	r3, r3, #16
 8006b96:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006b98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8006b9a:	b1f7      	cbz	r7, 8006bda <RCCEx_PLL2_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006b9c:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006b9e:	bf0c      	ite	eq
 8006ba0:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006ba4:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8006ba8:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006baa:	4b0e      	ldr	r3, [pc, #56]	; (8006be4 <RCCEx_PLL2_Config+0xf0>)
 8006bac:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006bae:	461c      	mov	r4, r3
    __HAL_RCC_PLL2_ENABLE();
 8006bb0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006bb4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8006bb6:	f7fc fe57 	bl	8003868 <HAL_GetTick>
 8006bba:	4605      	mov	r5, r0
 8006bbc:	e004      	b.n	8006bc8 <RCCEx_PLL2_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006bbe:	f7fc fe53 	bl	8003868 <HAL_GetTick>
 8006bc2:	1b40      	subs	r0, r0, r5
 8006bc4:	2802      	cmp	r0, #2
 8006bc6:	d806      	bhi.n	8006bd6 <RCCEx_PLL2_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006bc8:	6823      	ldr	r3, [r4, #0]
 8006bca:	011b      	lsls	r3, r3, #4
 8006bcc:	d5f7      	bpl.n	8006bbe <RCCEx_PLL2_Config+0xca>
    }

  }


  return status;
 8006bce:	2000      	movs	r0, #0
}
 8006bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8006bd2:	2001      	movs	r0, #1
}
 8006bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8006bd6:	2003      	movs	r0, #3
}
 8006bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006bda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bde:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006be0:	e7e3      	b.n	8006baa <RCCEx_PLL2_Config+0xb6>
 8006be2:	bf00      	nop
 8006be4:	58024400 	.word	0x58024400
 8006be8:	ffff0007 	.word	0xffff0007

08006bec <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006bec:	4a3b      	ldr	r2, [pc, #236]	; (8006cdc <RCCEx_PLL3_Config+0xf0>)
{
 8006bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006bf0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006bf2:	f003 0303 	and.w	r3, r3, #3
 8006bf6:	2b03      	cmp	r3, #3
 8006bf8:	d067      	beq.n	8006cca <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006bfa:	6813      	ldr	r3, [r2, #0]
 8006bfc:	460f      	mov	r7, r1
 8006bfe:	4605      	mov	r5, r0

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006c00:	4614      	mov	r4, r2
    __HAL_RCC_PLL3_DISABLE();
 8006c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c06:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006c08:	f7fc fe2e 	bl	8003868 <HAL_GetTick>
 8006c0c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006c0e:	e004      	b.n	8006c1a <RCCEx_PLL3_Config+0x2e>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006c10:	f7fc fe2a 	bl	8003868 <HAL_GetTick>
 8006c14:	1b80      	subs	r0, r0, r6
 8006c16:	2802      	cmp	r0, #2
 8006c18:	d859      	bhi.n	8006cce <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006c1a:	6823      	ldr	r3, [r4, #0]
 8006c1c:	009a      	lsls	r2, r3, #2
 8006c1e:	d4f7      	bmi.n	8006c10 <RCCEx_PLL3_Config+0x24>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006c20:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006c22:	682a      	ldr	r2, [r5, #0]
 8006c24:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006c28:	492d      	ldr	r1, [pc, #180]	; (8006ce0 <RCCEx_PLL3_Config+0xf4>)
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006c2a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8006c2e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c30:	686e      	ldr	r6, [r5, #4]
 8006c32:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8006c36:	3e01      	subs	r6, #1
 8006c38:	1e50      	subs	r0, r2, #1
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	692a      	ldr	r2, [r5, #16]
 8006c3e:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8006c42:	025b      	lsls	r3, r3, #9
 8006c44:	0400      	lsls	r0, r0, #16
 8006c46:	3a01      	subs	r2, #1
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	f400 00fe 	and.w	r0, r0, #8323072	; 0x7f0000
 8006c4e:	0612      	lsls	r2, r2, #24
 8006c50:	4303      	orrs	r3, r0
 8006c52:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006c56:	4333      	orrs	r3, r6
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006c5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006c5e:	696a      	ldr	r2, [r5, #20]
 8006c60:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006c64:	4313      	orrs	r3, r2
 8006c66:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006c68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006c6a:	69aa      	ldr	r2, [r5, #24]
 8006c6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c70:	4313      	orrs	r3, r2
 8006c72:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006c74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006c76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c7a:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006c7c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006c7e:	69eb      	ldr	r3, [r5, #28]
 8006c80:	4011      	ands	r1, r2
 8006c82:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8006c86:	6461      	str	r1, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006c88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c8e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006c90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8006c92:	b1f7      	cbz	r7, 8006cd2 <RCCEx_PLL3_Config+0xe6>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006c94:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006c96:	bf0c      	ite	eq
 8006c98:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006c9c:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8006ca0:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006ca2:	4b0e      	ldr	r3, [pc, #56]	; (8006cdc <RCCEx_PLL3_Config+0xf0>)
 8006ca4:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ca6:	461c      	mov	r4, r3
    __HAL_RCC_PLL3_ENABLE();
 8006ca8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006cac:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8006cae:	f7fc fddb 	bl	8003868 <HAL_GetTick>
 8006cb2:	4605      	mov	r5, r0
 8006cb4:	e004      	b.n	8006cc0 <RCCEx_PLL3_Config+0xd4>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006cb6:	f7fc fdd7 	bl	8003868 <HAL_GetTick>
 8006cba:	1b40      	subs	r0, r0, r5
 8006cbc:	2802      	cmp	r0, #2
 8006cbe:	d806      	bhi.n	8006cce <RCCEx_PLL3_Config+0xe2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006cc0:	6823      	ldr	r3, [r4, #0]
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	d5f7      	bpl.n	8006cb6 <RCCEx_PLL3_Config+0xca>
    }

  }


  return status;
 8006cc6:	2000      	movs	r0, #0
}
 8006cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8006cca:	2001      	movs	r0, #1
}
 8006ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8006cce:	2003      	movs	r0, #3
}
 8006cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006cd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006cd6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006cd8:	e7e3      	b.n	8006ca2 <RCCEx_PLL3_Config+0xb6>
 8006cda:	bf00      	nop
 8006cdc:	58024400 	.word	0x58024400
 8006ce0:	ffff0007 	.word	0xffff0007

08006ce4 <HAL_RCCEx_PeriphCLKConfig>:
{
 8006ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ce8:	6803      	ldr	r3, [r0, #0]
{
 8006cea:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006cec:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 8006cf0:	d015      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x3a>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8006cf2:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8006cf4:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8006cf8:	f000 8442 	beq.w	8007580 <HAL_RCCEx_PeriphCLKConfig+0x89c>
 8006cfc:	f240 84f3 	bls.w	80076e6 <HAL_RCCEx_PeriphCLKConfig+0xa02>
 8006d00:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8006d04:	f000 8455 	beq.w	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 8006d08:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8006d0c:	f040 8504 	bne.w	8007718 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006d10:	48a2      	ldr	r0, [pc, #648]	; (8006f9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006d12:	2600      	movs	r6, #0
 8006d14:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8006d16:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	6502      	str	r2, [r0, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006d1e:	05dd      	lsls	r5, r3, #23
 8006d20:	d50a      	bpl.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x54>
    switch(PeriphClkInit->Sai1ClockSelection)
 8006d22:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006d24:	2a04      	cmp	r2, #4
 8006d26:	d806      	bhi.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006d28:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006d2c:	03d903d2 	.word	0x03d903d2
 8006d30:	039303c7 	.word	0x039303c7
 8006d34:	0393      	.short	0x0393
      ret = HAL_ERROR;
 8006d36:	2601      	movs	r6, #1
 8006d38:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006d3a:	0598      	lsls	r0, r3, #22
 8006d3c:	d51b      	bpl.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x92>
    switch(PeriphClkInit->Sai23ClockSelection)
 8006d3e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006d40:	2a80      	cmp	r2, #128	; 0x80
 8006d42:	f000 83f5 	beq.w	8007530 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8006d46:	f200 84c3 	bhi.w	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>
 8006d4a:	2a00      	cmp	r2, #0
 8006d4c:	f000 8437 	beq.w	80075be <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8006d50:	2a40      	cmp	r2, #64	; 0x40
 8006d52:	f040 84c4 	bne.w	80076de <HAL_RCCEx_PeriphCLKConfig+0x9fa>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d56:	2100      	movs	r1, #0
 8006d58:	1d20      	adds	r0, r4, #4
 8006d5a:	f7ff fecb 	bl	8006af4 <RCCEx_PLL2_Config>
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006d62:	2d00      	cmp	r5, #0
 8006d64:	f040 83ee 	bne.w	8007544 <HAL_RCCEx_PeriphCLKConfig+0x860>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006d68:	498c      	ldr	r1, [pc, #560]	; (8006f9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006d6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d6c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8006d6e:	f422 72e0 	bic.w	r2, r2, #448	; 0x1c0
 8006d72:	4302      	orrs	r2, r0
 8006d74:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006d76:	0559      	lsls	r1, r3, #21
 8006d78:	d51f      	bpl.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai4AClockSelection)
 8006d7a:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 8006d7e:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8006d82:	f000 83c9 	beq.w	8007518 <HAL_RCCEx_PeriphCLKConfig+0x834>
 8006d86:	f200 848b 	bhi.w	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
 8006d8a:	2a00      	cmp	r2, #0
 8006d8c:	f000 8404 	beq.w	8007598 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8006d90:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8006d94:	f040 848c 	bne.w	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d98:	2100      	movs	r1, #0
 8006d9a:	1d20      	adds	r0, r4, #4
 8006d9c:	f7ff feaa 	bl	8006af4 <RCCEx_PLL2_Config>
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006da4:	2d00      	cmp	r5, #0
 8006da6:	f040 83c1 	bne.w	800752c <HAL_RCCEx_PeriphCLKConfig+0x848>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006daa:	497c      	ldr	r1, [pc, #496]	; (8006f9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006dac:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8006db0:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8006db2:	f422 0260 	bic.w	r2, r2, #14680064	; 0xe00000
 8006db6:	4302      	orrs	r2, r0
 8006db8:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006dba:	051a      	lsls	r2, r3, #20
 8006dbc:	d51f      	bpl.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch(PeriphClkInit->Sai4BClockSelection)
 8006dbe:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 8006dc2:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 8006dc6:	f000 83c3 	beq.w	8007550 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 8006dca:	f200 8475 	bhi.w	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006dce:	2a00      	cmp	r2, #0
 8006dd0:	f000 83fc 	beq.w	80075cc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8006dd4:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8006dd8:	f040 8476 	bne.w	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ddc:	2100      	movs	r1, #0
 8006dde:	1d20      	adds	r0, r4, #4
 8006de0:	f7ff fe88 	bl	8006af4 <RCCEx_PLL2_Config>
 8006de4:	6823      	ldr	r3, [r4, #0]
 8006de6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006de8:	2d00      	cmp	r5, #0
 8006dea:	f040 83bb 	bne.w	8007564 <HAL_RCCEx_PeriphCLKConfig+0x880>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006dee:	496b      	ldr	r1, [pc, #428]	; (8006f9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006df0:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8006df4:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8006df6:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8006dfa:	4302      	orrs	r2, r0
 8006dfc:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006dfe:	019f      	lsls	r7, r3, #6
 8006e00:	d50d      	bpl.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    switch(PeriphClkInit->QspiClockSelection)
 8006e02:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006e04:	2a10      	cmp	r2, #16
 8006e06:	f000 8301 	beq.w	800740c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006e0a:	f240 8480 	bls.w	800770e <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8006e0e:	2a20      	cmp	r2, #32
 8006e10:	f000 833e 	beq.w	8007490 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8006e14:	2a30      	cmp	r2, #48	; 0x30
 8006e16:	f000 82fe 	beq.w	8007416 <HAL_RCCEx_PeriphCLKConfig+0x732>
      ret = HAL_ERROR;
 8006e1a:	2601      	movs	r6, #1
 8006e1c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006e1e:	04d8      	lsls	r0, r3, #19
 8006e20:	d51d      	bpl.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x17a>
    switch(PeriphClkInit->Spi123ClockSelection)
 8006e22:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8006e24:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006e28:	f000 839e 	beq.w	8007568 <HAL_RCCEx_PeriphCLKConfig+0x884>
 8006e2c:	f200 8463 	bhi.w	80076f6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006e30:	2a00      	cmp	r2, #0
 8006e32:	f000 83b8 	beq.w	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
 8006e36:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8006e3a:	f040 8464 	bne.w	8007706 <HAL_RCCEx_PeriphCLKConfig+0xa22>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e3e:	2100      	movs	r1, #0
 8006e40:	1d20      	adds	r0, r4, #4
 8006e42:	f7ff fe57 	bl	8006af4 <RCCEx_PLL2_Config>
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006e4a:	2d00      	cmp	r5, #0
 8006e4c:	f040 8396 	bne.w	800757c <HAL_RCCEx_PeriphCLKConfig+0x898>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006e50:	4952      	ldr	r1, [pc, #328]	; (8006f9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006e52:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8006e54:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8006e56:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006e5a:	4302      	orrs	r2, r0
 8006e5c:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006e5e:	0499      	lsls	r1, r3, #18
 8006e60:	d51b      	bpl.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Spi45ClockSelection)
 8006e62:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8006e64:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 8006e68:	f000 82fe 	beq.w	8007468 <HAL_RCCEx_PeriphCLKConfig+0x784>
 8006e6c:	f200 83fa 	bhi.w	8007664 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006e70:	b14a      	cbz	r2, 8006e86 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8006e72:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006e76:	f040 8401 	bne.w	800767c <HAL_RCCEx_PeriphCLKConfig+0x998>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e7a:	2101      	movs	r1, #1
 8006e7c:	1d20      	adds	r0, r4, #4
 8006e7e:	f7ff fe39 	bl	8006af4 <RCCEx_PLL2_Config>
 8006e82:	6823      	ldr	r3, [r4, #0]
 8006e84:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006e86:	2d00      	cmp	r5, #0
 8006e88:	f040 8266 	bne.w	8007358 <HAL_RCCEx_PeriphCLKConfig+0x674>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006e8c:	4943      	ldr	r1, [pc, #268]	; (8006f9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006e8e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8006e90:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8006e92:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8006e96:	4302      	orrs	r2, r0
 8006e98:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006e9a:	045a      	lsls	r2, r3, #17
 8006e9c:	d51d      	bpl.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    switch(PeriphClkInit->Spi6ClockSelection)
 8006e9e:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8006ea2:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8006ea6:	f000 82a7 	beq.w	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8006eaa:	f200 83ea 	bhi.w	8007682 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 8006eae:	b14a      	cbz	r2, 8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8006eb0:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8006eb4:	f040 83f1 	bne.w	800769a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006eb8:	2101      	movs	r1, #1
 8006eba:	1d20      	adds	r0, r4, #4
 8006ebc:	f7ff fe1a 	bl	8006af4 <RCCEx_PLL2_Config>
 8006ec0:	6823      	ldr	r3, [r4, #0]
 8006ec2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006ec4:	2d00      	cmp	r5, #0
 8006ec6:	f040 8245 	bne.w	8007354 <HAL_RCCEx_PeriphCLKConfig+0x670>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006eca:	4934      	ldr	r1, [pc, #208]	; (8006f9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006ecc:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8006ed0:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8006ed2:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8006ed6:	4302      	orrs	r2, r0
 8006ed8:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006eda:	041f      	lsls	r7, r3, #16
 8006edc:	d50d      	bpl.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x216>
    switch(PeriphClkInit->FdcanClockSelection)
 8006ede:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006ee0:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8006ee4:	f000 82cb 	beq.w	800747e <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8006ee8:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8006eec:	f000 81a3 	beq.w	8007236 <HAL_RCCEx_PeriphCLKConfig+0x552>
 8006ef0:	2a00      	cmp	r2, #0
 8006ef2:	f000 81a6 	beq.w	8007242 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      ret = HAL_ERROR;
 8006ef6:	2601      	movs	r6, #1
 8006ef8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006efa:	01d8      	lsls	r0, r3, #7
 8006efc:	d519      	bpl.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x24e>
    switch(PeriphClkInit->FmcClockSelection)
 8006efe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006f00:	2a03      	cmp	r2, #3
 8006f02:	f200 8434 	bhi.w	800776e <HAL_RCCEx_PeriphCLKConfig+0xa8a>
 8006f06:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006f0a:	000a      	.short	0x000a
 8006f0c:	00040259 	.word	0x00040259
 8006f10:	000a      	.short	0x000a
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f12:	2102      	movs	r1, #2
 8006f14:	1d20      	adds	r0, r4, #4
 8006f16:	f7ff fded 	bl	8006af4 <RCCEx_PLL2_Config>
 8006f1a:	6823      	ldr	r3, [r4, #0]
 8006f1c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006f1e:	2d00      	cmp	r5, #0
 8006f20:	f040 8210 	bne.w	8007344 <HAL_RCCEx_PeriphCLKConfig+0x660>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006f24:	491d      	ldr	r1, [pc, #116]	; (8006f9c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8006f26:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006f28:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8006f2a:	f022 0203 	bic.w	r2, r2, #3
 8006f2e:	4302      	orrs	r2, r0
 8006f30:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f32:	0259      	lsls	r1, r3, #9
 8006f34:	f100 81c0 	bmi.w	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006f38:	07df      	lsls	r7, r3, #31
 8006f3a:	d542      	bpl.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    switch(PeriphClkInit->Usart16ClockSelection)
 8006f3c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8006f3e:	2a28      	cmp	r2, #40	; 0x28
 8006f40:	f200 835c 	bhi.w	80075fc <HAL_RCCEx_PeriphCLKConfig+0x918>
 8006f44:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006f48:	035a0033 	.word	0x035a0033
 8006f4c:	035a035a 	.word	0x035a035a
 8006f50:	035a035a 	.word	0x035a035a
 8006f54:	035a035a 	.word	0x035a035a
 8006f58:	035a024b 	.word	0x035a024b
 8006f5c:	035a035a 	.word	0x035a035a
 8006f60:	035a035a 	.word	0x035a035a
 8006f64:	035a035a 	.word	0x035a035a
 8006f68:	035a002c 	.word	0x035a002c
 8006f6c:	035a035a 	.word	0x035a035a
 8006f70:	035a035a 	.word	0x035a035a
 8006f74:	035a035a 	.word	0x035a035a
 8006f78:	035a0033 	.word	0x035a0033
 8006f7c:	035a035a 	.word	0x035a035a
 8006f80:	035a035a 	.word	0x035a035a
 8006f84:	035a035a 	.word	0x035a035a
 8006f88:	035a0033 	.word	0x035a0033
 8006f8c:	035a035a 	.word	0x035a035a
 8006f90:	035a035a 	.word	0x035a035a
 8006f94:	035a035a 	.word	0x035a035a
 8006f98:	0033      	.short	0x0033
 8006f9a:	bf00      	nop
 8006f9c:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006fa6:	f7ff fe21 	bl	8006bec <RCCEx_PLL3_Config>
 8006faa:	6823      	ldr	r3, [r4, #0]
 8006fac:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006fae:	2d00      	cmp	r5, #0
 8006fb0:	f040 81c6 	bne.w	8007340 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006fb4:	49b1      	ldr	r1, [pc, #708]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006fb6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006fb8:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8006fba:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8006fbe:	4302      	orrs	r2, r0
 8006fc0:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006fc2:	0798      	lsls	r0, r3, #30
 8006fc4:	d51c      	bpl.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x31c>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006fc6:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8006fc8:	2a05      	cmp	r2, #5
 8006fca:	f200 83ca 	bhi.w	8007762 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006fce:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006fd2:	000d      	.short	0x000d
 8006fd4:	000601ec 	.word	0x000601ec
 8006fd8:	000d000d 	.word	0x000d000d
 8006fdc:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006fde:	2101      	movs	r1, #1
 8006fe0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006fe4:	f7ff fe02 	bl	8006bec <RCCEx_PLL3_Config>
 8006fe8:	6823      	ldr	r3, [r4, #0]
 8006fea:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006fec:	2d00      	cmp	r5, #0
 8006fee:	f040 81ab 	bne.w	8007348 <HAL_RCCEx_PeriphCLKConfig+0x664>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006ff2:	49a2      	ldr	r1, [pc, #648]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8006ff4:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006ff6:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 8006ff8:	f022 0207 	bic.w	r2, r2, #7
 8006ffc:	4302      	orrs	r2, r0
 8006ffe:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007000:	0759      	lsls	r1, r3, #29
 8007002:	d51e      	bpl.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x35e>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007004:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8007008:	2a05      	cmp	r2, #5
 800700a:	f200 83ad 	bhi.w	8007768 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 800700e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007012:	000d      	.short	0x000d
 8007014:	000601dd 	.word	0x000601dd
 8007018:	000d000d 	.word	0x000d000d
 800701c:	000d      	.short	0x000d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800701e:	2101      	movs	r1, #1
 8007020:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007024:	f7ff fde2 	bl	8006bec <RCCEx_PLL3_Config>
 8007028:	6823      	ldr	r3, [r4, #0]
 800702a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800702c:	2d00      	cmp	r5, #0
 800702e:	f040 818d 	bne.w	800734c <HAL_RCCEx_PeriphCLKConfig+0x668>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007032:	4992      	ldr	r1, [pc, #584]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8007034:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8007038:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800703a:	f022 0207 	bic.w	r2, r2, #7
 800703e:	4302      	orrs	r2, r0
 8007040:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007042:	069a      	lsls	r2, r3, #26
 8007044:	d51d      	bpl.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007046:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800704a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800704e:	f000 81ec 	beq.w	800742a <HAL_RCCEx_PeriphCLKConfig+0x746>
 8007052:	f200 82da 	bhi.w	800760a <HAL_RCCEx_PeriphCLKConfig+0x926>
 8007056:	b14a      	cbz	r2, 800706c <HAL_RCCEx_PeriphCLKConfig+0x388>
 8007058:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800705c:	f040 82e1 	bne.w	8007622 <HAL_RCCEx_PeriphCLKConfig+0x93e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007060:	2100      	movs	r1, #0
 8007062:	1d20      	adds	r0, r4, #4
 8007064:	f7ff fd46 	bl	8006af4 <RCCEx_PLL2_Config>
 8007068:	6823      	ldr	r3, [r4, #0]
 800706a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800706c:	2d00      	cmp	r5, #0
 800706e:	f040 816f 	bne.w	8007350 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007072:	4982      	ldr	r1, [pc, #520]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8007074:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8007078:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800707a:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 800707e:	4302      	orrs	r2, r0
 8007080:	654a      	str	r2, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007082:	065f      	lsls	r7, r3, #25
 8007084:	d51d      	bpl.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007086:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800708a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800708e:	f000 81d6 	beq.w	800743e <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8007092:	f200 82c9 	bhi.w	8007628 <HAL_RCCEx_PeriphCLKConfig+0x944>
 8007096:	b14a      	cbz	r2, 80070ac <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8007098:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800709c:	f040 82d0 	bne.w	8007640 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070a0:	2100      	movs	r1, #0
 80070a2:	1d20      	adds	r0, r4, #4
 80070a4:	f7ff fd26 	bl	8006af4 <RCCEx_PLL2_Config>
 80070a8:	6823      	ldr	r3, [r4, #0]
 80070aa:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80070ac:	2d00      	cmp	r5, #0
 80070ae:	f040 8157 	bne.w	8007360 <HAL_RCCEx_PeriphCLKConfig+0x67c>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80070b2:	4972      	ldr	r1, [pc, #456]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80070b4:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 80070b8:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80070ba:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80070be:	4302      	orrs	r2, r0
 80070c0:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80070c2:	0618      	lsls	r0, r3, #24
 80070c4:	d51d      	bpl.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80070c6:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 80070ca:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80070ce:	f000 81e9 	beq.w	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80070d2:	f200 82b8 	bhi.w	8007646 <HAL_RCCEx_PeriphCLKConfig+0x962>
 80070d6:	b14a      	cbz	r2, 80070ec <HAL_RCCEx_PeriphCLKConfig+0x408>
 80070d8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80070dc:	f040 82bf 	bne.w	800765e <HAL_RCCEx_PeriphCLKConfig+0x97a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070e0:	2100      	movs	r1, #0
 80070e2:	1d20      	adds	r0, r4, #4
 80070e4:	f7ff fd06 	bl	8006af4 <RCCEx_PLL2_Config>
 80070e8:	6823      	ldr	r3, [r4, #0]
 80070ea:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80070ec:	2d00      	cmp	r5, #0
 80070ee:	f040 8139 	bne.w	8007364 <HAL_RCCEx_PeriphCLKConfig+0x680>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80070f2:	4962      	ldr	r1, [pc, #392]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80070f4:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 80070f8:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 80070fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80070fe:	4302      	orrs	r2, r0
 8007100:	658a      	str	r2, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007102:	0719      	lsls	r1, r3, #28
 8007104:	d50b      	bpl.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007106:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800710a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800710e:	f000 81ed 	beq.w	80074ec <HAL_RCCEx_PeriphCLKConfig+0x808>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007112:	485a      	ldr	r0, [pc, #360]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8007114:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8007116:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800711a:	430a      	orrs	r2, r1
 800711c:	6542      	str	r2, [r0, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800711e:	06da      	lsls	r2, r3, #27
 8007120:	d50b      	bpl.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x456>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007122:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8007126:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800712a:	f000 81ea 	beq.w	8007502 <HAL_RCCEx_PeriphCLKConfig+0x81e>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800712e:	4853      	ldr	r0, [pc, #332]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8007130:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8007132:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007136:	430a      	orrs	r2, r1
 8007138:	6582      	str	r2, [r0, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800713a:	031f      	lsls	r7, r3, #12
 800713c:	d50e      	bpl.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x478>
    switch(PeriphClkInit->AdcClockSelection)
 800713e:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8007142:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8007146:	f000 8087 	beq.w	8007258 <HAL_RCCEx_PeriphCLKConfig+0x574>
 800714a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800714e:	f000 808a 	beq.w	8007266 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007152:	2900      	cmp	r1, #0
 8007154:	f000 8240 	beq.w	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      ret = HAL_ERROR;
 8007158:	2601      	movs	r6, #1
 800715a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800715c:	0358      	lsls	r0, r3, #13
 800715e:	d50f      	bpl.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x49c>
    switch(PeriphClkInit->UsbClockSelection)
 8007160:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8007164:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8007168:	f000 808a 	beq.w	8007280 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800716c:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 8007170:	f000 808d 	beq.w	800728e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8007174:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8007178:	f000 8237 	beq.w	80075ea <HAL_RCCEx_PeriphCLKConfig+0x906>
      ret = HAL_ERROR;
 800717c:	2601      	movs	r6, #1
 800717e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007180:	03d9      	lsls	r1, r3, #15
 8007182:	d517      	bpl.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    switch(PeriphClkInit->SdmmcClockSelection)
 8007184:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8007186:	2a00      	cmp	r2, #0
 8007188:	f000 8105 	beq.w	8007396 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 800718c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8007190:	f040 80ec 	bne.w	800736c <HAL_RCCEx_PeriphCLKConfig+0x688>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007194:	2102      	movs	r1, #2
 8007196:	1d20      	adds	r0, r4, #4
 8007198:	f7ff fcac 	bl	8006af4 <RCCEx_PLL2_Config>
 800719c:	4605      	mov	r5, r0
 800719e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80071a0:	2d00      	cmp	r5, #0
 80071a2:	f040 8100 	bne.w	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80071a6:	4935      	ldr	r1, [pc, #212]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80071a8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80071aa:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80071ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80071b0:	4302      	orrs	r2, r0
 80071b2:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80071b4:	009a      	lsls	r2, r3, #2
 80071b6:	d475      	bmi.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80071b8:	039f      	lsls	r7, r3, #14
 80071ba:	d42b      	bmi.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x530>
 80071bc:	1c30      	adds	r0, r6, #0
 80071be:	bf18      	it	ne
 80071c0:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80071c2:	02dd      	lsls	r5, r3, #11
 80071c4:	d506      	bpl.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80071c6:	492d      	ldr	r1, [pc, #180]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80071c8:	6f25      	ldr	r5, [r4, #112]	; 0x70
 80071ca:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80071cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80071d0:	432a      	orrs	r2, r5
 80071d2:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80071d4:	0299      	lsls	r1, r3, #10
 80071d6:	d506      	bpl.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80071d8:	4928      	ldr	r1, [pc, #160]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80071da:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 80071dc:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80071de:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80071e2:	432a      	orrs	r2, r5
 80071e4:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80071e6:	005a      	lsls	r2, r3, #1
 80071e8:	d509      	bpl.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071ea:	4a24      	ldr	r2, [pc, #144]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 80071ec:	6911      	ldr	r1, [r2, #16]
 80071ee:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80071f2:	6111      	str	r1, [r2, #16]
 80071f4:	6911      	ldr	r1, [r2, #16]
 80071f6:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
 80071fa:	4329      	orrs	r1, r5
 80071fc:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80071fe:	2b00      	cmp	r3, #0
 8007200:	da06      	bge.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007202:	4a1e      	ldr	r2, [pc, #120]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 8007204:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007206:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007208:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800720c:	430b      	orrs	r3, r1
 800720e:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8007210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->RngClockSelection)
 8007214:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8007216:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800721a:	f000 80aa 	beq.w	8007372 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 800721e:	f240 80e7 	bls.w	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x70c>
 8007222:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8007226:	f000 80a9 	beq.w	800737c <HAL_RCCEx_PeriphCLKConfig+0x698>
 800722a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800722e:	f000 80a5 	beq.w	800737c <HAL_RCCEx_PeriphCLKConfig+0x698>
 8007232:	2001      	movs	r0, #1
 8007234:	e7c5      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007236:	2101      	movs	r1, #1
 8007238:	1d20      	adds	r0, r4, #4
 800723a:	f7ff fc5b 	bl	8006af4 <RCCEx_PLL2_Config>
 800723e:	6823      	ldr	r3, [r4, #0]
 8007240:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007242:	2d00      	cmp	r5, #0
 8007244:	f040 808a 	bne.w	800735c <HAL_RCCEx_PeriphCLKConfig+0x678>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007248:	490c      	ldr	r1, [pc, #48]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800724a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800724c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800724e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007252:	4302      	orrs	r2, r0
 8007254:	650a      	str	r2, [r1, #80]	; 0x50
 8007256:	e650      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x216>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007258:	2102      	movs	r1, #2
 800725a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800725e:	f7ff fcc5 	bl	8006bec <RCCEx_PLL3_Config>
 8007262:	6823      	ldr	r3, [r4, #0]
 8007264:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8007266:	2d00      	cmp	r5, #0
 8007268:	d17e      	bne.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x684>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800726a:	4904      	ldr	r1, [pc, #16]	; (800727c <HAL_RCCEx_PeriphCLKConfig+0x598>)
 800726c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8007270:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8007272:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8007276:	4302      	orrs	r2, r0
 8007278:	658a      	str	r2, [r1, #88]	; 0x58
 800727a:	e76f      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800727c:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007280:	2101      	movs	r1, #1
 8007282:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007286:	f7ff fcb1 	bl	8006bec <RCCEx_PLL3_Config>
 800728a:	6823      	ldr	r3, [r4, #0]
 800728c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800728e:	2d00      	cmp	r5, #0
 8007290:	d154      	bne.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x658>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007292:	49ad      	ldr	r1, [pc, #692]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007294:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8007298:	6d4a      	ldr	r2, [r1, #84]	; 0x54
 800729a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800729e:	4302      	orrs	r2, r0
 80072a0:	654a      	str	r2, [r1, #84]	; 0x54
 80072a2:	e76d      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x49c>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80072a4:	2102      	movs	r1, #2
 80072a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80072aa:	f7ff fc9f 	bl	8006bec <RCCEx_PLL3_Config>
 80072ae:	6823      	ldr	r3, [r4, #0]
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d081      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      status=HAL_ERROR;
 80072b4:	2601      	movs	r6, #1
 80072b6:	e77f      	b.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072b8:	4ba4      	ldr	r3, [pc, #656]	; (800754c <HAL_RCCEx_PeriphCLKConfig+0x868>)
 80072ba:	681a      	ldr	r2, [r3, #0]
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072bc:	461f      	mov	r7, r3
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072c2:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80072c4:	f7fc fad0 	bl	8003868 <HAL_GetTick>
 80072c8:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072ca:	e006      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072cc:	f7fc facc 	bl	8003868 <HAL_GetTick>
 80072d0:	eba0 0008 	sub.w	r0, r0, r8
 80072d4:	2864      	cmp	r0, #100	; 0x64
 80072d6:	f200 8194 	bhi.w	8007602 <HAL_RCCEx_PeriphCLKConfig+0x91e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	05da      	lsls	r2, r3, #23
 80072de:	d5f5      	bpl.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    if(ret == HAL_OK)
 80072e0:	2d00      	cmp	r5, #0
 80072e2:	f040 823a 	bne.w	800775a <HAL_RCCEx_PeriphCLKConfig+0xa76>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80072e6:	4a98      	ldr	r2, [pc, #608]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 80072e8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80072ec:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80072ee:	4059      	eors	r1, r3
 80072f0:	f411 7f40 	tst.w	r1, #768	; 0x300
 80072f4:	d00b      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x62a>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072f6:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80072f8:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072fa:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80072fe:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8007302:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007304:	6f10      	ldr	r0, [r2, #112]	; 0x70
 8007306:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800730a:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800730c:	6711      	str	r1, [r2, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800730e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007312:	f000 8204 	beq.w	800771e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007316:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800731a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800731e:	f000 8212 	beq.w	8007746 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8007322:	4989      	ldr	r1, [pc, #548]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007324:	690a      	ldr	r2, [r1, #16]
 8007326:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800732a:	610a      	str	r2, [r1, #16]
 800732c:	4a86      	ldr	r2, [pc, #536]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 800732e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007332:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8007334:	430b      	orrs	r3, r1
 8007336:	6713      	str	r3, [r2, #112]	; 0x70
 8007338:	6823      	ldr	r3, [r4, #0]
 800733a:	e5fd      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800733c:	462e      	mov	r6, r5
 800733e:	e71f      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8007340:	462e      	mov	r6, r5
 8007342:	e63e      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007344:	462e      	mov	r6, r5
 8007346:	e5f4      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8007348:	462e      	mov	r6, r5
 800734a:	e659      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800734c:	462e      	mov	r6, r5
 800734e:	e678      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8007350:	462e      	mov	r6, r5
 8007352:	e696      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x39e>
 8007354:	462e      	mov	r6, r5
 8007356:	e5c0      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007358:	462e      	mov	r6, r5
 800735a:	e59e      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800735c:	462e      	mov	r6, r5
 800735e:	e5cc      	b.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0x216>
 8007360:	462e      	mov	r6, r5
 8007362:	e6ae      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007364:	462e      	mov	r6, r5
 8007366:	e6cc      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x41e>
 8007368:	462e      	mov	r6, r5
 800736a:	e6f7      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x478>
      ret = HAL_ERROR;
 800736c:	2601      	movs	r6, #1
 800736e:	4635      	mov	r5, r6
 8007370:	e720      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007372:	4875      	ldr	r0, [pc, #468]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007374:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007376:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800737a:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(ret == HAL_OK)
 800737c:	2d00      	cmp	r5, #0
 800737e:	f47f af58 	bne.w	8007232 <HAL_RCCEx_PeriphCLKConfig+0x54e>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007382:	4d71      	ldr	r5, [pc, #452]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007384:	1c30      	adds	r0, r6, #0
 8007386:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8007388:	bf18      	it	ne
 800738a:	2001      	movne	r0, #1
 800738c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8007390:	430a      	orrs	r2, r1
 8007392:	656a      	str	r2, [r5, #84]	; 0x54
 8007394:	e715      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007396:	496c      	ldr	r1, [pc, #432]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007398:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800739a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800739e:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80073a0:	2d00      	cmp	r5, #0
 80073a2:	f43f af00 	beq.w	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80073a6:	462e      	mov	r6, r5
 80073a8:	e704      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073aa:	2101      	movs	r1, #1
 80073ac:	1d20      	adds	r0, r4, #4
 80073ae:	f7ff fba1 	bl	8006af4 <RCCEx_PLL2_Config>
 80073b2:	4605      	mov	r5, r0
 80073b4:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80073b6:	2d00      	cmp	r5, #0
 80073b8:	d1c6      	bne.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80073ba:	e61a      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073bc:	4962      	ldr	r1, [pc, #392]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 80073be:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80073c0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80073c4:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80073c6:	2d00      	cmp	r5, #0
 80073c8:	d1bc      	bne.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x660>
 80073ca:	e5ab      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073cc:	2101      	movs	r1, #1
 80073ce:	1d20      	adds	r0, r4, #4
 80073d0:	f7ff fb90 	bl	8006af4 <RCCEx_PLL2_Config>
 80073d4:	4605      	mov	r5, r0
 80073d6:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80073d8:	2d00      	cmp	r5, #0
 80073da:	d1b7      	bne.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x668>
 80073dc:	e629      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073de:	2101      	movs	r1, #1
 80073e0:	1d20      	adds	r0, r4, #4
 80073e2:	f7ff fb87 	bl	8006af4 <RCCEx_PLL2_Config>
 80073e6:	4605      	mov	r5, r0
 80073e8:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80073ea:	2d00      	cmp	r5, #0
 80073ec:	d1a8      	bne.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 80073ee:	e5e1      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    switch(PeriphClkInit->RngClockSelection)
 80073f0:	2a00      	cmp	r2, #0
 80073f2:	f47f af1e 	bne.w	8007232 <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80073f6:	e7c1      	b.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x698>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80073f8:	2101      	movs	r1, #1
 80073fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80073fe:	f7ff fbf5 	bl	8006bec <RCCEx_PLL3_Config>
 8007402:	4605      	mov	r5, r0
 8007404:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007406:	2d00      	cmp	r5, #0
 8007408:	d1a4      	bne.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x670>
 800740a:	e55e      	b.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800740c:	494e      	ldr	r1, [pc, #312]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 800740e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007410:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007414:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8007416:	2d00      	cmp	r5, #0
 8007418:	d142      	bne.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800741a:	494b      	ldr	r1, [pc, #300]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 800741c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800741e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8007420:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8007424:	4302      	orrs	r2, r0
 8007426:	64ca      	str	r2, [r1, #76]	; 0x4c
 8007428:	e4f9      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x13a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800742a:	2102      	movs	r1, #2
 800742c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007430:	f7ff fbdc 	bl	8006bec <RCCEx_PLL3_Config>
 8007434:	4605      	mov	r5, r0
 8007436:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007438:	2d00      	cmp	r5, #0
 800743a:	d189      	bne.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800743c:	e619      	b.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800743e:	2102      	movs	r1, #2
 8007440:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007444:	f7ff fbd2 	bl	8006bec <RCCEx_PLL3_Config>
 8007448:	4605      	mov	r5, r0
 800744a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800744c:	2d00      	cmp	r5, #0
 800744e:	d187      	bne.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x67c>
 8007450:	e62f      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    switch(PeriphClkInit->Sai1ClockSelection)
 8007452:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8007454:	2d00      	cmp	r5, #0
 8007456:	d139      	bne.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x7e8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007458:	493b      	ldr	r1, [pc, #236]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 800745a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800745c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800745e:	f022 0207 	bic.w	r2, r2, #7
 8007462:	4302      	orrs	r2, r0
 8007464:	650a      	str	r2, [r1, #80]	; 0x50
 8007466:	e468      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x56>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007468:	2101      	movs	r1, #1
 800746a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800746e:	f7ff fbbd 	bl	8006bec <RCCEx_PLL3_Config>
 8007472:	4605      	mov	r5, r0
 8007474:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007476:	2d00      	cmp	r5, #0
 8007478:	f47f af6e 	bne.w	8007358 <HAL_RCCEx_PeriphCLKConfig+0x674>
 800747c:	e506      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800747e:	4932      	ldr	r1, [pc, #200]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x864>)
 8007480:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8007482:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007486:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 8007488:	2d00      	cmp	r5, #0
 800748a:	f47f af67 	bne.w	800735c <HAL_RCCEx_PeriphCLKConfig+0x678>
 800748e:	e6db      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x564>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007490:	2102      	movs	r1, #2
 8007492:	1d20      	adds	r0, r4, #4
 8007494:	f7ff fb2e 	bl	8006af4 <RCCEx_PLL2_Config>
 8007498:	4605      	mov	r5, r0
 800749a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800749c:	2d00      	cmp	r5, #0
 800749e:	d0bc      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x736>
 80074a0:	462e      	mov	r6, r5
 80074a2:	e4bc      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x13a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80074a4:	2102      	movs	r1, #2
 80074a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80074aa:	f7ff fb9f 	bl	8006bec <RCCEx_PLL3_Config>
 80074ae:	4605      	mov	r5, r0
 80074b0:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80074b2:	2d00      	cmp	r5, #0
 80074b4:	f47f af56 	bne.w	8007364 <HAL_RCCEx_PeriphCLKConfig+0x680>
 80074b8:	e61b      	b.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80074ba:	2100      	movs	r1, #0
 80074bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80074c0:	f7ff fb94 	bl	8006bec <RCCEx_PLL3_Config>
 80074c4:	4605      	mov	r5, r0
 80074c6:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80074c8:	2d00      	cmp	r5, #0
 80074ca:	d0c5      	beq.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x774>
 80074cc:	462e      	mov	r6, r5
 80074ce:	e434      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074d0:	491d      	ldr	r1, [pc, #116]	; (8007548 <HAL_RCCEx_PeriphCLKConfig+0x864>)
      break;
 80074d2:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074d4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80074d6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80074da:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80074dc:	e7ba      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x770>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074de:	2100      	movs	r1, #0
 80074e0:	1d20      	adds	r0, r4, #4
 80074e2:	f7ff fb07 	bl	8006af4 <RCCEx_PLL2_Config>
 80074e6:	6823      	ldr	r3, [r4, #0]
 80074e8:	4605      	mov	r5, r0
      break;
 80074ea:	e7b3      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x770>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80074ec:	2102      	movs	r1, #2
 80074ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80074f2:	f7ff fb7b 	bl	8006bec <RCCEx_PLL3_Config>
 80074f6:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80074fa:	b100      	cbz	r0, 80074fe <HAL_RCCEx_PeriphCLKConfig+0x81a>
          status = HAL_ERROR;
 80074fc:	2601      	movs	r6, #1
 80074fe:	6823      	ldr	r3, [r4, #0]
 8007500:	e607      	b.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007502:	2102      	movs	r1, #2
 8007504:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007508:	f7ff fb70 	bl	8006bec <RCCEx_PLL3_Config>
 800750c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8007510:	b100      	cbz	r0, 8007514 <HAL_RCCEx_PeriphCLKConfig+0x830>
        status = HAL_ERROR;
 8007512:	2601      	movs	r6, #1
 8007514:	6823      	ldr	r3, [r4, #0]
 8007516:	e60a      	b.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007518:	2100      	movs	r1, #0
 800751a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800751e:	f7ff fb65 	bl	8006bec <RCCEx_PLL3_Config>
 8007522:	4605      	mov	r5, r0
 8007524:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007526:	2d00      	cmp	r5, #0
 8007528:	f43f ac3f 	beq.w	8006daa <HAL_RCCEx_PeriphCLKConfig+0xc6>
 800752c:	462e      	mov	r6, r5
 800752e:	e444      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xd6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007530:	2100      	movs	r1, #0
 8007532:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007536:	f7ff fb59 	bl	8006bec <RCCEx_PLL3_Config>
 800753a:	4605      	mov	r5, r0
 800753c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800753e:	2d00      	cmp	r5, #0
 8007540:	f43f ac12 	beq.w	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8007544:	462e      	mov	r6, r5
 8007546:	e416      	b.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8007548:	58024400 	.word	0x58024400
 800754c:	58024800 	.word	0x58024800
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007550:	2100      	movs	r1, #0
 8007552:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8007556:	f7ff fb49 	bl	8006bec <RCCEx_PLL3_Config>
 800755a:	4605      	mov	r5, r0
 800755c:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800755e:	2d00      	cmp	r5, #0
 8007560:	f43f ac45 	beq.w	8006dee <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8007564:	462e      	mov	r6, r5
 8007566:	e44a      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x11a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007568:	2100      	movs	r1, #0
 800756a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800756e:	f7ff fb3d 	bl	8006bec <RCCEx_PLL3_Config>
 8007572:	4605      	mov	r5, r0
 8007574:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8007576:	2d00      	cmp	r5, #0
 8007578:	f43f ac6a 	beq.w	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800757c:	462e      	mov	r6, r5
 800757e:	e46e      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007580:	2102      	movs	r1, #2
 8007582:	3004      	adds	r0, #4
 8007584:	f7ff fab6 	bl	8006af4 <RCCEx_PLL2_Config>
 8007588:	4606      	mov	r6, r0
 800758a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800758c:	2e00      	cmp	r6, #0
 800758e:	f47f abc6 	bne.w	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8007592:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007594:	f7ff bbbc 	b.w	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007598:	4977      	ldr	r1, [pc, #476]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800759a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 800759c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80075a0:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80075a2:	f7ff bbff 	b.w	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075a6:	4974      	ldr	r1, [pc, #464]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80075a8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80075aa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80075ae:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80075b0:	e44b      	b.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80075b2:	2102      	movs	r1, #2
 80075b4:	3024      	adds	r0, #36	; 0x24
 80075b6:	f7ff fb19 	bl	8006bec <RCCEx_PLL3_Config>
 80075ba:	4606      	mov	r6, r0
      break;
 80075bc:	e7e5      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075be:	496e      	ldr	r1, [pc, #440]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80075c0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80075c2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80075c6:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80075c8:	f7ff bbcb 	b.w	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075cc:	496a      	ldr	r1, [pc, #424]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80075ce:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80075d0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80075d4:	62ca      	str	r2, [r1, #44]	; 0x2c
      break;
 80075d6:	e407      	b.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x104>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075d8:	1d20      	adds	r0, r4, #4
 80075da:	f7ff fa8b 	bl	8006af4 <RCCEx_PLL2_Config>
 80075de:	4605      	mov	r5, r0
 80075e0:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80075e2:	2d00      	cmp	r5, #0
 80075e4:	f47f aec0 	bne.w	8007368 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80075e8:	e63f      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x586>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075ea:	4963      	ldr	r1, [pc, #396]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80075ec:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80075ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80075f2:	62ca      	str	r2, [r1, #44]	; 0x2c
    if(ret == HAL_OK)
 80075f4:	2d00      	cmp	r5, #0
 80075f6:	f47f aea1 	bne.w	800733c <HAL_RCCEx_PeriphCLKConfig+0x658>
 80075fa:	e64a      	b.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      ret = HAL_ERROR;
 80075fc:	2601      	movs	r6, #1
 80075fe:	4635      	mov	r5, r6
 8007600:	e4df      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
            ret = HAL_TIMEOUT;
 8007602:	2603      	movs	r6, #3
 8007604:	6823      	ldr	r3, [r4, #0]
 8007606:	4635      	mov	r5, r6
 8007608:	e496      	b.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x254>
    switch(PeriphClkInit->Lptim1ClockSelection)
 800760a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800760e:	f43f ad2d 	beq.w	800706c <HAL_RCCEx_PeriphCLKConfig+0x388>
 8007612:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8007616:	f43f ad29 	beq.w	800706c <HAL_RCCEx_PeriphCLKConfig+0x388>
 800761a:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 800761e:	f43f ad25 	beq.w	800706c <HAL_RCCEx_PeriphCLKConfig+0x388>
      ret = HAL_ERROR;
 8007622:	2601      	movs	r6, #1
 8007624:	4635      	mov	r5, r6
 8007626:	e52c      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007628:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800762c:	f43f ad3e 	beq.w	80070ac <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8007630:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8007634:	f43f ad3a 	beq.w	80070ac <HAL_RCCEx_PeriphCLKConfig+0x3c8>
 8007638:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800763c:	f43f ad36 	beq.w	80070ac <HAL_RCCEx_PeriphCLKConfig+0x3c8>
      ret = HAL_ERROR;
 8007640:	2601      	movs	r6, #1
 8007642:	4635      	mov	r5, r6
 8007644:	e53d      	b.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007646:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800764a:	f43f ad4f 	beq.w	80070ec <HAL_RCCEx_PeriphCLKConfig+0x408>
 800764e:	f5b2 4f20 	cmp.w	r2, #40960	; 0xa000
 8007652:	f43f ad4b 	beq.w	80070ec <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007656:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 800765a:	f43f ad47 	beq.w	80070ec <HAL_RCCEx_PeriphCLKConfig+0x408>
      ret = HAL_ERROR;
 800765e:	2601      	movs	r6, #1
 8007660:	4635      	mov	r5, r6
 8007662:	e54e      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x41e>
    switch(PeriphClkInit->Spi45ClockSelection)
 8007664:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8007668:	f43f ac0d 	beq.w	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800766c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8007670:	f43f ac09 	beq.w	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8007674:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8007678:	f43f ac05 	beq.w	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      ret = HAL_ERROR;
 800767c:	2601      	movs	r6, #1
 800767e:	4635      	mov	r5, r6
 8007680:	e40b      	b.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007682:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007686:	f43f ac1d 	beq.w	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800768a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800768e:	f43f ac19 	beq.w	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8007692:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8007696:	f43f ac15 	beq.w	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = HAL_ERROR;
 800769a:	2601      	movs	r6, #1
 800769c:	4635      	mov	r5, r6
 800769e:	e41c      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    switch(PeriphClkInit->Sai4AClockSelection)
 80076a0:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 80076a4:	f43f ab7e 	beq.w	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 80076a8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80076ac:	f43f ab7a 	beq.w	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      ret = HAL_ERROR;
 80076b0:	2601      	movs	r6, #1
 80076b2:	4635      	mov	r5, r6
 80076b4:	f7ff bb81 	b.w	8006dba <HAL_RCCEx_PeriphCLKConfig+0xd6>
    switch(PeriphClkInit->Sai4BClockSelection)
 80076b8:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 80076bc:	f43f ab94 	beq.w	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80076c0:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 80076c4:	f43f ab90 	beq.w	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x104>
      ret = HAL_ERROR;
 80076c8:	2601      	movs	r6, #1
 80076ca:	4635      	mov	r5, r6
 80076cc:	f7ff bb97 	b.w	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch(PeriphClkInit->Sai23ClockSelection)
 80076d0:	2ac0      	cmp	r2, #192	; 0xc0
 80076d2:	f43f ab46 	beq.w	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 80076d6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80076da:	f43f ab42 	beq.w	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      ret = HAL_ERROR;
 80076de:	2601      	movs	r6, #1
 80076e0:	4635      	mov	r5, r6
 80076e2:	f7ff bb48 	b.w	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x92>
    switch(PeriphClkInit->SpdifrxClockSelection)
 80076e6:	b9ba      	cbnz	r2, 8007718 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076e8:	4823      	ldr	r0, [pc, #140]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80076ea:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80076ec:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80076f0:	62c1      	str	r1, [r0, #44]	; 0x2c
 80076f2:	f7ff bb0d 	b.w	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Spi123ClockSelection)
 80076f6:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80076fa:	f43f aba6 	beq.w	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80076fe:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8007702:	f43f aba2 	beq.w	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = HAL_ERROR;
 8007706:	2601      	movs	r6, #1
 8007708:	4635      	mov	r5, r6
 800770a:	f7ff bba8 	b.w	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x17a>
    switch(PeriphClkInit->QspiClockSelection)
 800770e:	2a00      	cmp	r2, #0
 8007710:	f43f ae81 	beq.w	8007416 <HAL_RCCEx_PeriphCLKConfig+0x732>
 8007714:	f7ff bb81 	b.w	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x136>
      ret = HAL_ERROR;
 8007718:	2601      	movs	r6, #1
 800771a:	f7ff bb00 	b.w	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 800771e:	f7fc f8a3 	bl	8003868 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007722:	4f15      	ldr	r7, [pc, #84]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
        tickstart = HAL_GetTick();
 8007724:	4681      	mov	r9, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007726:	f241 3888 	movw	r8, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800772a:	e006      	b.n	800773a <HAL_RCCEx_PeriphCLKConfig+0xa56>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800772c:	f7fc f89c 	bl	8003868 <HAL_GetTick>
 8007730:	eba0 0009 	sub.w	r0, r0, r9
 8007734:	4540      	cmp	r0, r8
 8007736:	f63f af64 	bhi.w	8007602 <HAL_RCCEx_PeriphCLKConfig+0x91e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800773a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800773c:	079b      	lsls	r3, r3, #30
 800773e:	d5f5      	bpl.n	800772c <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8007740:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8007744:	e5e7      	b.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x632>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007746:	480c      	ldr	r0, [pc, #48]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8007748:	4a0c      	ldr	r2, [pc, #48]	; (800777c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800774a:	6901      	ldr	r1, [r0, #16]
 800774c:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8007750:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8007754:	430a      	orrs	r2, r1
 8007756:	6102      	str	r2, [r0, #16]
 8007758:	e5e8      	b.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x648>
 800775a:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 800775c:	462e      	mov	r6, r5
 800775e:	f7ff bbeb 	b.w	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x254>
      ret = HAL_ERROR;
 8007762:	2601      	movs	r6, #1
 8007764:	4635      	mov	r5, r6
 8007766:	e44b      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      ret = HAL_ERROR;
 8007768:	2601      	movs	r6, #1
 800776a:	4635      	mov	r5, r6
 800776c:	e469      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      ret = HAL_ERROR;
 800776e:	2601      	movs	r6, #1
 8007770:	4635      	mov	r5, r6
 8007772:	f7ff bbde 	b.w	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8007776:	bf00      	nop
 8007778:	58024400 	.word	0x58024400
 800777c:	00ffffcf 	.word	0x00ffffcf

08007780 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8007780:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007782:	f7fe ffaf 	bl	80066e4 <HAL_RCC_GetHCLKFreq>
 8007786:	4b05      	ldr	r3, [pc, #20]	; (800779c <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8007788:	4a05      	ldr	r2, [pc, #20]	; (80077a0 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800778a:	6a1b      	ldr	r3, [r3, #32]
 800778c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007790:	5cd3      	ldrb	r3, [r2, r3]
 8007792:	f003 031f 	and.w	r3, r3, #31
}
 8007796:	40d8      	lsrs	r0, r3
 8007798:	bd08      	pop	{r3, pc}
 800779a:	bf00      	nop
 800779c:	58024400 	.word	0x58024400
 80077a0:	0801ac60 	.word	0x0801ac60

080077a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077a4:	4a46      	ldr	r2, [pc, #280]	; (80078c0 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
{
 80077a6:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077a8:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80077aa:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80077ac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80077ae:	f3c3 3305 	ubfx	r3, r3, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80077b2:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d059      	beq.n	800786c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80077b8:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80077bc:	f3c1 1100 	ubfx	r1, r1, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077c0:	f004 0403 	and.w	r4, r4, #3
 80077c4:	ee07 3a90 	vmov	s15, r3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80077c8:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 80077cc:	2c01      	cmp	r4, #1
 80077ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077d2:	ee06 1a90 	vmov	s13, r1
 80077d6:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 80077da:	d002      	beq.n	80077e2 <HAL_RCCEx_GetPLL2ClockFreq+0x3e>
 80077dc:	d34e      	bcc.n	800787c <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 80077de:	2c02      	cmp	r4, #2
 80077e0:	d049      	beq.n	8007876 <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80077e2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80078c4 <HAL_RCCEx_GetPLL2ClockFreq+0x120>
 80077e6:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80077ea:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80077ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077f0:	ee07 3a10 	vmov	s14, r3
 80077f4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80077f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80077fc:	ee37 7a25 	vadd.f32	s14, s14, s11
 8007800:	ee77 7a26 	vadd.f32	s15, s14, s13
 8007804:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007808:	4a2d      	ldr	r2, [pc, #180]	; (80078c0 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>)
 800780a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800780e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8007810:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007814:	ee06 3a90 	vmov	s13, r3
 8007818:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 800781c:	bc30      	pop	{r4, r5}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800781e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007822:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007826:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800782a:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800782e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8007830:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007834:	ee06 3a90 	vmov	s13, r3
 8007838:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800783c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007840:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007844:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007848:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800784c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800784e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007852:	ee07 3a10 	vmov	s14, r3
 8007856:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800785a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800785e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007862:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007866:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800786a:	4770      	bx	lr
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800786c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007870:	6083      	str	r3, [r0, #8]
}
 8007872:	bc30      	pop	{r4, r5}
 8007874:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007876:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80078c8 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800787a:	e7b4      	b.n	80077e6 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800787c:	6813      	ldr	r3, [r2, #0]
 800787e:	069b      	lsls	r3, r3, #26
 8007880:	d51a      	bpl.n	80078b8 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007882:	6814      	ldr	r4, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007884:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007888:	4910      	ldr	r1, [pc, #64]	; (80078cc <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 800788a:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800788e:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007890:	40e1      	lsrs	r1, r4
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007896:	ee07 1a10 	vmov	s14, r1
 800789a:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800789e:	ee07 3a10 	vmov	s14, r3
 80078a2:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80078a6:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 80078aa:	ee76 7a05 	vadd.f32	s15, s12, s10
 80078ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078b6:	e7a7      	b.n	8007808 <HAL_RCCEx_GetPLL2ClockFreq+0x64>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80078b8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80078d0 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 80078bc:	e793      	b.n	80077e6 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 80078be:	bf00      	nop
 80078c0:	58024400 	.word	0x58024400
 80078c4:	4a742400 	.word	0x4a742400
 80078c8:	4af42400 	.word	0x4af42400
 80078cc:	03d09000 	.word	0x03d09000
 80078d0:	4c742400 	.word	0x4c742400

080078d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078d4:	4a46      	ldr	r2, [pc, #280]	; (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
{
 80078d6:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078d8:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80078da:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80078dc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80078de:	f3c3 5305 	ubfx	r3, r3, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80078e2:	6c55      	ldr	r5, [r2, #68]	; 0x44
  if (pll3m != 0U)
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d059      	beq.n	800799c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80078e8:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80078ec:	f3c1 2100 	ubfx	r1, r1, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078f0:	f004 0403 	and.w	r4, r4, #3
 80078f4:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80078f8:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 80078fc:	2c01      	cmp	r4, #1
 80078fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007902:	ee06 1a90 	vmov	s13, r1
 8007906:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800790a:	d002      	beq.n	8007912 <HAL_RCCEx_GetPLL3ClockFreq+0x3e>
 800790c:	d34e      	bcc.n	80079ac <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 800790e:	2c02      	cmp	r4, #2
 8007910:	d049      	beq.n	80079a6 <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007912:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80079f4 <HAL_RCCEx_GetPLL3ClockFreq+0x120>
 8007916:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800791a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800791c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007920:	ee07 3a10 	vmov	s14, r3
 8007924:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007928:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800792c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8007930:	ee77 7a26 	vadd.f32	s15, s14, s13
 8007934:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007938:	4a2d      	ldr	r2, [pc, #180]	; (80079f0 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>)
 800793a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800793e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007940:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007944:	ee06 3a90 	vmov	s13, r3
 8007948:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 800794c:	bc30      	pop	{r4, r5}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800794e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007952:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007956:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800795a:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800795e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007960:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007964:	ee06 3a90 	vmov	s13, r3
 8007968:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800796c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007970:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007974:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007978:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800797c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800797e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007982:	ee07 3a10 	vmov	s14, r3
 8007986:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800798a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800798e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007992:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007996:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800799a:	4770      	bx	lr
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800799c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80079a0:	6083      	str	r3, [r0, #8]
}
 80079a2:	bc30      	pop	{r4, r5}
 80079a4:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80079a6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80079f8 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 80079aa:	e7b4      	b.n	8007916 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079ac:	6813      	ldr	r3, [r2, #0]
 80079ae:	069b      	lsls	r3, r3, #26
 80079b0:	d51a      	bpl.n	80079e8 <HAL_RCCEx_GetPLL3ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079b2:	6814      	ldr	r4, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80079b4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079b8:	4910      	ldr	r1, [pc, #64]	; (80079fc <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 80079ba:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80079be:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079c0:	40e1      	lsrs	r1, r4
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80079c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c6:	ee07 1a10 	vmov	s14, r1
 80079ca:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80079ce:	ee07 3a10 	vmov	s14, r3
 80079d2:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80079d6:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 80079da:	ee76 7a05 	vadd.f32	s15, s12, s10
 80079de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079e6:	e7a7      	b.n	8007938 <HAL_RCCEx_GetPLL3ClockFreq+0x64>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80079e8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8007a00 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 80079ec:	e793      	b.n	8007916 <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 80079ee:	bf00      	nop
 80079f0:	58024400 	.word	0x58024400
 80079f4:	4a742400 	.word	0x4a742400
 80079f8:	4af42400 	.word	0x4af42400
 80079fc:	03d09000 	.word	0x03d09000
 8007a00:	4c742400 	.word	0x4c742400

08007a04 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a04:	4a46      	ldr	r2, [pc, #280]	; (8007b20 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
{
 8007a06:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a08:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007a0a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007a0c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007a0e:	f3c3 1305 	ubfx	r3, r3, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007a12:	6b55      	ldr	r5, [r2, #52]	; 0x34
  if (pll1m != 0U)
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d059      	beq.n	8007acc <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007a18:	f3c5 05cc 	ubfx	r5, r5, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007a1c:	f001 0101 	and.w	r1, r1, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a20:	f004 0403 	and.w	r4, r4, #3
 8007a24:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007a28:	fb01 f105 	mul.w	r1, r1, r5
    switch (pllsource)
 8007a2c:	2c01      	cmp	r4, #1
 8007a2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a32:	ee06 1a90 	vmov	s13, r1
 8007a36:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8007a3a:	d002      	beq.n	8007a42 <HAL_RCCEx_GetPLL1ClockFreq+0x3e>
 8007a3c:	d34e      	bcc.n	8007adc <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 8007a3e:	2c02      	cmp	r4, #2
 8007a40:	d049      	beq.n	8007ad6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007a42:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007b24 <HAL_RCCEx_GetPLL1ClockFreq+0x120>
 8007a46:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8007a4a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a50:	ee07 3a10 	vmov	s14, r3
 8007a54:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007a58:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007a5c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8007a60:	ee77 7a26 	vadd.f32	s15, s14, s13
 8007a64:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007a68:	4a2d      	ldr	r2, [pc, #180]	; (8007b20 <HAL_RCCEx_GetPLL1ClockFreq+0x11c>)
 8007a6a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007a6e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007a70:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007a74:	ee06 3a90 	vmov	s13, r3
 8007a78:	eef8 6ae6 	vcvt.f32.s32	s13, s13
}
 8007a7c:	bc30      	pop	{r4, r5}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007a7e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007a82:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007a86:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007a8a:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007a8e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007a90:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007a94:	ee06 3a90 	vmov	s13, r3
 8007a98:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007a9c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007aa0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007aa4:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007aa8:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007aac:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007aae:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007ab2:	ee07 3a10 	vmov	s14, r3
 8007ab6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007aba:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007abe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007ac2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007ac6:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8007aca:	4770      	bx	lr
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007acc:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007ad0:	6083      	str	r3, [r0, #8]
}
 8007ad2:	bc30      	pop	{r4, r5}
 8007ad4:	4770      	bx	lr
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ad6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007b28 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8007ada:	e7b4      	b.n	8007a46 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007adc:	6813      	ldr	r3, [r2, #0]
 8007ade:	069b      	lsls	r3, r3, #26
 8007ae0:	d51a      	bpl.n	8007b18 <HAL_RCCEx_GetPLL1ClockFreq+0x114>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ae2:	6814      	ldr	r4, [r2, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ae4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ae8:	4910      	ldr	r1, [pc, #64]	; (8007b2c <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 8007aea:	f3c4 04c1 	ubfx	r4, r4, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007aee:	6b13      	ldr	r3, [r2, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007af0:	40e1      	lsrs	r1, r4
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007af6:	ee07 1a10 	vmov	s14, r1
 8007afa:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8007afe:	ee07 3a10 	vmov	s14, r3
 8007b02:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8007b06:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8007b0a:	ee76 7a05 	vadd.f32	s15, s12, s10
 8007b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b16:	e7a7      	b.n	8007a68 <HAL_RCCEx_GetPLL1ClockFreq+0x64>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b18:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8007b30 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 8007b1c:	e793      	b.n	8007a46 <HAL_RCCEx_GetPLL1ClockFreq+0x42>
 8007b1e:	bf00      	nop
 8007b20:	58024400 	.word	0x58024400
 8007b24:	4a742400 	.word	0x4a742400
 8007b28:	4af42400 	.word	0x4af42400
 8007b2c:	03d09000 	.word	0x03d09000
 8007b30:	4c742400 	.word	0x4c742400

08007b34 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007b34:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8007b38:	b500      	push	{lr}
 8007b3a:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007b3c:	d02d      	beq.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x66>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007b3e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8007b42:	d018      	beq.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007b44:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007b48:	d04e      	beq.n	8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007b4a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8007b4e:	d037      	beq.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007b50:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8007b54:	f000 808b 	beq.w	8007c6e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007b58:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8007b5c:	f000 80ac 	beq.w	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007b60:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8007b64:	f000 80b6 	beq.w	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007b68:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8007b6c:	d062      	beq.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
          frequency = 0;
 8007b6e:	2000      	movs	r0, #0
}
 8007b70:	b005      	add	sp, #20
 8007b72:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007b76:	4a70      	ldr	r2, [pc, #448]	; (8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007b78:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007b7a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 8007b7e:	2b80      	cmp	r3, #128	; 0x80
 8007b80:	d043      	beq.n	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8007b82:	d86a      	bhi.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d039      	beq.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8007b88:	2b40      	cmp	r3, #64	; 0x40
 8007b8a:	d1f0      	bne.n	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b8c:	a801      	add	r0, sp, #4
 8007b8e:	f7ff fe09 	bl	80077a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b92:	9801      	ldr	r0, [sp, #4]
}
 8007b94:	b005      	add	sp, #20
 8007b96:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007b9a:	4b67      	ldr	r3, [pc, #412]	; (8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b9e:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8007ba2:	2b04      	cmp	r3, #4
 8007ba4:	d8e3      	bhi.n	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007ba6:	a201      	add	r2, pc, #4	; (adr r2, 8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x78>)
 8007ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bac:	08007bfd 	.word	0x08007bfd
 8007bb0:	08007b8d 	.word	0x08007b8d
 8007bb4:	08007c0b 	.word	0x08007c0b
 8007bb8:	08007be1 	.word	0x08007be1
 8007bbc:	08007c19 	.word	0x08007c19
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007bc0:	4a5d      	ldr	r2, [pc, #372]	; (8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007bc2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007bc4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8007bc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bcc:	d01d      	beq.n	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8007bce:	d85c      	bhi.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 8007bd0:	b1a3      	cbz	r3, 8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8007bd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007bd6:	d0d9      	beq.n	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8007bd8:	e7c9      	b.n	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 8007bda:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007bde:	d15b      	bne.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x164>
          frequency = EXTERNAL_CLOCK_VALUE;
 8007be0:	4856      	ldr	r0, [pc, #344]	; (8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
}
 8007be2:	b005      	add	sp, #20
 8007be4:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007be8:	4a53      	ldr	r2, [pc, #332]	; (8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007bea:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007bec:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 8007bf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bf4:	d009      	beq.n	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8007bf6:	d8f0      	bhi.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d151      	bne.n	8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bfc:	a801      	add	r0, sp, #4
 8007bfe:	f7ff ff01 	bl	8007a04 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c02:	9802      	ldr	r0, [sp, #8]
}
 8007c04:	b005      	add	sp, #20
 8007c06:	f85d fb04 	ldr.w	pc, [sp], #4
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c0a:	a801      	add	r0, sp, #4
 8007c0c:	f7ff fe62 	bl	80078d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007c10:	9801      	ldr	r0, [sp, #4]
}
 8007c12:	b005      	add	sp, #20
 8007c14:	f85d fb04 	ldr.w	pc, [sp], #4
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c18:	4b47      	ldr	r3, [pc, #284]	; (8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007c1c:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8007c20:	d019      	beq.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007c22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c26:	d062      	beq.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
            frequency = HSE_VALUE;
 8007c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c2c:	4844      	ldr	r0, [pc, #272]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
 8007c2e:	bf18      	it	ne
 8007c30:	2000      	movne	r0, #0
 8007c32:	e79d      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007c34:	4b40      	ldr	r3, [pc, #256]	; (8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c38:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8007c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c40:	d068      	beq.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8007c42:	d95b      	bls.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>
 8007c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c48:	d051      	beq.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 8007c4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c4e:	d05f      	beq.n	8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8007c50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c54:	d18b      	bne.n	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
            frequency = HSI_VALUE;
 8007c56:	483b      	ldr	r0, [pc, #236]	; (8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x210>)
 8007c58:	e78a      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (saiclocksource)
 8007c5a:	2bc0      	cmp	r3, #192	; 0xc0
 8007c5c:	d0c0      	beq.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8007c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c62:	d184      	bne.n	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007c64:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007c66:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8007c6a:	d1da      	bne.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8007c6c:	e7f3      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007c6e:	4a32      	ldr	r2, [pc, #200]	; (8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007c70:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007c72:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 8007c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c7a:	d0c6      	beq.n	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8007c7c:	d815      	bhi.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d0bc      	beq.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8007c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c86:	d081      	beq.n	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8007c88:	e771      	b.n	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 8007c8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007c8e:	d0a7      	beq.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8007c90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c94:	d0e6      	beq.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8007c96:	e76a      	b.n	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (saiclocksource)
 8007c98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c9c:	d0e2      	beq.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8007c9e:	e766      	b.n	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007ca0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ca4:	f43f af72 	beq.w	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
 8007ca8:	e761      	b.n	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      switch (srcclk)
 8007caa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007cae:	d097      	beq.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8007cb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cb4:	d0d6      	beq.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8007cb6:	e75a      	b.n	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007cb8:	4a1f      	ldr	r2, [pc, #124]	; (8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007cba:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007cbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8007cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cc4:	d015      	beq.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007cc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cca:	d0cb      	beq.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f47f af4e 	bne.w	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8007cd2:	e75b      	b.n	8007b8c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007cd4:	4b18      	ldr	r3, [pc, #96]	; (8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      switch (srcclk)
 8007cd8:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8007cdc:	d08e      	beq.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f43f af45 	beq.w	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ce4:	a801      	add	r0, sp, #4
 8007ce6:	f7ff fd5d 	bl	80077a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007cea:	9803      	ldr	r0, [sp, #12]
          break;
 8007cec:	e740      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
            frequency = CSI_VALUE;
 8007cee:	4816      	ldr	r0, [pc, #88]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x214>)
 8007cf0:	e73e      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cf2:	a801      	add	r0, sp, #4
 8007cf4:	f7ff fdee 	bl	80078d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007cf8:	9803      	ldr	r0, [sp, #12]
          break;
 8007cfa:	e739      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
      switch (srcclk)
 8007cfc:	b17b      	cbz	r3, 8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8007cfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d02:	f47f af34 	bne.w	8007b6e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d06:	a801      	add	r0, sp, #4
 8007d08:	f7ff fd4c 	bl	80077a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d0c:	9802      	ldr	r0, [sp, #8]
          break;
 8007d0e:	e72f      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          frequency = HSE_VALUE;
 8007d10:	480b      	ldr	r0, [pc, #44]	; (8007d40 <HAL_RCCEx_GetPeriphCLKFreq+0x20c>)
          break;
 8007d12:	e72d      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d14:	a801      	add	r0, sp, #4
 8007d16:	f7ff fddd 	bl	80078d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d1a:	9802      	ldr	r0, [sp, #8]
          break;
 8007d1c:	e728      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007d1e:	f7fe fce1 	bl	80066e4 <HAL_RCC_GetHCLKFreq>
 8007d22:	4b05      	ldr	r3, [pc, #20]	; (8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8007d24:	4a09      	ldr	r2, [pc, #36]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x218>)
 8007d26:	6a1b      	ldr	r3, [r3, #32]
 8007d28:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007d2c:	5cd3      	ldrb	r3, [r2, r3]
 8007d2e:	f003 031f 	and.w	r3, r3, #31
 8007d32:	40d8      	lsrs	r0, r3
          break;
 8007d34:	e71c      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007d36:	bf00      	nop
 8007d38:	58024400 	.word	0x58024400
 8007d3c:	00bb8000 	.word	0x00bb8000
 8007d40:	007a1200 	.word	0x007a1200
 8007d44:	03d09000 	.word	0x03d09000
 8007d48:	003d0900 	.word	0x003d0900
 8007d4c:	0801ac60 	.word	0x0801ac60

08007d50 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d50:	2800      	cmp	r0, #0
 8007d52:	d060      	beq.n	8007e16 <HAL_TIM_Base_Init+0xc6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d54:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8007d58:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8007d5a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007d5e:	4604      	mov	r4, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d053      	beq.n	8007e0c <HAL_TIM_Base_Init+0xbc>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d64:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007d66:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d68:	4931      	ldr	r1, [pc, #196]	; (8007e30 <HAL_TIM_Base_Init+0xe0>)
 8007d6a:	4e32      	ldr	r6, [pc, #200]	; (8007e34 <HAL_TIM_Base_Init+0xe4>)
 8007d6c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007d70:	eba2 0101 	sub.w	r1, r2, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8007d74:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8007d78:	eba2 0606 	sub.w	r6, r2, r6
  tmpcr1 = TIMx->CR1;
 8007d7c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d7e:	fab1 f181 	clz	r1, r1
 8007d82:	fab6 f686 	clz	r6, r6
 8007d86:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8007d8a:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8007d8e:	d018      	beq.n	8007dc2 <HAL_TIM_Base_Init+0x72>
 8007d90:	b9b9      	cbnz	r1, 8007dc2 <HAL_TIM_Base_Init+0x72>
 8007d92:	4829      	ldr	r0, [pc, #164]	; (8007e38 <HAL_TIM_Base_Init+0xe8>)
 8007d94:	4282      	cmp	r2, r0
 8007d96:	d014      	beq.n	8007dc2 <HAL_TIM_Base_Init+0x72>
 8007d98:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8007d9c:	4282      	cmp	r2, r0
 8007d9e:	d010      	beq.n	8007dc2 <HAL_TIM_Base_Init+0x72>
 8007da0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8007da4:	4282      	cmp	r2, r0
 8007da6:	d038      	beq.n	8007e1a <HAL_TIM_Base_Init+0xca>
 8007da8:	2e00      	cmp	r6, #0
 8007daa:	d136      	bne.n	8007e1a <HAL_TIM_Base_Init+0xca>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dac:	4d23      	ldr	r5, [pc, #140]	; (8007e3c <HAL_TIM_Base_Init+0xec>)
 8007dae:	4824      	ldr	r0, [pc, #144]	; (8007e40 <HAL_TIM_Base_Init+0xf0>)
 8007db0:	4282      	cmp	r2, r0
 8007db2:	bf18      	it	ne
 8007db4:	42aa      	cmpne	r2, r5
 8007db6:	d008      	beq.n	8007dca <HAL_TIM_Base_Init+0x7a>
 8007db8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8007dbc:	4282      	cmp	r2, r0
 8007dbe:	d108      	bne.n	8007dd2 <HAL_TIM_Base_Init+0x82>
 8007dc0:	e003      	b.n	8007dca <HAL_TIM_Base_Init+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007dc6:	68a0      	ldr	r0, [r4, #8]
 8007dc8:	4303      	orrs	r3, r0
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dce:	6920      	ldr	r0, [r4, #16]
 8007dd0:	4303      	orrs	r3, r0
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dd2:	69a0      	ldr	r0, [r4, #24]
 8007dd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dd8:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dda:	4303      	orrs	r3, r0

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ddc:	6860      	ldr	r0, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8007dde:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007de0:	62d5      	str	r5, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007de2:	6290      	str	r0, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007de4:	b951      	cbnz	r1, 8007dfc <HAL_TIM_Base_Init+0xac>
 8007de6:	b94e      	cbnz	r6, 8007dfc <HAL_TIM_Base_Init+0xac>
 8007de8:	4914      	ldr	r1, [pc, #80]	; (8007e3c <HAL_TIM_Base_Init+0xec>)
 8007dea:	4b15      	ldr	r3, [pc, #84]	; (8007e40 <HAL_TIM_Base_Init+0xf0>)
 8007dec:	429a      	cmp	r2, r3
 8007dee:	bf18      	it	ne
 8007df0:	428a      	cmpne	r2, r1
 8007df2:	d003      	beq.n	8007dfc <HAL_TIM_Base_Init+0xac>
 8007df4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d101      	bne.n	8007e00 <HAL_TIM_Base_Init+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007dfc:	6963      	ldr	r3, [r4, #20]
 8007dfe:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e00:	2301      	movs	r3, #1
  return HAL_OK;
 8007e02:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8007e04:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 8007e06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007e0a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8007e0c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007e10:	f7fb fb94 	bl	800353c <HAL_TIM_Base_MspInit>
 8007e14:	e7a6      	b.n	8007d64 <HAL_TIM_Base_Init+0x14>
    return HAL_ERROR;
 8007e16:	2001      	movs	r0, #1
}
 8007e18:	4770      	bx	lr
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e1a:	480a      	ldr	r0, [pc, #40]	; (8007e44 <HAL_TIM_Base_Init+0xf4>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007e20:	68a5      	ldr	r5, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e22:	4282      	cmp	r2, r0
    tmpcr1 |= Structure->CounterMode;
 8007e24:	ea43 0305 	orr.w	r3, r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e28:	d0cf      	beq.n	8007dca <HAL_TIM_Base_Init+0x7a>
 8007e2a:	2e00      	cmp	r6, #0
 8007e2c:	d1cd      	bne.n	8007dca <HAL_TIM_Base_Init+0x7a>
 8007e2e:	e7bd      	b.n	8007dac <HAL_TIM_Base_Init+0x5c>
 8007e30:	40010000 	.word	0x40010000
 8007e34:	40010400 	.word	0x40010400
 8007e38:	40000400 	.word	0x40000400
 8007e3c:	40014000 	.word	0x40014000
 8007e40:	40014400 	.word	0x40014400
 8007e44:	40000c00 	.word	0x40000c00

08007e48 <HAL_TIM_Base_Start>:
{
 8007e48:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8007e4a:	2002      	movs	r0, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e4c:	4b09      	ldr	r3, [pc, #36]	; (8007e74 <HAL_TIM_Base_Start+0x2c>)
 8007e4e:	6811      	ldr	r1, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007e50:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e54:	6888      	ldr	r0, [r1, #8]
 8007e56:	4003      	ands	r3, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e58:	2b06      	cmp	r3, #6
 8007e5a:	d006      	beq.n	8007e6a <HAL_TIM_Base_Start+0x22>
 8007e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e60:	d003      	beq.n	8007e6a <HAL_TIM_Base_Start+0x22>
    __HAL_TIM_ENABLE(htim);
 8007e62:	680b      	ldr	r3, [r1, #0]
 8007e64:	f043 0301 	orr.w	r3, r3, #1
 8007e68:	600b      	str	r3, [r1, #0]
  htim->State = HAL_TIM_STATE_READY;
 8007e6a:	2301      	movs	r3, #1
}
 8007e6c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007e6e:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
}
 8007e72:	4770      	bx	lr
 8007e74:	00010007 	.word	0x00010007

08007e78 <HAL_TIM_PeriodElapsedCallback>:
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop

08007e7c <HAL_TIM_OC_DelayElapsedCallback>:
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop

08007e80 <HAL_TIM_IC_CaptureCallback>:
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop

08007e84 <HAL_TIM_PWM_PulseFinishedCallback>:
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop

08007e88 <HAL_TIM_TriggerCallback>:
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop

08007e8c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e8c:	6803      	ldr	r3, [r0, #0]
 8007e8e:	691a      	ldr	r2, [r3, #16]
 8007e90:	0791      	lsls	r1, r2, #30
{
 8007e92:	b510      	push	{r4, lr}
 8007e94:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e96:	d502      	bpl.n	8007e9e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e98:	68da      	ldr	r2, [r3, #12]
 8007e9a:	0792      	lsls	r2, r2, #30
 8007e9c:	d468      	bmi.n	8007f70 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e9e:	691a      	ldr	r2, [r3, #16]
 8007ea0:	0752      	lsls	r2, r2, #29
 8007ea2:	d502      	bpl.n	8007eaa <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ea4:	68da      	ldr	r2, [r3, #12]
 8007ea6:	0750      	lsls	r0, r2, #29
 8007ea8:	d44f      	bmi.n	8007f4a <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007eaa:	691a      	ldr	r2, [r3, #16]
 8007eac:	0711      	lsls	r1, r2, #28
 8007eae:	d502      	bpl.n	8007eb6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007eb0:	68da      	ldr	r2, [r3, #12]
 8007eb2:	0712      	lsls	r2, r2, #28
 8007eb4:	d437      	bmi.n	8007f26 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007eb6:	691a      	ldr	r2, [r3, #16]
 8007eb8:	06d0      	lsls	r0, r2, #27
 8007eba:	d502      	bpl.n	8007ec2 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ebc:	68da      	ldr	r2, [r3, #12]
 8007ebe:	06d1      	lsls	r1, r2, #27
 8007ec0:	d41e      	bmi.n	8007f00 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ec2:	691a      	ldr	r2, [r3, #16]
 8007ec4:	07d2      	lsls	r2, r2, #31
 8007ec6:	d502      	bpl.n	8007ece <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ec8:	68da      	ldr	r2, [r3, #12]
 8007eca:	07d0      	lsls	r0, r2, #31
 8007ecc:	d469      	bmi.n	8007fa2 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ece:	691a      	ldr	r2, [r3, #16]
 8007ed0:	0611      	lsls	r1, r2, #24
 8007ed2:	d502      	bpl.n	8007eda <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ed4:	68da      	ldr	r2, [r3, #12]
 8007ed6:	0612      	lsls	r2, r2, #24
 8007ed8:	d46b      	bmi.n	8007fb2 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007eda:	691a      	ldr	r2, [r3, #16]
 8007edc:	05d0      	lsls	r0, r2, #23
 8007ede:	d502      	bpl.n	8007ee6 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ee0:	68da      	ldr	r2, [r3, #12]
 8007ee2:	0611      	lsls	r1, r2, #24
 8007ee4:	d46d      	bmi.n	8007fc2 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ee6:	691a      	ldr	r2, [r3, #16]
 8007ee8:	0652      	lsls	r2, r2, #25
 8007eea:	d502      	bpl.n	8007ef2 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007eec:	68da      	ldr	r2, [r3, #12]
 8007eee:	0650      	lsls	r0, r2, #25
 8007ef0:	d46f      	bmi.n	8007fd2 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ef2:	691a      	ldr	r2, [r3, #16]
 8007ef4:	0691      	lsls	r1, r2, #26
 8007ef6:	d502      	bpl.n	8007efe <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ef8:	68da      	ldr	r2, [r3, #12]
 8007efa:	0692      	lsls	r2, r2, #26
 8007efc:	d449      	bmi.n	8007f92 <HAL_TIM_IRQHandler+0x106>
}
 8007efe:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f00:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f04:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8007f06:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f08:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f0a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f0c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f0e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007f12:	d16f      	bne.n	8007ff4 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f14:	f7ff ffb2 	bl	8007e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f18:	4620      	mov	r0, r4
 8007f1a:	f7ff ffb3 	bl	8007e84 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f1e:	2200      	movs	r2, #0
 8007f20:	6823      	ldr	r3, [r4, #0]
 8007f22:	7722      	strb	r2, [r4, #28]
 8007f24:	e7cd      	b.n	8007ec2 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f26:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f2a:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8007f2c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f2e:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f30:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f32:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f34:	079b      	lsls	r3, r3, #30
 8007f36:	d15a      	bne.n	8007fee <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f38:	f7ff ffa0 	bl	8007e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f7ff ffa1 	bl	8007e84 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f42:	2200      	movs	r2, #0
 8007f44:	6823      	ldr	r3, [r4, #0]
 8007f46:	7722      	strb	r2, [r4, #28]
 8007f48:	e7b5      	b.n	8007eb6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f4a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f4e:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8007f50:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f52:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f54:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f56:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f58:	f413 7f40 	tst.w	r3, #768	; 0x300
 8007f5c:	d144      	bne.n	8007fe8 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f5e:	f7ff ff8d 	bl	8007e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f62:	4620      	mov	r0, r4
 8007f64:	f7ff ff8e 	bl	8007e84 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f68:	2200      	movs	r2, #0
 8007f6a:	6823      	ldr	r3, [r4, #0]
 8007f6c:	7722      	strb	r2, [r4, #28]
 8007f6e:	e79c      	b.n	8007eaa <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f70:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f74:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f76:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f78:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f7a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f7c:	0799      	lsls	r1, r3, #30
 8007f7e:	d130      	bne.n	8007fe2 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f80:	f7ff ff7c 	bl	8007e7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f84:	4620      	mov	r0, r4
 8007f86:	f7ff ff7d 	bl	8007e84 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	6823      	ldr	r3, [r4, #0]
 8007f8e:	7722      	strb	r2, [r4, #28]
 8007f90:	e785      	b.n	8007e9e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f92:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8007f96:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f98:	611a      	str	r2, [r3, #16]
}
 8007f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8007f9e:	f000 b887 	b.w	80080b0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007fa2:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8007fa6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007fa8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007faa:	f7ff ff65 	bl	8007e78 <HAL_TIM_PeriodElapsedCallback>
 8007fae:	6823      	ldr	r3, [r4, #0]
 8007fb0:	e78d      	b.n	8007ece <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007fb2:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8007fb6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007fb8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007fba:	f000 f87b 	bl	80080b4 <HAL_TIMEx_BreakCallback>
 8007fbe:	6823      	ldr	r3, [r4, #0]
 8007fc0:	e78b      	b.n	8007eda <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007fc2:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8007fc6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007fc8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8007fca:	f000 f875 	bl	80080b8 <HAL_TIMEx_Break2Callback>
 8007fce:	6823      	ldr	r3, [r4, #0]
 8007fd0:	e789      	b.n	8007ee6 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007fd2:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8007fd6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007fd8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007fda:	f7ff ff55 	bl	8007e88 <HAL_TIM_TriggerCallback>
 8007fde:	6823      	ldr	r3, [r4, #0]
 8007fe0:	e787      	b.n	8007ef2 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8007fe2:	f7ff ff4d 	bl	8007e80 <HAL_TIM_IC_CaptureCallback>
 8007fe6:	e7d0      	b.n	8007f8a <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8007fe8:	f7ff ff4a 	bl	8007e80 <HAL_TIM_IC_CaptureCallback>
 8007fec:	e7bc      	b.n	8007f68 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8007fee:	f7ff ff47 	bl	8007e80 <HAL_TIM_IC_CaptureCallback>
 8007ff2:	e7a6      	b.n	8007f42 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8007ff4:	f7ff ff44 	bl	8007e80 <HAL_TIM_IC_CaptureCallback>
 8007ff8:	e791      	b.n	8007f1e <HAL_TIM_IRQHandler+0x92>
 8007ffa:	bf00      	nop

08007ffc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ffc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008000:	2b01      	cmp	r3, #1
 8008002:	d045      	beq.n	8008090 <HAL_TIMEx_MasterConfigSynchronization+0x94>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008004:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008006:	4a24      	ldr	r2, [pc, #144]	; (8008098 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
{
 8008008:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800800a:	4e24      	ldr	r6, [pc, #144]	; (800809c <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
  htim->State = HAL_TIM_STATE_BUSY;
 800800c:	2502      	movs	r5, #2
  __HAL_LOCK(htim);
 800800e:	2401      	movs	r4, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008010:	4293      	cmp	r3, r2
 8008012:	bf18      	it	ne
 8008014:	42b3      	cmpne	r3, r6
  htim->State = HAL_TIM_STATE_BUSY;
 8008016:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 800801a:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800801e:	bf08      	it	eq
 8008020:	2601      	moveq	r6, #1
  tmpcr2 = htim->Instance->CR2;
 8008022:	685c      	ldr	r4, [r3, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008024:	bf18      	it	ne
 8008026:	2600      	movne	r6, #0
  tmpsmcr = htim->Instance->SMCR;
 8008028:	689d      	ldr	r5, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800802a:	d103      	bne.n	8008034 <HAL_TIMEx_MasterConfigSynchronization+0x38>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800802c:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008030:	684a      	ldr	r2, [r1, #4]
 8008032:	4314      	orrs	r4, r2
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008034:	4a1a      	ldr	r2, [pc, #104]	; (80080a0 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8008036:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800803a:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800803c:	4293      	cmp	r3, r2
 800803e:	bf18      	it	ne
 8008040:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8008044:	f8df c064 	ldr.w	ip, [pc, #100]	; 80080ac <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008048:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800804c:	4f15      	ldr	r7, [pc, #84]	; (80080a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800804e:	bf0c      	ite	eq
 8008050:	2201      	moveq	r2, #1
 8008052:	2200      	movne	r2, #0
  htim->Instance->CR2 = tmpcr2;
 8008054:	605c      	str	r4, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008056:	4563      	cmp	r3, ip
 8008058:	bf08      	it	eq
 800805a:	f042 0201 	orreq.w	r2, r2, #1
 800805e:	4c12      	ldr	r4, [pc, #72]	; (80080a8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8008060:	42bb      	cmp	r3, r7
 8008062:	bf08      	it	eq
 8008064:	f042 0201 	orreq.w	r2, r2, #1
 8008068:	42a3      	cmp	r3, r4
 800806a:	bf08      	it	eq
 800806c:	f042 0201 	orreq.w	r2, r2, #1
 8008070:	b902      	cbnz	r2, 8008074 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8008072:	b126      	cbz	r6, 800807e <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008074:	688a      	ldr	r2, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008076:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800807a:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800807c:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800807e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8008080:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8008082:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8008086:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  return HAL_OK;
}
 800808a:	4618      	mov	r0, r3
 800808c:	bcf0      	pop	{r4, r5, r6, r7}
 800808e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008090:	2202      	movs	r2, #2
}
 8008092:	4610      	mov	r0, r2
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	40010400 	.word	0x40010400
 800809c:	40010000 	.word	0x40010000
 80080a0:	40000400 	.word	0x40000400
 80080a4:	40000c00 	.word	0x40000c00
 80080a8:	40001800 	.word	0x40001800
 80080ac:	40000800 	.word	0x40000800

080080b0 <HAL_TIMEx_CommutCallback>:
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop

080080b4 <HAL_TIMEx_BreakCallback>:
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop

080080b8 <HAL_TIMEx_Break2Callback>:
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop

080080bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080c0:	461e      	mov	r6, r3
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080c2:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 80080c6:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 80080c8:	2b20      	cmp	r3, #32
 80080ca:	d14a      	bne.n	8008162 <HAL_UART_Transmit+0xa6>
 80080cc:	4689      	mov	r9, r1
  {
    if ((pData == NULL) || (Size == 0U))
 80080ce:	2900      	cmp	r1, #0
 80080d0:	d04b      	beq.n	800816a <HAL_UART_Transmit+0xae>
 80080d2:	fab2 f782 	clz	r7, r2
 80080d6:	9201      	str	r2, [sp, #4]
 80080d8:	097f      	lsrs	r7, r7, #5
 80080da:	2f00      	cmp	r7, #0
 80080dc:	d145      	bne.n	800816a <HAL_UART_Transmit+0xae>
    {
      return  HAL_ERROR;
    }

    __HAL_LOCK(huart);
 80080de:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80080e2:	4605      	mov	r5, r0
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d03c      	beq.n	8008162 <HAL_UART_Transmit+0xa6>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080e8:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 80080ea:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ec:	f8c0 7088 	str.w	r7, [r0, #136]	; 0x88
    __HAL_LOCK(huart);
 80080f0:	f880 107c 	strb.w	r1, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080f4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80080f8:	f7fb fbb6 	bl	8003868 <HAL_GetTick>

    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080fc:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize  = Size;
 80080fe:	9a01      	ldr	r2, [sp, #4]
    tickstart = HAL_GetTick();
 8008100:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize  = Size;
 8008106:	f8a5 2054 	strh.w	r2, [r5, #84]	; 0x54
    huart->TxXferCount = Size;
 800810a:	f8a5 2056 	strh.w	r2, [r5, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800810e:	f000 8089 	beq.w	8008224 <HAL_UART_Transmit+0x168>
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
    }

    while (huart->TxXferCount > 0U)
 8008112:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8008116:	682c      	ldr	r4, [r5, #0]
 8008118:	b29b      	uxth	r3, r3
 800811a:	b1ab      	cbz	r3, 8008148 <HAL_UART_Transmit+0x8c>
 800811c:	1c71      	adds	r1, r6, #1
 800811e:	d128      	bne.n	8008172 <HAL_UART_Transmit+0xb6>
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008120:	69e2      	ldr	r2, [r4, #28]
 8008122:	0612      	lsls	r2, r2, #24
 8008124:	d5fc      	bpl.n	8008120 <HAL_UART_Transmit+0x64>
      if (pdata8bits == NULL)
 8008126:	f1b9 0f00 	cmp.w	r9, #0
 800812a:	d038      	beq.n	800819e <HAL_UART_Transmit+0xe2>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800812c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8008130:	62a3      	str	r3, [r4, #40]	; 0x28
      huart->TxXferCount--;
 8008132:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8008136:	3b01      	subs	r3, #1
 8008138:	b29b      	uxth	r3, r3
 800813a:	f8a5 3056 	strh.w	r3, [r5, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800813e:	f8b5 3056 	ldrh.w	r3, [r5, #86]	; 0x56
 8008142:	b29b      	uxth	r3, r3
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1e9      	bne.n	800811c <HAL_UART_Transmit+0x60>
 8008148:	1c71      	adds	r1, r6, #1
 800814a:	d12d      	bne.n	80081a8 <HAL_UART_Transmit+0xec>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800814c:	69e3      	ldr	r3, [r4, #28]
 800814e:	065a      	lsls	r2, r3, #25
 8008150:	d5fc      	bpl.n	800814c <HAL_UART_Transmit+0x90>
    __HAL_UNLOCK(huart);
 8008152:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_READY;
 8008154:	2220      	movs	r2, #32
    return HAL_OK;
 8008156:	4618      	mov	r0, r3
    huart->gState = HAL_UART_STATE_READY;
 8008158:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
    __HAL_UNLOCK(huart);
 800815c:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
    return HAL_OK;
 8008160:	e000      	b.n	8008164 <HAL_UART_Transmit+0xa8>
    return HAL_BUSY;
 8008162:	2002      	movs	r0, #2
}
 8008164:	b003      	add	sp, #12
 8008166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 800816a:	2001      	movs	r0, #1
}
 800816c:	b003      	add	sp, #12
 800816e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008172:	69e3      	ldr	r3, [r4, #28]
 8008174:	061b      	lsls	r3, r3, #24
 8008176:	d4d6      	bmi.n	8008126 <HAL_UART_Transmit+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008178:	f7fb fb76 	bl	8003868 <HAL_GetTick>
 800817c:	eba0 0008 	sub.w	r0, r0, r8
 8008180:	4286      	cmp	r6, r0
 8008182:	d33c      	bcc.n	80081fe <HAL_UART_Transmit+0x142>
 8008184:	fab6 f386 	clz	r3, r6
 8008188:	095b      	lsrs	r3, r3, #5
 800818a:	2b00      	cmp	r3, #0
 800818c:	d137      	bne.n	80081fe <HAL_UART_Transmit+0x142>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800818e:	682c      	ldr	r4, [r5, #0]
 8008190:	6822      	ldr	r2, [r4, #0]
 8008192:	0752      	lsls	r2, r2, #29
 8008194:	d5c2      	bpl.n	800811c <HAL_UART_Transmit+0x60>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008196:	69e2      	ldr	r2, [r4, #28]
 8008198:	0510      	lsls	r0, r2, #20
 800819a:	d5bf      	bpl.n	800811c <HAL_UART_Transmit+0x60>
 800819c:	e019      	b.n	80081d2 <HAL_UART_Transmit+0x116>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800819e:	f837 3b02 	ldrh.w	r3, [r7], #2
 80081a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081a6:	e7c3      	b.n	8008130 <HAL_UART_Transmit+0x74>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081a8:	69e3      	ldr	r3, [r4, #28]
 80081aa:	065b      	lsls	r3, r3, #25
 80081ac:	d4d1      	bmi.n	8008152 <HAL_UART_Transmit+0x96>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081ae:	f7fb fb5b 	bl	8003868 <HAL_GetTick>
 80081b2:	eba0 0008 	sub.w	r0, r0, r8
 80081b6:	fab6 f386 	clz	r3, r6
 80081ba:	4286      	cmp	r6, r0
 80081bc:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80081c0:	d31d      	bcc.n	80081fe <HAL_UART_Transmit+0x142>
 80081c2:	b9e3      	cbnz	r3, 80081fe <HAL_UART_Transmit+0x142>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80081c4:	682c      	ldr	r4, [r5, #0]
 80081c6:	6822      	ldr	r2, [r4, #0]
 80081c8:	0757      	lsls	r7, r2, #29
 80081ca:	d5bd      	bpl.n	8008148 <HAL_UART_Transmit+0x8c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081cc:	69e2      	ldr	r2, [r4, #28]
 80081ce:	0510      	lsls	r0, r2, #20
 80081d0:	d5ba      	bpl.n	8008148 <HAL_UART_Transmit+0x8c>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

          huart->gState = HAL_UART_STATE_READY;
 80081d6:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 80081d8:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081da:	6221      	str	r1, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80081dc:	6821      	ldr	r1, [r4, #0]
 80081de:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 80081e2:	6021      	str	r1, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081e4:	68a1      	ldr	r1, [r4, #8]
 80081e6:	f021 0101 	bic.w	r1, r1, #1
 80081ea:	60a1      	str	r1, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 80081ec:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081f0:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80081f4:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081f8:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
 80081fc:	e7b2      	b.n	8008164 <HAL_UART_Transmit+0xa8>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80081fe:	682b      	ldr	r3, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 8008200:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8008202:	2400      	movs	r4, #0
      return HAL_TIMEOUT;
 8008204:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800820c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800820e:	689a      	ldr	r2, [r3, #8]
 8008210:	f022 0201 	bic.w	r2, r2, #1
 8008214:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8008216:	f8c5 1080 	str.w	r1, [r5, #128]	; 0x80
        __HAL_UNLOCK(huart);
 800821a:	f885 407c 	strb.w	r4, [r5, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800821e:	f8c5 1084 	str.w	r1, [r5, #132]	; 0x84
 8008222:	e79f      	b.n	8008164 <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008224:	692b      	ldr	r3, [r5, #16]
 8008226:	2b00      	cmp	r3, #0
 8008228:	f47f af73 	bne.w	8008112 <HAL_UART_Transmit+0x56>
 800822c:	464f      	mov	r7, r9
      pdata8bits  = NULL;
 800822e:	4699      	mov	r9, r3
 8008230:	e76f      	b.n	8008112 <HAL_UART_Transmit+0x56>
 8008232:	bf00      	nop

08008234 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8008234:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8008238:	2b20      	cmp	r3, #32
 800823a:	d13d      	bne.n	80082b8 <HAL_UART_Receive_IT+0x84>
    if ((pData == NULL) || (Size == 0U))
 800823c:	2900      	cmp	r1, #0
 800823e:	d039      	beq.n	80082b4 <HAL_UART_Receive_IT+0x80>
 8008240:	fab2 f382 	clz	r3, r2
 8008244:	095b      	lsrs	r3, r3, #5
 8008246:	2b00      	cmp	r3, #0
 8008248:	d134      	bne.n	80082b4 <HAL_UART_Receive_IT+0x80>
{
 800824a:	b470      	push	{r4, r5, r6}
    __HAL_LOCK(huart);
 800824c:	f890 407c 	ldrb.w	r4, [r0, #124]	; 0x7c
 8008250:	2c01      	cmp	r4, #1
 8008252:	d062      	beq.n	800831a <HAL_UART_Receive_IT+0xe6>
    UART_MASK_COMPUTATION(huart);
 8008254:	6884      	ldr	r4, [r0, #8]
    __HAL_LOCK(huart);
 8008256:	2501      	movs	r5, #1
    huart->pRxBuffPtr  = pData;
 8008258:	6581      	str	r1, [r0, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 800825a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    __HAL_LOCK(huart);
 800825e:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
    huart->RxXferSize  = Size;
 8008262:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->RxXferCount = Size;
 8008266:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    huart->RxISR       = NULL;
 800826a:	66c3      	str	r3, [r0, #108]	; 0x6c
 800826c:	6801      	ldr	r1, [r0, #0]
 800826e:	6e45      	ldr	r5, [r0, #100]	; 0x64
    UART_MASK_COMPUTATION(huart);
 8008270:	d024      	beq.n	80082bc <HAL_UART_Receive_IT+0x88>
 8008272:	2c00      	cmp	r4, #0
 8008274:	d146      	bne.n	8008304 <HAL_UART_Receive_IT+0xd0>
 8008276:	6903      	ldr	r3, [r0, #16]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d066      	beq.n	800834a <HAL_UART_Receive_IT+0x116>
 800827c:	237f      	movs	r3, #127	; 0x7f
 800827e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008282:	2400      	movs	r4, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008284:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008286:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800828a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800828e:	688b      	ldr	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008290:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008294:	f043 0301 	orr.w	r3, r3, #1
 8008298:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800829a:	d020      	beq.n	80082de <HAL_UART_Receive_IT+0xaa>
        huart->RxISR = UART_RxISR_8BIT;
 800829c:	4c31      	ldr	r4, [pc, #196]	; (8008364 <HAL_UART_Receive_IT+0x130>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800829e:	680a      	ldr	r2, [r1, #0]
      __HAL_UNLOCK(huart);
 80082a0:	2300      	movs	r3, #0
 80082a2:	66c4      	str	r4, [r0, #108]	; 0x6c
 80082a4:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80082a8:	f442 7290 	orr.w	r2, r2, #288	; 0x120
    return HAL_OK;
 80082ac:	4618      	mov	r0, r3
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80082ae:	600a      	str	r2, [r1, #0]
}
 80082b0:	bc70      	pop	{r4, r5, r6}
 80082b2:	4770      	bx	lr
      return HAL_ERROR;
 80082b4:	2001      	movs	r0, #1
}
 80082b6:	4770      	bx	lr
    return HAL_BUSY;
 80082b8:	2002      	movs	r0, #2
 80082ba:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 80082bc:	6904      	ldr	r4, [r0, #16]
 80082be:	b374      	cbz	r4, 800831e <HAL_UART_Receive_IT+0xea>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082c0:	2622      	movs	r6, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082c2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    UART_MASK_COMPUTATION(huart);
 80082c6:	24ff      	movs	r4, #255	; 0xff
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80082c8:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082cc:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082d0:	688b      	ldr	r3, [r1, #8]
    UART_MASK_COMPUTATION(huart);
 80082d2:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082d6:	f043 0301 	orr.w	r3, r3, #1
 80082da:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80082dc:	d1de      	bne.n	800829c <HAL_UART_Receive_IT+0x68>
 80082de:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d8da      	bhi.n	800829c <HAL_UART_Receive_IT+0x68>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80082e6:	4c20      	ldr	r4, [pc, #128]	; (8008368 <HAL_UART_Receive_IT+0x134>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082e8:	680a      	ldr	r2, [r1, #0]
      __HAL_UNLOCK(huart);
 80082ea:	2300      	movs	r3, #0
 80082ec:	66c4      	str	r4, [r0, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      __HAL_UNLOCK(huart);
 80082f2:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    return HAL_OK;
 80082f6:	4618      	mov	r0, r3
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082f8:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80082fa:	688b      	ldr	r3, [r1, #8]
 80082fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008300:	608b      	str	r3, [r1, #8]
 8008302:	e7d5      	b.n	80082b0 <HAL_UART_Receive_IT+0x7c>
    UART_MASK_COMPUTATION(huart);
 8008304:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 8008308:	d023      	beq.n	8008352 <HAL_UART_Receive_IT+0x11e>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800830a:	2422      	movs	r4, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800830c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    UART_MASK_COMPUTATION(huart);
 8008310:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008314:	f8c0 4084 	str.w	r4, [r0, #132]	; 0x84
 8008318:	e7b9      	b.n	800828e <HAL_UART_Receive_IT+0x5a>
    return HAL_BUSY;
 800831a:	2002      	movs	r0, #2
 800831c:	e7c8      	b.n	80082b0 <HAL_UART_Receive_IT+0x7c>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800831e:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008320:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008324:	f1b5 5f00 	cmp.w	r5, #536870912	; 0x20000000
    UART_MASK_COMPUTATION(huart);
 8008328:	f240 14ff 	movw	r4, #511	; 0x1ff
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800832c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008330:	688b      	ldr	r3, [r1, #8]
    UART_MASK_COMPUTATION(huart);
 8008332:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008336:	f043 0301 	orr.w	r3, r3, #1
 800833a:	608b      	str	r3, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800833c:	d103      	bne.n	8008346 <HAL_UART_Receive_IT+0x112>
 800833e:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8008342:	4293      	cmp	r3, r2
 8008344:	d90c      	bls.n	8008360 <HAL_UART_Receive_IT+0x12c>
        huart->RxISR = UART_RxISR_16BIT;
 8008346:	4c09      	ldr	r4, [pc, #36]	; (800836c <HAL_UART_Receive_IT+0x138>)
 8008348:	e7a9      	b.n	800829e <HAL_UART_Receive_IT+0x6a>
    UART_MASK_COMPUTATION(huart);
 800834a:	23ff      	movs	r3, #255	; 0xff
 800834c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8008350:	e797      	b.n	8008282 <HAL_UART_Receive_IT+0x4e>
 8008352:	6903      	ldr	r3, [r0, #16]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d091      	beq.n	800827c <HAL_UART_Receive_IT+0x48>
 8008358:	233f      	movs	r3, #63	; 0x3f
 800835a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800835e:	e790      	b.n	8008282 <HAL_UART_Receive_IT+0x4e>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008360:	4c03      	ldr	r4, [pc, #12]	; (8008370 <HAL_UART_Receive_IT+0x13c>)
 8008362:	e7c1      	b.n	80082e8 <HAL_UART_Receive_IT+0xb4>
 8008364:	08008379 	.word	0x08008379
 8008368:	08008435 	.word	0x08008435
 800836c:	080083d9 	.word	0x080083d9
 8008370:	080084ed 	.word	0x080084ed

08008374 <HAL_UART_TxCpltCallback>:
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop

08008378 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008378:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 800837c:	6802      	ldr	r2, [r0, #0]
 800837e:	2922      	cmp	r1, #34	; 0x22
{
 8008380:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008382:	d004      	beq.n	800838e <UART_RxISR_8BIT+0x16>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008384:	6993      	ldr	r3, [r2, #24]
 8008386:	f043 0308 	orr.w	r3, r3, #8
 800838a:	6193      	str	r3, [r2, #24]
  }
}
 800838c:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800838e:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008390:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 8008394:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8008396:	4022      	ands	r2, r4
 8008398:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 800839a:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
 800839e:	6d81      	ldr	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80083a0:	3a01      	subs	r2, #1
    huart->pRxBuffPtr++;
 80083a2:	3101      	adds	r1, #1
    huart->RxXferCount--;
 80083a4:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 80083a6:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80083a8:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80083ac:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 80083b0:	b292      	uxth	r2, r2
 80083b2:	2a00      	cmp	r2, #0
 80083b4:	d1ea      	bne.n	800838c <UART_RxISR_8BIT+0x14>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083b6:	6801      	ldr	r1, [r0, #0]
      huart->RxState = HAL_UART_STATE_READY;
 80083b8:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083ba:	680c      	ldr	r4, [r1, #0]
 80083bc:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 80083c0:	600c      	str	r4, [r1, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083c2:	688c      	ldr	r4, [r1, #8]
 80083c4:	f024 0401 	bic.w	r4, r4, #1
 80083c8:	608c      	str	r4, [r1, #8]
      huart->RxISR = NULL;
 80083ca:	66c2      	str	r2, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 80083cc:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
      HAL_UART_RxCpltCallback(huart);
 80083d0:	f7fa fac0 	bl	8002954 <HAL_UART_RxCpltCallback>
}
 80083d4:	bd38      	pop	{r3, r4, r5, pc}
 80083d6:	bf00      	nop

080083d8 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083d8:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 80083dc:	6802      	ldr	r2, [r0, #0]
 80083de:	2922      	cmp	r1, #34	; 0x22
{
 80083e0:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083e2:	d004      	beq.n	80083ee <UART_RxISR_16BIT+0x16>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083e4:	6993      	ldr	r3, [r2, #24]
 80083e6:	f043 0308 	orr.w	r3, r3, #8
 80083ea:	6193      	str	r3, [r2, #24]
  }
}
 80083ec:	bd38      	pop	{r3, r4, r5, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083ee:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 80083f0:	f8b0 5060 	ldrh.w	r5, [r0, #96]	; 0x60
 80083f4:	6d84      	ldr	r4, [r0, #88]	; 0x58
 80083f6:	4029      	ands	r1, r5
 80083f8:	f824 1b02 	strh.w	r1, [r4], #2
    huart->RxXferCount--;
 80083fc:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
    huart->pRxBuffPtr += 2U;
 8008400:	6584      	str	r4, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8008402:	3901      	subs	r1, #1
 8008404:	b289      	uxth	r1, r1
 8008406:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800840a:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 800840e:	b289      	uxth	r1, r1
 8008410:	2900      	cmp	r1, #0
 8008412:	d1eb      	bne.n	80083ec <UART_RxISR_16BIT+0x14>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008414:	6814      	ldr	r4, [r2, #0]
      huart->RxState = HAL_UART_STATE_READY;
 8008416:	2520      	movs	r5, #32
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008418:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 800841c:	6014      	str	r4, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800841e:	6894      	ldr	r4, [r2, #8]
 8008420:	f024 0401 	bic.w	r4, r4, #1
 8008424:	6094      	str	r4, [r2, #8]
      huart->RxISR = NULL;
 8008426:	66c1      	str	r1, [r0, #108]	; 0x6c
      huart->RxState = HAL_UART_STATE_READY;
 8008428:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
      HAL_UART_RxCpltCallback(huart);
 800842c:	f7fa fa92 	bl	8002954 <HAL_UART_RxCpltCallback>
}
 8008430:	bd38      	pop	{r3, r4, r5, pc}
 8008432:	bf00      	nop

08008434 <UART_RxISR_8BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008434:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8008438:	2b22      	cmp	r3, #34	; 0x22
 800843a:	d005      	beq.n	8008448 <UART_RxISR_8BIT_FIFOEN+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800843c:	6802      	ldr	r2, [r0, #0]
 800843e:	6993      	ldr	r3, [r2, #24]
 8008440:	f043 0308 	orr.w	r3, r3, #8
 8008444:	6193      	str	r3, [r2, #24]
 8008446:	4770      	bx	lr
{
 8008448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800844c:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 8008450:	2d00      	cmp	r5, #0
 8008452:	d043      	beq.n	80084dc <UART_RxISR_8BIT_FIFOEN+0xa8>
 8008454:	4604      	mov	r4, r0
 8008456:	f890 8060 	ldrb.w	r8, [r0, #96]	; 0x60
        huart->RxState = HAL_UART_STATE_READY;
 800845a:	2720      	movs	r7, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800845c:	4e21      	ldr	r6, [pc, #132]	; (80084e4 <UART_RxISR_8BIT_FIFOEN+0xb0>)
 800845e:	e002      	b.n	8008466 <UART_RxISR_8BIT_FIFOEN+0x32>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008460:	3d01      	subs	r5, #1
 8008462:	b2ad      	uxth	r5, r5
 8008464:	b32d      	cbz	r5, 80084b2 <UART_RxISR_8BIT_FIFOEN+0x7e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008466:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008468:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800846a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800846c:	ea08 0303 	and.w	r3, r8, r3
 8008470:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 8008472:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      huart->pRxBuffPtr++;
 8008476:	6da2      	ldr	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8008478:	3b01      	subs	r3, #1
      huart->pRxBuffPtr++;
 800847a:	3201      	adds	r2, #1
      huart->RxXferCount--;
 800847c:	b29b      	uxth	r3, r3
      huart->pRxBuffPtr++;
 800847e:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8008480:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 8008484:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8008488:	b29b      	uxth	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1e8      	bne.n	8008460 <UART_RxISR_8BIT_FIFOEN+0x2c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800848e:	6822      	ldr	r2, [r4, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008490:	3d01      	subs	r5, #1
        HAL_UART_RxCpltCallback(huart);
 8008492:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008494:	6811      	ldr	r1, [r2, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008496:	b2ad      	uxth	r5, r5
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008498:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800849c:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800849e:	6891      	ldr	r1, [r2, #8]
 80084a0:	4031      	ands	r1, r6
 80084a2:	6091      	str	r1, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 80084a4:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 80084a8:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 80084aa:	f7fa fa53 	bl	8002954 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80084ae:	2d00      	cmp	r5, #0
 80084b0:	d1d9      	bne.n	8008466 <UART_RxISR_8BIT_FIFOEN+0x32>
    rxdatacount = huart->RxXferCount;
 80084b2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80084b6:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80084b8:	b173      	cbz	r3, 80084d8 <UART_RxISR_8BIT_FIFOEN+0xa4>
 80084ba:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80084be:	429a      	cmp	r2, r3
 80084c0:	d90a      	bls.n	80084d8 <UART_RxISR_8BIT_FIFOEN+0xa4>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80084c2:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_8BIT;
 80084c4:	4908      	ldr	r1, [pc, #32]	; (80084e8 <UART_RxISR_8BIT_FIFOEN+0xb4>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80084c6:	689a      	ldr	r2, [r3, #8]
 80084c8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80084cc:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80084ce:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_8BIT;
 80084d0:	66e1      	str	r1, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80084d2:	f042 0220 	orr.w	r2, r2, #32
 80084d6:	601a      	str	r2, [r3, #0]
  }
}
 80084d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rxdatacount = huart->RxXferCount;
 80084dc:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80084e0:	e7fa      	b.n	80084d8 <UART_RxISR_8BIT_FIFOEN+0xa4>
 80084e2:	bf00      	nop
 80084e4:	effffffe 	.word	0xeffffffe
 80084e8:	08008379 	.word	0x08008379

080084ec <UART_RxISR_16BIT_FIFOEN>:
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084ec:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80084f0:	2b22      	cmp	r3, #34	; 0x22
 80084f2:	d005      	beq.n	8008500 <UART_RxISR_16BIT_FIFOEN+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084f4:	6802      	ldr	r2, [r0, #0]
 80084f6:	6993      	ldr	r3, [r2, #24]
 80084f8:	f043 0308 	orr.w	r3, r3, #8
 80084fc:	6193      	str	r3, [r2, #24]
 80084fe:	4770      	bx	lr
{
 8008500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008504:	f8b0 5068 	ldrh.w	r5, [r0, #104]	; 0x68
 8008508:	2d00      	cmp	r5, #0
 800850a:	d041      	beq.n	8008590 <UART_RxISR_16BIT_FIFOEN+0xa4>
 800850c:	4604      	mov	r4, r0
  uint16_t  uhMask = huart->Mask;
 800850e:	f8b0 8060 	ldrh.w	r8, [r0, #96]	; 0x60
        huart->RxState = HAL_UART_STATE_READY;
 8008512:	2720      	movs	r7, #32
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008514:	4e20      	ldr	r6, [pc, #128]	; (8008598 <UART_RxISR_16BIT_FIFOEN+0xac>)
 8008516:	e002      	b.n	800851e <UART_RxISR_16BIT_FIFOEN+0x32>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008518:	3d01      	subs	r5, #1
 800851a:	b2ad      	uxth	r5, r5
 800851c:	b31d      	cbz	r5, 8008566 <UART_RxISR_16BIT_FIFOEN+0x7a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800851e:	6821      	ldr	r1, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 8008520:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008522:	6a4b      	ldr	r3, [r1, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8008524:	ea08 0303 	and.w	r3, r8, r3
 8008528:	f822 3b02 	strh.w	r3, [r2], #2
      huart->RxXferCount--;
 800852c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
      huart->pRxBuffPtr += 2U;
 8008530:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8008532:	3b01      	subs	r3, #1
 8008534:	b29b      	uxth	r3, r3
 8008536:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if (huart->RxXferCount == 0U)
 800853a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800853e:	b29b      	uxth	r3, r3
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1e9      	bne.n	8008518 <UART_RxISR_16BIT_FIFOEN+0x2c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008544:	680a      	ldr	r2, [r1, #0]
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008546:	3d01      	subs	r5, #1
        HAL_UART_RxCpltCallback(huart);
 8008548:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800854a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800854e:	b2ad      	uxth	r5, r5
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008550:	600a      	str	r2, [r1, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008552:	688a      	ldr	r2, [r1, #8]
 8008554:	4032      	ands	r2, r6
 8008556:	608a      	str	r2, [r1, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8008558:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84
        huart->RxISR = NULL;
 800855c:	66e3      	str	r3, [r4, #108]	; 0x6c
        HAL_UART_RxCpltCallback(huart);
 800855e:	f7fa f9f9 	bl	8002954 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008562:	2d00      	cmp	r5, #0
 8008564:	d1db      	bne.n	800851e <UART_RxISR_16BIT_FIFOEN+0x32>
    rxdatacount = huart->RxXferCount;
 8008566:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800856a:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800856c:	b173      	cbz	r3, 800858c <UART_RxISR_16BIT_FIFOEN+0xa0>
 800856e:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8008572:	429a      	cmp	r2, r3
 8008574:	d90a      	bls.n	800858c <UART_RxISR_16BIT_FIFOEN+0xa0>
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008576:	6823      	ldr	r3, [r4, #0]
      huart->RxISR = UART_RxISR_16BIT;
 8008578:	4908      	ldr	r1, [pc, #32]	; (800859c <UART_RxISR_16BIT_FIFOEN+0xb0>)
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800857a:	689a      	ldr	r2, [r3, #8]
 800857c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008580:	609a      	str	r2, [r3, #8]
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008582:	681a      	ldr	r2, [r3, #0]
      huart->RxISR = UART_RxISR_16BIT;
 8008584:	66e1      	str	r1, [r4, #108]	; 0x6c
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008586:	f042 0220 	orr.w	r2, r2, #32
 800858a:	601a      	str	r2, [r3, #0]
  }
}
 800858c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rxdatacount = huart->RxXferCount;
 8008590:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8008594:	e7fa      	b.n	800858c <UART_RxISR_16BIT_FIFOEN+0xa0>
 8008596:	bf00      	nop
 8008598:	effffffe 	.word	0xeffffffe
 800859c:	080083d9 	.word	0x080083d9

080085a0 <HAL_UART_ErrorCallback>:
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop

080085a4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80085a4:	6802      	ldr	r2, [r0, #0]
{
 80085a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80085aa:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80085ac:	f640 050f 	movw	r5, #2063	; 0x80f
{
 80085b0:	4604      	mov	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085b2:	6810      	ldr	r0, [r2, #0]
  if (errorflags == 0U)
 80085b4:	422b      	tst	r3, r5
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085b6:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 80085b8:	d070      	beq.n	800869c <HAL_UART_IRQHandler+0xf8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80085ba:	4d73      	ldr	r5, [pc, #460]	; (8008788 <HAL_UART_IRQHandler+0x1e4>)
 80085bc:	400d      	ands	r5, r1
 80085be:	f000 808f 	beq.w	80086e0 <HAL_UART_IRQHandler+0x13c>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085c2:	07df      	lsls	r7, r3, #31
 80085c4:	d509      	bpl.n	80085da <HAL_UART_IRQHandler+0x36>
 80085c6:	05c6      	lsls	r6, r0, #23
 80085c8:	d507      	bpl.n	80085da <HAL_UART_IRQHandler+0x36>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085ca:	2601      	movs	r6, #1
 80085cc:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085ce:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 80085d2:	f046 0601 	orr.w	r6, r6, #1
 80085d6:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085da:	079f      	lsls	r7, r3, #30
 80085dc:	f003 0604 	and.w	r6, r3, #4
 80085e0:	f140 8093 	bpl.w	800870a <HAL_UART_IRQHandler+0x166>
 80085e4:	07cf      	lsls	r7, r1, #31
 80085e6:	d50a      	bpl.n	80085fe <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80085e8:	2702      	movs	r7, #2
 80085ea:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085ec:	f8d4 7088 	ldr.w	r7, [r4, #136]	; 0x88
 80085f0:	f047 0704 	orr.w	r7, r7, #4
 80085f4:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085f8:	2e00      	cmp	r6, #0
 80085fa:	f040 808c 	bne.w	8008716 <HAL_UART_IRQHandler+0x172>
    if (((isrflags & USART_ISR_ORE) != 0U)
 80085fe:	071f      	lsls	r7, r3, #28
 8008600:	d505      	bpl.n	800860e <HAL_UART_IRQHandler+0x6a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008602:	0686      	lsls	r6, r0, #26
 8008604:	f100 8097 	bmi.w	8008736 <HAL_UART_IRQHandler+0x192>
 8008608:	2d00      	cmp	r5, #0
 800860a:	f040 8094 	bne.w	8008736 <HAL_UART_IRQHandler+0x192>
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800860e:	051f      	lsls	r7, r3, #20
 8008610:	d50a      	bpl.n	8008628 <HAL_UART_IRQHandler+0x84>
 8008612:	0146      	lsls	r6, r0, #5
 8008614:	d508      	bpl.n	8008628 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008616:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800861a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800861c:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 8008620:	f045 0520 	orr.w	r5, r5, #32
 8008624:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008628:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 800862c:	2d00      	cmp	r5, #0
 800862e:	d06a      	beq.n	8008706 <HAL_UART_IRQHandler+0x162>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008630:	069d      	lsls	r5, r3, #26
 8008632:	d507      	bpl.n	8008644 <HAL_UART_IRQHandler+0xa0>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008634:	0680      	lsls	r0, r0, #26
 8008636:	f140 808b 	bpl.w	8008750 <HAL_UART_IRQHandler+0x1ac>
        if (huart->RxISR != NULL)
 800863a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800863c:	b113      	cbz	r3, 8008644 <HAL_UART_IRQHandler+0xa0>
          huart->RxISR(huart);
 800863e:	4620      	mov	r0, r4
 8008640:	4798      	blx	r3
 8008642:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8008644:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008648:	6891      	ldr	r1, [r2, #8]
 800864a:	064f      	lsls	r7, r1, #25
 800864c:	d403      	bmi.n	8008656 <HAL_UART_IRQHandler+0xb2>
 800864e:	f015 0528 	ands.w	r5, r5, #40	; 0x28
 8008652:	f000 8093 	beq.w	800877c <HAL_UART_IRQHandler+0x1d8>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008656:	6811      	ldr	r1, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8008658:	2520      	movs	r5, #32
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800865a:	4b4c      	ldr	r3, [pc, #304]	; (800878c <HAL_UART_IRQHandler+0x1e8>)
  huart->RxISR = NULL;
 800865c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800865e:	f421 7190 	bic.w	r1, r1, #288	; 0x120
 8008662:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008664:	6891      	ldr	r1, [r2, #8]
 8008666:	400b      	ands	r3, r1
 8008668:	6093      	str	r3, [r2, #8]
  huart->RxState = HAL_UART_STATE_READY;
 800866a:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800866e:	6893      	ldr	r3, [r2, #8]
  huart->RxISR = NULL;
 8008670:	66e0      	str	r0, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008672:	065e      	lsls	r6, r3, #25
 8008674:	d568      	bpl.n	8008748 <HAL_UART_IRQHandler+0x1a4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008676:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8008678:	6fa1      	ldr	r1, [r4, #120]	; 0x78
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800867a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800867e:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 8008680:	2900      	cmp	r1, #0
 8008682:	d061      	beq.n	8008748 <HAL_UART_IRQHandler+0x1a4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008684:	4b42      	ldr	r3, [pc, #264]	; (8008790 <HAL_UART_IRQHandler+0x1ec>)
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008686:	4608      	mov	r0, r1
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008688:	650b      	str	r3, [r1, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800868a:	f7fc fe45 	bl	8005318 <HAL_DMA_Abort_IT>
 800868e:	2800      	cmp	r0, #0
 8008690:	d039      	beq.n	8008706 <HAL_UART_IRQHandler+0x162>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008692:	6fa0      	ldr	r0, [r4, #120]	; 0x78
}
 8008694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008698:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800869a:	4718      	bx	r3
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800869c:	069f      	lsls	r7, r3, #26
 800869e:	d509      	bpl.n	80086b4 <HAL_UART_IRQHandler+0x110>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80086a0:	0686      	lsls	r6, r0, #26
 80086a2:	d505      	bpl.n	80086b0 <HAL_UART_IRQHandler+0x10c>
      if (huart->RxISR != NULL)
 80086a4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80086a6:	b373      	cbz	r3, 8008706 <HAL_UART_IRQHandler+0x162>
      huart->TxISR(huart);
 80086a8:	4620      	mov	r0, r4
}
 80086aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 80086ae:	4718      	bx	r3
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80086b0:	00cd      	lsls	r5, r1, #3
 80086b2:	d4f7      	bmi.n	80086a4 <HAL_UART_IRQHandler+0x100>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80086b4:	02dd      	lsls	r5, r3, #11
 80086b6:	d409      	bmi.n	80086cc <HAL_UART_IRQHandler+0x128>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80086b8:	061e      	lsls	r6, r3, #24
 80086ba:	d51a      	bpl.n	80086f2 <HAL_UART_IRQHandler+0x14e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80086bc:	0605      	lsls	r5, r0, #24
 80086be:	d516      	bpl.n	80086ee <HAL_UART_IRQHandler+0x14a>
    if (huart->TxISR != NULL)
 80086c0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80086c2:	b303      	cbz	r3, 8008706 <HAL_UART_IRQHandler+0x162>
      huart->TxISR(huart);
 80086c4:	4620      	mov	r0, r4
}
 80086c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 80086ca:	4718      	bx	r3
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80086cc:	024f      	lsls	r7, r1, #9
 80086ce:	d5f3      	bpl.n	80086b8 <HAL_UART_IRQHandler+0x114>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80086d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 80086d4:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80086d6:	6213      	str	r3, [r2, #32]
}
 80086d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80086dc:	f001 baee 	b.w	8009cbc <HAL_UARTEx_WakeupCallback>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80086e0:	4e2c      	ldr	r6, [pc, #176]	; (8008794 <HAL_UART_IRQHandler+0x1f0>)
 80086e2:	4230      	tst	r0, r6
 80086e4:	d0e6      	beq.n	80086b4 <HAL_UART_IRQHandler+0x110>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80086e6:	07df      	lsls	r7, r3, #31
 80086e8:	f57f af77 	bpl.w	80085da <HAL_UART_IRQHandler+0x36>
 80086ec:	e76b      	b.n	80085c6 <HAL_UART_IRQHandler+0x22>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80086ee:	020f      	lsls	r7, r1, #8
 80086f0:	d4e6      	bmi.n	80086c0 <HAL_UART_IRQHandler+0x11c>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80086f2:	065e      	lsls	r6, r3, #25
 80086f4:	d501      	bpl.n	80086fa <HAL_UART_IRQHandler+0x156>
 80086f6:	0645      	lsls	r5, r0, #25
 80086f8:	d42e      	bmi.n	8008758 <HAL_UART_IRQHandler+0x1b4>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80086fa:	0219      	lsls	r1, r3, #8
 80086fc:	d414      	bmi.n	8008728 <HAL_UART_IRQHandler+0x184>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80086fe:	01db      	lsls	r3, r3, #7
 8008700:	d501      	bpl.n	8008706 <HAL_UART_IRQHandler+0x162>
 8008702:	2800      	cmp	r0, #0
 8008704:	db35      	blt.n	8008772 <HAL_UART_IRQHandler+0x1ce>
}
 8008706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800870a:	2e00      	cmp	r6, #0
 800870c:	f43f af77 	beq.w	80085fe <HAL_UART_IRQHandler+0x5a>
 8008710:	07ce      	lsls	r6, r1, #31
 8008712:	f57f af74 	bpl.w	80085fe <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008716:	2604      	movs	r6, #4
 8008718:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800871a:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
 800871e:	f046 0602 	orr.w	r6, r6, #2
 8008722:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
 8008726:	e76a      	b.n	80085fe <HAL_UART_IRQHandler+0x5a>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008728:	0042      	lsls	r2, r0, #1
 800872a:	d5e8      	bpl.n	80086fe <HAL_UART_IRQHandler+0x15a>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800872c:	4620      	mov	r0, r4
}
 800872e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008732:	f001 bac7 	b.w	8009cc4 <HAL_UARTEx_TxFifoEmptyCallback>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008736:	2508      	movs	r5, #8
 8008738:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800873a:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 800873e:	f045 0508 	orr.w	r5, r5, #8
 8008742:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8008746:	e762      	b.n	800860e <HAL_UART_IRQHandler+0x6a>
            HAL_UART_ErrorCallback(huart);
 8008748:	4620      	mov	r0, r4
 800874a:	f7ff ff29 	bl	80085a0 <HAL_UART_ErrorCallback>
 800874e:	e7da      	b.n	8008706 <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008750:	00cb      	lsls	r3, r1, #3
 8008752:	f57f af77 	bpl.w	8008644 <HAL_UART_IRQHandler+0xa0>
 8008756:	e770      	b.n	800863a <HAL_UART_IRQHandler+0x96>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008758:	6813      	ldr	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800875a:	2520      	movs	r5, #32
  huart->TxISR = NULL;
 800875c:	2100      	movs	r1, #0
  HAL_UART_TxCpltCallback(huart);
 800875e:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008764:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008766:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  huart->TxISR = NULL;
 800876a:	6721      	str	r1, [r4, #112]	; 0x70
  HAL_UART_TxCpltCallback(huart);
 800876c:	f7ff fe02 	bl	8008374 <HAL_UART_TxCpltCallback>
 8008770:	e7c9      	b.n	8008706 <HAL_UART_IRQHandler+0x162>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008772:	4620      	mov	r0, r4
}
 8008774:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008778:	f001 baa2 	b.w	8009cc0 <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 800877c:	4620      	mov	r0, r4
 800877e:	f7ff ff0f 	bl	80085a0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008782:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 8008786:	e7be      	b.n	8008706 <HAL_UART_IRQHandler+0x162>
 8008788:	10000001 	.word	0x10000001
 800878c:	effffffe 	.word	0xeffffffe
 8008790:	08008799 	.word	0x08008799
 8008794:	04000120 	.word	0x04000120

08008798 <UART_DMAAbortOnError>:
{
 8008798:	b508      	push	{r3, lr}
  huart->RxXferCount = 0U;
 800879a:	2200      	movs	r2, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800879c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800879e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  HAL_UART_ErrorCallback(huart);
 80087a2:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 80087a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 80087a8:	f7ff fefa 	bl	80085a0 <HAL_UART_ErrorCallback>
}
 80087ac:	bd08      	pop	{r3, pc}
 80087ae:	bf00      	nop

080087b0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80087b2:	07da      	lsls	r2, r3, #31
{
 80087b4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087b6:	d506      	bpl.n	80087c6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087b8:	6801      	ldr	r1, [r0, #0]
 80087ba:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80087bc:	684a      	ldr	r2, [r1, #4]
 80087be:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80087c2:	4322      	orrs	r2, r4
 80087c4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087c6:	079c      	lsls	r4, r3, #30
 80087c8:	d506      	bpl.n	80087d8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087ca:	6801      	ldr	r1, [r0, #0]
 80087cc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80087ce:	684a      	ldr	r2, [r1, #4]
 80087d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80087d4:	4322      	orrs	r2, r4
 80087d6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087d8:	0759      	lsls	r1, r3, #29
 80087da:	d506      	bpl.n	80087ea <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087dc:	6801      	ldr	r1, [r0, #0]
 80087de:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80087e0:	684a      	ldr	r2, [r1, #4]
 80087e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80087e6:	4322      	orrs	r2, r4
 80087e8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087ea:	071a      	lsls	r2, r3, #28
 80087ec:	d506      	bpl.n	80087fc <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087ee:	6801      	ldr	r1, [r0, #0]
 80087f0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80087f2:	684a      	ldr	r2, [r1, #4]
 80087f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80087f8:	4322      	orrs	r2, r4
 80087fa:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087fc:	06dc      	lsls	r4, r3, #27
 80087fe:	d506      	bpl.n	800880e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008800:	6801      	ldr	r1, [r0, #0]
 8008802:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8008804:	688a      	ldr	r2, [r1, #8]
 8008806:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800880a:	4322      	orrs	r2, r4
 800880c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800880e:	0699      	lsls	r1, r3, #26
 8008810:	d506      	bpl.n	8008820 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008812:	6801      	ldr	r1, [r0, #0]
 8008814:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8008816:	688a      	ldr	r2, [r1, #8]
 8008818:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800881c:	4322      	orrs	r2, r4
 800881e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008820:	065a      	lsls	r2, r3, #25
 8008822:	d50a      	bpl.n	800883a <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008824:	6801      	ldr	r1, [r0, #0]
 8008826:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8008828:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800882a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800882e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008832:	ea42 0204 	orr.w	r2, r2, r4
 8008836:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008838:	d00b      	beq.n	8008852 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800883a:	061b      	lsls	r3, r3, #24
 800883c:	d506      	bpl.n	800884c <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800883e:	6802      	ldr	r2, [r0, #0]
 8008840:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8008842:	6853      	ldr	r3, [r2, #4]
 8008844:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008848:	430b      	orrs	r3, r1
 800884a:	6053      	str	r3, [r2, #4]
}
 800884c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008850:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008852:	684a      	ldr	r2, [r1, #4]
 8008854:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8008856:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800885a:	4322      	orrs	r2, r4
 800885c:	604a      	str	r2, [r1, #4]
 800885e:	e7ec      	b.n	800883a <UART_AdvFeatureConfig+0x8a>

08008860 <HAL_UART_Init>:
  if (huart == NULL)
 8008860:	2800      	cmp	r0, #0
 8008862:	f000 8253 	beq.w	8008d0c <HAL_UART_Init+0x4ac>
  if (huart->gState == HAL_UART_STATE_RESET)
 8008866:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 800886a:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800886e:	4604      	mov	r4, r0
 8008870:	b086      	sub	sp, #24
  if (huart->gState == HAL_UART_STATE_RESET)
 8008872:	2b00      	cmp	r3, #0
 8008874:	d058      	beq.n	8008928 <HAL_UART_Init+0xc8>
  __HAL_UART_DISABLE(huart);
 8008876:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008878:	2024      	movs	r0, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800887a:	6921      	ldr	r1, [r4, #16]
 800887c:	68a2      	ldr	r2, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 800887e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008882:	430a      	orrs	r2, r1
  __HAL_UART_DISABLE(huart);
 8008884:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008886:	6960      	ldr	r0, [r4, #20]
 8008888:	69e1      	ldr	r1, [r4, #28]
  __HAL_UART_DISABLE(huart);
 800888a:	f025 0501 	bic.w	r5, r5, #1
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800888e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008890:	485e      	ldr	r0, [pc, #376]	; (8008a0c <HAL_UART_Init+0x1ac>)
  __HAL_UART_DISABLE(huart);
 8008892:	601d      	str	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008894:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008896:	681e      	ldr	r6, [r3, #0]
  tmpreg |= (uint32_t)huart->FifoMode;
 8008898:	6e65      	ldr	r5, [r4, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800889a:	4030      	ands	r0, r6
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800889c:	68e7      	ldr	r7, [r4, #12]
  tmpreg |= (uint32_t)huart->FifoMode;
 800889e:	432a      	orrs	r2, r5
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80088a0:	f8d4 c018 	ldr.w	ip, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088a4:	4e5a      	ldr	r6, [pc, #360]	; (8008a10 <HAL_UART_Init+0x1b0>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80088a6:	4302      	orrs	r2, r0
 80088a8:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088aa:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80088ac:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088ae:	685a      	ldr	r2, [r3, #4]
 80088b0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80088b4:	ea42 0207 	orr.w	r2, r2, r7
 80088b8:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088ba:	f000 808c 	beq.w	80089d6 <HAL_UART_Init+0x176>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088be:	689e      	ldr	r6, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 80088c0:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088c2:	4854      	ldr	r0, [pc, #336]	; (8008a14 <HAL_UART_Init+0x1b4>)
    tmpreg |= huart->Init.OneBitSampling;
 80088c4:	ea4c 0202 	orr.w	r2, ip, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088c8:	4030      	ands	r0, r6
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088ca:	4e53      	ldr	r6, [pc, #332]	; (8008a18 <HAL_UART_Init+0x1b8>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088cc:	4302      	orrs	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088ce:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088d0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80088d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d4:	f022 020f 	bic.w	r2, r2, #15
 80088d8:	ea42 0205 	orr.w	r2, r2, r5
 80088dc:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088de:	d028      	beq.n	8008932 <HAL_UART_Init+0xd2>
 80088e0:	4a4e      	ldr	r2, [pc, #312]	; (8008a1c <HAL_UART_Init+0x1bc>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	f000 817f 	beq.w	8008be6 <HAL_UART_Init+0x386>
 80088e8:	4a4d      	ldr	r2, [pc, #308]	; (8008a20 <HAL_UART_Init+0x1c0>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	f000 8171 	beq.w	8008bd2 <HAL_UART_Init+0x372>
 80088f0:	4a4c      	ldr	r2, [pc, #304]	; (8008a24 <HAL_UART_Init+0x1c4>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	f000 849d 	beq.w	8009232 <HAL_UART_Init+0x9d2>
 80088f8:	4a4b      	ldr	r2, [pc, #300]	; (8008a28 <HAL_UART_Init+0x1c8>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	f000 84a4 	beq.w	8009248 <HAL_UART_Init+0x9e8>
 8008900:	4a4a      	ldr	r2, [pc, #296]	; (8008a2c <HAL_UART_Init+0x1cc>)
 8008902:	4293      	cmp	r3, r2
 8008904:	f000 84ab 	beq.w	800925e <HAL_UART_Init+0x9fe>
 8008908:	4a49      	ldr	r2, [pc, #292]	; (8008a30 <HAL_UART_Init+0x1d0>)
 800890a:	4293      	cmp	r3, r2
 800890c:	f000 851e 	beq.w	800934c <HAL_UART_Init+0xaec>
 8008910:	4a48      	ldr	r2, [pc, #288]	; (8008a34 <HAL_UART_Init+0x1d4>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d170      	bne.n	80089f8 <HAL_UART_Init+0x198>
 8008916:	4b48      	ldr	r3, [pc, #288]	; (8008a38 <HAL_UART_Init+0x1d8>)
 8008918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800891a:	f003 0307 	and.w	r3, r3, #7
 800891e:	2b05      	cmp	r3, #5
 8008920:	d86a      	bhi.n	80089f8 <HAL_UART_Init+0x198>
 8008922:	4a46      	ldr	r2, [pc, #280]	; (8008a3c <HAL_UART_Init+0x1dc>)
 8008924:	5cd3      	ldrb	r3, [r2, r3]
 8008926:	e00c      	b.n	8008942 <HAL_UART_Init+0xe2>
    huart->Lock = HAL_UNLOCKED;
 8008928:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 800892c:	f7fa fe2a 	bl	8003584 <HAL_UART_MspInit>
 8008930:	e7a1      	b.n	8008876 <HAL_UART_Init+0x16>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008932:	4b41      	ldr	r3, [pc, #260]	; (8008a38 <HAL_UART_Init+0x1d8>)
 8008934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008936:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800893a:	2b28      	cmp	r3, #40	; 0x28
 800893c:	d85c      	bhi.n	80089f8 <HAL_UART_Init+0x198>
 800893e:	4a40      	ldr	r2, [pc, #256]	; (8008a40 <HAL_UART_Init+0x1e0>)
 8008940:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008942:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8008946:	f000 8158 	beq.w	8008bfa <HAL_UART_Init+0x39a>
    switch (clocksource)
 800894a:	2b40      	cmp	r3, #64	; 0x40
 800894c:	f201 812f 	bhi.w	8009bae <HAL_UART_Init+0x134e>
 8008950:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008954:	02ea0317 	.word	0x02ea0317
 8008958:	092d092d 	.word	0x092d092d
 800895c:	092d031d 	.word	0x092d031d
 8008960:	092d092d 	.word	0x092d092d
 8008964:	092d02c1 	.word	0x092d02c1
 8008968:	092d092d 	.word	0x092d092d
 800896c:	092d092d 	.word	0x092d092d
 8008970:	092d092d 	.word	0x092d092d
 8008974:	092d0293 	.word	0x092d0293
 8008978:	092d092d 	.word	0x092d092d
 800897c:	092d092d 	.word	0x092d092d
 8008980:	092d092d 	.word	0x092d092d
 8008984:	092d092d 	.word	0x092d092d
 8008988:	092d092d 	.word	0x092d092d
 800898c:	092d092d 	.word	0x092d092d
 8008990:	092d092d 	.word	0x092d092d
 8008994:	092d026b 	.word	0x092d026b
 8008998:	092d092d 	.word	0x092d092d
 800899c:	092d092d 	.word	0x092d092d
 80089a0:	092d092d 	.word	0x092d092d
 80089a4:	092d092d 	.word	0x092d092d
 80089a8:	092d092d 	.word	0x092d092d
 80089ac:	092d092d 	.word	0x092d092d
 80089b0:	092d092d 	.word	0x092d092d
 80089b4:	092d092d 	.word	0x092d092d
 80089b8:	092d092d 	.word	0x092d092d
 80089bc:	092d092d 	.word	0x092d092d
 80089c0:	092d092d 	.word	0x092d092d
 80089c4:	092d092d 	.word	0x092d092d
 80089c8:	092d092d 	.word	0x092d092d
 80089cc:	092d092d 	.word	0x092d092d
 80089d0:	092d092d 	.word	0x092d092d
 80089d4:	0228      	.short	0x0228
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089d6:	6898      	ldr	r0, [r3, #8]
 80089d8:	4a0e      	ldr	r2, [pc, #56]	; (8008a14 <HAL_UART_Init+0x1b4>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089da:	4917      	ldr	r1, [pc, #92]	; (8008a38 <HAL_UART_Init+0x1d8>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089dc:	4002      	ands	r2, r0
 80089de:	ea42 020c 	orr.w	r2, r2, ip
 80089e2:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80089e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e6:	f022 020f 	bic.w	r2, r2, #15
 80089ea:	432a      	orrs	r2, r5
 80089ec:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089ee:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 80089f0:	f003 0307 	and.w	r3, r3, #7
 80089f4:	2b05      	cmp	r3, #5
 80089f6:	d925      	bls.n	8008a44 <HAL_UART_Init+0x1e4>
  huart->RxISR = NULL;
 80089f8:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 80089fa:	f04f 1201 	mov.w	r2, #65537	; 0x10001
    return HAL_ERROR;
 80089fe:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 8008a00:	6723      	str	r3, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 8008a02:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
}
 8008a06:	b006      	add	sp, #24
 8008a08:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8008a0c:	cfff69f3 	.word	0xcfff69f3
 8008a10:	58000c00 	.word	0x58000c00
 8008a14:	11fff4ff 	.word	0x11fff4ff
 8008a18:	40011000 	.word	0x40011000
 8008a1c:	40004400 	.word	0x40004400
 8008a20:	40004800 	.word	0x40004800
 8008a24:	40004c00 	.word	0x40004c00
 8008a28:	40005000 	.word	0x40005000
 8008a2c:	40011400 	.word	0x40011400
 8008a30:	40007800 	.word	0x40007800
 8008a34:	40007c00 	.word	0x40007c00
 8008a38:	58024400 	.word	0x58024400
 8008a3c:	0801aca4 	.word	0x0801aca4
 8008a40:	0801ac78 	.word	0x0801ac78
 8008a44:	4ad1      	ldr	r2, [pc, #836]	; (8008d8c <HAL_UART_Init+0x52c>)
 8008a46:	5cd6      	ldrb	r6, [r2, r3]
    switch (clocksource)
 8008a48:	2e08      	cmp	r6, #8
 8008a4a:	f000 8477 	beq.w	800933c <HAL_UART_Init+0xadc>
 8008a4e:	f240 8411 	bls.w	8009274 <HAL_UART_Init+0xa14>
 8008a52:	2e20      	cmp	r6, #32
 8008a54:	f000 82a4 	beq.w	8008fa0 <HAL_UART_Init+0x740>
 8008a58:	2e40      	cmp	r6, #64	; 0x40
 8008a5a:	f000 8447 	beq.w	80092ec <HAL_UART_Init+0xa8c>
 8008a5e:	2e10      	cmp	r6, #16
 8008a60:	d1ca      	bne.n	80089f8 <HAL_UART_Init+0x198>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a62:	680b      	ldr	r3, [r1, #0]
 8008a64:	069b      	lsls	r3, r3, #26
 8008a66:	f140 84bd 	bpl.w	80093e4 <HAL_UART_Init+0xb84>
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008a6a:	680b      	ldr	r3, [r1, #0]
 8008a6c:	48c8      	ldr	r0, [pc, #800]	; (8008d90 <HAL_UART_Init+0x530>)
 8008a6e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008a72:	40d8      	lsrs	r0, r3
 8008a74:	b305      	cbz	r5, 8008ab8 <HAL_UART_Init+0x258>
 8008a76:	2d01      	cmp	r5, #1
 8008a78:	f000 863b 	beq.w	80096f2 <HAL_UART_Init+0xe92>
 8008a7c:	2d02      	cmp	r5, #2
 8008a7e:	f000 862f 	beq.w	80096e0 <HAL_UART_Init+0xe80>
 8008a82:	2d03      	cmp	r5, #3
 8008a84:	f000 8629 	beq.w	80096da <HAL_UART_Init+0xe7a>
 8008a88:	2d04      	cmp	r5, #4
 8008a8a:	f000 86e2 	beq.w	8009852 <HAL_UART_Init+0xff2>
 8008a8e:	2d05      	cmp	r5, #5
 8008a90:	f000 875b 	beq.w	800994a <HAL_UART_Init+0x10ea>
 8008a94:	2d06      	cmp	r5, #6
 8008a96:	f000 87d0 	beq.w	8009a3a <HAL_UART_Init+0x11da>
 8008a9a:	2d07      	cmp	r5, #7
 8008a9c:	f000 87d2 	beq.w	8009a44 <HAL_UART_Init+0x11e4>
 8008aa0:	2d08      	cmp	r5, #8
 8008aa2:	f001 8056 	beq.w	8009b52 <HAL_UART_Init+0x12f2>
 8008aa6:	2d09      	cmp	r5, #9
 8008aa8:	f001 8038 	beq.w	8009b1c <HAL_UART_Init+0x12bc>
 8008aac:	2d0a      	cmp	r5, #10
 8008aae:	f001 80b7 	beq.w	8009c20 <HAL_UART_Init+0x13c0>
 8008ab2:	2d0b      	cmp	r5, #11
 8008ab4:	f001 8078 	beq.w	8009ba8 <HAL_UART_Init+0x1348>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ab8:	6865      	ldr	r5, [r4, #4]
 8008aba:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8008abe:	4283      	cmp	r3, r0
 8008ac0:	d89a      	bhi.n	80089f8 <HAL_UART_Init+0x198>
 8008ac2:	ebb0 3f05 	cmp.w	r0, r5, lsl #12
 8008ac6:	d897      	bhi.n	80089f8 <HAL_UART_Init+0x198>
        switch (clocksource)
 8008ac8:	2e08      	cmp	r6, #8
 8008aca:	f000 8574 	beq.w	80095b6 <HAL_UART_Init+0xd56>
 8008ace:	f240 84e1 	bls.w	8009494 <HAL_UART_Init+0xc34>
 8008ad2:	2e20      	cmp	r6, #32
 8008ad4:	f000 857a 	beq.w	80095cc <HAL_UART_Init+0xd6c>
 8008ad8:	2e40      	cmp	r6, #64	; 0x40
 8008ada:	f000 85b6 	beq.w	800964a <HAL_UART_Init+0xdea>
 8008ade:	2e10      	cmp	r6, #16
 8008ae0:	d18a      	bne.n	80089f8 <HAL_UART_Init+0x198>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ae2:	4aac      	ldr	r2, [pc, #688]	; (8008d94 <HAL_UART_Init+0x534>)
 8008ae4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ae6:	6811      	ldr	r1, [r2, #0]
 8008ae8:	068f      	lsls	r7, r1, #26
 8008aea:	f140 8625 	bpl.w	8009738 <HAL_UART_Init+0xed8>
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008aee:	6811      	ldr	r1, [r2, #0]
 8008af0:	4aa7      	ldr	r2, [pc, #668]	; (8008d90 <HAL_UART_Init+0x530>)
 8008af2:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8008af6:	40ca      	lsrs	r2, r1
 8008af8:	2100      	movs	r1, #0
 8008afa:	4610      	mov	r0, r2
 8008afc:	b30b      	cbz	r3, 8008b42 <HAL_UART_Init+0x2e2>
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	f000 8750 	beq.w	80099a4 <HAL_UART_Init+0x1144>
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	f000 87a7 	beq.w	8009a58 <HAL_UART_Init+0x11f8>
 8008b0a:	2b03      	cmp	r3, #3
 8008b0c:	f001 8024 	beq.w	8009b58 <HAL_UART_Init+0x12f8>
 8008b10:	2b04      	cmp	r3, #4
 8008b12:	f001 800c 	beq.w	8009b2e <HAL_UART_Init+0x12ce>
 8008b16:	2b05      	cmp	r3, #5
 8008b18:	f001 8003 	beq.w	8009b22 <HAL_UART_Init+0x12c2>
 8008b1c:	2b06      	cmp	r3, #6
 8008b1e:	f001 8086 	beq.w	8009c2e <HAL_UART_Init+0x13ce>
 8008b22:	2b07      	cmp	r3, #7
 8008b24:	f001 807f 	beq.w	8009c26 <HAL_UART_Init+0x13c6>
 8008b28:	2b08      	cmp	r3, #8
 8008b2a:	f001 8066 	beq.w	8009bfa <HAL_UART_Init+0x139a>
 8008b2e:	2b09      	cmp	r3, #9
 8008b30:	f001 805f 	beq.w	8009bf2 <HAL_UART_Init+0x1392>
 8008b34:	2b0a      	cmp	r3, #10
 8008b36:	f001 801a 	beq.w	8009b6e <HAL_UART_Init+0x130e>
 8008b3a:	2b0b      	cmp	r3, #11
 8008b3c:	d101      	bne.n	8008b42 <HAL_UART_Init+0x2e2>
 8008b3e:	0a10      	lsrs	r0, r2, #8
 8008b40:	2100      	movs	r1, #0
 8008b42:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 8008b46:	462a      	mov	r2, r5
 8008b48:	020f      	lsls	r7, r1, #8
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	0206      	lsls	r6, r0, #8
 8008b4e:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8008b52:	eb16 000c 	adds.w	r0, r6, ip
 8008b56:	f147 0100 	adc.w	r1, r7, #0
 8008b5a:	f7f7 fc79 	bl	8000450 <__aeabi_uldivmod>
 8008b5e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b62:	4b8d      	ldr	r3, [pc, #564]	; (8008d98 <HAL_UART_Init+0x538>)
 8008b64:	429a      	cmp	r2, r3
 8008b66:	f63f af47 	bhi.w	80089f8 <HAL_UART_Init+0x198>
  huart->RxISR = NULL;
 8008b6a:	2300      	movs	r3, #0
          huart->Instance->BRR = usartdiv;
 8008b6c:	6821      	ldr	r1, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8008b6e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 8008b72:	60c8      	str	r0, [r1, #12]
  huart->TxISR = NULL;
 8008b74:	6723      	str	r3, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 8008b76:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f040 8342 	bne.w	8009206 <HAL_UART_Init+0x9a6>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b82:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b84:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b86:	685a      	ldr	r2, [r3, #4]
 8008b88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b8c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b8e:	689a      	ldr	r2, [r3, #8]
 8008b90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b94:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	f042 0201 	orr.w	r2, r2, #1
 8008b9c:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b9e:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  tickstart = HAL_GetTick();
 8008ba2:	f7fa fe61 	bl	8003868 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ba6:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8008ba8:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	0711      	lsls	r1, r2, #28
 8008bae:	f100 80af 	bmi.w	8008d10 <HAL_UART_Init+0x4b0>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	0750      	lsls	r0, r2, #29
 8008bb6:	f100 80d4 	bmi.w	8008d62 <HAL_UART_Init+0x502>
  __HAL_UNLOCK(huart);
 8008bba:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8008bbc:	2220      	movs	r2, #32
  return HAL_OK;
 8008bbe:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8008bc0:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8008bc4:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008bc8:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
}
 8008bcc:	b006      	add	sp, #24
 8008bce:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008bd2:	4b70      	ldr	r3, [pc, #448]	; (8008d94 <HAL_UART_Init+0x534>)
 8008bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bd6:	f003 0307 	and.w	r3, r3, #7
 8008bda:	2b05      	cmp	r3, #5
 8008bdc:	f63f af0c 	bhi.w	80089f8 <HAL_UART_Init+0x198>
 8008be0:	4a6e      	ldr	r2, [pc, #440]	; (8008d9c <HAL_UART_Init+0x53c>)
 8008be2:	5cd3      	ldrb	r3, [r2, r3]
 8008be4:	e6ad      	b.n	8008942 <HAL_UART_Init+0xe2>
 8008be6:	4b6b      	ldr	r3, [pc, #428]	; (8008d94 <HAL_UART_Init+0x534>)
 8008be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bea:	f003 0307 	and.w	r3, r3, #7
 8008bee:	2b05      	cmp	r3, #5
 8008bf0:	f63f af02 	bhi.w	80089f8 <HAL_UART_Init+0x198>
 8008bf4:	4a6a      	ldr	r2, [pc, #424]	; (8008da0 <HAL_UART_Init+0x540>)
 8008bf6:	5cd3      	ldrb	r3, [r2, r3]
 8008bf8:	e6a3      	b.n	8008942 <HAL_UART_Init+0xe2>
    switch (clocksource)
 8008bfa:	2b40      	cmp	r3, #64	; 0x40
 8008bfc:	f63f aefc 	bhi.w	80089f8 <HAL_UART_Init+0x198>
 8008c00:	a201      	add	r2, pc, #4	; (adr r2, 8008c08 <HAL_UART_Init+0x3a8>)
 8008c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c06:	bf00      	nop
 8008c08:	080091fb 	.word	0x080091fb
 8008c0c:	080091a1 	.word	0x080091a1
 8008c10:	080089f9 	.word	0x080089f9
 8008c14:	080089f9 	.word	0x080089f9
 8008c18:	0800917f 	.word	0x0800917f
 8008c1c:	080089f9 	.word	0x080089f9
 8008c20:	080089f9 	.word	0x080089f9
 8008c24:	080089f9 	.word	0x080089f9
 8008c28:	0800912d 	.word	0x0800912d
 8008c2c:	080089f9 	.word	0x080089f9
 8008c30:	080089f9 	.word	0x080089f9
 8008c34:	080089f9 	.word	0x080089f9
 8008c38:	080089f9 	.word	0x080089f9
 8008c3c:	080089f9 	.word	0x080089f9
 8008c40:	080089f9 	.word	0x080089f9
 8008c44:	080089f9 	.word	0x080089f9
 8008c48:	080090c5 	.word	0x080090c5
 8008c4c:	080089f9 	.word	0x080089f9
 8008c50:	080089f9 	.word	0x080089f9
 8008c54:	080089f9 	.word	0x080089f9
 8008c58:	080089f9 	.word	0x080089f9
 8008c5c:	080089f9 	.word	0x080089f9
 8008c60:	080089f9 	.word	0x080089f9
 8008c64:	080089f9 	.word	0x080089f9
 8008c68:	080089f9 	.word	0x080089f9
 8008c6c:	080089f9 	.word	0x080089f9
 8008c70:	080089f9 	.word	0x080089f9
 8008c74:	080089f9 	.word	0x080089f9
 8008c78:	080089f9 	.word	0x080089f9
 8008c7c:	080089f9 	.word	0x080089f9
 8008c80:	080089f9 	.word	0x080089f9
 8008c84:	080089f9 	.word	0x080089f9
 8008c88:	08009075 	.word	0x08009075
 8008c8c:	080089f9 	.word	0x080089f9
 8008c90:	080089f9 	.word	0x080089f9
 8008c94:	080089f9 	.word	0x080089f9
 8008c98:	080089f9 	.word	0x080089f9
 8008c9c:	080089f9 	.word	0x080089f9
 8008ca0:	080089f9 	.word	0x080089f9
 8008ca4:	080089f9 	.word	0x080089f9
 8008ca8:	080089f9 	.word	0x080089f9
 8008cac:	080089f9 	.word	0x080089f9
 8008cb0:	080089f9 	.word	0x080089f9
 8008cb4:	080089f9 	.word	0x080089f9
 8008cb8:	080089f9 	.word	0x080089f9
 8008cbc:	080089f9 	.word	0x080089f9
 8008cc0:	080089f9 	.word	0x080089f9
 8008cc4:	080089f9 	.word	0x080089f9
 8008cc8:	080089f9 	.word	0x080089f9
 8008ccc:	080089f9 	.word	0x080089f9
 8008cd0:	080089f9 	.word	0x080089f9
 8008cd4:	080089f9 	.word	0x080089f9
 8008cd8:	080089f9 	.word	0x080089f9
 8008cdc:	080089f9 	.word	0x080089f9
 8008ce0:	080089f9 	.word	0x080089f9
 8008ce4:	080089f9 	.word	0x080089f9
 8008ce8:	080089f9 	.word	0x080089f9
 8008cec:	080089f9 	.word	0x080089f9
 8008cf0:	080089f9 	.word	0x080089f9
 8008cf4:	080089f9 	.word	0x080089f9
 8008cf8:	080089f9 	.word	0x080089f9
 8008cfc:	080089f9 	.word	0x080089f9
 8008d00:	080089f9 	.word	0x080089f9
 8008d04:	080089f9 	.word	0x080089f9
 8008d08:	08008ff1 	.word	0x08008ff1
    return HAL_ERROR;
 8008d0c:	2001      	movs	r0, #1
}
 8008d0e:	4770      	bx	lr
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d10:	69dd      	ldr	r5, [r3, #28]
 8008d12:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8008d16:	f47f af4c 	bne.w	8008bb2 <HAL_UART_Init+0x352>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d1a:	f7fa fda5 	bl	8003868 <HAL_GetTick>
 8008d1e:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008d20:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d22:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8008d26:	f080 8272 	bcs.w	800920e <HAL_UART_Init+0x9ae>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	0752      	lsls	r2, r2, #29
 8008d2e:	d5ef      	bpl.n	8008d10 <HAL_UART_Init+0x4b0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d30:	69da      	ldr	r2, [r3, #28]
 8008d32:	0517      	lsls	r7, r2, #20
 8008d34:	d5ec      	bpl.n	8008d10 <HAL_UART_Init+0x4b0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d36:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 8008d3a:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8008d3c:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d3e:	6219      	str	r1, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008d40:	6819      	ldr	r1, [r3, #0]
 8008d42:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 8008d46:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d48:	6899      	ldr	r1, [r3, #8]
 8008d4a:	f021 0101 	bic.w	r1, r1, #1
 8008d4e:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8008d50:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
          __HAL_UNLOCK(huart);
 8008d54:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008d58:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d5c:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
 8008d60:	e651      	b.n	8008a06 <HAL_UART_Init+0x1a6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d62:	69dd      	ldr	r5, [r3, #28]
 8008d64:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 8008d68:	f47f af27 	bne.w	8008bba <HAL_UART_Init+0x35a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d6c:	f7fa fd7c 	bl	8003868 <HAL_GetTick>
 8008d70:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008d72:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d74:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8008d78:	f080 8249 	bcs.w	800920e <HAL_UART_Init+0x9ae>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	0751      	lsls	r1, r2, #29
 8008d80:	d5ef      	bpl.n	8008d62 <HAL_UART_Init+0x502>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d82:	69da      	ldr	r2, [r3, #28]
 8008d84:	0512      	lsls	r2, r2, #20
 8008d86:	d5ec      	bpl.n	8008d62 <HAL_UART_Init+0x502>
 8008d88:	e7d5      	b.n	8008d36 <HAL_UART_Init+0x4d6>
 8008d8a:	bf00      	nop
 8008d8c:	0801acac 	.word	0x0801acac
 8008d90:	03d09000 	.word	0x03d09000
 8008d94:	58024400 	.word	0x58024400
 8008d98:	000ffcff 	.word	0x000ffcff
 8008d9c:	0801aca4 	.word	0x0801aca4
 8008da0:	0801aca4 	.word	0x0801aca4
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008da4:	2d00      	cmp	r5, #0
 8008da6:	f000 82de 	beq.w	8009366 <HAL_UART_Init+0xb06>
 8008daa:	2d01      	cmp	r5, #1
 8008dac:	f000 83cb 	beq.w	8009546 <HAL_UART_Init+0xce6>
 8008db0:	2d02      	cmp	r5, #2
 8008db2:	f000 83fd 	beq.w	80095b0 <HAL_UART_Init+0xd50>
 8008db6:	2d03      	cmp	r5, #3
 8008db8:	f000 8488 	beq.w	80096cc <HAL_UART_Init+0xe6c>
 8008dbc:	2d04      	cmp	r5, #4
 8008dbe:	f000 84b5 	beq.w	800972c <HAL_UART_Init+0xecc>
 8008dc2:	2d05      	cmp	r5, #5
 8008dc4:	f000 850d 	beq.w	80097e2 <HAL_UART_Init+0xf82>
 8008dc8:	2d06      	cmp	r5, #6
 8008dca:	f000 8531 	beq.w	8009830 <HAL_UART_Init+0xfd0>
 8008dce:	2d07      	cmp	r5, #7
 8008dd0:	f000 85af 	beq.w	8009932 <HAL_UART_Init+0x10d2>
 8008dd4:	2d08      	cmp	r5, #8
 8008dd6:	f000 85f5 	beq.w	80099c4 <HAL_UART_Init+0x1164>
 8008dda:	2d09      	cmp	r5, #9
 8008ddc:	f000 8638 	beq.w	8009a50 <HAL_UART_Init+0x11f0>
 8008de0:	2d0a      	cmp	r5, #10
 8008de2:	f000 8660 	beq.w	8009aa6 <HAL_UART_Init+0x1246>
 8008de6:	2d0b      	cmp	r5, #11
 8008de8:	bf14      	ite	ne
 8008dea:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 8008dee:	2380      	moveq	r3, #128	; 0x80
 8008df0:	6861      	ldr	r1, [r4, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008df2:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008df4:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8008df8:	fbb3 f3f1 	udiv	r3, r3, r1
 8008dfc:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dfe:	f1a3 0010 	sub.w	r0, r3, #16
 8008e02:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8008e06:	4288      	cmp	r0, r1
 8008e08:	f63f adf6 	bhi.w	80089f8 <HAL_UART_Init+0x198>
  huart->RxISR = NULL;
 8008e0c:	2100      	movs	r1, #0
      huart->Instance->BRR = usartdiv;
 8008e0e:	6825      	ldr	r5, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8008e10:	f04f 1001 	mov.w	r0, #65537	; 0x10001
      huart->Instance->BRR = usartdiv;
 8008e14:	60eb      	str	r3, [r5, #12]
  huart->TxISR = NULL;
 8008e16:	6721      	str	r1, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 8008e18:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e1c:	2a00      	cmp	r2, #0
 8008e1e:	f43f aeac 	beq.w	8008b7a <HAL_UART_Init+0x31a>
    return HAL_ERROR;
 8008e22:	2001      	movs	r0, #1
}
 8008e24:	b006      	add	sp, #24
 8008e26:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e2a:	2d00      	cmp	r5, #0
 8008e2c:	f000 8299 	beq.w	8009362 <HAL_UART_Init+0xb02>
 8008e30:	2d01      	cmp	r5, #1
 8008e32:	f000 8386 	beq.w	8009542 <HAL_UART_Init+0xce2>
 8008e36:	2d02      	cmp	r5, #2
 8008e38:	f000 83b4 	beq.w	80095a4 <HAL_UART_Init+0xd44>
 8008e3c:	2d03      	cmp	r5, #3
 8008e3e:	f000 8449 	beq.w	80096d4 <HAL_UART_Init+0xe74>
 8008e42:	2d04      	cmp	r5, #4
 8008e44:	f000 8466 	beq.w	8009714 <HAL_UART_Init+0xeb4>
 8008e48:	2d05      	cmp	r5, #5
 8008e4a:	f000 84c7 	beq.w	80097dc <HAL_UART_Init+0xf7c>
 8008e4e:	2d06      	cmp	r5, #6
 8008e50:	f000 84eb 	beq.w	800982a <HAL_UART_Init+0xfca>
 8008e54:	2d07      	cmp	r5, #7
 8008e56:	f000 8569 	beq.w	800992c <HAL_UART_Init+0x10cc>
 8008e5a:	2d08      	cmp	r5, #8
 8008e5c:	f000 8596 	beq.w	800998c <HAL_UART_Init+0x112c>
 8008e60:	2d09      	cmp	r5, #9
 8008e62:	f000 860a 	beq.w	8009a7a <HAL_UART_Init+0x121a>
 8008e66:	2d0a      	cmp	r5, #10
 8008e68:	f000 8621 	beq.w	8009aae <HAL_UART_Init+0x124e>
 8008e6c:	4bc8      	ldr	r3, [pc, #800]	; (8009190 <HAL_UART_Init+0x930>)
 8008e6e:	f643 5209 	movw	r2, #15625	; 0x3d09
 8008e72:	2d0b      	cmp	r5, #11
 8008e74:	bf08      	it	eq
 8008e76:	4613      	moveq	r3, r2
 8008e78:	e7ba      	b.n	8008df0 <HAL_UART_Init+0x590>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e7a:	4bc6      	ldr	r3, [pc, #792]	; (8009194 <HAL_UART_Init+0x934>)
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	0690      	lsls	r0, r2, #26
 8008e80:	f140 8274 	bpl.w	800936c <HAL_UART_Init+0xb0c>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	4bc4      	ldr	r3, [pc, #784]	; (8009198 <HAL_UART_Init+0x938>)
 8008e88:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008e8c:	40d3      	lsrs	r3, r2
 8008e8e:	2d00      	cmp	r5, #0
 8008e90:	d0ae      	beq.n	8008df0 <HAL_UART_Init+0x590>
 8008e92:	2d01      	cmp	r5, #1
 8008e94:	f000 8295 	beq.w	80093c2 <HAL_UART_Init+0xb62>
 8008e98:	2d02      	cmp	r5, #2
 8008e9a:	f000 8290 	beq.w	80093be <HAL_UART_Init+0xb5e>
 8008e9e:	2d03      	cmp	r5, #3
 8008ea0:	f000 828a 	beq.w	80093b8 <HAL_UART_Init+0xb58>
 8008ea4:	2d04      	cmp	r5, #4
 8008ea6:	f000 8345 	beq.w	8009534 <HAL_UART_Init+0xcd4>
 8008eaa:	2d05      	cmp	r5, #5
 8008eac:	f000 8505 	beq.w	80098ba <HAL_UART_Init+0x105a>
 8008eb0:	2d06      	cmp	r5, #6
 8008eb2:	f000 8432 	beq.w	800971a <HAL_UART_Init+0xeba>
 8008eb6:	2d07      	cmp	r5, #7
 8008eb8:	f000 849b 	beq.w	80097f2 <HAL_UART_Init+0xf92>
 8008ebc:	2d08      	cmp	r5, #8
 8008ebe:	f000 84bf 	beq.w	8009840 <HAL_UART_Init+0xfe0>
 8008ec2:	2d09      	cmp	r5, #9
 8008ec4:	f000 8505 	beq.w	80098d2 <HAL_UART_Init+0x1072>
 8008ec8:	2d0a      	cmp	r5, #10
 8008eca:	f000 8550 	beq.w	800996e <HAL_UART_Init+0x110e>
 8008ece:	2d0b      	cmp	r5, #11
 8008ed0:	d18e      	bne.n	8008df0 <HAL_UART_Init+0x590>
 8008ed2:	0a1b      	lsrs	r3, r3, #8
 8008ed4:	e78c      	b.n	8008df0 <HAL_UART_Init+0x590>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ed6:	a803      	add	r0, sp, #12
 8008ed8:	f7fe fcfc 	bl	80078d4 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008edc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008ede:	9b04      	ldr	r3, [sp, #16]
 8008ee0:	2a00      	cmp	r2, #0
 8008ee2:	d085      	beq.n	8008df0 <HAL_UART_Init+0x590>
 8008ee4:	2a01      	cmp	r2, #1
 8008ee6:	f000 826c 	beq.w	80093c2 <HAL_UART_Init+0xb62>
 8008eea:	2a02      	cmp	r2, #2
 8008eec:	f000 8267 	beq.w	80093be <HAL_UART_Init+0xb5e>
 8008ef0:	2a03      	cmp	r2, #3
 8008ef2:	f000 8261 	beq.w	80093b8 <HAL_UART_Init+0xb58>
 8008ef6:	2a04      	cmp	r2, #4
 8008ef8:	f000 831c 	beq.w	8009534 <HAL_UART_Init+0xcd4>
 8008efc:	2a05      	cmp	r2, #5
 8008efe:	f000 8316 	beq.w	800952e <HAL_UART_Init+0xcce>
 8008f02:	2a06      	cmp	r2, #6
 8008f04:	f000 8409 	beq.w	800971a <HAL_UART_Init+0xeba>
 8008f08:	2a07      	cmp	r2, #7
 8008f0a:	f000 8472 	beq.w	80097f2 <HAL_UART_Init+0xf92>
 8008f0e:	2a08      	cmp	r2, #8
 8008f10:	f000 8496 	beq.w	8009840 <HAL_UART_Init+0xfe0>
 8008f14:	2a09      	cmp	r2, #9
 8008f16:	f000 84dc 	beq.w	80098d2 <HAL_UART_Init+0x1072>
 8008f1a:	2a0a      	cmp	r2, #10
 8008f1c:	f000 8527 	beq.w	800996e <HAL_UART_Init+0x110e>
 8008f20:	2a0b      	cmp	r2, #11
 8008f22:	f47f af65 	bne.w	8008df0 <HAL_UART_Init+0x590>
 8008f26:	e7d4      	b.n	8008ed2 <HAL_UART_Init+0x672>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f28:	f7fd fd34 	bl	8006994 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f2e:	b303      	cbz	r3, 8008f72 <HAL_UART_Init+0x712>
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	f000 8282 	beq.w	800943a <HAL_UART_Init+0xbda>
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	f000 8252 	beq.w	80093e0 <HAL_UART_Init+0xb80>
 8008f3c:	2b03      	cmp	r3, #3
 8008f3e:	f000 824c 	beq.w	80093da <HAL_UART_Init+0xb7a>
 8008f42:	2b04      	cmp	r3, #4
 8008f44:	f000 8305 	beq.w	8009552 <HAL_UART_Init+0xcf2>
 8008f48:	2b05      	cmp	r3, #5
 8008f4a:	f000 82ff 	beq.w	800954c <HAL_UART_Init+0xcec>
 8008f4e:	2b06      	cmp	r3, #6
 8008f50:	f000 8424 	beq.w	800979c <HAL_UART_Init+0xf3c>
 8008f54:	2b07      	cmp	r3, #7
 8008f56:	f000 845f 	beq.w	8009818 <HAL_UART_Init+0xfb8>
 8008f5a:	2b08      	cmp	r3, #8
 8008f5c:	f000 8494 	beq.w	8009888 <HAL_UART_Init+0x1028>
 8008f60:	2b09      	cmp	r3, #9
 8008f62:	f000 84f7 	beq.w	8009954 <HAL_UART_Init+0x10f4>
 8008f66:	2b0a      	cmp	r3, #10
 8008f68:	f000 8592 	beq.w	8009a90 <HAL_UART_Init+0x1230>
 8008f6c:	2b0b      	cmp	r3, #11
 8008f6e:	bf08      	it	eq
 8008f70:	0a00      	lsreq	r0, r0, #8
 8008f72:	6861      	ldr	r1, [r4, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f74:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f76:	eb00 0351 	add.w	r3, r0, r1, lsr #1
 8008f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	e73d      	b.n	8008dfe <HAL_UART_Init+0x59e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f82:	f7fd fc57 	bl	8006834 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d0f2      	beq.n	8008f72 <HAL_UART_Init+0x712>
 8008f8c:	e7d0      	b.n	8008f30 <HAL_UART_Init+0x6d0>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f8e:	4668      	mov	r0, sp
 8008f90:	f7fe fc08 	bl	80077a4 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f94:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008f96:	9b01      	ldr	r3, [sp, #4]
 8008f98:	2a00      	cmp	r2, #0
 8008f9a:	f43f af29 	beq.w	8008df0 <HAL_UART_Init+0x590>
 8008f9e:	e7a1      	b.n	8008ee4 <HAL_UART_Init+0x684>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8008fa0:	2d00      	cmp	r5, #0
 8008fa2:	f000 8217 	beq.w	80093d4 <HAL_UART_Init+0xb74>
 8008fa6:	2d01      	cmp	r5, #1
 8008fa8:	f000 82d7 	beq.w	800955a <HAL_UART_Init+0xcfa>
 8008fac:	2d02      	cmp	r5, #2
 8008fae:	f000 8379 	beq.w	80096a4 <HAL_UART_Init+0xe44>
 8008fb2:	2d03      	cmp	r5, #3
 8008fb4:	f000 83ab 	beq.w	800970e <HAL_UART_Init+0xeae>
 8008fb8:	2d04      	cmp	r5, #4
 8008fba:	f000 8407 	beq.w	80097cc <HAL_UART_Init+0xf6c>
 8008fbe:	2d05      	cmp	r5, #5
 8008fc0:	f000 8430 	beq.w	8009824 <HAL_UART_Init+0xfc4>
 8008fc4:	2d06      	cmp	r5, #6
 8008fc6:	f000 8481 	beq.w	80098cc <HAL_UART_Init+0x106c>
 8008fca:	2d07      	cmp	r5, #7
 8008fcc:	f000 8505 	beq.w	80099da <HAL_UART_Init+0x117a>
 8008fd0:	2d08      	cmp	r5, #8
 8008fd2:	f000 8556 	beq.w	8009a82 <HAL_UART_Init+0x1222>
 8008fd6:	2d09      	cmp	r5, #9
 8008fd8:	f000 855d 	beq.w	8009a96 <HAL_UART_Init+0x1236>
 8008fdc:	2d0a      	cmp	r5, #10
 8008fde:	f000 856a 	beq.w	8009ab6 <HAL_UART_Init+0x1256>
 8008fe2:	f643 5009 	movw	r0, #15625	; 0x3d09
 8008fe6:	4b6a      	ldr	r3, [pc, #424]	; (8009190 <HAL_UART_Init+0x930>)
 8008fe8:	2d0b      	cmp	r5, #11
 8008fea:	bf18      	it	ne
 8008fec:	4618      	movne	r0, r3
 8008fee:	e563      	b.n	8008ab8 <HAL_UART_Init+0x258>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ff0:	2d00      	cmp	r5, #0
 8008ff2:	f000 8226 	beq.w	8009442 <HAL_UART_Init+0xbe2>
 8008ff6:	2d01      	cmp	r5, #1
 8008ff8:	f000 8351 	beq.w	800969e <HAL_UART_Init+0xe3e>
 8008ffc:	2d02      	cmp	r5, #2
 8008ffe:	f000 837e 	beq.w	80096fe <HAL_UART_Init+0xe9e>
 8009002:	2d03      	cmp	r5, #3
 8009004:	f000 83df 	beq.w	80097c6 <HAL_UART_Init+0xf66>
 8009008:	2d04      	cmp	r5, #4
 800900a:	f000 83fe 	beq.w	800980a <HAL_UART_Init+0xfaa>
 800900e:	2d05      	cmp	r5, #5
 8009010:	f000 8458 	beq.w	80098c4 <HAL_UART_Init+0x1064>
 8009014:	2d06      	cmp	r5, #6
 8009016:	f000 84d9 	beq.w	80099cc <HAL_UART_Init+0x116c>
 800901a:	2d07      	cmp	r5, #7
 800901c:	f000 8503 	beq.w	8009a26 <HAL_UART_Init+0x11c6>
 8009020:	2d08      	cmp	r5, #8
 8009022:	f000 8577 	beq.w	8009b14 <HAL_UART_Init+0x12b4>
 8009026:	2d09      	cmp	r5, #9
 8009028:	f000 8570 	beq.w	8009b0c <HAL_UART_Init+0x12ac>
 800902c:	2d0a      	cmp	r5, #10
 800902e:	f000 855f 	beq.w	8009af0 <HAL_UART_Init+0x1290>
 8009032:	2d0b      	cmp	r5, #11
 8009034:	bf14      	ite	ne
 8009036:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 800903a:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800903e:	6862      	ldr	r2, [r4, #4]
 8009040:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8009044:	fbb3 f3f2 	udiv	r3, r3, r2
 8009048:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800904a:	f1a3 0110 	sub.w	r1, r3, #16
 800904e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8009052:	4291      	cmp	r1, r2
 8009054:	f63f acd0 	bhi.w	80089f8 <HAL_UART_Init+0x198>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009058:	f023 020f 	bic.w	r2, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800905c:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8009060:	6820      	ldr	r0, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8009062:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      huart->Instance->BRR = brrtemp;
 8009066:	4313      	orrs	r3, r2
  huart->RxISR = NULL;
 8009068:	2200      	movs	r2, #0
      huart->Instance->BRR = brrtemp;
 800906a:	60c3      	str	r3, [r0, #12]
  huart->TxISR = NULL;
 800906c:	6722      	str	r2, [r4, #112]	; 0x70
  huart->RxISR = NULL;
 800906e:	e9c4 121a 	strd	r1, r2, [r4, #104]	; 0x68
 8009072:	e582      	b.n	8008b7a <HAL_UART_Init+0x31a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009074:	2d00      	cmp	r5, #0
 8009076:	f000 81e2 	beq.w	800943e <HAL_UART_Init+0xbde>
 800907a:	2d01      	cmp	r5, #1
 800907c:	f000 830d 	beq.w	800969a <HAL_UART_Init+0xe3a>
 8009080:	2d02      	cmp	r5, #2
 8009082:	f000 8342 	beq.w	800970a <HAL_UART_Init+0xeaa>
 8009086:	2d03      	cmp	r5, #3
 8009088:	f000 8397 	beq.w	80097ba <HAL_UART_Init+0xf5a>
 800908c:	2d04      	cmp	r5, #4
 800908e:	f000 83ba 	beq.w	8009806 <HAL_UART_Init+0xfa6>
 8009092:	2d05      	cmp	r5, #5
 8009094:	f000 83ff 	beq.w	8009896 <HAL_UART_Init+0x1036>
 8009098:	2d06      	cmp	r5, #6
 800909a:	f000 848c 	beq.w	80099b6 <HAL_UART_Init+0x1156>
 800909e:	2d07      	cmp	r5, #7
 80090a0:	f000 84d3 	beq.w	8009a4a <HAL_UART_Init+0x11ea>
 80090a4:	2d08      	cmp	r5, #8
 80090a6:	f000 852e 	beq.w	8009b06 <HAL_UART_Init+0x12a6>
 80090aa:	2d09      	cmp	r5, #9
 80090ac:	f000 8528 	beq.w	8009b00 <HAL_UART_Init+0x12a0>
 80090b0:	2d0a      	cmp	r5, #10
 80090b2:	f000 8521 	beq.w	8009af8 <HAL_UART_Init+0x1298>
 80090b6:	4b39      	ldr	r3, [pc, #228]	; (800919c <HAL_UART_Init+0x93c>)
 80090b8:	f647 2212 	movw	r2, #31250	; 0x7a12
 80090bc:	2d0b      	cmp	r5, #11
 80090be:	bf08      	it	eq
 80090c0:	4613      	moveq	r3, r2
 80090c2:	e7bc      	b.n	800903e <HAL_UART_Init+0x7de>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090c4:	4b33      	ldr	r3, [pc, #204]	; (8009194 <HAL_UART_Init+0x934>)
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	0696      	lsls	r6, r2, #26
 80090ca:	f140 81bd 	bpl.w	8009448 <HAL_UART_Init+0xbe8>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	4b31      	ldr	r3, [pc, #196]	; (8009198 <HAL_UART_Init+0x938>)
 80090d2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80090d6:	fa23 f202 	lsr.w	r2, r3, r2
 80090da:	b1fd      	cbz	r5, 800911c <HAL_UART_Init+0x8bc>
 80090dc:	2d01      	cmp	r5, #1
 80090de:	f000 8224 	beq.w	800952a <HAL_UART_Init+0xcca>
 80090e2:	2d02      	cmp	r5, #2
 80090e4:	f000 8237 	beq.w	8009556 <HAL_UART_Init+0xcf6>
 80090e8:	2d03      	cmp	r5, #3
 80090ea:	f000 83b5 	beq.w	8009858 <HAL_UART_Init+0xff8>
 80090ee:	2d04      	cmp	r5, #4
 80090f0:	f000 82fd 	beq.w	80096ee <HAL_UART_Init+0xe8e>
 80090f4:	2d05      	cmp	r5, #5
 80090f6:	f000 8356 	beq.w	80097a6 <HAL_UART_Init+0xf46>
 80090fa:	2d06      	cmp	r5, #6
 80090fc:	f000 8388 	beq.w	8009810 <HAL_UART_Init+0xfb0>
 8009100:	2d07      	cmp	r5, #7
 8009102:	f000 83d8 	beq.w	80098b6 <HAL_UART_Init+0x1056>
 8009106:	2d08      	cmp	r5, #8
 8009108:	f000 843d 	beq.w	8009986 <HAL_UART_Init+0x1126>
 800910c:	2d09      	cmp	r5, #9
 800910e:	f000 8487 	beq.w	8009a20 <HAL_UART_Init+0x11c0>
 8009112:	2d0a      	cmp	r5, #10
 8009114:	f000 8481 	beq.w	8009a1a <HAL_UART_Init+0x11ba>
 8009118:	2d0b      	cmp	r5, #11
 800911a:	d02e      	beq.n	800917a <HAL_UART_Init+0x91a>
 800911c:	6861      	ldr	r1, [r4, #4]
 800911e:	084b      	lsrs	r3, r1, #1
 8009120:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8009124:	fbb3 f3f1 	udiv	r3, r3, r1
 8009128:	b29b      	uxth	r3, r3
 800912a:	e78e      	b.n	800904a <HAL_UART_Init+0x7ea>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800912c:	a803      	add	r0, sp, #12
 800912e:	f7fe fbd1 	bl	80078d4 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009132:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009134:	9a04      	ldr	r2, [sp, #16]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d0f0      	beq.n	800911c <HAL_UART_Init+0x8bc>
 800913a:	2b01      	cmp	r3, #1
 800913c:	f000 81f5 	beq.w	800952a <HAL_UART_Init+0xcca>
 8009140:	2b02      	cmp	r3, #2
 8009142:	f000 8208 	beq.w	8009556 <HAL_UART_Init+0xcf6>
 8009146:	2b03      	cmp	r3, #3
 8009148:	f000 82bb 	beq.w	80096c2 <HAL_UART_Init+0xe62>
 800914c:	2b04      	cmp	r3, #4
 800914e:	f000 82ce 	beq.w	80096ee <HAL_UART_Init+0xe8e>
 8009152:	2b05      	cmp	r3, #5
 8009154:	f000 8327 	beq.w	80097a6 <HAL_UART_Init+0xf46>
 8009158:	2b06      	cmp	r3, #6
 800915a:	f000 8359 	beq.w	8009810 <HAL_UART_Init+0xfb0>
 800915e:	2b07      	cmp	r3, #7
 8009160:	f000 83a9 	beq.w	80098b6 <HAL_UART_Init+0x1056>
 8009164:	2b08      	cmp	r3, #8
 8009166:	f000 840e 	beq.w	8009986 <HAL_UART_Init+0x1126>
 800916a:	2b09      	cmp	r3, #9
 800916c:	f000 8458 	beq.w	8009a20 <HAL_UART_Init+0x11c0>
 8009170:	2b0a      	cmp	r3, #10
 8009172:	f000 8452 	beq.w	8009a1a <HAL_UART_Init+0x11ba>
 8009176:	2b0b      	cmp	r3, #11
 8009178:	d1d0      	bne.n	800911c <HAL_UART_Init+0x8bc>
 800917a:	0a12      	lsrs	r2, r2, #8
 800917c:	e7ce      	b.n	800911c <HAL_UART_Init+0x8bc>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800917e:	4668      	mov	r0, sp
 8009180:	f7fe fb10 	bl	80077a4 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009184:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009186:	9a01      	ldr	r2, [sp, #4]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d0c7      	beq.n	800911c <HAL_UART_Init+0x8bc>
 800918c:	e7d5      	b.n	800913a <HAL_UART_Init+0x8da>
 800918e:	bf00      	nop
 8009190:	003d0900 	.word	0x003d0900
 8009194:	58024400 	.word	0x58024400
 8009198:	03d09000 	.word	0x03d09000
 800919c:	007a1200 	.word	0x007a1200
        pclk = HAL_RCC_GetPCLK2Freq();
 80091a0:	f7fd fbf8 	bl	8006994 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091a6:	b303      	cbz	r3, 80091ea <HAL_UART_Init+0x98a>
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	f000 81c8 	beq.w	800953e <HAL_UART_Init+0xcde>
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	f000 81fa 	beq.w	80095a8 <HAL_UART_Init+0xd48>
 80091b4:	2b03      	cmp	r3, #3
 80091b6:	f000 827f 	beq.w	80096b8 <HAL_UART_Init+0xe58>
 80091ba:	2b04      	cmp	r3, #4
 80091bc:	f000 82ba 	beq.w	8009734 <HAL_UART_Init+0xed4>
 80091c0:	2b05      	cmp	r3, #5
 80091c2:	f000 8312 	beq.w	80097ea <HAL_UART_Init+0xf8a>
 80091c6:	2b06      	cmp	r3, #6
 80091c8:	f000 833f 	beq.w	800984a <HAL_UART_Init+0xfea>
 80091cc:	2b07      	cmp	r3, #7
 80091ce:	f000 83ba 	beq.w	8009946 <HAL_UART_Init+0x10e6>
 80091d2:	2b08      	cmp	r3, #8
 80091d4:	f000 842e 	beq.w	8009a34 <HAL_UART_Init+0x11d4>
 80091d8:	2b09      	cmp	r3, #9
 80091da:	f000 8411 	beq.w	8009a00 <HAL_UART_Init+0x11a0>
 80091de:	2b0a      	cmp	r3, #10
 80091e0:	f000 840b 	beq.w	80099fa <HAL_UART_Init+0x119a>
 80091e4:	2b0b      	cmp	r3, #11
 80091e6:	bf08      	it	eq
 80091e8:	0a00      	lsreq	r0, r0, #8
 80091ea:	6862      	ldr	r2, [r4, #4]
 80091ec:	0853      	lsrs	r3, r2, #1
 80091ee:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80091f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	e727      	b.n	800904a <HAL_UART_Init+0x7ea>
        pclk = HAL_RCC_GetPCLK1Freq();
 80091fa:	f7fd fb1b 	bl	8006834 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009200:	2b00      	cmp	r3, #0
 8009202:	d0f2      	beq.n	80091ea <HAL_UART_Init+0x98a>
 8009204:	e7d0      	b.n	80091a8 <HAL_UART_Init+0x948>
    UART_AdvFeatureConfig(huart);
 8009206:	4620      	mov	r0, r4
 8009208:	f7ff fad2 	bl	80087b0 <UART_AdvFeatureConfig>
 800920c:	e4b9      	b.n	8008b82 <HAL_UART_Init+0x322>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800920e:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 8009210:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 8009212:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009214:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009218:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800921a:	689a      	ldr	r2, [r3, #8]
 800921c:	f022 0201 	bic.w	r2, r2, #1
 8009220:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8009222:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
        __HAL_UNLOCK(huart);
 8009226:	f884 507c 	strb.w	r5, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800922a:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 800922e:	f7ff bbea 	b.w	8008a06 <HAL_UART_Init+0x1a6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009232:	4bcb      	ldr	r3, [pc, #812]	; (8009560 <HAL_UART_Init+0xd00>)
 8009234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009236:	f003 0307 	and.w	r3, r3, #7
 800923a:	2b05      	cmp	r3, #5
 800923c:	f63f abdc 	bhi.w	80089f8 <HAL_UART_Init+0x198>
 8009240:	4ac8      	ldr	r2, [pc, #800]	; (8009564 <HAL_UART_Init+0xd04>)
 8009242:	5cd3      	ldrb	r3, [r2, r3]
 8009244:	f7ff bb7d 	b.w	8008942 <HAL_UART_Init+0xe2>
 8009248:	4bc5      	ldr	r3, [pc, #788]	; (8009560 <HAL_UART_Init+0xd00>)
 800924a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800924c:	f003 0307 	and.w	r3, r3, #7
 8009250:	2b05      	cmp	r3, #5
 8009252:	f63f abd1 	bhi.w	80089f8 <HAL_UART_Init+0x198>
 8009256:	4ac4      	ldr	r2, [pc, #784]	; (8009568 <HAL_UART_Init+0xd08>)
 8009258:	5cd3      	ldrb	r3, [r2, r3]
 800925a:	f7ff bb72 	b.w	8008942 <HAL_UART_Init+0xe2>
 800925e:	4bc0      	ldr	r3, [pc, #768]	; (8009560 <HAL_UART_Init+0xd00>)
 8009260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009262:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009266:	2b28      	cmp	r3, #40	; 0x28
 8009268:	f63f abc6 	bhi.w	80089f8 <HAL_UART_Init+0x198>
 800926c:	4abf      	ldr	r2, [pc, #764]	; (800956c <HAL_UART_Init+0xd0c>)
 800926e:	5cd3      	ldrb	r3, [r2, r3]
 8009270:	f7ff bb67 	b.w	8008942 <HAL_UART_Init+0xe2>
    switch (clocksource)
 8009274:	2e02      	cmp	r6, #2
 8009276:	d033      	beq.n	80092e0 <HAL_UART_Init+0xa80>
 8009278:	2e04      	cmp	r6, #4
 800927a:	f47f abbd 	bne.w	80089f8 <HAL_UART_Init+0x198>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800927e:	4668      	mov	r0, sp
 8009280:	f7fe fa90 	bl	80077a4 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009284:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009286:	9801      	ldr	r0, [sp, #4]
 8009288:	b1fb      	cbz	r3, 80092ca <HAL_UART_Init+0xa6a>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800928a:	2b01      	cmp	r3, #1
 800928c:	f000 80a0 	beq.w	80093d0 <HAL_UART_Init+0xb70>
 8009290:	2b02      	cmp	r3, #2
 8009292:	f000 809b 	beq.w	80093cc <HAL_UART_Init+0xb6c>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009296:	2b03      	cmp	r3, #3
 8009298:	f000 8095 	beq.w	80093c6 <HAL_UART_Init+0xb66>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800929c:	2b04      	cmp	r3, #4
 800929e:	f000 8185 	beq.w	80095ac <HAL_UART_Init+0xd4c>
 80092a2:	2b05      	cmp	r3, #5
 80092a4:	f000 821f 	beq.w	80096e6 <HAL_UART_Init+0xe86>
 80092a8:	2b06      	cmp	r3, #6
 80092aa:	f000 8271 	beq.w	8009790 <HAL_UART_Init+0xf30>
 80092ae:	2b07      	cmp	r3, #7
 80092b0:	f000 82a2 	beq.w	80097f8 <HAL_UART_Init+0xf98>
 80092b4:	2b08      	cmp	r3, #8
 80092b6:	f000 82c6 	beq.w	8009846 <HAL_UART_Init+0xfe6>
 80092ba:	2b09      	cmp	r3, #9
 80092bc:	f000 8380 	beq.w	80099c0 <HAL_UART_Init+0x1160>
 80092c0:	2b0a      	cmp	r3, #10
 80092c2:	f000 837b 	beq.w	80099bc <HAL_UART_Init+0x115c>
 80092c6:	2b0b      	cmp	r3, #11
 80092c8:	d008      	beq.n	80092dc <HAL_UART_Init+0xa7c>
    if (lpuart_ker_ck_pres != 0U)
 80092ca:	2800      	cmp	r0, #0
 80092cc:	f47f abf4 	bne.w	8008ab8 <HAL_UART_Init+0x258>
  huart->NbRxDataToProcess = 1;
 80092d0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  huart->TxISR = NULL;
 80092d4:	e9c4 001b 	strd	r0, r0, [r4, #108]	; 0x6c
  huart->NbRxDataToProcess = 1;
 80092d8:	66a3      	str	r3, [r4, #104]	; 0x68
 80092da:	e44e      	b.n	8008b7a <HAL_UART_Init+0x31a>
 80092dc:	0a00      	lsrs	r0, r0, #8
 80092de:	e7f4      	b.n	80092ca <HAL_UART_Init+0xa6a>
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80092e0:	f7fe fa4e 	bl	8007780 <HAL_RCCEx_GetD3PCLK1Freq>
 80092e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d0ef      	beq.n	80092ca <HAL_UART_Init+0xa6a>
 80092ea:	e7ce      	b.n	800928a <HAL_UART_Init+0xa2a>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80092ec:	2d00      	cmp	r5, #0
 80092ee:	f000 80a0 	beq.w	8009432 <HAL_UART_Init+0xbd2>
 80092f2:	2d01      	cmp	r5, #1
 80092f4:	f000 8152 	beq.w	800959c <HAL_UART_Init+0xd3c>
 80092f8:	2d02      	cmp	r5, #2
 80092fa:	f000 81d6 	beq.w	80096aa <HAL_UART_Init+0xe4a>
 80092fe:	2d03      	cmp	r5, #3
 8009300:	f000 8210 	beq.w	8009724 <HAL_UART_Init+0xec4>
 8009304:	2d04      	cmp	r5, #4
 8009306:	f000 825a 	beq.w	80097be <HAL_UART_Init+0xf5e>
 800930a:	2d05      	cmp	r5, #5
 800930c:	f000 8294 	beq.w	8009838 <HAL_UART_Init+0xfd8>
 8009310:	2d06      	cmp	r5, #6
 8009312:	f000 82bc 	beq.w	800988e <HAL_UART_Init+0x102e>
 8009316:	2d07      	cmp	r5, #7
 8009318:	f000 8349 	beq.w	80099ae <HAL_UART_Init+0x114e>
 800931c:	2d08      	cmp	r5, #8
 800931e:	f000 83b3 	beq.w	8009a88 <HAL_UART_Init+0x1228>
 8009322:	2d09      	cmp	r5, #9
 8009324:	f000 83bb 	beq.w	8009a9e <HAL_UART_Init+0x123e>
 8009328:	2d0a      	cmp	r5, #10
 800932a:	f000 840e 	beq.w	8009b4a <HAL_UART_Init+0x12ea>
 800932e:	2d0b      	cmp	r5, #11
 8009330:	bf0c      	ite	eq
 8009332:	2080      	moveq	r0, #128	; 0x80
 8009334:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8009338:	f7ff bbbe 	b.w	8008ab8 <HAL_UART_Init+0x258>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800933c:	a803      	add	r0, sp, #12
 800933e:	f7fe fac9 	bl	80078d4 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009344:	9804      	ldr	r0, [sp, #16]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d0bf      	beq.n	80092ca <HAL_UART_Init+0xa6a>
 800934a:	e79e      	b.n	800928a <HAL_UART_Init+0xa2a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800934c:	4b84      	ldr	r3, [pc, #528]	; (8009560 <HAL_UART_Init+0xd00>)
 800934e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009350:	f003 0307 	and.w	r3, r3, #7
 8009354:	2b05      	cmp	r3, #5
 8009356:	f63f ab4f 	bhi.w	80089f8 <HAL_UART_Init+0x198>
 800935a:	4a85      	ldr	r2, [pc, #532]	; (8009570 <HAL_UART_Init+0xd10>)
 800935c:	5cd3      	ldrb	r3, [r2, r3]
 800935e:	f7ff baf0 	b.w	8008942 <HAL_UART_Init+0xe2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009362:	4b84      	ldr	r3, [pc, #528]	; (8009574 <HAL_UART_Init+0xd14>)
 8009364:	e544      	b.n	8008df0 <HAL_UART_Init+0x590>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800936a:	e541      	b.n	8008df0 <HAL_UART_Init+0x590>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800936c:	2d00      	cmp	r5, #0
 800936e:	f000 80da 	beq.w	8009526 <HAL_UART_Init+0xcc6>
 8009372:	2d01      	cmp	r5, #1
 8009374:	f000 819d 	beq.w	80096b2 <HAL_UART_Init+0xe52>
 8009378:	2d02      	cmp	r5, #2
 800937a:	f000 81c3 	beq.w	8009704 <HAL_UART_Init+0xea4>
 800937e:	2d03      	cmp	r5, #3
 8009380:	f000 8218 	beq.w	80097b4 <HAL_UART_Init+0xf54>
 8009384:	2d04      	cmp	r5, #4
 8009386:	f000 824a 	beq.w	800981e <HAL_UART_Init+0xfbe>
 800938a:	2d05      	cmp	r5, #5
 800938c:	f000 8290 	beq.w	80098b0 <HAL_UART_Init+0x1050>
 8009390:	2d06      	cmp	r5, #6
 8009392:	f000 8325 	beq.w	80099e0 <HAL_UART_Init+0x1180>
 8009396:	2d07      	cmp	r5, #7
 8009398:	d0e3      	beq.n	8009362 <HAL_UART_Init+0xb02>
 800939a:	2d08      	cmp	r5, #8
 800939c:	f000 80d1 	beq.w	8009542 <HAL_UART_Init+0xce2>
 80093a0:	2d09      	cmp	r5, #9
 80093a2:	f000 80ff 	beq.w	80095a4 <HAL_UART_Init+0xd44>
 80093a6:	2d0a      	cmp	r5, #10
 80093a8:	f000 81b4 	beq.w	8009714 <HAL_UART_Init+0xeb4>
 80093ac:	4b72      	ldr	r3, [pc, #456]	; (8009578 <HAL_UART_Init+0xd18>)
 80093ae:	4a73      	ldr	r2, [pc, #460]	; (800957c <HAL_UART_Init+0xd1c>)
 80093b0:	2d0b      	cmp	r5, #11
 80093b2:	bf08      	it	eq
 80093b4:	4613      	moveq	r3, r2
 80093b6:	e51b      	b.n	8008df0 <HAL_UART_Init+0x590>
 80093b8:	4a71      	ldr	r2, [pc, #452]	; (8009580 <HAL_UART_Init+0xd20>)
 80093ba:	fba2 2303 	umull	r2, r3, r2, r3
 80093be:	089b      	lsrs	r3, r3, #2
 80093c0:	e516      	b.n	8008df0 <HAL_UART_Init+0x590>
 80093c2:	085b      	lsrs	r3, r3, #1
 80093c4:	e514      	b.n	8008df0 <HAL_UART_Init+0x590>
 80093c6:	4b6e      	ldr	r3, [pc, #440]	; (8009580 <HAL_UART_Init+0xd20>)
 80093c8:	fba3 3000 	umull	r3, r0, r3, r0
 80093cc:	0880      	lsrs	r0, r0, #2
 80093ce:	e77c      	b.n	80092ca <HAL_UART_Init+0xa6a>
 80093d0:	0840      	lsrs	r0, r0, #1
 80093d2:	e77a      	b.n	80092ca <HAL_UART_Init+0xa6a>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80093d4:	4867      	ldr	r0, [pc, #412]	; (8009574 <HAL_UART_Init+0xd14>)
 80093d6:	f7ff bb6f 	b.w	8008ab8 <HAL_UART_Init+0x258>
 80093da:	4b69      	ldr	r3, [pc, #420]	; (8009580 <HAL_UART_Init+0xd20>)
 80093dc:	fba3 3000 	umull	r3, r0, r3, r0
 80093e0:	0880      	lsrs	r0, r0, #2
 80093e2:	e5c6      	b.n	8008f72 <HAL_UART_Init+0x712>
 80093e4:	2d00      	cmp	r5, #0
 80093e6:	f000 80a7 	beq.w	8009538 <HAL_UART_Init+0xcd8>
 80093ea:	2d01      	cmp	r5, #1
 80093ec:	f000 8184 	beq.w	80096f8 <HAL_UART_Init+0xe98>
 80093f0:	2d02      	cmp	r5, #2
 80093f2:	f000 81dc 	beq.w	80097ae <HAL_UART_Init+0xf4e>
 80093f6:	2d03      	cmp	r5, #3
 80093f8:	f000 8200 	beq.w	80097fc <HAL_UART_Init+0xf9c>
 80093fc:	2d04      	cmp	r5, #4
 80093fe:	f000 822f 	beq.w	8009860 <HAL_UART_Init+0x1000>
 8009402:	2d05      	cmp	r5, #5
 8009404:	f000 829c 	beq.w	8009940 <HAL_UART_Init+0x10e0>
 8009408:	2d06      	cmp	r5, #6
 800940a:	f000 8310 	beq.w	8009a2e <HAL_UART_Init+0x11ce>
 800940e:	2d07      	cmp	r5, #7
 8009410:	d0e0      	beq.n	80093d4 <HAL_UART_Init+0xb74>
 8009412:	2d08      	cmp	r5, #8
 8009414:	f000 80a1 	beq.w	800955a <HAL_UART_Init+0xcfa>
 8009418:	2d09      	cmp	r5, #9
 800941a:	f000 8143 	beq.w	80096a4 <HAL_UART_Init+0xe44>
 800941e:	2d0a      	cmp	r5, #10
 8009420:	f000 81d4 	beq.w	80097cc <HAL_UART_Init+0xf6c>
 8009424:	4855      	ldr	r0, [pc, #340]	; (800957c <HAL_UART_Init+0xd1c>)
 8009426:	4b54      	ldr	r3, [pc, #336]	; (8009578 <HAL_UART_Init+0xd18>)
 8009428:	2d0b      	cmp	r5, #11
 800942a:	bf18      	it	ne
 800942c:	4618      	movne	r0, r3
 800942e:	f7ff bb43 	b.w	8008ab8 <HAL_UART_Init+0x258>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009432:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009436:	f7ff bb3f 	b.w	8008ab8 <HAL_UART_Init+0x258>
 800943a:	0840      	lsrs	r0, r0, #1
 800943c:	e599      	b.n	8008f72 <HAL_UART_Init+0x712>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800943e:	4b51      	ldr	r3, [pc, #324]	; (8009584 <HAL_UART_Init+0xd24>)
 8009440:	e5fd      	b.n	800903e <HAL_UART_Init+0x7de>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009446:	e5fa      	b.n	800903e <HAL_UART_Init+0x7de>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009448:	2d00      	cmp	r5, #0
 800944a:	f000 80a5 	beq.w	8009598 <HAL_UART_Init+0xd38>
 800944e:	2d01      	cmp	r5, #1
 8009450:	f000 81a2 	beq.w	8009798 <HAL_UART_Init+0xf38>
 8009454:	2d02      	cmp	r5, #2
 8009456:	f000 81d4 	beq.w	8009802 <HAL_UART_Init+0xfa2>
 800945a:	2d03      	cmp	r5, #3
 800945c:	f000 8203 	beq.w	8009866 <HAL_UART_Init+0x1006>
 8009460:	2d04      	cmp	r5, #4
 8009462:	f000 826a 	beq.w	800993a <HAL_UART_Init+0x10da>
 8009466:	2d05      	cmp	r5, #5
 8009468:	f000 82b4 	beq.w	80099d4 <HAL_UART_Init+0x1174>
 800946c:	2d06      	cmp	r5, #6
 800946e:	f000 82f7 	beq.w	8009a60 <HAL_UART_Init+0x1200>
 8009472:	2d07      	cmp	r5, #7
 8009474:	d0e3      	beq.n	800943e <HAL_UART_Init+0xbde>
 8009476:	2d08      	cmp	r5, #8
 8009478:	f000 810f 	beq.w	800969a <HAL_UART_Init+0xe3a>
 800947c:	2d09      	cmp	r5, #9
 800947e:	f000 8144 	beq.w	800970a <HAL_UART_Init+0xeaa>
 8009482:	2d0a      	cmp	r5, #10
 8009484:	f000 81bf 	beq.w	8009806 <HAL_UART_Init+0xfa6>
 8009488:	4b3f      	ldr	r3, [pc, #252]	; (8009588 <HAL_UART_Init+0xd28>)
 800948a:	4a40      	ldr	r2, [pc, #256]	; (800958c <HAL_UART_Init+0xd2c>)
 800948c:	2d0b      	cmp	r5, #11
 800948e:	bf08      	it	eq
 8009490:	4613      	moveq	r3, r2
 8009492:	e5d4      	b.n	800903e <HAL_UART_Init+0x7de>
        switch (clocksource)
 8009494:	2e02      	cmp	r6, #2
 8009496:	f000 80cd 	beq.w	8009634 <HAL_UART_Init+0xdd4>
 800949a:	2e04      	cmp	r6, #4
 800949c:	f47f aaac 	bne.w	80089f8 <HAL_UART_Init+0x198>
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094a0:	4668      	mov	r0, sp
 80094a2:	f7fe f97f 	bl	80077a4 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094a6:	9a01      	ldr	r2, [sp, #4]
 80094a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094aa:	f04f 0c00 	mov.w	ip, #0
 80094ae:	4693      	mov	fp, r2
 80094b0:	b31b      	cbz	r3, 80094fa <HAL_UART_Init+0xc9a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	f000 8167 	beq.w	8009786 <HAL_UART_Init+0xf26>
 80094b8:	2b02      	cmp	r3, #2
 80094ba:	f000 818a 	beq.w	80097d2 <HAL_UART_Init+0xf72>
 80094be:	2b03      	cmp	r3, #3
 80094c0:	f000 81d4 	beq.w	800986c <HAL_UART_Init+0x100c>
 80094c4:	2b04      	cmp	r3, #4
 80094c6:	f000 81da 	beq.w	800987e <HAL_UART_Init+0x101e>
 80094ca:	2b05      	cmp	r3, #5
 80094cc:	f000 8252 	beq.w	8009974 <HAL_UART_Init+0x1114>
 80094d0:	2b06      	cmp	r3, #6
 80094d2:	f000 825e 	beq.w	8009992 <HAL_UART_Init+0x1132>
 80094d6:	2b07      	cmp	r3, #7
 80094d8:	f000 837c 	beq.w	8009bd4 <HAL_UART_Init+0x1374>
 80094dc:	2b08      	cmp	r3, #8
 80094de:	f000 8383 	beq.w	8009be8 <HAL_UART_Init+0x1388>
 80094e2:	2b09      	cmp	r3, #9
 80094e4:	f000 837b 	beq.w	8009bde <HAL_UART_Init+0x137e>
 80094e8:	2b0a      	cmp	r3, #10
 80094ea:	f000 8344 	beq.w	8009b76 <HAL_UART_Init+0x1316>
 80094ee:	2b0b      	cmp	r3, #11
 80094f0:	d103      	bne.n	80094fa <HAL_UART_Init+0xc9a>
 80094f2:	ea4f 2b12 	mov.w	fp, r2, lsr #8
 80094f6:	f04f 0c00 	mov.w	ip, #0
 80094fa:	6863      	ldr	r3, [r4, #4]
 80094fc:	ea4f 270c 	mov.w	r7, ip, lsl #8
 8009500:	ea4f 260b 	mov.w	r6, fp, lsl #8
 8009504:	0859      	lsrs	r1, r3, #1
 8009506:	461a      	mov	r2, r3
 8009508:	ea47 671b 	orr.w	r7, r7, fp, lsr #24
 800950c:	2300      	movs	r3, #0
 800950e:	eb16 0b01 	adds.w	fp, r6, r1
 8009512:	f147 0c00 	adc.w	ip, r7, #0
 8009516:	4658      	mov	r0, fp
 8009518:	4661      	mov	r1, ip
 800951a:	f7f6 ff99 	bl	8000450 <__aeabi_uldivmod>
 800951e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8009522:	f7ff bb1e 	b.w	8008b62 <HAL_UART_Init+0x302>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009526:	4b14      	ldr	r3, [pc, #80]	; (8009578 <HAL_UART_Init+0xd18>)
 8009528:	e462      	b.n	8008df0 <HAL_UART_Init+0x590>
 800952a:	0852      	lsrs	r2, r2, #1
 800952c:	e5f6      	b.n	800911c <HAL_UART_Init+0x8bc>
 800952e:	4a18      	ldr	r2, [pc, #96]	; (8009590 <HAL_UART_Init+0xd30>)
 8009530:	fba2 2303 	umull	r2, r3, r2, r3
 8009534:	08db      	lsrs	r3, r3, #3
 8009536:	e45b      	b.n	8008df0 <HAL_UART_Init+0x590>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009538:	480f      	ldr	r0, [pc, #60]	; (8009578 <HAL_UART_Init+0xd18>)
 800953a:	f7ff babd 	b.w	8008ab8 <HAL_UART_Init+0x258>
 800953e:	0840      	lsrs	r0, r0, #1
 8009540:	e653      	b.n	80091ea <HAL_UART_Init+0x98a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009542:	4b14      	ldr	r3, [pc, #80]	; (8009594 <HAL_UART_Init+0xd34>)
 8009544:	e454      	b.n	8008df0 <HAL_UART_Init+0x590>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009546:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800954a:	e451      	b.n	8008df0 <HAL_UART_Init+0x590>
 800954c:	4b10      	ldr	r3, [pc, #64]	; (8009590 <HAL_UART_Init+0xd30>)
 800954e:	fba3 3000 	umull	r3, r0, r3, r0
 8009552:	08c0      	lsrs	r0, r0, #3
 8009554:	e50d      	b.n	8008f72 <HAL_UART_Init+0x712>
 8009556:	0892      	lsrs	r2, r2, #2
 8009558:	e5e0      	b.n	800911c <HAL_UART_Init+0x8bc>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800955a:	480e      	ldr	r0, [pc, #56]	; (8009594 <HAL_UART_Init+0xd34>)
 800955c:	f7ff baac 	b.w	8008ab8 <HAL_UART_Init+0x258>
 8009560:	58024400 	.word	0x58024400
 8009564:	0801aca4 	.word	0x0801aca4
 8009568:	0801aca4 	.word	0x0801aca4
 800956c:	0801ac78 	.word	0x0801ac78
 8009570:	0801aca4 	.word	0x0801aca4
 8009574:	003d0900 	.word	0x003d0900
 8009578:	03d09000 	.word	0x03d09000
 800957c:	0003d090 	.word	0x0003d090
 8009580:	aaaaaaab 	.word	0xaaaaaaab
 8009584:	007a1200 	.word	0x007a1200
 8009588:	07a12000 	.word	0x07a12000
 800958c:	0007a120 	.word	0x0007a120
 8009590:	cccccccd 	.word	0xcccccccd
 8009594:	001e8480 	.word	0x001e8480
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009598:	4bcf      	ldr	r3, [pc, #828]	; (80098d8 <HAL_UART_Init+0x1078>)
 800959a:	e550      	b.n	800903e <HAL_UART_Init+0x7de>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800959c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80095a0:	f7ff ba8a 	b.w	8008ab8 <HAL_UART_Init+0x258>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095a4:	4bcd      	ldr	r3, [pc, #820]	; (80098dc <HAL_UART_Init+0x107c>)
 80095a6:	e423      	b.n	8008df0 <HAL_UART_Init+0x590>
 80095a8:	0880      	lsrs	r0, r0, #2
 80095aa:	e61e      	b.n	80091ea <HAL_UART_Init+0x98a>
 80095ac:	08c0      	lsrs	r0, r0, #3
 80095ae:	e68c      	b.n	80092ca <HAL_UART_Init+0xa6a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80095b4:	e41c      	b.n	8008df0 <HAL_UART_Init+0x590>
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095b6:	a803      	add	r0, sp, #12
 80095b8:	f7fe f98c 	bl	80078d4 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095bc:	9a04      	ldr	r2, [sp, #16]
 80095be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095c0:	f04f 0c00 	mov.w	ip, #0
 80095c4:	4693      	mov	fp, r2
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d097      	beq.n	80094fa <HAL_UART_Init+0xc9a>
 80095ca:	e772      	b.n	80094b2 <HAL_UART_Init+0xc52>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095ce:	b303      	cbz	r3, 8009612 <HAL_UART_Init+0xdb2>
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	f000 8163 	beq.w	800989c <HAL_UART_Init+0x103c>
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	f000 81bf 	beq.w	800995a <HAL_UART_Init+0x10fa>
 80095dc:	2b03      	cmp	r3, #3
 80095de:	f000 8247 	beq.w	8009a70 <HAL_UART_Init+0x1210>
 80095e2:	2b04      	cmp	r3, #4
 80095e4:	f000 823f 	beq.w	8009a66 <HAL_UART_Init+0x1206>
 80095e8:	2b05      	cmp	r3, #5
 80095ea:	f000 82a9 	beq.w	8009b40 <HAL_UART_Init+0x12e0>
 80095ee:	2b06      	cmp	r3, #6
 80095f0:	f000 82a1 	beq.w	8009b36 <HAL_UART_Init+0x12d6>
 80095f4:	2b07      	cmp	r3, #7
 80095f6:	f000 82c8 	beq.w	8009b8a <HAL_UART_Init+0x132a>
 80095fa:	2b08      	cmp	r3, #8
 80095fc:	f000 82c0 	beq.w	8009b80 <HAL_UART_Init+0x1320>
 8009600:	2b09      	cmp	r3, #9
 8009602:	f000 82cc 	beq.w	8009b9e <HAL_UART_Init+0x133e>
 8009606:	2b0a      	cmp	r3, #10
 8009608:	f000 82c4 	beq.w	8009b94 <HAL_UART_Init+0x1334>
 800960c:	2b0b      	cmp	r3, #11
 800960e:	f000 82dc 	beq.w	8009bca <HAL_UART_Init+0x136a>
 8009612:	f8df b30c 	ldr.w	fp, [pc, #780]	; 8009920 <HAL_UART_Init+0x10c0>
 8009616:	f04f 0c00 	mov.w	ip, #0
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800961a:	086e      	lsrs	r6, r5, #1
 800961c:	462a      	mov	r2, r5
 800961e:	2300      	movs	r3, #0
 8009620:	eb1b 0006 	adds.w	r0, fp, r6
 8009624:	f14c 0100 	adc.w	r1, ip, #0
 8009628:	f7f6 ff12 	bl	8000450 <__aeabi_uldivmod>
 800962c:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8009630:	f7ff ba97 	b.w	8008b62 <HAL_UART_Init+0x302>
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009634:	f7fe f8a4 	bl	8007780 <HAL_RCCEx_GetD3PCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009638:	6a63      	ldr	r3, [r4, #36]	; 0x24
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800963a:	4602      	mov	r2, r0
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800963c:	4683      	mov	fp, r0
 800963e:	f04f 0c00 	mov.w	ip, #0
 8009642:	2b00      	cmp	r3, #0
 8009644:	f43f af59 	beq.w	80094fa <HAL_UART_Init+0xc9a>
 8009648:	e733      	b.n	80094b2 <HAL_UART_Init+0xc52>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800964a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800964c:	b303      	cbz	r3, 8009690 <HAL_UART_Init+0xe30>
 800964e:	2b01      	cmp	r3, #1
 8009650:	f000 8129 	beq.w	80098a6 <HAL_UART_Init+0x1046>
 8009654:	2b02      	cmp	r3, #2
 8009656:	f000 8185 	beq.w	8009964 <HAL_UART_Init+0x1104>
 800965a:	2b03      	cmp	r3, #3
 800965c:	f000 81d8 	beq.w	8009a10 <HAL_UART_Init+0x11b0>
 8009660:	2b04      	cmp	r3, #4
 8009662:	f000 81d0 	beq.w	8009a06 <HAL_UART_Init+0x11a6>
 8009666:	2b05      	cmp	r3, #5
 8009668:	f000 823d 	beq.w	8009ae6 <HAL_UART_Init+0x1286>
 800966c:	2b06      	cmp	r3, #6
 800966e:	f000 8235 	beq.w	8009adc <HAL_UART_Init+0x127c>
 8009672:	2b07      	cmp	r3, #7
 8009674:	f000 82ca 	beq.w	8009c0c <HAL_UART_Init+0x13ac>
 8009678:	2b08      	cmp	r3, #8
 800967a:	f000 82c2 	beq.w	8009c02 <HAL_UART_Init+0x13a2>
 800967e:	2b09      	cmp	r3, #9
 8009680:	f000 829e 	beq.w	8009bc0 <HAL_UART_Init+0x1360>
 8009684:	2b0a      	cmp	r3, #10
 8009686:	f000 8296 	beq.w	8009bb6 <HAL_UART_Init+0x1356>
 800968a:	2b0b      	cmp	r3, #11
 800968c:	f000 826a 	beq.w	8009b64 <HAL_UART_Init+0x1304>
 8009690:	f44f 0b00 	mov.w	fp, #8388608	; 0x800000
 8009694:	f04f 0c00 	mov.w	ip, #0
 8009698:	e7bf      	b.n	800961a <HAL_UART_Init+0xdba>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800969a:	4b91      	ldr	r3, [pc, #580]	; (80098e0 <HAL_UART_Init+0x1080>)
 800969c:	e4cf      	b.n	800903e <HAL_UART_Init+0x7de>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800969e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096a2:	e4cc      	b.n	800903e <HAL_UART_Init+0x7de>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80096a4:	488d      	ldr	r0, [pc, #564]	; (80098dc <HAL_UART_Init+0x107c>)
 80096a6:	f7ff ba07 	b.w	8008ab8 <HAL_UART_Init+0x258>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80096aa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80096ae:	f7ff ba03 	b.w	8008ab8 <HAL_UART_Init+0x258>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096b2:	4b8c      	ldr	r3, [pc, #560]	; (80098e4 <HAL_UART_Init+0x1084>)
 80096b4:	f7ff bb9c 	b.w	8008df0 <HAL_UART_Init+0x590>
 80096b8:	4b8b      	ldr	r3, [pc, #556]	; (80098e8 <HAL_UART_Init+0x1088>)
 80096ba:	fba3 2300 	umull	r2, r3, r3, r0
 80096be:	0898      	lsrs	r0, r3, #2
 80096c0:	e593      	b.n	80091ea <HAL_UART_Init+0x98a>
 80096c2:	4b89      	ldr	r3, [pc, #548]	; (80098e8 <HAL_UART_Init+0x1088>)
 80096c4:	fba3 2302 	umull	r2, r3, r3, r2
 80096c8:	089a      	lsrs	r2, r3, #2
 80096ca:	e527      	b.n	800911c <HAL_UART_Init+0x8bc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096cc:	f241 5355 	movw	r3, #5461	; 0x1555
 80096d0:	f7ff bb8e 	b.w	8008df0 <HAL_UART_Init+0x590>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096d4:	4b85      	ldr	r3, [pc, #532]	; (80098ec <HAL_UART_Init+0x108c>)
 80096d6:	f7ff bb8b 	b.w	8008df0 <HAL_UART_Init+0x590>
 80096da:	4b83      	ldr	r3, [pc, #524]	; (80098e8 <HAL_UART_Init+0x1088>)
 80096dc:	fba3 3000 	umull	r3, r0, r3, r0
 80096e0:	0880      	lsrs	r0, r0, #2
 80096e2:	f7ff b9e9 	b.w	8008ab8 <HAL_UART_Init+0x258>
 80096e6:	230a      	movs	r3, #10
 80096e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80096ec:	e5ed      	b.n	80092ca <HAL_UART_Init+0xa6a>
 80096ee:	08d2      	lsrs	r2, r2, #3
 80096f0:	e514      	b.n	800911c <HAL_UART_Init+0x8bc>
 80096f2:	0840      	lsrs	r0, r0, #1
 80096f4:	f7ff b9e0 	b.w	8008ab8 <HAL_UART_Init+0x258>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80096f8:	487a      	ldr	r0, [pc, #488]	; (80098e4 <HAL_UART_Init+0x1084>)
 80096fa:	f7ff b9dd 	b.w	8008ab8 <HAL_UART_Init+0x258>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009702:	e49c      	b.n	800903e <HAL_UART_Init+0x7de>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009704:	4b7a      	ldr	r3, [pc, #488]	; (80098f0 <HAL_UART_Init+0x1090>)
 8009706:	f7ff bb73 	b.w	8008df0 <HAL_UART_Init+0x590>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800970a:	4b7a      	ldr	r3, [pc, #488]	; (80098f4 <HAL_UART_Init+0x1094>)
 800970c:	e497      	b.n	800903e <HAL_UART_Init+0x7de>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800970e:	4877      	ldr	r0, [pc, #476]	; (80098ec <HAL_UART_Init+0x108c>)
 8009710:	f7ff b9d2 	b.w	8008ab8 <HAL_UART_Init+0x258>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009714:	4b78      	ldr	r3, [pc, #480]	; (80098f8 <HAL_UART_Init+0x1098>)
 8009716:	f7ff bb6b 	b.w	8008df0 <HAL_UART_Init+0x590>
 800971a:	220c      	movs	r2, #12
 800971c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009720:	f7ff bb66 	b.w	8008df0 <HAL_UART_Init+0x590>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009724:	f241 5055 	movw	r0, #5461	; 0x1555
 8009728:	f7ff b9c6 	b.w	8008ab8 <HAL_UART_Init+0x258>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800972c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009730:	f7ff bb5e 	b.w	8008df0 <HAL_UART_Init+0x590>
 8009734:	08c0      	lsrs	r0, r0, #3
 8009736:	e558      	b.n	80091ea <HAL_UART_Init+0x98a>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009738:	b303      	cbz	r3, 800977c <HAL_UART_Init+0xf1c>
 800973a:	2b01      	cmp	r3, #1
 800973c:	f000 8153 	beq.w	80099e6 <HAL_UART_Init+0x1186>
 8009740:	2b02      	cmp	r3, #2
 8009742:	f000 8155 	beq.w	80099f0 <HAL_UART_Init+0x1190>
 8009746:	2b03      	cmp	r3, #3
 8009748:	f000 81c3 	beq.w	8009ad2 <HAL_UART_Init+0x1272>
 800974c:	2b04      	cmp	r3, #4
 800974e:	f000 81bb 	beq.w	8009ac8 <HAL_UART_Init+0x1268>
 8009752:	2b05      	cmp	r3, #5
 8009754:	f000 81b3 	beq.w	8009abe <HAL_UART_Init+0x125e>
 8009758:	2b06      	cmp	r3, #6
 800975a:	f000 825c 	beq.w	8009c16 <HAL_UART_Init+0x13b6>
 800975e:	2b07      	cmp	r3, #7
 8009760:	f43f af57 	beq.w	8009612 <HAL_UART_Init+0xdb2>
 8009764:	2b08      	cmp	r3, #8
 8009766:	f000 8099 	beq.w	800989c <HAL_UART_Init+0x103c>
 800976a:	2b09      	cmp	r3, #9
 800976c:	f000 80f5 	beq.w	800995a <HAL_UART_Init+0x10fa>
 8009770:	2b0a      	cmp	r3, #10
 8009772:	f000 8178 	beq.w	8009a66 <HAL_UART_Init+0x1206>
 8009776:	2b0b      	cmp	r3, #11
 8009778:	f000 8207 	beq.w	8009b8a <HAL_UART_Init+0x132a>
 800977c:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 8009924 <HAL_UART_Init+0x10c4>
 8009780:	f04f 0c03 	mov.w	ip, #3
 8009784:	e749      	b.n	800961a <HAL_UART_Init+0xdba>
 8009786:	ea5f 0c5c 	movs.w	ip, ip, lsr #1
 800978a:	ea4f 0b3b 	mov.w	fp, fp, rrx
 800978e:	e6b4      	b.n	80094fa <HAL_UART_Init+0xc9a>
 8009790:	230c      	movs	r3, #12
 8009792:	fbb0 f0f3 	udiv	r0, r0, r3
 8009796:	e598      	b.n	80092ca <HAL_UART_Init+0xa6a>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009798:	4b58      	ldr	r3, [pc, #352]	; (80098fc <HAL_UART_Init+0x109c>)
 800979a:	e450      	b.n	800903e <HAL_UART_Init+0x7de>
 800979c:	230c      	movs	r3, #12
 800979e:	fbb0 f0f3 	udiv	r0, r0, r3
 80097a2:	f7ff bbe6 	b.w	8008f72 <HAL_UART_Init+0x712>
 80097a6:	230a      	movs	r3, #10
 80097a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80097ac:	e4b6      	b.n	800911c <HAL_UART_Init+0x8bc>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80097ae:	4850      	ldr	r0, [pc, #320]	; (80098f0 <HAL_UART_Init+0x1090>)
 80097b0:	f7ff b982 	b.w	8008ab8 <HAL_UART_Init+0x258>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097b4:	4b52      	ldr	r3, [pc, #328]	; (8009900 <HAL_UART_Init+0x10a0>)
 80097b6:	f7ff bb1b 	b.w	8008df0 <HAL_UART_Init+0x590>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097ba:	4b52      	ldr	r3, [pc, #328]	; (8009904 <HAL_UART_Init+0x10a4>)
 80097bc:	e43f      	b.n	800903e <HAL_UART_Init+0x7de>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80097be:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80097c2:	f7ff b979 	b.w	8008ab8 <HAL_UART_Init+0x258>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097c6:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80097ca:	e438      	b.n	800903e <HAL_UART_Init+0x7de>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80097cc:	484a      	ldr	r0, [pc, #296]	; (80098f8 <HAL_UART_Init+0x1098>)
 80097ce:	f7ff b973 	b.w	8008ab8 <HAL_UART_Init+0x258>
 80097d2:	ea4f 0b92 	mov.w	fp, r2, lsr #2
 80097d6:	f04f 0c00 	mov.w	ip, #0
 80097da:	e68e      	b.n	80094fa <HAL_UART_Init+0xc9a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097dc:	4b4a      	ldr	r3, [pc, #296]	; (8009908 <HAL_UART_Init+0x10a8>)
 80097de:	f7ff bb07 	b.w	8008df0 <HAL_UART_Init+0x590>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097e2:	f640 43cc 	movw	r3, #3276	; 0xccc
 80097e6:	f7ff bb03 	b.w	8008df0 <HAL_UART_Init+0x590>
 80097ea:	230a      	movs	r3, #10
 80097ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80097f0:	e4fb      	b.n	80091ea <HAL_UART_Init+0x98a>
 80097f2:	091b      	lsrs	r3, r3, #4
 80097f4:	f7ff bafc 	b.w	8008df0 <HAL_UART_Init+0x590>
 80097f8:	0900      	lsrs	r0, r0, #4
 80097fa:	e566      	b.n	80092ca <HAL_UART_Init+0xa6a>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80097fc:	4840      	ldr	r0, [pc, #256]	; (8009900 <HAL_UART_Init+0x10a0>)
 80097fe:	f7ff b95b 	b.w	8008ab8 <HAL_UART_Init+0x258>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009802:	4b38      	ldr	r3, [pc, #224]	; (80098e4 <HAL_UART_Init+0x1084>)
 8009804:	e41b      	b.n	800903e <HAL_UART_Init+0x7de>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009806:	4b35      	ldr	r3, [pc, #212]	; (80098dc <HAL_UART_Init+0x107c>)
 8009808:	e419      	b.n	800903e <HAL_UART_Init+0x7de>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800980a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800980e:	e416      	b.n	800903e <HAL_UART_Init+0x7de>
 8009810:	230c      	movs	r3, #12
 8009812:	fbb2 f2f3 	udiv	r2, r2, r3
 8009816:	e481      	b.n	800911c <HAL_UART_Init+0x8bc>
 8009818:	0900      	lsrs	r0, r0, #4
 800981a:	f7ff bbaa 	b.w	8008f72 <HAL_UART_Init+0x712>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800981e:	4b3b      	ldr	r3, [pc, #236]	; (800990c <HAL_UART_Init+0x10ac>)
 8009820:	f7ff bae6 	b.w	8008df0 <HAL_UART_Init+0x590>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009824:	4838      	ldr	r0, [pc, #224]	; (8009908 <HAL_UART_Init+0x10a8>)
 8009826:	f7ff b947 	b.w	8008ab8 <HAL_UART_Init+0x258>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800982a:	4b39      	ldr	r3, [pc, #228]	; (8009910 <HAL_UART_Init+0x10b0>)
 800982c:	f7ff bae0 	b.w	8008df0 <HAL_UART_Init+0x590>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009830:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8009834:	f7ff badc 	b.w	8008df0 <HAL_UART_Init+0x590>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009838:	f640 40cc 	movw	r0, #3276	; 0xccc
 800983c:	f7ff b93c 	b.w	8008ab8 <HAL_UART_Init+0x258>
 8009840:	095b      	lsrs	r3, r3, #5
 8009842:	f7ff bad5 	b.w	8008df0 <HAL_UART_Init+0x590>
 8009846:	0940      	lsrs	r0, r0, #5
 8009848:	e53f      	b.n	80092ca <HAL_UART_Init+0xa6a>
 800984a:	230c      	movs	r3, #12
 800984c:	fbb0 f0f3 	udiv	r0, r0, r3
 8009850:	e4cb      	b.n	80091ea <HAL_UART_Init+0x98a>
 8009852:	08c0      	lsrs	r0, r0, #3
 8009854:	f7ff b930 	b.w	8008ab8 <HAL_UART_Init+0x258>
 8009858:	2306      	movs	r3, #6
 800985a:	fbb2 f2f3 	udiv	r2, r2, r3
 800985e:	e45d      	b.n	800911c <HAL_UART_Init+0x8bc>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009860:	482a      	ldr	r0, [pc, #168]	; (800990c <HAL_UART_Init+0x10ac>)
 8009862:	f7ff b929 	b.w	8008ab8 <HAL_UART_Init+0x258>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009866:	4b2b      	ldr	r3, [pc, #172]	; (8009914 <HAL_UART_Init+0x10b4>)
 8009868:	f7ff bbe9 	b.w	800903e <HAL_UART_Init+0x7de>
 800986c:	4658      	mov	r0, fp
 800986e:	4661      	mov	r1, ip
 8009870:	2206      	movs	r2, #6
 8009872:	2300      	movs	r3, #0
 8009874:	f7f6 fdec 	bl	8000450 <__aeabi_uldivmod>
 8009878:	4683      	mov	fp, r0
 800987a:	468c      	mov	ip, r1
 800987c:	e63d      	b.n	80094fa <HAL_UART_Init+0xc9a>
 800987e:	ea4f 0bd2 	mov.w	fp, r2, lsr #3
 8009882:	f04f 0c00 	mov.w	ip, #0
 8009886:	e638      	b.n	80094fa <HAL_UART_Init+0xc9a>
 8009888:	0940      	lsrs	r0, r0, #5
 800988a:	f7ff bb72 	b.w	8008f72 <HAL_UART_Init+0x712>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800988e:	f640 20aa 	movw	r0, #2730	; 0xaaa
 8009892:	f7ff b911 	b.w	8008ab8 <HAL_UART_Init+0x258>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009896:	4b20      	ldr	r3, [pc, #128]	; (8009918 <HAL_UART_Init+0x10b8>)
 8009898:	f7ff bbd1 	b.w	800903e <HAL_UART_Init+0x7de>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800989c:	f8df b088 	ldr.w	fp, [pc, #136]	; 8009928 <HAL_UART_Init+0x10c8>
 80098a0:	f04f 0c00 	mov.w	ip, #0
 80098a4:	e6b9      	b.n	800961a <HAL_UART_Init+0xdba>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098a6:	f44f 0b80 	mov.w	fp, #4194304	; 0x400000
 80098aa:	f04f 0c00 	mov.w	ip, #0
 80098ae:	e6b4      	b.n	800961a <HAL_UART_Init+0xdba>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098b0:	4b1a      	ldr	r3, [pc, #104]	; (800991c <HAL_UART_Init+0x10bc>)
 80098b2:	f7ff ba9d 	b.w	8008df0 <HAL_UART_Init+0x590>
 80098b6:	0912      	lsrs	r2, r2, #4
 80098b8:	e430      	b.n	800911c <HAL_UART_Init+0x8bc>
 80098ba:	220a      	movs	r2, #10
 80098bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80098c0:	f7ff ba96 	b.w	8008df0 <HAL_UART_Init+0x590>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098c4:	f641 1398 	movw	r3, #6552	; 0x1998
 80098c8:	f7ff bbb9 	b.w	800903e <HAL_UART_Init+0x7de>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80098cc:	4810      	ldr	r0, [pc, #64]	; (8009910 <HAL_UART_Init+0x10b0>)
 80098ce:	f7ff b8f3 	b.w	8008ab8 <HAL_UART_Init+0x258>
 80098d2:	099b      	lsrs	r3, r3, #6
 80098d4:	f7ff ba8c 	b.w	8008df0 <HAL_UART_Init+0x590>
 80098d8:	07a12000 	.word	0x07a12000
 80098dc:	000f4240 	.word	0x000f4240
 80098e0:	003d0900 	.word	0x003d0900
 80098e4:	01e84800 	.word	0x01e84800
 80098e8:	aaaaaaab 	.word	0xaaaaaaab
 80098ec:	000a2c2a 	.word	0x000a2c2a
 80098f0:	00f42400 	.word	0x00f42400
 80098f4:	001e8480 	.word	0x001e8480
 80098f8:	0007a120 	.word	0x0007a120
 80098fc:	03d09000 	.word	0x03d09000
 8009900:	00a2c2aa 	.word	0x00a2c2aa
 8009904:	00145854 	.word	0x00145854
 8009908:	00061a80 	.word	0x00061a80
 800990c:	007a1200 	.word	0x007a1200
 8009910:	00051615 	.word	0x00051615
 8009914:	01458554 	.word	0x01458554
 8009918:	000c3500 	.word	0x000c3500
 800991c:	0061a800 	.word	0x0061a800
 8009920:	3d090000 	.word	0x3d090000
 8009924:	d0900000 	.word	0xd0900000
 8009928:	1e848000 	.word	0x1e848000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800992c:	4bcc      	ldr	r3, [pc, #816]	; (8009c60 <HAL_UART_Init+0x1400>)
 800992e:	f7ff ba5f 	b.w	8008df0 <HAL_UART_Init+0x590>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009932:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009936:	f7ff ba5b 	b.w	8008df0 <HAL_UART_Init+0x590>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800993a:	4bca      	ldr	r3, [pc, #808]	; (8009c64 <HAL_UART_Init+0x1404>)
 800993c:	f7ff bb7f 	b.w	800903e <HAL_UART_Init+0x7de>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009940:	48c9      	ldr	r0, [pc, #804]	; (8009c68 <HAL_UART_Init+0x1408>)
 8009942:	f7ff b8b9 	b.w	8008ab8 <HAL_UART_Init+0x258>
 8009946:	0900      	lsrs	r0, r0, #4
 8009948:	e44f      	b.n	80091ea <HAL_UART_Init+0x98a>
 800994a:	230a      	movs	r3, #10
 800994c:	fbb0 f0f3 	udiv	r0, r0, r3
 8009950:	f7ff b8b2 	b.w	8008ab8 <HAL_UART_Init+0x258>
 8009954:	0980      	lsrs	r0, r0, #6
 8009956:	f7ff bb0c 	b.w	8008f72 <HAL_UART_Init+0x712>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800995a:	f8df b328 	ldr.w	fp, [pc, #808]	; 8009c84 <HAL_UART_Init+0x1424>
 800995e:	f04f 0c00 	mov.w	ip, #0
 8009962:	e65a      	b.n	800961a <HAL_UART_Init+0xdba>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009964:	f44f 1b00 	mov.w	fp, #2097152	; 0x200000
 8009968:	f04f 0c00 	mov.w	ip, #0
 800996c:	e655      	b.n	800961a <HAL_UART_Init+0xdba>
 800996e:	09db      	lsrs	r3, r3, #7
 8009970:	f7ff ba3e 	b.w	8008df0 <HAL_UART_Init+0x590>
 8009974:	4658      	mov	r0, fp
 8009976:	4661      	mov	r1, ip
 8009978:	220a      	movs	r2, #10
 800997a:	2300      	movs	r3, #0
 800997c:	f7f6 fd68 	bl	8000450 <__aeabi_uldivmod>
 8009980:	4683      	mov	fp, r0
 8009982:	468c      	mov	ip, r1
 8009984:	e5b9      	b.n	80094fa <HAL_UART_Init+0xc9a>
 8009986:	0952      	lsrs	r2, r2, #5
 8009988:	f7ff bbc8 	b.w	800911c <HAL_UART_Init+0x8bc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800998c:	4bb7      	ldr	r3, [pc, #732]	; (8009c6c <HAL_UART_Init+0x140c>)
 800998e:	f7ff ba2f 	b.w	8008df0 <HAL_UART_Init+0x590>
 8009992:	4658      	mov	r0, fp
 8009994:	4661      	mov	r1, ip
 8009996:	220c      	movs	r2, #12
 8009998:	2300      	movs	r3, #0
 800999a:	f7f6 fd59 	bl	8000450 <__aeabi_uldivmod>
 800999e:	4683      	mov	fp, r0
 80099a0:	468c      	mov	ip, r1
 80099a2:	e5aa      	b.n	80094fa <HAL_UART_Init+0xc9a>
 80099a4:	0849      	lsrs	r1, r1, #1
 80099a6:	ea4f 0030 	mov.w	r0, r0, rrx
 80099aa:	f7ff b8ca 	b.w	8008b42 <HAL_UART_Init+0x2e2>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80099ae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80099b2:	f7ff b881 	b.w	8008ab8 <HAL_UART_Init+0x258>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099b6:	4bae      	ldr	r3, [pc, #696]	; (8009c70 <HAL_UART_Init+0x1410>)
 80099b8:	f7ff bb41 	b.w	800903e <HAL_UART_Init+0x7de>
 80099bc:	09c0      	lsrs	r0, r0, #7
 80099be:	e484      	b.n	80092ca <HAL_UART_Init+0xa6a>
 80099c0:	0980      	lsrs	r0, r0, #6
 80099c2:	e482      	b.n	80092ca <HAL_UART_Init+0xa6a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099c8:	f7ff ba12 	b.w	8008df0 <HAL_UART_Init+0x590>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099cc:	f241 5354 	movw	r3, #5460	; 0x1554
 80099d0:	f7ff bb35 	b.w	800903e <HAL_UART_Init+0x7de>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099d4:	4ba7      	ldr	r3, [pc, #668]	; (8009c74 <HAL_UART_Init+0x1414>)
 80099d6:	f7ff bb32 	b.w	800903e <HAL_UART_Init+0x7de>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80099da:	48a1      	ldr	r0, [pc, #644]	; (8009c60 <HAL_UART_Init+0x1400>)
 80099dc:	f7ff b86c 	b.w	8008ab8 <HAL_UART_Init+0x258>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099e0:	4ba5      	ldr	r3, [pc, #660]	; (8009c78 <HAL_UART_Init+0x1418>)
 80099e2:	f7ff ba05 	b.w	8008df0 <HAL_UART_Init+0x590>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099e6:	f8df b2a0 	ldr.w	fp, [pc, #672]	; 8009c88 <HAL_UART_Init+0x1428>
 80099ea:	f04f 0c01 	mov.w	ip, #1
 80099ee:	e614      	b.n	800961a <HAL_UART_Init+0xdba>
 80099f0:	f8df b298 	ldr.w	fp, [pc, #664]	; 8009c8c <HAL_UART_Init+0x142c>
 80099f4:	f04f 0c00 	mov.w	ip, #0
 80099f8:	e60f      	b.n	800961a <HAL_UART_Init+0xdba>
 80099fa:	09c0      	lsrs	r0, r0, #7
 80099fc:	f7ff bbf5 	b.w	80091ea <HAL_UART_Init+0x98a>
 8009a00:	0980      	lsrs	r0, r0, #6
 8009a02:	f7ff bbf2 	b.w	80091ea <HAL_UART_Init+0x98a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a06:	f44f 1b80 	mov.w	fp, #1048576	; 0x100000
 8009a0a:	f04f 0c00 	mov.w	ip, #0
 8009a0e:	e604      	b.n	800961a <HAL_UART_Init+0xdba>
 8009a10:	f8df b27c 	ldr.w	fp, [pc, #636]	; 8009c90 <HAL_UART_Init+0x1430>
 8009a14:	f04f 0c00 	mov.w	ip, #0
 8009a18:	e5ff      	b.n	800961a <HAL_UART_Init+0xdba>
 8009a1a:	09d2      	lsrs	r2, r2, #7
 8009a1c:	f7ff bb7e 	b.w	800911c <HAL_UART_Init+0x8bc>
 8009a20:	0992      	lsrs	r2, r2, #6
 8009a22:	f7ff bb7b 	b.w	800911c <HAL_UART_Init+0x8bc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a2a:	f7ff bb08 	b.w	800903e <HAL_UART_Init+0x7de>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009a2e:	4892      	ldr	r0, [pc, #584]	; (8009c78 <HAL_UART_Init+0x1418>)
 8009a30:	f7ff b842 	b.w	8008ab8 <HAL_UART_Init+0x258>
 8009a34:	0940      	lsrs	r0, r0, #5
 8009a36:	f7ff bbd8 	b.w	80091ea <HAL_UART_Init+0x98a>
 8009a3a:	230c      	movs	r3, #12
 8009a3c:	fbb0 f0f3 	udiv	r0, r0, r3
 8009a40:	f7ff b83a 	b.w	8008ab8 <HAL_UART_Init+0x258>
 8009a44:	0900      	lsrs	r0, r0, #4
 8009a46:	f7ff b837 	b.w	8008ab8 <HAL_UART_Init+0x258>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a4a:	4b8c      	ldr	r3, [pc, #560]	; (8009c7c <HAL_UART_Init+0x141c>)
 8009a4c:	f7ff baf7 	b.w	800903e <HAL_UART_Init+0x7de>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a54:	f7ff b9cc 	b.w	8008df0 <HAL_UART_Init+0x590>
 8009a58:	0890      	lsrs	r0, r2, #2
 8009a5a:	2100      	movs	r1, #0
 8009a5c:	f7ff b871 	b.w	8008b42 <HAL_UART_Init+0x2e2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a60:	4b87      	ldr	r3, [pc, #540]	; (8009c80 <HAL_UART_Init+0x1420>)
 8009a62:	f7ff baec 	b.w	800903e <HAL_UART_Init+0x7de>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a66:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8009c94 <HAL_UART_Init+0x1434>
 8009a6a:	f04f 0c00 	mov.w	ip, #0
 8009a6e:	e5d4      	b.n	800961a <HAL_UART_Init+0xdba>
 8009a70:	f20f 1ccc 	addw	ip, pc, #460	; 0x1cc
 8009a74:	e9dc bc00 	ldrd	fp, ip, [ip]
 8009a78:	e5cf      	b.n	800961a <HAL_UART_Init+0xdba>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a7a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009a7e:	f7ff b9b7 	b.w	8008df0 <HAL_UART_Init+0x590>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009a82:	487a      	ldr	r0, [pc, #488]	; (8009c6c <HAL_UART_Init+0x140c>)
 8009a84:	f7ff b818 	b.w	8008ab8 <HAL_UART_Init+0x258>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009a88:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009a8c:	f7ff b814 	b.w	8008ab8 <HAL_UART_Init+0x258>
 8009a90:	09c0      	lsrs	r0, r0, #7
 8009a92:	f7ff ba6e 	b.w	8008f72 <HAL_UART_Init+0x712>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009a96:	f24f 4024 	movw	r0, #62500	; 0xf424
 8009a9a:	f7ff b80d 	b.w	8008ab8 <HAL_UART_Init+0x258>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009a9e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009aa2:	f7ff b809 	b.w	8008ab8 <HAL_UART_Init+0x258>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009aaa:	f7ff b9a1 	b.w	8008df0 <HAL_UART_Init+0x590>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009aae:	f647 2312 	movw	r3, #31250	; 0x7a12
 8009ab2:	f7ff b99d 	b.w	8008df0 <HAL_UART_Init+0x590>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009ab6:	f647 2012 	movw	r0, #31250	; 0x7a12
 8009aba:	f7fe bffd 	b.w	8008ab8 <HAL_UART_Init+0x258>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009abe:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 8009c98 <HAL_UART_Init+0x1438>
 8009ac2:	f04f 0c00 	mov.w	ip, #0
 8009ac6:	e5a8      	b.n	800961a <HAL_UART_Init+0xdba>
 8009ac8:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 8009c9c <HAL_UART_Init+0x143c>
 8009acc:	f04f 0c00 	mov.w	ip, #0
 8009ad0:	e5a3      	b.n	800961a <HAL_UART_Init+0xdba>
 8009ad2:	f20f 1c74 	addw	ip, pc, #372	; 0x174
 8009ad6:	e9dc bc00 	ldrd	fp, ip, [ip]
 8009ada:	e59e      	b.n	800961a <HAL_UART_Init+0xdba>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009adc:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 8009ca0 <HAL_UART_Init+0x1440>
 8009ae0:	f04f 0c00 	mov.w	ip, #0
 8009ae4:	e599      	b.n	800961a <HAL_UART_Init+0xdba>
 8009ae6:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8009ca4 <HAL_UART_Init+0x1444>
 8009aea:	f04f 0c00 	mov.w	ip, #0
 8009aee:	e594      	b.n	800961a <HAL_UART_Init+0xdba>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009af4:	f7ff baa3 	b.w	800903e <HAL_UART_Init+0x7de>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009af8:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009afc:	f7ff ba9f 	b.w	800903e <HAL_UART_Init+0x7de>
 8009b00:	4b5a      	ldr	r3, [pc, #360]	; (8009c6c <HAL_UART_Init+0x140c>)
 8009b02:	f7ff ba9c 	b.w	800903e <HAL_UART_Init+0x7de>
 8009b06:	4b56      	ldr	r3, [pc, #344]	; (8009c60 <HAL_UART_Init+0x1400>)
 8009b08:	f7ff ba99 	b.w	800903e <HAL_UART_Init+0x7de>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b10:	f7ff ba95 	b.w	800903e <HAL_UART_Init+0x7de>
 8009b14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b18:	f7ff ba91 	b.w	800903e <HAL_UART_Init+0x7de>
 8009b1c:	0980      	lsrs	r0, r0, #6
 8009b1e:	f7fe bfcb 	b.w	8008ab8 <HAL_UART_Init+0x258>
 8009b22:	220a      	movs	r2, #10
 8009b24:	2300      	movs	r3, #0
 8009b26:	f7f6 fc93 	bl	8000450 <__aeabi_uldivmod>
 8009b2a:	f7ff b80a 	b.w	8008b42 <HAL_UART_Init+0x2e2>
 8009b2e:	08d0      	lsrs	r0, r2, #3
 8009b30:	2100      	movs	r1, #0
 8009b32:	f7ff b806 	b.w	8008b42 <HAL_UART_Init+0x2e2>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b36:	f20f 1c18 	addw	ip, pc, #280	; 0x118
 8009b3a:	e9dc bc00 	ldrd	fp, ip, [ip]
 8009b3e:	e56c      	b.n	800961a <HAL_UART_Init+0xdba>
 8009b40:	f8df b164 	ldr.w	fp, [pc, #356]	; 8009ca8 <HAL_UART_Init+0x1448>
 8009b44:	f04f 0c00 	mov.w	ip, #0
 8009b48:	e567      	b.n	800961a <HAL_UART_Init+0xdba>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8009b4a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009b4e:	f7fe bfb3 	b.w	8008ab8 <HAL_UART_Init+0x258>
 8009b52:	0940      	lsrs	r0, r0, #5
 8009b54:	f7fe bfb0 	b.w	8008ab8 <HAL_UART_Init+0x258>
 8009b58:	2206      	movs	r2, #6
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	f7f6 fc78 	bl	8000450 <__aeabi_uldivmod>
 8009b60:	f7fe bfef 	b.w	8008b42 <HAL_UART_Init+0x2e2>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b64:	f44f 4b00 	mov.w	fp, #32768	; 0x8000
 8009b68:	f04f 0c00 	mov.w	ip, #0
 8009b6c:	e555      	b.n	800961a <HAL_UART_Init+0xdba>
 8009b6e:	09d0      	lsrs	r0, r2, #7
 8009b70:	2100      	movs	r1, #0
 8009b72:	f7fe bfe6 	b.w	8008b42 <HAL_UART_Init+0x2e2>
 8009b76:	ea4f 1bd2 	mov.w	fp, r2, lsr #7
 8009b7a:	f04f 0c00 	mov.w	ip, #0
 8009b7e:	e4bc      	b.n	80094fa <HAL_UART_Init+0xc9a>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b80:	f8df b128 	ldr.w	fp, [pc, #296]	; 8009cac <HAL_UART_Init+0x144c>
 8009b84:	f04f 0c00 	mov.w	ip, #0
 8009b88:	e547      	b.n	800961a <HAL_UART_Init+0xdba>
 8009b8a:	f8df b124 	ldr.w	fp, [pc, #292]	; 8009cb0 <HAL_UART_Init+0x1450>
 8009b8e:	f04f 0c00 	mov.w	ip, #0
 8009b92:	e542      	b.n	800961a <HAL_UART_Init+0xdba>
 8009b94:	f8df b11c 	ldr.w	fp, [pc, #284]	; 8009cb4 <HAL_UART_Init+0x1454>
 8009b98:	f04f 0c00 	mov.w	ip, #0
 8009b9c:	e53d      	b.n	800961a <HAL_UART_Init+0xdba>
 8009b9e:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8009c64 <HAL_UART_Init+0x1404>
 8009ba2:	f04f 0c00 	mov.w	ip, #0
 8009ba6:	e538      	b.n	800961a <HAL_UART_Init+0xdba>
 8009ba8:	0a00      	lsrs	r0, r0, #8
 8009baa:	f7fe bf85 	b.w	8008ab8 <HAL_UART_Init+0x258>
        ret = HAL_ERROR;
 8009bae:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	f7ff b924 	b.w	8008dfe <HAL_UART_Init+0x59e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bb6:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
 8009bba:	f04f 0c00 	mov.w	ip, #0
 8009bbe:	e52c      	b.n	800961a <HAL_UART_Init+0xdba>
 8009bc0:	f44f 3b00 	mov.w	fp, #131072	; 0x20000
 8009bc4:	f04f 0c00 	mov.w	ip, #0
 8009bc8:	e527      	b.n	800961a <HAL_UART_Init+0xdba>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bca:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 8009cb8 <HAL_UART_Init+0x1458>
 8009bce:	f04f 0c00 	mov.w	ip, #0
 8009bd2:	e522      	b.n	800961a <HAL_UART_Init+0xdba>
 8009bd4:	ea4f 1b12 	mov.w	fp, r2, lsr #4
 8009bd8:	f04f 0c00 	mov.w	ip, #0
 8009bdc:	e48d      	b.n	80094fa <HAL_UART_Init+0xc9a>
 8009bde:	ea4f 1b92 	mov.w	fp, r2, lsr #6
 8009be2:	f04f 0c00 	mov.w	ip, #0
 8009be6:	e488      	b.n	80094fa <HAL_UART_Init+0xc9a>
 8009be8:	ea4f 1b52 	mov.w	fp, r2, lsr #5
 8009bec:	f04f 0c00 	mov.w	ip, #0
 8009bf0:	e483      	b.n	80094fa <HAL_UART_Init+0xc9a>
 8009bf2:	0990      	lsrs	r0, r2, #6
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	f7fe bfa4 	b.w	8008b42 <HAL_UART_Init+0x2e2>
 8009bfa:	0950      	lsrs	r0, r2, #5
 8009bfc:	2100      	movs	r1, #0
 8009bfe:	f7fe bfa0 	b.w	8008b42 <HAL_UART_Init+0x2e2>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c02:	f44f 2b80 	mov.w	fp, #262144	; 0x40000
 8009c06:	f04f 0c00 	mov.w	ip, #0
 8009c0a:	e506      	b.n	800961a <HAL_UART_Init+0xdba>
 8009c0c:	f44f 2b00 	mov.w	fp, #524288	; 0x80000
 8009c10:	f04f 0c00 	mov.w	ip, #0
 8009c14:	e501      	b.n	800961a <HAL_UART_Init+0xdba>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c16:	f20f 0c40 	addw	ip, pc, #64	; 0x40
 8009c1a:	e9dc bc00 	ldrd	fp, ip, [ip]
 8009c1e:	e4fc      	b.n	800961a <HAL_UART_Init+0xdba>
 8009c20:	09c0      	lsrs	r0, r0, #7
 8009c22:	f7fe bf49 	b.w	8008ab8 <HAL_UART_Init+0x258>
 8009c26:	0910      	lsrs	r0, r2, #4
 8009c28:	2100      	movs	r1, #0
 8009c2a:	f7fe bf8a 	b.w	8008b42 <HAL_UART_Init+0x2e2>
 8009c2e:	220c      	movs	r2, #12
 8009c30:	2300      	movs	r3, #0
 8009c32:	f7f6 fc0d 	bl	8000450 <__aeabi_uldivmod>
 8009c36:	f7fe bf84 	b.w	8008b42 <HAL_UART_Init+0x2e2>
 8009c3a:	bf00      	nop
 8009c3c:	f3af 8000 	nop.w
 8009c40:	0a2c2a00 	.word	0x0a2c2a00
 8009c44:	00000000 	.word	0x00000000
 8009c48:	a2c2aa00 	.word	0xa2c2aa00
 8009c4c:	00000000 	.word	0x00000000
 8009c50:	05161500 	.word	0x05161500
 8009c54:	00000000 	.word	0x00000000
 8009c58:	51615500 	.word	0x51615500
 8009c5c:	00000000 	.word	0x00000000
 8009c60:	0003d090 	.word	0x0003d090
 8009c64:	00f42400 	.word	0x00f42400
 8009c68:	0061a800 	.word	0x0061a800
 8009c6c:	0001e848 	.word	0x0001e848
 8009c70:	000a2c2a 	.word	0x000a2c2a
 8009c74:	00c35000 	.word	0x00c35000
 8009c78:	00516155 	.word	0x00516155
 8009c7c:	0007a120 	.word	0x0007a120
 8009c80:	00a2c2aa 	.word	0x00a2c2aa
 8009c84:	0f424000 	.word	0x0f424000
 8009c88:	e8480000 	.word	0xe8480000
 8009c8c:	f4240000 	.word	0xf4240000
 8009c90:	00155500 	.word	0x00155500
 8009c94:	07a12000 	.word	0x07a12000
 8009c98:	61a80000 	.word	0x61a80000
 8009c9c:	7a120000 	.word	0x7a120000
 8009ca0:	000aaa00 	.word	0x000aaa00
 8009ca4:	000ccc00 	.word	0x000ccc00
 8009ca8:	061a8000 	.word	0x061a8000
 8009cac:	01e84800 	.word	0x01e84800
 8009cb0:	03d09000 	.word	0x03d09000
 8009cb4:	007a1200 	.word	0x007a1200
 8009cb8:	003d0900 	.word	0x003d0900

08009cbc <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop

08009cc0 <HAL_UARTEx_RxFifoFullCallback>:
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop

08009cc4 <HAL_UARTEx_TxFifoEmptyCallback>:
 8009cc4:	4770      	bx	lr
 8009cc6:	bf00      	nop

08009cc8 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cc8:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8009ccc:	2a01      	cmp	r2, #1
 8009cce:	d017      	beq.n	8009d00 <HAL_UARTEx_DisableFifoMode+0x38>
 8009cd0:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 8009cd2:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009cd4:	2100      	movs	r1, #0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cd6:	681a      	ldr	r2, [r3, #0]
{
 8009cd8:	b470      	push	{r4, r5, r6}
  huart->gState = HAL_UART_STATE_BUSY;
 8009cda:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8009cde:	2620      	movs	r6, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ce0:	6814      	ldr	r4, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8009ce2:	4608      	mov	r0, r1
  __HAL_UART_DISABLE(huart);
 8009ce4:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ce6:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8009cea:	f025 0501 	bic.w	r5, r5, #1
 8009cee:	6015      	str	r5, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009cf0:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cf2:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009cf4:	f8c3 6080 	str.w	r6, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8009cf8:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8009cfc:	bc70      	pop	{r4, r5, r6}
 8009cfe:	4770      	bx	lr
  __HAL_LOCK(huart);
 8009d00:	2002      	movs	r0, #2
}
 8009d02:	4770      	bx	lr

08009d04 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d04:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8009d08:	2a01      	cmp	r2, #1
 8009d0a:	d046      	beq.n	8009d9a <HAL_UARTEx_SetTxFifoThreshold+0x96>
 8009d0c:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 8009d0e:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d10:	681a      	ldr	r2, [r3, #0]
{
 8009d12:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8009d14:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
{
 8009d18:	b084      	sub	sp, #16
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d1a:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d1c:	6810      	ldr	r0, [r2, #0]
{
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009d1e:	4d20      	ldr	r5, [pc, #128]	; (8009da0 <HAL_UARTEx_SetTxFifoThreshold+0x9c>)
  __HAL_UART_DISABLE(huart);
 8009d20:	f020 0001 	bic.w	r0, r0, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009d24:	4e1f      	ldr	r6, [pc, #124]	; (8009da4 <HAL_UARTEx_SetTxFifoThreshold+0xa0>)
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009d26:	9500      	str	r5, [sp, #0]
 8009d28:	f240 1507 	movw	r5, #263	; 0x107
  __HAL_UART_DISABLE(huart);
 8009d2c:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d2e:	6890      	ldr	r0, [r2, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009d30:	9501      	str	r5, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009d32:	f105 7580 	add.w	r5, r5, #16777216	; 0x1000000
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d36:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009d3a:	9602      	str	r6, [sp, #8]
 8009d3c:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d40:	4301      	orrs	r1, r0

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d42:	6e58      	ldr	r0, [r3, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009d44:	9503      	str	r5, [sp, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d46:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d48:	b320      	cbz	r0, 8009d94 <HAL_UARTEx_SetTxFifoThreshold+0x90>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d4a:	6895      	ldr	r5, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009d4c:	a904      	add	r1, sp, #16
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d4e:	6896      	ldr	r6, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009d50:	f3c5 6542 	ubfx	r5, r5, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009d54:	eb01 7656 	add.w	r6, r1, r6, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009d58:	440d      	add	r5, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009d5a:	f816 0c10 	ldrb.w	r0, [r6, #-16]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009d5e:	f815 1c10 	ldrb.w	r1, [r5, #-16]
 8009d62:	f815 7c08 	ldrb.w	r7, [r5, #-8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009d66:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009d68:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009d6a:	f816 5c08 	ldrb.w	r5, [r6, #-8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009d6e:	fb91 f1f7 	sdiv	r1, r1, r7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009d72:	fb90 f0f5 	sdiv	r0, r0, r5
 8009d76:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8009d80:	2520      	movs	r5, #32
  return HAL_OK;
 8009d82:	4608      	mov	r0, r1
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d84:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009d86:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8009d8a:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8009d8e:	b004      	add	sp, #16
 8009d90:	bcf0      	pop	{r4, r5, r6, r7}
 8009d92:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8009d94:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8009d96:	4608      	mov	r0, r1
 8009d98:	e7ed      	b.n	8009d76 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  __HAL_LOCK(huart);
 8009d9a:	2002      	movs	r0, #2
}
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop
 8009da0:	03010101 	.word	0x03010101
 8009da4:	04020408 	.word	0x04020408

08009da8 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8009da8:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
 8009dac:	2a01      	cmp	r2, #1
 8009dae:	d046      	beq.n	8009e3e <HAL_UARTEx_SetRxFifoThreshold+0x96>
 8009db0:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8009db2:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009db4:	681a      	ldr	r2, [r3, #0]
{
 8009db6:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8009db8:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
{
 8009dbc:	b084      	sub	sp, #16
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dbe:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8009dc0:	6810      	ldr	r0, [r2, #0]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009dc2:	4d20      	ldr	r5, [pc, #128]	; (8009e44 <HAL_UARTEx_SetRxFifoThreshold+0x9c>)
  __HAL_UART_DISABLE(huart);
 8009dc4:	f020 0001 	bic.w	r0, r0, #1
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009dc8:	4e1f      	ldr	r6, [pc, #124]	; (8009e48 <HAL_UARTEx_SetRxFifoThreshold+0xa0>)
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009dca:	9500      	str	r5, [sp, #0]
 8009dcc:	f240 1507 	movw	r5, #263	; 0x107
  __HAL_UART_DISABLE(huart);
 8009dd0:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009dd2:	6890      	ldr	r0, [r2, #8]
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009dd4:	9501      	str	r5, [sp, #4]
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009dd6:	f105 7580 	add.w	r5, r5, #16777216	; 0x1000000
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009dda:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009dde:	9602      	str	r6, [sp, #8]
 8009de0:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009de4:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009de6:	6e58      	ldr	r0, [r3, #100]	; 0x64
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009de8:	9503      	str	r5, [sp, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009dea:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009dec:	b320      	cbz	r0, 8009e38 <HAL_UARTEx_SetRxFifoThreshold+0x90>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009dee:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009df0:	a904      	add	r1, sp, #16
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009df2:	6896      	ldr	r6, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009df4:	f3c5 6542 	ubfx	r5, r5, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009df8:	eb01 7656 	add.w	r6, r1, r6, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009dfc:	440d      	add	r5, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009dfe:	f816 0c10 	ldrb.w	r0, [r6, #-16]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009e02:	f815 1c10 	ldrb.w	r1, [r5, #-16]
 8009e06:	f815 7c08 	ldrb.w	r7, [r5, #-8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009e0a:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009e0c:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009e0e:	f816 5c08 	ldrb.w	r5, [r6, #-8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009e12:	fb91 f1f7 	sdiv	r1, r1, r7
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009e16:	fb90 f0f5 	sdiv	r0, r0, r5
 8009e1a:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8009e1e:	2100      	movs	r1, #0
 8009e20:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8009e24:	2520      	movs	r5, #32
  return HAL_OK;
 8009e26:	4608      	mov	r0, r1
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e28:	6014      	str	r4, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009e2a:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8009e2e:	f883 107c 	strb.w	r1, [r3, #124]	; 0x7c
}
 8009e32:	b004      	add	sp, #16
 8009e34:	bcf0      	pop	{r4, r5, r6, r7}
 8009e36:	4770      	bx	lr
    huart->NbRxDataToProcess = 1U;
 8009e38:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8009e3a:	4608      	mov	r0, r1
 8009e3c:	e7ed      	b.n	8009e1a <HAL_UARTEx_SetRxFifoThreshold+0x72>
  __HAL_LOCK(huart);
 8009e3e:	2002      	movs	r0, #2
}
 8009e40:	4770      	bx	lr
 8009e42:	bf00      	nop
 8009e44:	03010101 	.word	0x03010101
 8009e48:	04020408 	.word	0x04020408

08009e4c <arm_cfft_radix8by2_f32>:
 8009e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e50:	4607      	mov	r7, r0
 8009e52:	4608      	mov	r0, r1
 8009e54:	ed2d 8b06 	vpush	{d8-d10}
 8009e58:	f8b7 e000 	ldrh.w	lr, [r7]
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8009e62:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8009e66:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8009e6a:	f000 80b0 	beq.w	8009fce <arm_cfft_radix8by2_f32+0x182>
 8009e6e:	008b      	lsls	r3, r1, #2
 8009e70:	3210      	adds	r2, #16
 8009e72:	f100 0610 	add.w	r6, r0, #16
 8009e76:	f108 0510 	add.w	r5, r8, #16
 8009e7a:	3310      	adds	r3, #16
 8009e7c:	18c4      	adds	r4, r0, r3
 8009e7e:	4443      	add	r3, r8
 8009e80:	ed55 6a04 	vldr	s13, [r5, #-16]
 8009e84:	f1be 0e01 	subs.w	lr, lr, #1
 8009e88:	ed56 4a04 	vldr	s9, [r6, #-16]
 8009e8c:	f104 0410 	add.w	r4, r4, #16
 8009e90:	ed15 7a03 	vldr	s14, [r5, #-12]
 8009e94:	f106 0610 	add.w	r6, r6, #16
 8009e98:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8009e9c:	ed55 7a02 	vldr	s15, [r5, #-8]
 8009ea0:	ed55 2a01 	vldr	s5, [r5, #-4]
 8009ea4:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8009ea8:	ed53 0a04 	vldr	s1, [r3, #-16]
 8009eac:	f102 0210 	add.w	r2, r2, #16
 8009eb0:	ed13 5a03 	vldr	s10, [r3, #-12]
 8009eb4:	f105 0510 	add.w	r5, r5, #16
 8009eb8:	ed13 3a02 	vldr	s6, [r3, #-8]
 8009ebc:	f103 0310 	add.w	r3, r3, #16
 8009ec0:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 8009ec4:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 8009ec8:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8009ecc:	ee33 8a83 	vadd.f32	s16, s7, s6
 8009ed0:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 8009ed4:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 8009ed8:	ee34 0a06 	vadd.f32	s0, s8, s12
 8009edc:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 8009ee0:	ee76 aa87 	vadd.f32	s21, s13, s14
 8009ee4:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8009ee8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009eec:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 8009ef0:	ee35 9aa0 	vadd.f32	s18, s11, s1
 8009ef4:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 8009ef8:	ee71 8a05 	vadd.f32	s17, s2, s10
 8009efc:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8009f00:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 8009f04:	ee72 9a22 	vadd.f32	s19, s4, s5
 8009f08:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8009f0c:	ee35 5a41 	vsub.f32	s10, s10, s2
 8009f10:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 8009f14:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 8009f18:	ee36 6a44 	vsub.f32	s12, s12, s8
 8009f1c:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 8009f20:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8009f24:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 8009f28:	ee72 7a62 	vsub.f32	s15, s4, s5
 8009f2c:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 8009f30:	ee73 2a63 	vsub.f32	s5, s6, s7
 8009f34:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 8009f38:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 8009f3c:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 8009f40:	ee24 3a84 	vmul.f32	s6, s9, s8
 8009f44:	ee27 2a26 	vmul.f32	s4, s14, s13
 8009f48:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8009f4c:	ee65 3aa6 	vmul.f32	s7, s11, s13
 8009f50:	ee27 7a04 	vmul.f32	s14, s14, s8
 8009f54:	ee65 5a84 	vmul.f32	s11, s11, s8
 8009f58:	ee65 6a26 	vmul.f32	s13, s10, s13
 8009f5c:	ee25 5a04 	vmul.f32	s10, s10, s8
 8009f60:	ee37 7a64 	vsub.f32	s14, s14, s9
 8009f64:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8009f68:	ee33 4a02 	vadd.f32	s8, s6, s4
 8009f6c:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8009f70:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 8009f74:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 8009f78:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 8009f7c:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 8009f80:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 8009f84:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8009f88:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8009f8c:	ee27 4a87 	vmul.f32	s8, s15, s14
 8009f90:	ee61 5a87 	vmul.f32	s11, s3, s14
 8009f94:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009f98:	ee22 5a87 	vmul.f32	s10, s5, s14
 8009f9c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8009fa0:	ee26 6a26 	vmul.f32	s12, s12, s13
 8009fa4:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8009fa8:	ee74 4a84 	vadd.f32	s9, s9, s8
 8009fac:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009fb0:	ee35 6a46 	vsub.f32	s12, s10, s12
 8009fb4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009fb8:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 8009fbc:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 8009fc0:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 8009fc4:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8009fc8:	f47f af5a 	bne.w	8009e80 <arm_cfft_radix8by2_f32+0x34>
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	b28c      	uxth	r4, r1
 8009fd0:	2302      	movs	r3, #2
 8009fd2:	4621      	mov	r1, r4
 8009fd4:	f000 fd54 	bl	800aa80 <arm_radix8_butterfly_f32>
 8009fd8:	4621      	mov	r1, r4
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	4640      	mov	r0, r8
 8009fde:	2302      	movs	r3, #2
 8009fe0:	ecbd 8b06 	vpop	{d8-d10}
 8009fe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fe8:	f000 bd4a 	b.w	800aa80 <arm_radix8_butterfly_f32>

08009fec <arm_cfft_radix8by4_f32>:
 8009fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff0:	ed2d 8b06 	vpush	{d8-d10}
 8009ff4:	8804      	ldrh	r4, [r0, #0]
 8009ff6:	b08f      	sub	sp, #60	; 0x3c
 8009ff8:	ed91 6a00 	vldr	s12, [r1]
 8009ffc:	460a      	mov	r2, r1
 8009ffe:	0864      	lsrs	r4, r4, #1
 800a000:	ed91 7a01 	vldr	s14, [r1, #4]
 800a004:	9101      	str	r1, [sp, #4]
 800a006:	00a3      	lsls	r3, r4, #2
 800a008:	6841      	ldr	r1, [r0, #4]
 800a00a:	0864      	lsrs	r4, r4, #1
 800a00c:	900c      	str	r0, [sp, #48]	; 0x30
 800a00e:	9205      	str	r2, [sp, #20]
 800a010:	f101 0610 	add.w	r6, r1, #16
 800a014:	4625      	mov	r5, r4
 800a016:	940b      	str	r4, [sp, #44]	; 0x2c
 800a018:	f101 0408 	add.w	r4, r1, #8
 800a01c:	9602      	str	r6, [sp, #8]
 800a01e:	9407      	str	r4, [sp, #28]
 800a020:	18d4      	adds	r4, r2, r3
 800a022:	1eaa      	subs	r2, r5, #2
 800a024:	f101 0518 	add.w	r5, r1, #24
 800a028:	18e0      	adds	r0, r4, r3
 800a02a:	edd4 4a00 	vldr	s9, [r4]
 800a02e:	ed94 4a01 	vldr	s8, [r4, #4]
 800a032:	46a6      	mov	lr, r4
 800a034:	edd0 6a00 	vldr	s13, [r0]
 800a038:	18c7      	adds	r7, r0, r3
 800a03a:	edd0 7a01 	vldr	s15, [r0, #4]
 800a03e:	46a0      	mov	r8, r4
 800a040:	ee76 5a26 	vadd.f32	s11, s12, s13
 800a044:	ed97 5a00 	vldr	s10, [r7]
 800a048:	ee76 6a66 	vsub.f32	s13, s12, s13
 800a04c:	4604      	mov	r4, r0
 800a04e:	9506      	str	r5, [sp, #24]
 800a050:	4605      	mov	r5, r0
 800a052:	ee75 2aa4 	vadd.f32	s5, s11, s9
 800a056:	900a      	str	r0, [sp, #40]	; 0x28
 800a058:	9801      	ldr	r0, [sp, #4]
 800a05a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800a05e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a062:	ed97 3a01 	vldr	s6, [r7, #4]
 800a066:	ee72 2a85 	vadd.f32	s5, s5, s10
 800a06a:	46bc      	mov	ip, r7
 800a06c:	ee76 3a84 	vadd.f32	s7, s13, s8
 800a070:	9704      	str	r7, [sp, #16]
 800a072:	ee36 7a44 	vsub.f32	s14, s12, s8
 800a076:	f8cd e00c 	str.w	lr, [sp, #12]
 800a07a:	ee12 9a90 	vmov	r9, s5
 800a07e:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800a082:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800a086:	1f3e      	subs	r6, r7, #4
 800a088:	f840 9b08 	str.w	r9, [r0], #8
 800a08c:	ee37 4ae4 	vsub.f32	s8, s15, s9
 800a090:	edde 2a01 	vldr	s5, [lr, #4]
 800a094:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800a098:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800a09c:	eddc 4a01 	vldr	s9, [ip, #4]
 800a0a0:	ee36 6a22 	vadd.f32	s12, s12, s5
 800a0a4:	9001      	str	r0, [sp, #4]
 800a0a6:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800a0aa:	9805      	ldr	r0, [sp, #20]
 800a0ac:	ee13 9a90 	vmov	r9, s7
 800a0b0:	ee37 7a43 	vsub.f32	s14, s14, s6
 800a0b4:	ee36 6a24 	vadd.f32	s12, s12, s9
 800a0b8:	f1ae 0704 	sub.w	r7, lr, #4
 800a0bc:	ee74 4a05 	vadd.f32	s9, s8, s10
 800a0c0:	ee76 6a83 	vadd.f32	s13, s13, s6
 800a0c4:	ed80 6a01 	vstr	s12, [r0, #4]
 800a0c8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800a0cc:	f848 9b08 	str.w	r9, [r8], #8
 800a0d0:	edce 4a01 	vstr	s9, [lr, #4]
 800a0d4:	ee15 ea90 	vmov	lr, s11
 800a0d8:	f844 eb08 	str.w	lr, [r4], #8
 800a0dc:	ee16 ea90 	vmov	lr, s13
 800a0e0:	9408      	str	r4, [sp, #32]
 800a0e2:	462c      	mov	r4, r5
 800a0e4:	ed85 7a01 	vstr	s14, [r5, #4]
 800a0e8:	9d04      	ldr	r5, [sp, #16]
 800a0ea:	f84c eb08 	str.w	lr, [ip], #8
 800a0ee:	edc5 7a01 	vstr	s15, [r5, #4]
 800a0f2:	0855      	lsrs	r5, r2, #1
 800a0f4:	9509      	str	r5, [sp, #36]	; 0x24
 800a0f6:	f000 8130 	beq.w	800a35a <arm_cfft_radix8by4_f32+0x36e>
 800a0fa:	9805      	ldr	r0, [sp, #20]
 800a0fc:	3b08      	subs	r3, #8
 800a0fe:	46ab      	mov	fp, r5
 800a100:	f1a4 020c 	sub.w	r2, r4, #12
 800a104:	f100 0510 	add.w	r5, r0, #16
 800a108:	f101 0920 	add.w	r9, r1, #32
 800a10c:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800a110:	f8dd a008 	ldr.w	sl, [sp, #8]
 800a114:	4433      	add	r3, r6
 800a116:	3410      	adds	r4, #16
 800a118:	4660      	mov	r0, ip
 800a11a:	4641      	mov	r1, r8
 800a11c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 800a120:	ed54 6a02 	vldr	s13, [r4, #-8]
 800a124:	f1bb 0b01 	subs.w	fp, fp, #1
 800a128:	ed55 5a02 	vldr	s11, [r5, #-8]
 800a12c:	f10a 0a08 	add.w	sl, sl, #8
 800a130:	edd1 7a00 	vldr	s15, [r1]
 800a134:	f105 0508 	add.w	r5, r5, #8
 800a138:	ee75 3aa6 	vadd.f32	s7, s11, s13
 800a13c:	edd0 2a00 	vldr	s5, [r0]
 800a140:	ed14 7a01 	vldr	s14, [r4, #-4]
 800a144:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800a148:	ed55 6a03 	vldr	s13, [r5, #-12]
 800a14c:	f1a2 0208 	sub.w	r2, r2, #8
 800a150:	ee73 4aa7 	vadd.f32	s9, s7, s15
 800a154:	ed90 2a01 	vldr	s4, [r0, #4]
 800a158:	ee36 5a87 	vadd.f32	s10, s13, s14
 800a15c:	ed91 6a01 	vldr	s12, [r1, #4]
 800a160:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a164:	f109 0910 	add.w	r9, r9, #16
 800a168:	ee74 6aa2 	vadd.f32	s13, s9, s5
 800a16c:	f104 0408 	add.w	r4, r4, #8
 800a170:	ee73 3ae7 	vsub.f32	s7, s7, s15
 800a174:	f10e 0e18 	add.w	lr, lr, #24
 800a178:	ee37 3a67 	vsub.f32	s6, s14, s15
 800a17c:	f1a3 0308 	sub.w	r3, r3, #8
 800a180:	ed45 6a04 	vstr	s13, [r5, #-16]
 800a184:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a188:	edd1 6a01 	vldr	s13, [r1, #4]
 800a18c:	ee75 1a86 	vadd.f32	s3, s11, s12
 800a190:	edd0 4a01 	vldr	s9, [r0, #4]
 800a194:	ee33 3a22 	vadd.f32	s6, s6, s5
 800a198:	ee75 6a26 	vadd.f32	s13, s10, s13
 800a19c:	ee35 5a46 	vsub.f32	s10, s10, s12
 800a1a0:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800a1a4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a1a8:	ee71 1ac2 	vsub.f32	s3, s3, s4
 800a1ac:	ee35 5a42 	vsub.f32	s10, s10, s4
 800a1b0:	ed45 6a03 	vstr	s13, [r5, #-12]
 800a1b4:	ee36 2a02 	vadd.f32	s4, s12, s4
 800a1b8:	edd6 7a00 	vldr	s15, [r6]
 800a1bc:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800a1c0:	ed97 1a00 	vldr	s2, [r7]
 800a1c4:	ee77 2a62 	vsub.f32	s5, s14, s5
 800a1c8:	ed92 8a04 	vldr	s16, [r2, #16]
 800a1cc:	ee71 8a27 	vadd.f32	s17, s2, s15
 800a1d0:	ed93 aa04 	vldr	s20, [r3, #16]
 800a1d4:	ed16 7a01 	vldr	s14, [r6, #-4]
 800a1d8:	ee71 7a67 	vsub.f32	s15, s2, s15
 800a1dc:	ed57 0a01 	vldr	s1, [r7, #-4]
 800a1e0:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800a1e4:	ee38 6a88 	vadd.f32	s12, s17, s16
 800a1e8:	edd3 9a03 	vldr	s19, [r3, #12]
 800a1ec:	ee30 0a87 	vadd.f32	s0, s1, s14
 800a1f0:	ed92 9a03 	vldr	s18, [r2, #12]
 800a1f4:	ee78 5ac8 	vsub.f32	s11, s17, s16
 800a1f8:	ee36 6a0a 	vadd.f32	s12, s12, s20
 800a1fc:	ee30 7ac7 	vsub.f32	s14, s1, s14
 800a200:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800a204:	ee16 ca10 	vmov	ip, s12
 800a208:	ee30 6a49 	vsub.f32	s12, s0, s18
 800a20c:	ee77 4a01 	vadd.f32	s9, s14, s2
 800a210:	f847 c908 	str.w	ip, [r7], #-8
 800a214:	ee34 4a29 	vadd.f32	s8, s8, s19
 800a218:	edd2 8a03 	vldr	s17, [r2, #12]
 800a21c:	ee39 9ac9 	vsub.f32	s18, s19, s18
 800a220:	ed93 8a03 	vldr	s16, [r3, #12]
 800a224:	ee71 0a47 	vsub.f32	s1, s2, s14
 800a228:	ee30 0a28 	vadd.f32	s0, s0, s17
 800a22c:	ee39 1a67 	vsub.f32	s2, s18, s15
 800a230:	ee36 6a69 	vsub.f32	s12, s12, s19
 800a234:	ee30 0a08 	vadd.f32	s0, s0, s16
 800a238:	ee75 5aca 	vsub.f32	s11, s11, s20
 800a23c:	ed87 0a01 	vstr	s0, [r7, #4]
 800a240:	ed1a 0a04 	vldr	s0, [sl, #-16]
 800a244:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800a248:	ee21 8a80 	vmul.f32	s16, s3, s0
 800a24c:	ee23 7a26 	vmul.f32	s14, s6, s13
 800a250:	ee64 7a26 	vmul.f32	s15, s8, s13
 800a254:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800a258:	ee24 4a00 	vmul.f32	s8, s8, s0
 800a25c:	ee23 3a00 	vmul.f32	s6, s6, s0
 800a260:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800a264:	ee24 0a80 	vmul.f32	s0, s9, s0
 800a268:	ee38 7a07 	vadd.f32	s14, s16, s14
 800a26c:	ee76 6a84 	vadd.f32	s13, s13, s8
 800a270:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a274:	ee33 3a61 	vsub.f32	s6, s6, s3
 800a278:	ee17 ca10 	vmov	ip, s14
 800a27c:	f841 cb08 	str.w	ip, [r1], #8
 800a280:	ed01 3a01 	vstr	s6, [r1, #-4]
 800a284:	ed82 0a04 	vstr	s0, [r2, #16]
 800a288:	edc2 6a03 	vstr	s13, [r2, #12]
 800a28c:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 800a290:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 800a294:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 800a298:	ee23 4aa6 	vmul.f32	s8, s7, s13
 800a29c:	ee65 4a27 	vmul.f32	s9, s10, s15
 800a2a0:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800a2a4:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800a2a8:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a2ac:	ee25 5a26 	vmul.f32	s10, s10, s13
 800a2b0:	ee66 6a26 	vmul.f32	s13, s12, s13
 800a2b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2b8:	ee34 6a24 	vadd.f32	s12, s8, s9
 800a2bc:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800a2c0:	ee35 5a63 	vsub.f32	s10, s10, s7
 800a2c4:	ee17 ca90 	vmov	ip, s15
 800a2c8:	ed04 6a04 	vstr	s12, [r4, #-16]
 800a2cc:	ed04 5a03 	vstr	s10, [r4, #-12]
 800a2d0:	f846 c908 	str.w	ip, [r6], #-8
 800a2d4:	edc6 6a01 	vstr	s13, [r6, #4]
 800a2d8:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 800a2dc:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 800a2e0:	ee62 5a27 	vmul.f32	s11, s4, s15
 800a2e4:	ee22 6a87 	vmul.f32	s12, s5, s14
 800a2e8:	ee22 2a07 	vmul.f32	s4, s4, s14
 800a2ec:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800a2f0:	ee61 6a07 	vmul.f32	s13, s2, s14
 800a2f4:	ee20 7a87 	vmul.f32	s14, s1, s14
 800a2f8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800a2fc:	ee61 7a27 	vmul.f32	s15, s2, s15
 800a300:	ee35 6a86 	vadd.f32	s12, s11, s12
 800a304:	ee72 2ac2 	vsub.f32	s5, s5, s4
 800a308:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800a30c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a310:	ee16 ca10 	vmov	ip, s12
 800a314:	f840 cb08 	str.w	ip, [r0], #8
 800a318:	ed40 2a01 	vstr	s5, [r0, #-4]
 800a31c:	edc3 0a04 	vstr	s1, [r3, #16]
 800a320:	edc3 7a03 	vstr	s15, [r3, #12]
 800a324:	f47f aefc 	bne.w	800a120 <arm_cfft_radix8by4_f32+0x134>
 800a328:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a32a:	9802      	ldr	r0, [sp, #8]
 800a32c:	00cb      	lsls	r3, r1, #3
 800a32e:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800a332:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a336:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800a33a:	4498      	add	r8, r3
 800a33c:	449c      	add	ip, r3
 800a33e:	9102      	str	r1, [sp, #8]
 800a340:	9901      	ldr	r1, [sp, #4]
 800a342:	4419      	add	r1, r3
 800a344:	9101      	str	r1, [sp, #4]
 800a346:	9907      	ldr	r1, [sp, #28]
 800a348:	4419      	add	r1, r3
 800a34a:	9107      	str	r1, [sp, #28]
 800a34c:	9908      	ldr	r1, [sp, #32]
 800a34e:	4419      	add	r1, r3
 800a350:	9b06      	ldr	r3, [sp, #24]
 800a352:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a356:	9108      	str	r1, [sp, #32]
 800a358:	9306      	str	r3, [sp, #24]
 800a35a:	9a01      	ldr	r2, [sp, #4]
 800a35c:	2304      	movs	r3, #4
 800a35e:	9e08      	ldr	r6, [sp, #32]
 800a360:	edd2 7a00 	vldr	s15, [r2]
 800a364:	ed96 7a00 	vldr	s14, [r6]
 800a368:	edd8 2a00 	vldr	s5, [r8]
 800a36c:	ee77 5a87 	vadd.f32	s11, s15, s14
 800a370:	ed9c 3a00 	vldr	s6, [ip]
 800a374:	ed92 6a01 	vldr	s12, [r2, #4]
 800a378:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a37c:	edd6 6a01 	vldr	s13, [r6, #4]
 800a380:	ee75 4aa2 	vadd.f32	s9, s11, s5
 800a384:	ed9c 2a01 	vldr	s4, [ip, #4]
 800a388:	ee36 5a26 	vadd.f32	s10, s12, s13
 800a38c:	edd8 7a01 	vldr	s15, [r8, #4]
 800a390:	ee76 6a66 	vsub.f32	s13, s12, s13
 800a394:	9d02      	ldr	r5, [sp, #8]
 800a396:	ee34 6a83 	vadd.f32	s12, s9, s6
 800a39a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800a39e:	ee37 4a27 	vadd.f32	s8, s14, s15
 800a3a2:	9805      	ldr	r0, [sp, #20]
 800a3a4:	ee76 4ae2 	vsub.f32	s9, s13, s5
 800a3a8:	4621      	mov	r1, r4
 800a3aa:	ed82 6a00 	vstr	s12, [r2]
 800a3ae:	ee35 6ae2 	vsub.f32	s12, s11, s5
 800a3b2:	edd8 3a01 	vldr	s7, [r8, #4]
 800a3b6:	ee75 5a67 	vsub.f32	s11, s10, s15
 800a3ba:	eddc 1a01 	vldr	s3, [ip, #4]
 800a3be:	ee34 4a42 	vsub.f32	s8, s8, s4
 800a3c2:	ee75 3a23 	vadd.f32	s7, s10, s7
 800a3c6:	ee74 4a83 	vadd.f32	s9, s9, s6
 800a3ca:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800a3ce:	ee33 5aa1 	vadd.f32	s10, s7, s3
 800a3d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a3d6:	ee36 6a43 	vsub.f32	s12, s12, s6
 800a3da:	ed82 5a01 	vstr	s10, [r2, #4]
 800a3de:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800a3e2:	9a07      	ldr	r2, [sp, #28]
 800a3e4:	ee77 7a02 	vadd.f32	s15, s14, s4
 800a3e8:	ee36 7ac3 	vsub.f32	s14, s13, s6
 800a3ec:	edd2 2a00 	vldr	s5, [r2]
 800a3f0:	ed92 5a01 	vldr	s10, [r2, #4]
 800a3f4:	ee64 3a22 	vmul.f32	s7, s8, s5
 800a3f8:	ee24 4a05 	vmul.f32	s8, s8, s10
 800a3fc:	ee24 5a85 	vmul.f32	s10, s9, s10
 800a400:	ee64 4aa2 	vmul.f32	s9, s9, s5
 800a404:	ee33 5a85 	vadd.f32	s10, s7, s10
 800a408:	ee74 4ac4 	vsub.f32	s9, s9, s8
 800a40c:	ed88 5a00 	vstr	s10, [r8]
 800a410:	edc8 4a01 	vstr	s9, [r8, #4]
 800a414:	edd5 4a01 	vldr	s9, [r5, #4]
 800a418:	edd5 6a00 	vldr	s13, [r5]
 800a41c:	9d06      	ldr	r5, [sp, #24]
 800a41e:	ee26 5a26 	vmul.f32	s10, s12, s13
 800a422:	ee26 6a24 	vmul.f32	s12, s12, s9
 800a426:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800a42a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800a42e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800a432:	ee75 5a25 	vadd.f32	s11, s10, s11
 800a436:	ed86 6a01 	vstr	s12, [r6, #4]
 800a43a:	edc6 5a00 	vstr	s11, [r6]
 800a43e:	edd5 5a01 	vldr	s11, [r5, #4]
 800a442:	edd5 6a00 	vldr	s13, [r5]
 800a446:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a448:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800a44c:	ee67 6a26 	vmul.f32	s13, s14, s13
 800a450:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a454:	ee27 7a25 	vmul.f32	s14, s14, s11
 800a458:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a45c:	ee36 7a07 	vadd.f32	s14, s12, s14
 800a460:	edcc 7a01 	vstr	s15, [ip, #4]
 800a464:	ed8c 7a00 	vstr	s14, [ip]
 800a468:	6872      	ldr	r2, [r6, #4]
 800a46a:	f000 fb09 	bl	800aa80 <arm_radix8_butterfly_f32>
 800a46e:	9803      	ldr	r0, [sp, #12]
 800a470:	4621      	mov	r1, r4
 800a472:	6872      	ldr	r2, [r6, #4]
 800a474:	2304      	movs	r3, #4
 800a476:	f000 fb03 	bl	800aa80 <arm_radix8_butterfly_f32>
 800a47a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a47c:	4621      	mov	r1, r4
 800a47e:	6872      	ldr	r2, [r6, #4]
 800a480:	2304      	movs	r3, #4
 800a482:	f000 fafd 	bl	800aa80 <arm_radix8_butterfly_f32>
 800a486:	4621      	mov	r1, r4
 800a488:	6872      	ldr	r2, [r6, #4]
 800a48a:	2304      	movs	r3, #4
 800a48c:	9804      	ldr	r0, [sp, #16]
 800a48e:	b00f      	add	sp, #60	; 0x3c
 800a490:	ecbd 8b06 	vpop	{d8-d10}
 800a494:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a498:	f000 baf2 	b.w	800aa80 <arm_radix8_butterfly_f32>

0800a49c <arm_cfft_f32>:
 800a49c:	2a01      	cmp	r2, #1
 800a49e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a2:	4606      	mov	r6, r0
 800a4a4:	4617      	mov	r7, r2
 800a4a6:	460c      	mov	r4, r1
 800a4a8:	4698      	mov	r8, r3
 800a4aa:	8805      	ldrh	r5, [r0, #0]
 800a4ac:	d053      	beq.n	800a556 <arm_cfft_f32+0xba>
 800a4ae:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800a4b2:	d04b      	beq.n	800a54c <arm_cfft_f32+0xb0>
 800a4b4:	d916      	bls.n	800a4e4 <arm_cfft_f32+0x48>
 800a4b6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800a4ba:	d01a      	beq.n	800a4f2 <arm_cfft_f32+0x56>
 800a4bc:	d95a      	bls.n	800a574 <arm_cfft_f32+0xd8>
 800a4be:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800a4c2:	d043      	beq.n	800a54c <arm_cfft_f32+0xb0>
 800a4c4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800a4c8:	d105      	bne.n	800a4d6 <arm_cfft_f32+0x3a>
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	6872      	ldr	r2, [r6, #4]
 800a4ce:	4629      	mov	r1, r5
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	f000 fad5 	bl	800aa80 <arm_radix8_butterfly_f32>
 800a4d6:	f1b8 0f00 	cmp.w	r8, #0
 800a4da:	d111      	bne.n	800a500 <arm_cfft_f32+0x64>
 800a4dc:	2f01      	cmp	r7, #1
 800a4de:	d016      	beq.n	800a50e <arm_cfft_f32+0x72>
 800a4e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4e4:	2d20      	cmp	r5, #32
 800a4e6:	d031      	beq.n	800a54c <arm_cfft_f32+0xb0>
 800a4e8:	d948      	bls.n	800a57c <arm_cfft_f32+0xe0>
 800a4ea:	2d40      	cmp	r5, #64	; 0x40
 800a4ec:	d0ed      	beq.n	800a4ca <arm_cfft_f32+0x2e>
 800a4ee:	2d80      	cmp	r5, #128	; 0x80
 800a4f0:	d1f1      	bne.n	800a4d6 <arm_cfft_f32+0x3a>
 800a4f2:	4621      	mov	r1, r4
 800a4f4:	4630      	mov	r0, r6
 800a4f6:	f7ff fca9 	bl	8009e4c <arm_cfft_radix8by2_f32>
 800a4fa:	f1b8 0f00 	cmp.w	r8, #0
 800a4fe:	d0ed      	beq.n	800a4dc <arm_cfft_f32+0x40>
 800a500:	68b2      	ldr	r2, [r6, #8]
 800a502:	4620      	mov	r0, r4
 800a504:	89b1      	ldrh	r1, [r6, #12]
 800a506:	f7f5 feeb 	bl	80002e0 <arm_bitreversal_32>
 800a50a:	2f01      	cmp	r7, #1
 800a50c:	d1e8      	bne.n	800a4e0 <arm_cfft_f32+0x44>
 800a50e:	ee07 5a90 	vmov	s15, r5
 800a512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a51a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a51e:	2d00      	cmp	r5, #0
 800a520:	d0de      	beq.n	800a4e0 <arm_cfft_f32+0x44>
 800a522:	f104 0108 	add.w	r1, r4, #8
 800a526:	2300      	movs	r3, #0
 800a528:	ed11 7a02 	vldr	s14, [r1, #-8]
 800a52c:	3301      	adds	r3, #1
 800a52e:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a532:	3108      	adds	r1, #8
 800a534:	429d      	cmp	r5, r3
 800a536:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a53a:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a53e:	ed01 7a04 	vstr	s14, [r1, #-16]
 800a542:	ed41 7a03 	vstr	s15, [r1, #-12]
 800a546:	d1ef      	bne.n	800a528 <arm_cfft_f32+0x8c>
 800a548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a54c:	4621      	mov	r1, r4
 800a54e:	4630      	mov	r0, r6
 800a550:	f7ff fd4c 	bl	8009fec <arm_cfft_radix8by4_f32>
 800a554:	e7bf      	b.n	800a4d6 <arm_cfft_f32+0x3a>
 800a556:	b1a5      	cbz	r5, 800a582 <arm_cfft_f32+0xe6>
 800a558:	f101 030c 	add.w	r3, r1, #12
 800a55c:	2200      	movs	r2, #0
 800a55e:	ed53 7a02 	vldr	s15, [r3, #-8]
 800a562:	3201      	adds	r2, #1
 800a564:	3308      	adds	r3, #8
 800a566:	eef1 7a67 	vneg.f32	s15, s15
 800a56a:	4295      	cmp	r5, r2
 800a56c:	ed43 7a04 	vstr	s15, [r3, #-16]
 800a570:	d1f5      	bne.n	800a55e <arm_cfft_f32+0xc2>
 800a572:	e79c      	b.n	800a4ae <arm_cfft_f32+0x12>
 800a574:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800a578:	d0a7      	beq.n	800a4ca <arm_cfft_f32+0x2e>
 800a57a:	e7ac      	b.n	800a4d6 <arm_cfft_f32+0x3a>
 800a57c:	2d10      	cmp	r5, #16
 800a57e:	d0b8      	beq.n	800a4f2 <arm_cfft_f32+0x56>
 800a580:	e7a9      	b.n	800a4d6 <arm_cfft_f32+0x3a>
 800a582:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800a586:	d896      	bhi.n	800a4b6 <arm_cfft_f32+0x1a>
 800a588:	e7ac      	b.n	800a4e4 <arm_cfft_f32+0x48>
 800a58a:	bf00      	nop

0800a58c <arm_fir_decimate_init_f32>:
 800a58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a58e:	9f07      	ldr	r7, [sp, #28]
 800a590:	fbb7 f4f2 	udiv	r4, r7, r2
 800a594:	fb02 7414 	mls	r4, r2, r4, r7
 800a598:	b994      	cbnz	r4, 800a5c0 <arm_fir_decimate_init_f32+0x34>
 800a59a:	468e      	mov	lr, r1
 800a59c:	4616      	mov	r6, r2
 800a59e:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800a5a2:	4605      	mov	r5, r0
 800a5a4:	4472      	add	r2, lr
 800a5a6:	8069      	strh	r1, [r5, #2]
 800a5a8:	6043      	str	r3, [r0, #4]
 800a5aa:	4621      	mov	r1, r4
 800a5ac:	443a      	add	r2, r7
 800a5ae:	9806      	ldr	r0, [sp, #24]
 800a5b0:	0092      	lsls	r2, r2, #2
 800a5b2:	f000 fd81 	bl	800b0b8 <memset>
 800a5b6:	9b06      	ldr	r3, [sp, #24]
 800a5b8:	702e      	strb	r6, [r5, #0]
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	60ab      	str	r3, [r5, #8]
 800a5be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5c0:	f06f 0001 	mvn.w	r0, #1
 800a5c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5c6:	bf00      	nop

0800a5c8 <arm_fir_decimate_f32>:
 800a5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5cc:	7804      	ldrb	r4, [r0, #0]
 800a5ce:	4683      	mov	fp, r0
 800a5d0:	b08d      	sub	sp, #52	; 0x34
 800a5d2:	8840      	ldrh	r0, [r0, #2]
 800a5d4:	f8db 5004 	ldr.w	r5, [fp, #4]
 800a5d8:	f06f 4940 	mvn.w	r9, #3221225472	; 0xc0000000
 800a5dc:	4696      	mov	lr, r2
 800a5de:	9208      	str	r2, [sp, #32]
 800a5e0:	9502      	str	r5, [sp, #8]
 800a5e2:	462a      	mov	r2, r5
 800a5e4:	f8db 6008 	ldr.w	r6, [fp, #8]
 800a5e8:	4481      	add	r9, r0
 800a5ea:	9009      	str	r0, [sp, #36]	; 0x24
 800a5ec:	eb06 0989 	add.w	r9, r6, r9, lsl #2
 800a5f0:	fbb3 f3f4 	udiv	r3, r3, r4
 800a5f4:	089d      	lsrs	r5, r3, #2
 800a5f6:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
 800a5fa:	950a      	str	r5, [sp, #40]	; 0x28
 800a5fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5fe:	2d00      	cmp	r5, #0
 800a600:	f000 80f8 	beq.w	800a7f4 <arm_fir_decimate_f32+0x22c>
 800a604:	0883      	lsrs	r3, r0, #2
 800a606:	f000 0003 	and.w	r0, r0, #3
 800a60a:	462f      	mov	r7, r5
 800a60c:	f8cd b010 	str.w	fp, [sp, #16]
 800a610:	9305      	str	r3, [sp, #20]
 800a612:	011b      	lsls	r3, r3, #4
 800a614:	9006      	str	r0, [sp, #24]
 800a616:	f10e 0a10 	add.w	sl, lr, #16
 800a61a:	441a      	add	r2, r3
 800a61c:	469b      	mov	fp, r3
 800a61e:	4648      	mov	r0, r9
 800a620:	9703      	str	r7, [sp, #12]
 800a622:	9207      	str	r2, [sp, #28]
 800a624:	f8cd 9004 	str.w	r9, [sp, #4]
 800a628:	00a4      	lsls	r4, r4, #2
 800a62a:	460a      	mov	r2, r1
 800a62c:	4623      	mov	r3, r4
 800a62e:	f852 5b04 	ldr.w	r5, [r2], #4
 800a632:	3b01      	subs	r3, #1
 800a634:	f840 5b04 	str.w	r5, [r0], #4
 800a638:	d1f9      	bne.n	800a62e <arm_fir_decimate_f32+0x66>
 800a63a:	9b04      	ldr	r3, [sp, #16]
 800a63c:	00a4      	lsls	r4, r4, #2
 800a63e:	9f05      	ldr	r7, [sp, #20]
 800a640:	f893 8000 	ldrb.w	r8, [r3]
 800a644:	4421      	add	r1, r4
 800a646:	9b01      	ldr	r3, [sp, #4]
 800a648:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800a64c:	ed9f 1abb 	vldr	s2, [pc, #748]	; 800a93c <arm_fir_decimate_f32+0x374>
 800a650:	4423      	add	r3, r4
 800a652:	eb06 0e08 	add.w	lr, r6, r8
 800a656:	9301      	str	r3, [sp, #4]
 800a658:	eb0e 0c08 	add.w	ip, lr, r8
 800a65c:	eb0c 0908 	add.w	r9, ip, r8
 800a660:	2f00      	cmp	r7, #0
 800a662:	f000 8161 	beq.w	800a928 <arm_fir_decimate_f32+0x360>
 800a666:	9b02      	ldr	r3, [sp, #8]
 800a668:	eef0 5a41 	vmov.f32	s11, s2
 800a66c:	eeb0 5a41 	vmov.f32	s10, s2
 800a670:	f106 0410 	add.w	r4, r6, #16
 800a674:	eef0 4a41 	vmov.f32	s9, s2
 800a678:	f103 0510 	add.w	r5, r3, #16
 800a67c:	f10e 0010 	add.w	r0, lr, #16
 800a680:	f10c 0210 	add.w	r2, ip, #16
 800a684:	f109 0310 	add.w	r3, r9, #16
 800a688:	ed55 6a04 	vldr	s13, [r5, #-16]
 800a68c:	3f01      	subs	r7, #1
 800a68e:	ed13 6a04 	vldr	s12, [r3, #-16]
 800a692:	f105 0510 	add.w	r5, r5, #16
 800a696:	ed14 4a04 	vldr	s8, [r4, #-16]
 800a69a:	f100 0010 	add.w	r0, r0, #16
 800a69e:	ed50 1a08 	vldr	s3, [r0, #-32]	; 0xffffffe0
 800a6a2:	f104 0410 	add.w	r4, r4, #16
 800a6a6:	ed52 2a04 	vldr	s5, [r2, #-16]
 800a6aa:	ee26 4a84 	vmul.f32	s8, s13, s8
 800a6ae:	ee66 1aa1 	vmul.f32	s3, s13, s3
 800a6b2:	ed15 7a07 	vldr	s14, [r5, #-28]	; 0xffffffe4
 800a6b6:	ee66 2aa2 	vmul.f32	s5, s13, s5
 800a6ba:	ed54 3a07 	vldr	s7, [r4, #-28]	; 0xffffffe4
 800a6be:	ee66 6a86 	vmul.f32	s13, s13, s12
 800a6c2:	ed10 2a07 	vldr	s4, [r0, #-28]	; 0xffffffe4
 800a6c6:	ed13 6a03 	vldr	s12, [r3, #-12]
 800a6ca:	ee74 4a24 	vadd.f32	s9, s8, s9
 800a6ce:	ed12 3a03 	vldr	s6, [r2, #-12]
 800a6d2:	ee31 5a85 	vadd.f32	s10, s3, s10
 800a6d6:	ee72 5aa5 	vadd.f32	s11, s5, s11
 800a6da:	ed55 7a06 	vldr	s15, [r5, #-24]	; 0xffffffe8
 800a6de:	ee67 3a23 	vmul.f32	s7, s14, s7
 800a6e2:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 800a6e6:	ee27 2a02 	vmul.f32	s4, s14, s4
 800a6ea:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800a6ee:	ee27 3a03 	vmul.f32	s6, s14, s6
 800a6f2:	ed52 2a02 	vldr	s5, [r2, #-8]
 800a6f6:	ee76 6a81 	vadd.f32	s13, s13, s2
 800a6fa:	ed10 0a05 	vldr	s0, [r0, #-20]	; 0xffffffec
 800a6fe:	ee27 7a06 	vmul.f32	s14, s14, s12
 800a702:	ed13 6a02 	vldr	s12, [r3, #-8]
 800a706:	ee73 3aa4 	vadd.f32	s7, s7, s9
 800a70a:	ed15 1a05 	vldr	s2, [r5, #-20]	; 0xffffffec
 800a70e:	ee67 4a84 	vmul.f32	s9, s15, s8
 800a712:	ed52 0a01 	vldr	s1, [r2, #-4]
 800a716:	ee32 2a05 	vadd.f32	s4, s4, s10
 800a71a:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 800a71e:	ee27 5aa1 	vmul.f32	s10, s15, s3
 800a722:	ed53 1a01 	vldr	s3, [r3, #-4]
 800a726:	ee33 3a25 	vadd.f32	s6, s6, s11
 800a72a:	f102 0210 	add.w	r2, r2, #16
 800a72e:	ee67 5aa2 	vmul.f32	s11, s15, s5
 800a732:	f103 0310 	add.w	r3, r3, #16
 800a736:	ee67 7a86 	vmul.f32	s15, s15, s12
 800a73a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a73e:	ee34 6aa3 	vadd.f32	s12, s9, s7
 800a742:	ee61 4a04 	vmul.f32	s9, s2, s8
 800a746:	ee75 3a02 	vadd.f32	s7, s10, s4
 800a74a:	ee35 4a83 	vadd.f32	s8, s11, s6
 800a74e:	ee21 5a00 	vmul.f32	s10, s2, s0
 800a752:	ee61 5a20 	vmul.f32	s11, s2, s1
 800a756:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a75a:	ee21 1a21 	vmul.f32	s2, s2, s3
 800a75e:	ee74 4a86 	vadd.f32	s9, s9, s12
 800a762:	ee35 5a23 	vadd.f32	s10, s10, s7
 800a766:	ee75 5a84 	vadd.f32	s11, s11, s8
 800a76a:	ee31 1a27 	vadd.f32	s2, s2, s15
 800a76e:	d18b      	bne.n	800a688 <arm_fir_decimate_f32+0xc0>
 800a770:	445e      	add	r6, fp
 800a772:	44de      	add	lr, fp
 800a774:	44dc      	add	ip, fp
 800a776:	eb09 000b 	add.w	r0, r9, fp
 800a77a:	9a07      	ldr	r2, [sp, #28]
 800a77c:	9b06      	ldr	r3, [sp, #24]
 800a77e:	b1db      	cbz	r3, 800a7b8 <arm_fir_decimate_f32+0x1f0>
 800a780:	ecb2 6a01 	vldmia	r2!, {s12}
 800a784:	3b01      	subs	r3, #1
 800a786:	ecf6 6a01 	vldmia	r6!, {s13}
 800a78a:	ecbe 7a01 	vldmia	lr!, {s14}
 800a78e:	ecfc 7a01 	vldmia	ip!, {s15}
 800a792:	ee66 6a26 	vmul.f32	s13, s12, s13
 800a796:	ecb0 4a01 	vldmia	r0!, {s8}
 800a79a:	ee26 7a07 	vmul.f32	s14, s12, s14
 800a79e:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a7a2:	ee26 6a04 	vmul.f32	s12, s12, s8
 800a7a6:	ee74 4aa6 	vadd.f32	s9, s9, s13
 800a7aa:	ee35 5a07 	vadd.f32	s10, s10, s14
 800a7ae:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a7b2:	ee31 1a06 	vadd.f32	s2, s2, s12
 800a7b6:	d1e3      	bne.n	800a780 <arm_fir_decimate_f32+0x1b8>
 800a7b8:	9b03      	ldr	r3, [sp, #12]
 800a7ba:	eb09 0608 	add.w	r6, r9, r8
 800a7be:	ed4a 4a04 	vstr	s9, [sl, #-16]
 800a7c2:	f10a 0a10 	add.w	sl, sl, #16
 800a7c6:	3b01      	subs	r3, #1
 800a7c8:	ed0a 5a07 	vstr	s10, [sl, #-28]	; 0xffffffe4
 800a7cc:	ed4a 5a06 	vstr	s11, [sl, #-24]	; 0xffffffe8
 800a7d0:	ed0a 1a05 	vstr	s2, [sl, #-20]	; 0xffffffec
 800a7d4:	9303      	str	r3, [sp, #12]
 800a7d6:	d003      	beq.n	800a7e0 <arm_fir_decimate_f32+0x218>
 800a7d8:	9b04      	ldr	r3, [sp, #16]
 800a7da:	9801      	ldr	r0, [sp, #4]
 800a7dc:	781c      	ldrb	r4, [r3, #0]
 800a7de:	e723      	b.n	800a628 <arm_fir_decimate_f32+0x60>
 800a7e0:	9b08      	ldr	r3, [sp, #32]
 800a7e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7e4:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a7e8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800a7ec:	f8dd b010 	ldr.w	fp, [sp, #16]
 800a7f0:	9308      	str	r3, [sp, #32]
 800a7f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d061      	beq.n	800a8bc <arm_fir_decimate_f32+0x2f4>
 800a7f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7fa:	4698      	mov	r8, r3
 800a7fc:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a800:	0895      	lsrs	r5, r2, #2
 800a802:	f002 0703 	and.w	r7, r2, #3
 800a806:	9a02      	ldr	r2, [sp, #8]
 800a808:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 800a80c:	eb02 0c0e 	add.w	ip, r2, lr
 800a810:	f89b 4000 	ldrb.w	r4, [fp]
 800a814:	4648      	mov	r0, r9
 800a816:	460a      	mov	r2, r1
 800a818:	4623      	mov	r3, r4
 800a81a:	ecf2 7a01 	vldmia	r2!, {s15}
 800a81e:	3b01      	subs	r3, #1
 800a820:	ece0 7a01 	vstmia	r0!, {s15}
 800a824:	d1f9      	bne.n	800a81a <arm_fir_decimate_f32+0x252>
 800a826:	00a4      	lsls	r4, r4, #2
 800a828:	44a1      	add	r9, r4
 800a82a:	4421      	add	r1, r4
 800a82c:	2d00      	cmp	r5, #0
 800a82e:	d076      	beq.n	800a91e <arm_fir_decimate_f32+0x356>
 800a830:	9b02      	ldr	r3, [sp, #8]
 800a832:	4628      	mov	r0, r5
 800a834:	eddf 7a41 	vldr	s15, [pc, #260]	; 800a93c <arm_fir_decimate_f32+0x374>
 800a838:	f103 0210 	add.w	r2, r3, #16
 800a83c:	f106 0310 	add.w	r3, r6, #16
 800a840:	ed52 6a04 	vldr	s13, [r2, #-16]
 800a844:	3801      	subs	r0, #1
 800a846:	ed13 7a04 	vldr	s14, [r3, #-16]
 800a84a:	f102 0210 	add.w	r2, r2, #16
 800a84e:	ed12 5a07 	vldr	s10, [r2, #-28]	; 0xffffffe4
 800a852:	f103 0310 	add.w	r3, r3, #16
 800a856:	ee66 5a87 	vmul.f32	s11, s13, s14
 800a85a:	ed13 7a07 	vldr	s14, [r3, #-28]	; 0xffffffe4
 800a85e:	ed12 6a06 	vldr	s12, [r2, #-24]	; 0xffffffe8
 800a862:	ee25 5a07 	vmul.f32	s10, s10, s14
 800a866:	ed13 7a06 	vldr	s14, [r3, #-24]	; 0xffffffe8
 800a86a:	ee75 6aa7 	vadd.f32	s13, s11, s15
 800a86e:	ed52 5a05 	vldr	s11, [r2, #-20]	; 0xffffffec
 800a872:	ee26 6a07 	vmul.f32	s12, s12, s14
 800a876:	ed13 7a05 	vldr	s14, [r3, #-20]	; 0xffffffec
 800a87a:	ee75 6a26 	vadd.f32	s13, s10, s13
 800a87e:	ee25 7a87 	vmul.f32	s14, s11, s14
 800a882:	ee76 7a26 	vadd.f32	s15, s12, s13
 800a886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a88a:	d1d9      	bne.n	800a840 <arm_fir_decimate_f32+0x278>
 800a88c:	eb06 020e 	add.w	r2, r6, lr
 800a890:	4660      	mov	r0, ip
 800a892:	b157      	cbz	r7, 800a8aa <arm_fir_decimate_f32+0x2e2>
 800a894:	463b      	mov	r3, r7
 800a896:	ecf0 6a01 	vldmia	r0!, {s13}
 800a89a:	3b01      	subs	r3, #1
 800a89c:	ecb2 7a01 	vldmia	r2!, {s14}
 800a8a0:	ee26 7a87 	vmul.f32	s14, s13, s14
 800a8a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a8a8:	d1f5      	bne.n	800a896 <arm_fir_decimate_f32+0x2ce>
 800a8aa:	f89b 3000 	ldrb.w	r3, [fp]
 800a8ae:	f1b8 0801 	subs.w	r8, r8, #1
 800a8b2:	ecea 7a01 	vstmia	sl!, {s15}
 800a8b6:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800a8ba:	d1a9      	bne.n	800a810 <arm_fir_decimate_f32+0x248>
 800a8bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8be:	f8db 4008 	ldr.w	r4, [fp, #8]
 800a8c2:	1e59      	subs	r1, r3, #1
 800a8c4:	088f      	lsrs	r7, r1, #2
 800a8c6:	d01d      	beq.n	800a904 <arm_fir_decimate_f32+0x33c>
 800a8c8:	f104 0210 	add.w	r2, r4, #16
 800a8cc:	f106 0310 	add.w	r3, r6, #16
 800a8d0:	4638      	mov	r0, r7
 800a8d2:	f853 5c10 	ldr.w	r5, [r3, #-16]
 800a8d6:	3801      	subs	r0, #1
 800a8d8:	f103 0310 	add.w	r3, r3, #16
 800a8dc:	f102 0210 	add.w	r2, r2, #16
 800a8e0:	f842 5c20 	str.w	r5, [r2, #-32]
 800a8e4:	f853 5c1c 	ldr.w	r5, [r3, #-28]
 800a8e8:	f842 5c1c 	str.w	r5, [r2, #-28]
 800a8ec:	f853 5c18 	ldr.w	r5, [r3, #-24]
 800a8f0:	f842 5c18 	str.w	r5, [r2, #-24]
 800a8f4:	f853 5c14 	ldr.w	r5, [r3, #-20]
 800a8f8:	f842 5c14 	str.w	r5, [r2, #-20]
 800a8fc:	d1e9      	bne.n	800a8d2 <arm_fir_decimate_f32+0x30a>
 800a8fe:	013b      	lsls	r3, r7, #4
 800a900:	441c      	add	r4, r3
 800a902:	441e      	add	r6, r3
 800a904:	f011 0303 	ands.w	r3, r1, #3
 800a908:	d006      	beq.n	800a918 <arm_fir_decimate_f32+0x350>
 800a90a:	4622      	mov	r2, r4
 800a90c:	f856 1b04 	ldr.w	r1, [r6], #4
 800a910:	3b01      	subs	r3, #1
 800a912:	f842 1b04 	str.w	r1, [r2], #4
 800a916:	d1f9      	bne.n	800a90c <arm_fir_decimate_f32+0x344>
 800a918:	b00d      	add	sp, #52	; 0x34
 800a91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a91e:	9802      	ldr	r0, [sp, #8]
 800a920:	4632      	mov	r2, r6
 800a922:	eddf 7a06 	vldr	s15, [pc, #24]	; 800a93c <arm_fir_decimate_f32+0x374>
 800a926:	e7b4      	b.n	800a892 <arm_fir_decimate_f32+0x2ca>
 800a928:	4648      	mov	r0, r9
 800a92a:	9a02      	ldr	r2, [sp, #8]
 800a92c:	eef0 5a41 	vmov.f32	s11, s2
 800a930:	eeb0 5a41 	vmov.f32	s10, s2
 800a934:	eef0 4a41 	vmov.f32	s9, s2
 800a938:	e720      	b.n	800a77c <arm_fir_decimate_f32+0x1b4>
 800a93a:	bf00      	nop
 800a93c:	00000000 	.word	0x00000000

0800a940 <arm_cmplx_mult_cmplx_f32>:
 800a940:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a942:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800a946:	d073      	beq.n	800aa30 <arm_cmplx_mult_cmplx_f32+0xf0>
 800a948:	f100 0620 	add.w	r6, r0, #32
 800a94c:	f101 0520 	add.w	r5, r1, #32
 800a950:	f102 0420 	add.w	r4, r2, #32
 800a954:	4677      	mov	r7, lr
 800a956:	ed16 7a08 	vldr	s14, [r6, #-32]	; 0xffffffe0
 800a95a:	3f01      	subs	r7, #1
 800a95c:	ed55 7a08 	vldr	s15, [r5, #-32]	; 0xffffffe0
 800a960:	f106 0620 	add.w	r6, r6, #32
 800a964:	ed56 5a0f 	vldr	s11, [r6, #-60]	; 0xffffffc4
 800a968:	f105 0520 	add.w	r5, r5, #32
 800a96c:	ed55 6a0f 	vldr	s13, [r5, #-60]	; 0xffffffc4
 800a970:	ee27 3a27 	vmul.f32	s6, s14, s15
 800a974:	ee67 4aa5 	vmul.f32	s9, s15, s11
 800a978:	ed16 6a0e 	vldr	s12, [r6, #-56]	; 0xffffffc8
 800a97c:	ee25 4aa6 	vmul.f32	s8, s11, s13
 800a980:	ed55 7a0e 	vldr	s15, [r5, #-56]	; 0xffffffc8
 800a984:	ee67 6a26 	vmul.f32	s13, s14, s13
 800a988:	ed15 5a0d 	vldr	s10, [r5, #-52]	; 0xffffffcc
 800a98c:	ed56 2a0d 	vldr	s5, [r6, #-52]	; 0xffffffcc
 800a990:	ee66 3a27 	vmul.f32	s7, s12, s15
 800a994:	ee66 5a05 	vmul.f32	s11, s12, s10
 800a998:	ed16 7a0c 	vldr	s14, [r6, #-48]	; 0xffffffd0
 800a99c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a9a0:	ed15 6a0c 	vldr	s12, [r5, #-48]	; 0xffffffd0
 800a9a4:	ee25 5a22 	vmul.f32	s10, s10, s5
 800a9a8:	f104 0420 	add.w	r4, r4, #32
 800a9ac:	ee33 4a44 	vsub.f32	s8, s6, s8
 800a9b0:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800a9b4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800a9b8:	ed04 4a10 	vstr	s8, [r4, #-64]	; 0xffffffc0
 800a9bc:	ee67 4a06 	vmul.f32	s9, s14, s12
 800a9c0:	ed16 5a0b 	vldr	s10, [r6, #-44]	; 0xffffffd4
 800a9c4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a9c8:	ed44 6a0f 	vstr	s13, [r4, #-60]	; 0xffffffc4
 800a9cc:	ed55 6a0b 	vldr	s13, [r5, #-44]	; 0xffffffd4
 800a9d0:	ee66 5a05 	vmul.f32	s11, s12, s10
 800a9d4:	ed44 3a0e 	vstr	s7, [r4, #-56]	; 0xffffffc8
 800a9d8:	ee25 5a26 	vmul.f32	s10, s10, s13
 800a9dc:	ed44 7a0d 	vstr	s15, [r4, #-52]	; 0xffffffcc
 800a9e0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a9e4:	ed56 7a0a 	vldr	s15, [r6, #-40]	; 0xffffffd8
 800a9e8:	ed55 6a0a 	vldr	s13, [r5, #-40]	; 0xffffffd8
 800a9ec:	ed16 6a09 	vldr	s12, [r6, #-36]	; 0xffffffdc
 800a9f0:	ee34 5ac5 	vsub.f32	s10, s9, s10
 800a9f4:	ed15 4a09 	vldr	s8, [r5, #-36]	; 0xffffffdc
 800a9f8:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800a9fc:	ee66 6a86 	vmul.f32	s13, s13, s12
 800aa00:	ee67 7a84 	vmul.f32	s15, s15, s8
 800aa04:	ed04 5a0c 	vstr	s10, [r4, #-48]	; 0xffffffd0
 800aa08:	ee26 6a04 	vmul.f32	s12, s12, s8
 800aa0c:	ee37 7a25 	vadd.f32	s14, s14, s11
 800aa10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa14:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800aa18:	ed04 7a0b 	vstr	s14, [r4, #-44]	; 0xffffffd4
 800aa1c:	ed44 7a09 	vstr	s15, [r4, #-36]	; 0xffffffdc
 800aa20:	ed04 6a0a 	vstr	s12, [r4, #-40]	; 0xffffffd8
 800aa24:	d197      	bne.n	800a956 <arm_cmplx_mult_cmplx_f32+0x16>
 800aa26:	ea4f 144e 	mov.w	r4, lr, lsl #5
 800aa2a:	4420      	add	r0, r4
 800aa2c:	4421      	add	r1, r4
 800aa2e:	4422      	add	r2, r4
 800aa30:	f013 0303 	ands.w	r3, r3, #3
 800aa34:	d022      	beq.n	800aa7c <arm_cmplx_mult_cmplx_f32+0x13c>
 800aa36:	3008      	adds	r0, #8
 800aa38:	3108      	adds	r1, #8
 800aa3a:	3208      	adds	r2, #8
 800aa3c:	ed50 7a02 	vldr	s15, [r0, #-8]
 800aa40:	3b01      	subs	r3, #1
 800aa42:	ed11 7a02 	vldr	s14, [r1, #-8]
 800aa46:	f100 0008 	add.w	r0, r0, #8
 800aa4a:	ed50 6a03 	vldr	s13, [r0, #-12]
 800aa4e:	f101 0108 	add.w	r1, r1, #8
 800aa52:	ed51 5a03 	vldr	s11, [r1, #-12]
 800aa56:	ee27 6a87 	vmul.f32	s12, s15, s14
 800aa5a:	ee26 7a87 	vmul.f32	s14, s13, s14
 800aa5e:	f102 0208 	add.w	r2, r2, #8
 800aa62:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800aa66:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800aa6a:	ee76 6a66 	vsub.f32	s13, s12, s13
 800aa6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa72:	ed42 6a04 	vstr	s13, [r2, #-16]
 800aa76:	ed42 7a03 	vstr	s15, [r2, #-12]
 800aa7a:	d1df      	bne.n	800aa3c <arm_cmplx_mult_cmplx_f32+0xfc>
 800aa7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa7e:	bf00      	nop

0800aa80 <arm_radix8_butterfly_f32>:
 800aa80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa84:	469e      	mov	lr, r3
 800aa86:	4603      	mov	r3, r0
 800aa88:	468a      	mov	sl, r1
 800aa8a:	468b      	mov	fp, r1
 800aa8c:	3304      	adds	r3, #4
 800aa8e:	ed2d 8b10 	vpush	{d8-d15}
 800aa92:	469c      	mov	ip, r3
 800aa94:	b09d      	sub	sp, #116	; 0x74
 800aa96:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 800ada4 <arm_radix8_butterfly_f32+0x324>
 800aa9a:	9019      	str	r0, [sp, #100]	; 0x64
 800aa9c:	921a      	str	r2, [sp, #104]	; 0x68
 800aa9e:	931b      	str	r3, [sp, #108]	; 0x6c
 800aaa0:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800aaa4:	f04f 0800 	mov.w	r8, #0
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	9311      	str	r3, [sp, #68]	; 0x44
 800aaac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aab0:	4611      	mov	r1, r2
 800aab2:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	0053      	lsls	r3, r2, #1
 800aaba:	18d5      	adds	r5, r2, r3
 800aabc:	9301      	str	r3, [sp, #4]
 800aabe:	0113      	lsls	r3, r2, #4
 800aac0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800aac2:	194c      	adds	r4, r1, r5
 800aac4:	eb02 0609 	add.w	r6, r2, r9
 800aac8:	9302      	str	r3, [sp, #8]
 800aaca:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800aace:	4613      	mov	r3, r2
 800aad0:	190a      	adds	r2, r1, r4
 800aad2:	eb06 0709 	add.w	r7, r6, r9
 800aad6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800aada:	1888      	adds	r0, r1, r2
 800aadc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800aae0:	4401      	add	r1, r0
 800aae2:	3204      	adds	r2, #4
 800aae4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800aae8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800aaec:	9b00      	ldr	r3, [sp, #0]
 800aaee:	3104      	adds	r1, #4
 800aaf0:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800aaf4:	44d8      	add	r8, fp
 800aaf6:	ed90 7a00 	vldr	s14, [r0]
 800aafa:	ed94 5a00 	vldr	s10, [r4]
 800aafe:	45c2      	cmp	sl, r8
 800ab00:	edd7 3a00 	vldr	s7, [r7]
 800ab04:	ed96 6a00 	vldr	s12, [r6]
 800ab08:	ee37 1a85 	vadd.f32	s2, s15, s10
 800ab0c:	ed52 6a01 	vldr	s13, [r2, #-4]
 800ab10:	ee73 4a87 	vadd.f32	s9, s7, s14
 800ab14:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800ab18:	edd5 7a00 	vldr	s15, [r5]
 800ab1c:	ee73 3ac7 	vsub.f32	s7, s7, s14
 800ab20:	ed11 7a01 	vldr	s14, [r1, #-4]
 800ab24:	ee36 2a26 	vadd.f32	s4, s12, s13
 800ab28:	ee37 4a87 	vadd.f32	s8, s15, s14
 800ab2c:	ee76 6a66 	vsub.f32	s13, s12, s13
 800ab30:	ee71 5a24 	vadd.f32	s11, s2, s9
 800ab34:	ee32 6a04 	vadd.f32	s12, s4, s8
 800ab38:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800ab3c:	ee31 1a64 	vsub.f32	s2, s2, s9
 800ab40:	ee75 4a86 	vadd.f32	s9, s11, s12
 800ab44:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800ab48:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800ab4c:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800ab50:	ee32 2a44 	vsub.f32	s4, s4, s8
 800ab54:	ee67 7a89 	vmul.f32	s15, s15, s18
 800ab58:	ed94 0a01 	vldr	s0, [r4, #4]
 800ab5c:	edc4 5a00 	vstr	s11, [r4]
 800ab60:	ee36 7a87 	vadd.f32	s14, s13, s14
 800ab64:	edd6 5a01 	vldr	s11, [r6, #4]
 800ab68:	edd5 2a01 	vldr	s5, [r5, #4]
 800ab6c:	ee75 1a27 	vadd.f32	s3, s10, s15
 800ab70:	ed92 4a00 	vldr	s8, [r2]
 800ab74:	ee75 7a67 	vsub.f32	s15, s10, s15
 800ab78:	edd1 4a00 	vldr	s9, [r1]
 800ab7c:	ee27 7a09 	vmul.f32	s14, s14, s18
 800ab80:	ee35 3ac4 	vsub.f32	s6, s11, s8
 800ab84:	ed9c 6a00 	vldr	s12, [ip]
 800ab88:	ee72 6ae4 	vsub.f32	s13, s5, s9
 800ab8c:	edd0 0a01 	vldr	s1, [r0, #4]
 800ab90:	ed97 5a01 	vldr	s10, [r7, #4]
 800ab94:	ee35 4a84 	vadd.f32	s8, s11, s8
 800ab98:	ee72 4aa4 	vadd.f32	s9, s5, s9
 800ab9c:	ee73 5a26 	vadd.f32	s11, s6, s13
 800aba0:	ee76 2a00 	vadd.f32	s5, s12, s0
 800aba4:	ee73 6a66 	vsub.f32	s13, s6, s13
 800aba8:	ee36 6a40 	vsub.f32	s12, s12, s0
 800abac:	ee35 0a20 	vadd.f32	s0, s10, s1
 800abb0:	ee65 5a89 	vmul.f32	s11, s11, s18
 800abb4:	ee35 5a60 	vsub.f32	s10, s10, s1
 800abb8:	ee32 3a80 	vadd.f32	s6, s5, s0
 800abbc:	ee74 0a24 	vadd.f32	s1, s8, s9
 800abc0:	ee66 6a89 	vmul.f32	s13, s13, s18
 800abc4:	ee74 4a64 	vsub.f32	s9, s8, s9
 800abc8:	ee32 4ac0 	vsub.f32	s8, s5, s0
 800abcc:	ee75 2a25 	vadd.f32	s5, s10, s11
 800abd0:	ee33 0a20 	vadd.f32	s0, s6, s1
 800abd4:	ee75 5a65 	vsub.f32	s11, s10, s11
 800abd8:	ee33 3a60 	vsub.f32	s6, s6, s1
 800abdc:	ee36 5a26 	vadd.f32	s10, s12, s13
 800abe0:	ed8c 0a00 	vstr	s0, [ip]
 800abe4:	ee76 6a66 	vsub.f32	s13, s12, s13
 800abe8:	449c      	add	ip, r3
 800abea:	ee33 6a87 	vadd.f32	s12, s7, s14
 800abee:	ed84 3a01 	vstr	s6, [r4, #4]
 800abf2:	ee33 7ac7 	vsub.f32	s14, s7, s14
 800abf6:	441c      	add	r4, r3
 800abf8:	ee71 3a24 	vadd.f32	s7, s2, s9
 800abfc:	ee71 4a64 	vsub.f32	s9, s2, s9
 800ac00:	ee31 3aa2 	vadd.f32	s6, s3, s5
 800ac04:	edc7 3a00 	vstr	s7, [r7]
 800ac08:	ee34 1a42 	vsub.f32	s2, s8, s4
 800ac0c:	edc0 4a00 	vstr	s9, [r0]
 800ac10:	ee77 3aa5 	vadd.f32	s7, s15, s11
 800ac14:	ee75 4a46 	vsub.f32	s9, s10, s12
 800ac18:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800ac1c:	ed87 1a01 	vstr	s2, [r7, #4]
 800ac20:	ee76 5ac7 	vsub.f32	s11, s13, s14
 800ac24:	441f      	add	r7, r3
 800ac26:	ee32 4a04 	vadd.f32	s8, s4, s8
 800ac2a:	ee71 1ae2 	vsub.f32	s3, s3, s5
 800ac2e:	ee36 6a05 	vadd.f32	s12, s12, s10
 800ac32:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ac36:	ed80 4a01 	vstr	s8, [r0, #4]
 800ac3a:	ed86 3a00 	vstr	s6, [r6]
 800ac3e:	4418      	add	r0, r3
 800ac40:	ed41 1a01 	vstr	s3, [r1, #-4]
 800ac44:	ed42 3a01 	vstr	s7, [r2, #-4]
 800ac48:	edc5 7a00 	vstr	s15, [r5]
 800ac4c:	edc6 4a01 	vstr	s9, [r6, #4]
 800ac50:	441e      	add	r6, r3
 800ac52:	ed81 6a00 	vstr	s12, [r1]
 800ac56:	4419      	add	r1, r3
 800ac58:	edc2 5a00 	vstr	s11, [r2]
 800ac5c:	441a      	add	r2, r3
 800ac5e:	ed85 7a01 	vstr	s14, [r5, #4]
 800ac62:	441d      	add	r5, r3
 800ac64:	f63f af44 	bhi.w	800aaf0 <arm_radix8_butterfly_f32+0x70>
 800ac68:	9300      	str	r3, [sp, #0]
 800ac6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac6c:	2b07      	cmp	r3, #7
 800ac6e:	f240 81f4 	bls.w	800b05a <arm_radix8_butterfly_f32+0x5da>
 800ac72:	9901      	ldr	r1, [sp, #4]
 800ac74:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800ac78:	9d02      	ldr	r5, [sp, #8]
 800ac7a:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 800ac7e:	3101      	adds	r1, #1
 800ac80:	eb04 000e 	add.w	r0, r4, lr
 800ac84:	00e4      	lsls	r4, r4, #3
 800ac86:	3508      	adds	r5, #8
 800ac88:	4419      	add	r1, r3
 800ac8a:	eb00 0c0e 	add.w	ip, r0, lr
 800ac8e:	9413      	str	r4, [sp, #76]	; 0x4c
 800ac90:	00c0      	lsls	r0, r0, #3
 800ac92:	185e      	adds	r6, r3, r1
 800ac94:	4617      	mov	r7, r2
 800ac96:	9218      	str	r2, [sp, #96]	; 0x60
 800ac98:	f109 0908 	add.w	r9, r9, #8
 800ac9c:	199c      	adds	r4, r3, r6
 800ac9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aca0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aca2:	9012      	str	r0, [sp, #72]	; 0x48
 800aca4:	195d      	adds	r5, r3, r5
 800aca6:	9811      	ldr	r0, [sp, #68]	; 0x44
 800aca8:	443a      	add	r2, r7
 800acaa:	950c      	str	r5, [sp, #48]	; 0x30
 800acac:	4698      	mov	r8, r3
 800acae:	4420      	add	r0, r4
 800acb0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800acb2:	19d7      	adds	r7, r2, r7
 800acb4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800acb8:	4405      	add	r5, r0
 800acba:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800acbe:	9710      	str	r7, [sp, #64]	; 0x40
 800acc0:	eb0c 070e 	add.w	r7, ip, lr
 800acc4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800acc8:	3404      	adds	r4, #4
 800acca:	3004      	adds	r0, #4
 800accc:	44c8      	add	r8, r9
 800acce:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 800acd2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800acd4:	940a      	str	r4, [sp, #40]	; 0x28
 800acd6:	9009      	str	r0, [sp, #36]	; 0x24
 800acd8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800acdc:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800acde:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ace2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800ace4:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800ace8:	eb07 080e 	add.w	r8, r7, lr
 800acec:	eb04 0900 	add.w	r9, r4, r0
 800acf0:	00f8      	lsls	r0, r7, #3
 800acf2:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 800acf6:	3504      	adds	r5, #4
 800acf8:	4607      	mov	r7, r0
 800acfa:	9017      	str	r0, [sp, #92]	; 0x5c
 800acfc:	910b      	str	r1, [sp, #44]	; 0x2c
 800acfe:	4618      	mov	r0, r3
 800ad00:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 800ad04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad06:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 800ad0a:	18e3      	adds	r3, r4, r3
 800ad0c:	9508      	str	r5, [sp, #32]
 800ad0e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800ad10:	910e      	str	r1, [sp, #56]	; 0x38
 800ad12:	4621      	mov	r1, r4
 800ad14:	eb04 0805 	add.w	r8, r4, r5
 800ad18:	9304      	str	r3, [sp, #16]
 800ad1a:	19e5      	adds	r5, r4, r7
 800ad1c:	ea4f 130e 	mov.w	r3, lr, lsl #4
 800ad20:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800ad22:	9316      	str	r3, [sp, #88]	; 0x58
 800ad24:	190b      	adds	r3, r1, r4
 800ad26:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800ad28:	9505      	str	r5, [sp, #20]
 800ad2a:	9303      	str	r3, [sp, #12]
 800ad2c:	f100 0308 	add.w	r3, r0, #8
 800ad30:	9707      	str	r7, [sp, #28]
 800ad32:	4638      	mov	r0, r7
 800ad34:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad36:	2301      	movs	r3, #1
 800ad38:	9306      	str	r3, [sp, #24]
 800ad3a:	9b00      	ldr	r3, [sp, #0]
 800ad3c:	ed90 fa00 	vldr	s30, [r0]
 800ad40:	edd0 ba01 	vldr	s23, [r0, #4]
 800ad44:	9803      	ldr	r0, [sp, #12]
 800ad46:	9903      	ldr	r1, [sp, #12]
 800ad48:	ed90 ba01 	vldr	s22, [r0, #4]
 800ad4c:	9804      	ldr	r0, [sp, #16]
 800ad4e:	edd1 ea00 	vldr	s29, [r1]
 800ad52:	edd0 aa01 	vldr	s21, [r0, #4]
 800ad56:	9805      	ldr	r0, [sp, #20]
 800ad58:	9905      	ldr	r1, [sp, #20]
 800ad5a:	edd0 7a01 	vldr	s15, [r0, #4]
 800ad5e:	ed91 da00 	vldr	s26, [r1]
 800ad62:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ad64:	9c04      	ldr	r4, [sp, #16]
 800ad66:	edcd 7a01 	vstr	s15, [sp, #4]
 800ad6a:	edd8 7a01 	vldr	s15, [r8, #4]
 800ad6e:	9100      	str	r1, [sp, #0]
 800ad70:	edd2 fa00 	vldr	s31, [r2]
 800ad74:	ed94 ea00 	vldr	s28, [r4]
 800ad78:	ed92 ca01 	vldr	s24, [r2, #4]
 800ad7c:	f8dd e020 	ldr.w	lr, [sp, #32]
 800ad80:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ad82:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ad84:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ad86:	edd9 da00 	vldr	s27, [r9]
 800ad8a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ad8c:	edd8 ca00 	vldr	s25, [r8]
 800ad90:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ad92:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad94:	f8dd c018 	ldr.w	ip, [sp, #24]
 800ad98:	ed99 aa01 	vldr	s20, [r9, #4]
 800ad9c:	edcd 7a02 	vstr	s15, [sp, #8]
 800ada0:	9800      	ldr	r0, [sp, #0]
 800ada2:	e001      	b.n	800ada8 <arm_radix8_butterfly_f32+0x328>
 800ada4:	3f3504f3 	.word	0x3f3504f3
 800ada8:	edd5 3a00 	vldr	s7, [r5]
 800adac:	44dc      	add	ip, fp
 800adae:	ed91 7a00 	vldr	s14, [r1]
 800adb2:	edd4 8a00 	vldr	s17, [r4]
 800adb6:	45e2      	cmp	sl, ip
 800adb8:	ed57 7a01 	vldr	s15, [r7, #-4]
 800adbc:	ed90 5a00 	vldr	s10, [r0]
 800adc0:	ed56 5a01 	vldr	s11, [r6, #-4]
 800adc4:	ee38 6aa7 	vadd.f32	s12, s17, s15
 800adc8:	ed92 1a00 	vldr	s2, [r2]
 800adcc:	ee78 4ae7 	vsub.f32	s9, s17, s15
 800add0:	ed1e 4a01 	vldr	s8, [lr, #-4]
 800add4:	ee75 9a25 	vadd.f32	s19, s10, s11
 800add8:	ee31 3a07 	vadd.f32	s6, s2, s14
 800addc:	ed92 8a01 	vldr	s16, [r2, #4]
 800ade0:	ee73 6a84 	vadd.f32	s13, s7, s8
 800ade4:	ee75 5a65 	vsub.f32	s11, s10, s11
 800ade8:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800adec:	ee73 1a06 	vadd.f32	s3, s6, s12
 800adf0:	ee39 5aa6 	vadd.f32	s10, s19, s13
 800adf4:	ee75 7a84 	vadd.f32	s15, s11, s8
 800adf8:	ee31 1a47 	vsub.f32	s2, s2, s14
 800adfc:	ee31 7a85 	vadd.f32	s14, s3, s10
 800ae00:	ee67 7a89 	vmul.f32	s15, s15, s18
 800ae04:	ee33 3a46 	vsub.f32	s6, s6, s12
 800ae08:	ed82 7a00 	vstr	s14, [r2]
 800ae0c:	ee79 9ae6 	vsub.f32	s19, s19, s13
 800ae10:	ed96 6a00 	vldr	s12, [r6]
 800ae14:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800ae18:	edd5 3a01 	vldr	s7, [r5, #4]
 800ae1c:	ee74 8ae7 	vsub.f32	s17, s9, s15
 800ae20:	ed90 7a01 	vldr	s14, [r0, #4]
 800ae24:	ee35 4ac4 	vsub.f32	s8, s11, s8
 800ae28:	edde 4a00 	vldr	s9, [lr]
 800ae2c:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800ae30:	ee77 2a46 	vsub.f32	s5, s14, s12
 800ae34:	edd1 6a01 	vldr	s13, [r1, #4]
 800ae38:	ee73 7ae4 	vsub.f32	s15, s7, s9
 800ae3c:	edd7 0a00 	vldr	s1, [r7]
 800ae40:	ee77 5a06 	vadd.f32	s11, s14, s12
 800ae44:	ed94 7a01 	vldr	s14, [r4, #4]
 800ae48:	ee33 6aa4 	vadd.f32	s12, s7, s9
 800ae4c:	ee32 0ae7 	vsub.f32	s0, s5, s15
 800ae50:	ee78 4a66 	vsub.f32	s9, s16, s13
 800ae54:	ee78 3a26 	vadd.f32	s7, s16, s13
 800ae58:	ee72 2aa7 	vadd.f32	s5, s5, s15
 800ae5c:	ee77 6a20 	vadd.f32	s13, s14, s1
 800ae60:	ee24 4a09 	vmul.f32	s8, s8, s18
 800ae64:	ee37 7a60 	vsub.f32	s14, s14, s1
 800ae68:	ee20 8a09 	vmul.f32	s16, s0, s18
 800ae6c:	ee75 0a86 	vadd.f32	s1, s11, s12
 800ae70:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800ae74:	ee62 2a89 	vmul.f32	s5, s5, s18
 800ae78:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800ae7c:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800ae80:	ee77 7a62 	vsub.f32	s15, s14, s5
 800ae84:	ee74 5a88 	vadd.f32	s11, s9, s16
 800ae88:	ee34 8ac8 	vsub.f32	s16, s9, s16
 800ae8c:	ee77 4a22 	vadd.f32	s9, s14, s5
 800ae90:	ee71 2a04 	vadd.f32	s5, s2, s8
 800ae94:	ee31 7a44 	vsub.f32	s14, s2, s8
 800ae98:	ee30 1a60 	vsub.f32	s2, s0, s1
 800ae9c:	ee73 1a06 	vadd.f32	s3, s6, s12
 800aea0:	ee33 6a46 	vsub.f32	s12, s6, s12
 800aea4:	ee33 3ae9 	vsub.f32	s6, s7, s19
 800aea8:	ee79 6aa3 	vadd.f32	s13, s19, s7
 800aeac:	ee38 4a68 	vsub.f32	s8, s16, s17
 800aeb0:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800aeb4:	ee72 5a25 	vadd.f32	s11, s4, s11
 800aeb8:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800aebc:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800aec0:	ee77 2a27 	vadd.f32	s5, s14, s15
 800aec4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aec8:	ee78 7a88 	vadd.f32	s15, s17, s16
 800aecc:	ee6e 8a05 	vmul.f32	s17, s28, s10
 800aed0:	ee2a 8a81 	vmul.f32	s16, s21, s2
 800aed4:	ee2a 5a85 	vmul.f32	s10, s21, s10
 800aed8:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800aedc:	ee6f 9a21 	vmul.f32	s19, s30, s3
 800aee0:	ee70 0a20 	vadd.f32	s1, s0, s1
 800aee4:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 800aee8:	ee2b 0a83 	vmul.f32	s0, s23, s6
 800aeec:	ee2f 3a03 	vmul.f32	s6, s30, s6
 800aef0:	edc2 0a01 	vstr	s1, [r2, #4]
 800aef4:	ee38 8a88 	vadd.f32	s16, s17, s16
 800aef8:	441a      	add	r2, r3
 800aefa:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800aefe:	ee31 5a45 	vsub.f32	s10, s2, s10
 800af02:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 800af06:	ed81 8a00 	vstr	s16, [r1]
 800af0a:	ee39 0a80 	vadd.f32	s0, s19, s0
 800af0e:	ee33 3a61 	vsub.f32	s6, s6, s3
 800af12:	ed81 5a01 	vstr	s10, [r1, #4]
 800af16:	ee6f 0a82 	vmul.f32	s1, s31, s4
 800af1a:	edcd 3a00 	vstr	s7, [sp]
 800af1e:	ed9d 5a02 	vldr	s10, [sp, #8]
 800af22:	ee2d 8a06 	vmul.f32	s16, s26, s12
 800af26:	eddd 3a01 	vldr	s7, [sp, #4]
 800af2a:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800af2e:	ed84 0a00 	vstr	s0, [r4]
 800af32:	ee65 4a24 	vmul.f32	s9, s10, s9
 800af36:	ed84 3a01 	vstr	s6, [r4, #4]
 800af3a:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800af3e:	ee23 6a86 	vmul.f32	s12, s7, s12
 800af42:	eddd 3a00 	vldr	s7, [sp]
 800af46:	ee25 5a25 	vmul.f32	s10, s10, s11
 800af4a:	4419      	add	r1, r3
 800af4c:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 800af50:	441c      	add	r4, r3
 800af52:	ee6a 1a04 	vmul.f32	s3, s20, s8
 800af56:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800af5a:	ee2e 3a87 	vmul.f32	s6, s29, s14
 800af5e:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800af62:	ee2c 2a02 	vmul.f32	s4, s24, s4
 800af66:	ee6d 6a26 	vmul.f32	s13, s26, s13
 800af6a:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 800af6e:	ee6a 2a22 	vmul.f32	s5, s20, s5
 800af72:	ee2d 4a84 	vmul.f32	s8, s27, s8
 800af76:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800af7a:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 800af7e:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800af82:	ee38 8a01 	vadd.f32	s16, s16, s2
 800af86:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800af8a:	ee39 5a85 	vadd.f32	s10, s19, s10
 800af8e:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800af92:	ed07 8a01 	vstr	s16, [r7, #-4]
 800af96:	ee30 0a21 	vadd.f32	s0, s0, s3
 800af9a:	ed87 6a00 	vstr	s12, [r7]
 800af9e:	ee74 2a62 	vsub.f32	s5, s8, s5
 800afa2:	edc0 0a00 	vstr	s1, [r0]
 800afa6:	ee33 3a28 	vadd.f32	s6, s6, s17
 800afaa:	edc0 3a01 	vstr	s7, [r0, #4]
 800afae:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800afb2:	ed0e 5a01 	vstr	s10, [lr, #-4]
 800afb6:	edce 4a00 	vstr	s9, [lr]
 800afba:	4418      	add	r0, r3
 800afbc:	ed06 0a01 	vstr	s0, [r6, #-4]
 800afc0:	441f      	add	r7, r3
 800afc2:	edc6 2a00 	vstr	s5, [r6]
 800afc6:	449e      	add	lr, r3
 800afc8:	ed85 3a00 	vstr	s6, [r5]
 800afcc:	441e      	add	r6, r3
 800afce:	ed85 7a01 	vstr	s14, [r5, #4]
 800afd2:	441d      	add	r5, r3
 800afd4:	f63f aee8 	bhi.w	800ada8 <arm_radix8_butterfly_f32+0x328>
 800afd8:	9a06      	ldr	r2, [sp, #24]
 800afda:	9816      	ldr	r0, [sp, #88]	; 0x58
 800afdc:	3201      	adds	r2, #1
 800afde:	4611      	mov	r1, r2
 800afe0:	9206      	str	r2, [sp, #24]
 800afe2:	9a07      	ldr	r2, [sp, #28]
 800afe4:	4402      	add	r2, r0
 800afe6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800afe8:	9207      	str	r2, [sp, #28]
 800afea:	9a03      	ldr	r2, [sp, #12]
 800afec:	4402      	add	r2, r0
 800afee:	9812      	ldr	r0, [sp, #72]	; 0x48
 800aff0:	9203      	str	r2, [sp, #12]
 800aff2:	9a04      	ldr	r2, [sp, #16]
 800aff4:	4402      	add	r2, r0
 800aff6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800aff8:	9204      	str	r2, [sp, #16]
 800affa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800affc:	4491      	add	r9, r2
 800affe:	9a05      	ldr	r2, [sp, #20]
 800b000:	4402      	add	r2, r0
 800b002:	9205      	str	r2, [sp, #20]
 800b004:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b006:	4490      	add	r8, r2
 800b008:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b00a:	3208      	adds	r2, #8
 800b00c:	920f      	str	r2, [sp, #60]	; 0x3c
 800b00e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b010:	3208      	adds	r2, #8
 800b012:	920e      	str	r2, [sp, #56]	; 0x38
 800b014:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b016:	3208      	adds	r2, #8
 800b018:	920d      	str	r2, [sp, #52]	; 0x34
 800b01a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b01c:	3208      	adds	r2, #8
 800b01e:	920c      	str	r2, [sp, #48]	; 0x30
 800b020:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b022:	3208      	adds	r2, #8
 800b024:	920b      	str	r2, [sp, #44]	; 0x2c
 800b026:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b028:	3208      	adds	r2, #8
 800b02a:	920a      	str	r2, [sp, #40]	; 0x28
 800b02c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b02e:	3208      	adds	r2, #8
 800b030:	9209      	str	r2, [sp, #36]	; 0x24
 800b032:	9a08      	ldr	r2, [sp, #32]
 800b034:	3208      	adds	r2, #8
 800b036:	9208      	str	r2, [sp, #32]
 800b038:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800b03a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b03c:	4622      	mov	r2, r4
 800b03e:	4288      	cmp	r0, r1
 800b040:	d005      	beq.n	800b04e <arm_radix8_butterfly_f32+0x5ce>
 800b042:	9818      	ldr	r0, [sp, #96]	; 0x60
 800b044:	4621      	mov	r1, r4
 800b046:	4401      	add	r1, r0
 800b048:	9807      	ldr	r0, [sp, #28]
 800b04a:	9110      	str	r1, [sp, #64]	; 0x40
 800b04c:	e676      	b.n	800ad3c <arm_radix8_butterfly_f32+0x2bc>
 800b04e:	4683      	mov	fp, r0
 800b050:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 800b054:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 800b058:	e522      	b.n	800aaa0 <arm_radix8_butterfly_f32+0x20>
 800b05a:	b01d      	add	sp, #116	; 0x74
 800b05c:	ecbd 8b10 	vpop	{d8-d15}
 800b060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b064 <__errno>:
 800b064:	4b01      	ldr	r3, [pc, #4]	; (800b06c <__errno+0x8>)
 800b066:	6818      	ldr	r0, [r3, #0]
 800b068:	4770      	bx	lr
 800b06a:	bf00      	nop
 800b06c:	24000208 	.word	0x24000208

0800b070 <__libc_init_array>:
 800b070:	b570      	push	{r4, r5, r6, lr}
 800b072:	4e0d      	ldr	r6, [pc, #52]	; (800b0a8 <__libc_init_array+0x38>)
 800b074:	4c0d      	ldr	r4, [pc, #52]	; (800b0ac <__libc_init_array+0x3c>)
 800b076:	1ba4      	subs	r4, r4, r6
 800b078:	10a4      	asrs	r4, r4, #2
 800b07a:	2500      	movs	r5, #0
 800b07c:	42a5      	cmp	r5, r4
 800b07e:	d109      	bne.n	800b094 <__libc_init_array+0x24>
 800b080:	4e0b      	ldr	r6, [pc, #44]	; (800b0b0 <__libc_init_array+0x40>)
 800b082:	4c0c      	ldr	r4, [pc, #48]	; (800b0b4 <__libc_init_array+0x44>)
 800b084:	f003 fd5e 	bl	800eb44 <_init>
 800b088:	1ba4      	subs	r4, r4, r6
 800b08a:	10a4      	asrs	r4, r4, #2
 800b08c:	2500      	movs	r5, #0
 800b08e:	42a5      	cmp	r5, r4
 800b090:	d105      	bne.n	800b09e <__libc_init_array+0x2e>
 800b092:	bd70      	pop	{r4, r5, r6, pc}
 800b094:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b098:	4798      	blx	r3
 800b09a:	3501      	adds	r5, #1
 800b09c:	e7ee      	b.n	800b07c <__libc_init_array+0xc>
 800b09e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b0a2:	4798      	blx	r3
 800b0a4:	3501      	adds	r5, #1
 800b0a6:	e7f2      	b.n	800b08e <__libc_init_array+0x1e>
 800b0a8:	0801df60 	.word	0x0801df60
 800b0ac:	0801df60 	.word	0x0801df60
 800b0b0:	0801df60 	.word	0x0801df60
 800b0b4:	0801df64 	.word	0x0801df64

0800b0b8 <memset>:
 800b0b8:	4402      	add	r2, r0
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d100      	bne.n	800b0c2 <memset+0xa>
 800b0c0:	4770      	bx	lr
 800b0c2:	f803 1b01 	strb.w	r1, [r3], #1
 800b0c6:	e7f9      	b.n	800b0bc <memset+0x4>

0800b0c8 <__cvt>:
 800b0c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0ca:	ed2d 8b02 	vpush	{d8}
 800b0ce:	eeb0 8b40 	vmov.f64	d8, d0
 800b0d2:	b085      	sub	sp, #20
 800b0d4:	4617      	mov	r7, r2
 800b0d6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b0d8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b0da:	ee18 2a90 	vmov	r2, s17
 800b0de:	f025 0520 	bic.w	r5, r5, #32
 800b0e2:	2a00      	cmp	r2, #0
 800b0e4:	bfb6      	itet	lt
 800b0e6:	222d      	movlt	r2, #45	; 0x2d
 800b0e8:	2200      	movge	r2, #0
 800b0ea:	eeb1 8b40 	vneglt.f64	d8, d0
 800b0ee:	2d46      	cmp	r5, #70	; 0x46
 800b0f0:	460c      	mov	r4, r1
 800b0f2:	701a      	strb	r2, [r3, #0]
 800b0f4:	d004      	beq.n	800b100 <__cvt+0x38>
 800b0f6:	2d45      	cmp	r5, #69	; 0x45
 800b0f8:	d100      	bne.n	800b0fc <__cvt+0x34>
 800b0fa:	3401      	adds	r4, #1
 800b0fc:	2102      	movs	r1, #2
 800b0fe:	e000      	b.n	800b102 <__cvt+0x3a>
 800b100:	2103      	movs	r1, #3
 800b102:	ab03      	add	r3, sp, #12
 800b104:	9301      	str	r3, [sp, #4]
 800b106:	ab02      	add	r3, sp, #8
 800b108:	9300      	str	r3, [sp, #0]
 800b10a:	4622      	mov	r2, r4
 800b10c:	4633      	mov	r3, r6
 800b10e:	eeb0 0b48 	vmov.f64	d0, d8
 800b112:	f000 fcc9 	bl	800baa8 <_dtoa_r>
 800b116:	2d47      	cmp	r5, #71	; 0x47
 800b118:	d101      	bne.n	800b11e <__cvt+0x56>
 800b11a:	07fb      	lsls	r3, r7, #31
 800b11c:	d51e      	bpl.n	800b15c <__cvt+0x94>
 800b11e:	2d46      	cmp	r5, #70	; 0x46
 800b120:	eb00 0304 	add.w	r3, r0, r4
 800b124:	d10c      	bne.n	800b140 <__cvt+0x78>
 800b126:	7802      	ldrb	r2, [r0, #0]
 800b128:	2a30      	cmp	r2, #48	; 0x30
 800b12a:	d107      	bne.n	800b13c <__cvt+0x74>
 800b12c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b134:	bf1c      	itt	ne
 800b136:	f1c4 0401 	rsbne	r4, r4, #1
 800b13a:	6034      	strne	r4, [r6, #0]
 800b13c:	6832      	ldr	r2, [r6, #0]
 800b13e:	4413      	add	r3, r2
 800b140:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b148:	d007      	beq.n	800b15a <__cvt+0x92>
 800b14a:	2130      	movs	r1, #48	; 0x30
 800b14c:	9a03      	ldr	r2, [sp, #12]
 800b14e:	429a      	cmp	r2, r3
 800b150:	d204      	bcs.n	800b15c <__cvt+0x94>
 800b152:	1c54      	adds	r4, r2, #1
 800b154:	9403      	str	r4, [sp, #12]
 800b156:	7011      	strb	r1, [r2, #0]
 800b158:	e7f8      	b.n	800b14c <__cvt+0x84>
 800b15a:	9303      	str	r3, [sp, #12]
 800b15c:	9b03      	ldr	r3, [sp, #12]
 800b15e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b160:	1a1b      	subs	r3, r3, r0
 800b162:	6013      	str	r3, [r2, #0]
 800b164:	b005      	add	sp, #20
 800b166:	ecbd 8b02 	vpop	{d8}
 800b16a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b16c <__exponent>:
 800b16c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b16e:	2900      	cmp	r1, #0
 800b170:	4604      	mov	r4, r0
 800b172:	bfba      	itte	lt
 800b174:	4249      	neglt	r1, r1
 800b176:	232d      	movlt	r3, #45	; 0x2d
 800b178:	232b      	movge	r3, #43	; 0x2b
 800b17a:	2909      	cmp	r1, #9
 800b17c:	f804 2b02 	strb.w	r2, [r4], #2
 800b180:	7043      	strb	r3, [r0, #1]
 800b182:	dd20      	ble.n	800b1c6 <__exponent+0x5a>
 800b184:	f10d 0307 	add.w	r3, sp, #7
 800b188:	461f      	mov	r7, r3
 800b18a:	260a      	movs	r6, #10
 800b18c:	fb91 f5f6 	sdiv	r5, r1, r6
 800b190:	fb06 1115 	mls	r1, r6, r5, r1
 800b194:	3130      	adds	r1, #48	; 0x30
 800b196:	2d09      	cmp	r5, #9
 800b198:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b19c:	f103 32ff 	add.w	r2, r3, #4294967295
 800b1a0:	4629      	mov	r1, r5
 800b1a2:	dc09      	bgt.n	800b1b8 <__exponent+0x4c>
 800b1a4:	3130      	adds	r1, #48	; 0x30
 800b1a6:	3b02      	subs	r3, #2
 800b1a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b1ac:	42bb      	cmp	r3, r7
 800b1ae:	4622      	mov	r2, r4
 800b1b0:	d304      	bcc.n	800b1bc <__exponent+0x50>
 800b1b2:	1a10      	subs	r0, r2, r0
 800b1b4:	b003      	add	sp, #12
 800b1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	e7e7      	b.n	800b18c <__exponent+0x20>
 800b1bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1c0:	f804 2b01 	strb.w	r2, [r4], #1
 800b1c4:	e7f2      	b.n	800b1ac <__exponent+0x40>
 800b1c6:	2330      	movs	r3, #48	; 0x30
 800b1c8:	4419      	add	r1, r3
 800b1ca:	7083      	strb	r3, [r0, #2]
 800b1cc:	1d02      	adds	r2, r0, #4
 800b1ce:	70c1      	strb	r1, [r0, #3]
 800b1d0:	e7ef      	b.n	800b1b2 <__exponent+0x46>
 800b1d2:	0000      	movs	r0, r0
 800b1d4:	0000      	movs	r0, r0
	...

0800b1d8 <_printf_float>:
 800b1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1dc:	b08d      	sub	sp, #52	; 0x34
 800b1de:	460c      	mov	r4, r1
 800b1e0:	4616      	mov	r6, r2
 800b1e2:	461f      	mov	r7, r3
 800b1e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b1e8:	4605      	mov	r5, r0
 800b1ea:	f001 f9a9 	bl	800c540 <_localeconv_r>
 800b1ee:	f8d0 b000 	ldr.w	fp, [r0]
 800b1f2:	4658      	mov	r0, fp
 800b1f4:	f7f5 f8d4 	bl	80003a0 <strlen>
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	930a      	str	r3, [sp, #40]	; 0x28
 800b1fc:	f8d8 3000 	ldr.w	r3, [r8]
 800b200:	9005      	str	r0, [sp, #20]
 800b202:	3307      	adds	r3, #7
 800b204:	f023 0307 	bic.w	r3, r3, #7
 800b208:	f103 0108 	add.w	r1, r3, #8
 800b20c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b210:	6822      	ldr	r2, [r4, #0]
 800b212:	f8c8 1000 	str.w	r1, [r8]
 800b216:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b21a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800b21e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 800b4a8 <_printf_float+0x2d0>
 800b222:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800b226:	eeb0 6bc0 	vabs.f64	d6, d0
 800b22a:	eeb4 6b47 	vcmp.f64	d6, d7
 800b22e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b232:	dd24      	ble.n	800b27e <_printf_float+0xa6>
 800b234:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b23c:	d502      	bpl.n	800b244 <_printf_float+0x6c>
 800b23e:	232d      	movs	r3, #45	; 0x2d
 800b240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b244:	499a      	ldr	r1, [pc, #616]	; (800b4b0 <_printf_float+0x2d8>)
 800b246:	4b9b      	ldr	r3, [pc, #620]	; (800b4b4 <_printf_float+0x2dc>)
 800b248:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b24c:	bf8c      	ite	hi
 800b24e:	4688      	movhi	r8, r1
 800b250:	4698      	movls	r8, r3
 800b252:	f022 0204 	bic.w	r2, r2, #4
 800b256:	2303      	movs	r3, #3
 800b258:	6123      	str	r3, [r4, #16]
 800b25a:	6022      	str	r2, [r4, #0]
 800b25c:	f04f 0a00 	mov.w	sl, #0
 800b260:	9700      	str	r7, [sp, #0]
 800b262:	4633      	mov	r3, r6
 800b264:	aa0b      	add	r2, sp, #44	; 0x2c
 800b266:	4621      	mov	r1, r4
 800b268:	4628      	mov	r0, r5
 800b26a:	f000 f9e1 	bl	800b630 <_printf_common>
 800b26e:	3001      	adds	r0, #1
 800b270:	f040 8089 	bne.w	800b386 <_printf_float+0x1ae>
 800b274:	f04f 30ff 	mov.w	r0, #4294967295
 800b278:	b00d      	add	sp, #52	; 0x34
 800b27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b27e:	eeb4 0b40 	vcmp.f64	d0, d0
 800b282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b286:	d702      	bvc.n	800b28e <_printf_float+0xb6>
 800b288:	498b      	ldr	r1, [pc, #556]	; (800b4b8 <_printf_float+0x2e0>)
 800b28a:	4b8c      	ldr	r3, [pc, #560]	; (800b4bc <_printf_float+0x2e4>)
 800b28c:	e7dc      	b.n	800b248 <_printf_float+0x70>
 800b28e:	6861      	ldr	r1, [r4, #4]
 800b290:	1c4b      	adds	r3, r1, #1
 800b292:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b296:	ab0a      	add	r3, sp, #40	; 0x28
 800b298:	a809      	add	r0, sp, #36	; 0x24
 800b29a:	d13b      	bne.n	800b314 <_printf_float+0x13c>
 800b29c:	2106      	movs	r1, #6
 800b29e:	6061      	str	r1, [r4, #4]
 800b2a0:	f04f 0c00 	mov.w	ip, #0
 800b2a4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800b2a8:	e9cd 0900 	strd	r0, r9, [sp]
 800b2ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b2b0:	6022      	str	r2, [r4, #0]
 800b2b2:	6861      	ldr	r1, [r4, #4]
 800b2b4:	4628      	mov	r0, r5
 800b2b6:	f7ff ff07 	bl	800b0c8 <__cvt>
 800b2ba:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 800b2be:	2b47      	cmp	r3, #71	; 0x47
 800b2c0:	4680      	mov	r8, r0
 800b2c2:	d109      	bne.n	800b2d8 <_printf_float+0x100>
 800b2c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2c6:	1cd8      	adds	r0, r3, #3
 800b2c8:	db02      	blt.n	800b2d0 <_printf_float+0xf8>
 800b2ca:	6862      	ldr	r2, [r4, #4]
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	dd47      	ble.n	800b360 <_printf_float+0x188>
 800b2d0:	f1a9 0902 	sub.w	r9, r9, #2
 800b2d4:	fa5f f989 	uxtb.w	r9, r9
 800b2d8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b2dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2de:	d824      	bhi.n	800b32a <_printf_float+0x152>
 800b2e0:	3901      	subs	r1, #1
 800b2e2:	464a      	mov	r2, r9
 800b2e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b2e8:	9109      	str	r1, [sp, #36]	; 0x24
 800b2ea:	f7ff ff3f 	bl	800b16c <__exponent>
 800b2ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2f0:	1813      	adds	r3, r2, r0
 800b2f2:	2a01      	cmp	r2, #1
 800b2f4:	4682      	mov	sl, r0
 800b2f6:	6123      	str	r3, [r4, #16]
 800b2f8:	dc02      	bgt.n	800b300 <_printf_float+0x128>
 800b2fa:	6822      	ldr	r2, [r4, #0]
 800b2fc:	07d1      	lsls	r1, r2, #31
 800b2fe:	d501      	bpl.n	800b304 <_printf_float+0x12c>
 800b300:	3301      	adds	r3, #1
 800b302:	6123      	str	r3, [r4, #16]
 800b304:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d0a9      	beq.n	800b260 <_printf_float+0x88>
 800b30c:	232d      	movs	r3, #45	; 0x2d
 800b30e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b312:	e7a5      	b.n	800b260 <_printf_float+0x88>
 800b314:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 800b318:	f000 8178 	beq.w	800b60c <_printf_float+0x434>
 800b31c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b320:	d1be      	bne.n	800b2a0 <_printf_float+0xc8>
 800b322:	2900      	cmp	r1, #0
 800b324:	d1bc      	bne.n	800b2a0 <_printf_float+0xc8>
 800b326:	2101      	movs	r1, #1
 800b328:	e7b9      	b.n	800b29e <_printf_float+0xc6>
 800b32a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b32e:	d119      	bne.n	800b364 <_printf_float+0x18c>
 800b330:	2900      	cmp	r1, #0
 800b332:	6863      	ldr	r3, [r4, #4]
 800b334:	dd0c      	ble.n	800b350 <_printf_float+0x178>
 800b336:	6121      	str	r1, [r4, #16]
 800b338:	b913      	cbnz	r3, 800b340 <_printf_float+0x168>
 800b33a:	6822      	ldr	r2, [r4, #0]
 800b33c:	07d2      	lsls	r2, r2, #31
 800b33e:	d502      	bpl.n	800b346 <_printf_float+0x16e>
 800b340:	3301      	adds	r3, #1
 800b342:	440b      	add	r3, r1
 800b344:	6123      	str	r3, [r4, #16]
 800b346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b348:	65a3      	str	r3, [r4, #88]	; 0x58
 800b34a:	f04f 0a00 	mov.w	sl, #0
 800b34e:	e7d9      	b.n	800b304 <_printf_float+0x12c>
 800b350:	b913      	cbnz	r3, 800b358 <_printf_float+0x180>
 800b352:	6822      	ldr	r2, [r4, #0]
 800b354:	07d0      	lsls	r0, r2, #31
 800b356:	d501      	bpl.n	800b35c <_printf_float+0x184>
 800b358:	3302      	adds	r3, #2
 800b35a:	e7f3      	b.n	800b344 <_printf_float+0x16c>
 800b35c:	2301      	movs	r3, #1
 800b35e:	e7f1      	b.n	800b344 <_printf_float+0x16c>
 800b360:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b364:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b368:	4293      	cmp	r3, r2
 800b36a:	db05      	blt.n	800b378 <_printf_float+0x1a0>
 800b36c:	6822      	ldr	r2, [r4, #0]
 800b36e:	6123      	str	r3, [r4, #16]
 800b370:	07d1      	lsls	r1, r2, #31
 800b372:	d5e8      	bpl.n	800b346 <_printf_float+0x16e>
 800b374:	3301      	adds	r3, #1
 800b376:	e7e5      	b.n	800b344 <_printf_float+0x16c>
 800b378:	2b00      	cmp	r3, #0
 800b37a:	bfd4      	ite	le
 800b37c:	f1c3 0302 	rsble	r3, r3, #2
 800b380:	2301      	movgt	r3, #1
 800b382:	4413      	add	r3, r2
 800b384:	e7de      	b.n	800b344 <_printf_float+0x16c>
 800b386:	6823      	ldr	r3, [r4, #0]
 800b388:	055a      	lsls	r2, r3, #21
 800b38a:	d407      	bmi.n	800b39c <_printf_float+0x1c4>
 800b38c:	6923      	ldr	r3, [r4, #16]
 800b38e:	4642      	mov	r2, r8
 800b390:	4631      	mov	r1, r6
 800b392:	4628      	mov	r0, r5
 800b394:	47b8      	blx	r7
 800b396:	3001      	adds	r0, #1
 800b398:	d12a      	bne.n	800b3f0 <_printf_float+0x218>
 800b39a:	e76b      	b.n	800b274 <_printf_float+0x9c>
 800b39c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b3a0:	f240 80de 	bls.w	800b560 <_printf_float+0x388>
 800b3a4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b3a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3b0:	d133      	bne.n	800b41a <_printf_float+0x242>
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	4a42      	ldr	r2, [pc, #264]	; (800b4c0 <_printf_float+0x2e8>)
 800b3b6:	4631      	mov	r1, r6
 800b3b8:	4628      	mov	r0, r5
 800b3ba:	47b8      	blx	r7
 800b3bc:	3001      	adds	r0, #1
 800b3be:	f43f af59 	beq.w	800b274 <_printf_float+0x9c>
 800b3c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	db02      	blt.n	800b3d0 <_printf_float+0x1f8>
 800b3ca:	6823      	ldr	r3, [r4, #0]
 800b3cc:	07d8      	lsls	r0, r3, #31
 800b3ce:	d50f      	bpl.n	800b3f0 <_printf_float+0x218>
 800b3d0:	9b05      	ldr	r3, [sp, #20]
 800b3d2:	465a      	mov	r2, fp
 800b3d4:	4631      	mov	r1, r6
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	47b8      	blx	r7
 800b3da:	3001      	adds	r0, #1
 800b3dc:	f43f af4a 	beq.w	800b274 <_printf_float+0x9c>
 800b3e0:	f04f 0800 	mov.w	r8, #0
 800b3e4:	f104 091a 	add.w	r9, r4, #26
 800b3e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3ea:	3b01      	subs	r3, #1
 800b3ec:	4543      	cmp	r3, r8
 800b3ee:	dc09      	bgt.n	800b404 <_printf_float+0x22c>
 800b3f0:	6823      	ldr	r3, [r4, #0]
 800b3f2:	079b      	lsls	r3, r3, #30
 800b3f4:	f100 8105 	bmi.w	800b602 <_printf_float+0x42a>
 800b3f8:	68e0      	ldr	r0, [r4, #12]
 800b3fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3fc:	4298      	cmp	r0, r3
 800b3fe:	bfb8      	it	lt
 800b400:	4618      	movlt	r0, r3
 800b402:	e739      	b.n	800b278 <_printf_float+0xa0>
 800b404:	2301      	movs	r3, #1
 800b406:	464a      	mov	r2, r9
 800b408:	4631      	mov	r1, r6
 800b40a:	4628      	mov	r0, r5
 800b40c:	47b8      	blx	r7
 800b40e:	3001      	adds	r0, #1
 800b410:	f43f af30 	beq.w	800b274 <_printf_float+0x9c>
 800b414:	f108 0801 	add.w	r8, r8, #1
 800b418:	e7e6      	b.n	800b3e8 <_printf_float+0x210>
 800b41a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	dc2b      	bgt.n	800b478 <_printf_float+0x2a0>
 800b420:	2301      	movs	r3, #1
 800b422:	4a27      	ldr	r2, [pc, #156]	; (800b4c0 <_printf_float+0x2e8>)
 800b424:	4631      	mov	r1, r6
 800b426:	4628      	mov	r0, r5
 800b428:	47b8      	blx	r7
 800b42a:	3001      	adds	r0, #1
 800b42c:	f43f af22 	beq.w	800b274 <_printf_float+0x9c>
 800b430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b432:	b923      	cbnz	r3, 800b43e <_printf_float+0x266>
 800b434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b436:	b913      	cbnz	r3, 800b43e <_printf_float+0x266>
 800b438:	6823      	ldr	r3, [r4, #0]
 800b43a:	07d9      	lsls	r1, r3, #31
 800b43c:	d5d8      	bpl.n	800b3f0 <_printf_float+0x218>
 800b43e:	9b05      	ldr	r3, [sp, #20]
 800b440:	465a      	mov	r2, fp
 800b442:	4631      	mov	r1, r6
 800b444:	4628      	mov	r0, r5
 800b446:	47b8      	blx	r7
 800b448:	3001      	adds	r0, #1
 800b44a:	f43f af13 	beq.w	800b274 <_printf_float+0x9c>
 800b44e:	f04f 0900 	mov.w	r9, #0
 800b452:	f104 0a1a 	add.w	sl, r4, #26
 800b456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b458:	425b      	negs	r3, r3
 800b45a:	454b      	cmp	r3, r9
 800b45c:	dc01      	bgt.n	800b462 <_printf_float+0x28a>
 800b45e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b460:	e795      	b.n	800b38e <_printf_float+0x1b6>
 800b462:	2301      	movs	r3, #1
 800b464:	4652      	mov	r2, sl
 800b466:	4631      	mov	r1, r6
 800b468:	4628      	mov	r0, r5
 800b46a:	47b8      	blx	r7
 800b46c:	3001      	adds	r0, #1
 800b46e:	f43f af01 	beq.w	800b274 <_printf_float+0x9c>
 800b472:	f109 0901 	add.w	r9, r9, #1
 800b476:	e7ee      	b.n	800b456 <_printf_float+0x27e>
 800b478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b47a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b47c:	429a      	cmp	r2, r3
 800b47e:	bfa8      	it	ge
 800b480:	461a      	movge	r2, r3
 800b482:	2a00      	cmp	r2, #0
 800b484:	4691      	mov	r9, r2
 800b486:	dd07      	ble.n	800b498 <_printf_float+0x2c0>
 800b488:	4613      	mov	r3, r2
 800b48a:	4631      	mov	r1, r6
 800b48c:	4642      	mov	r2, r8
 800b48e:	4628      	mov	r0, r5
 800b490:	47b8      	blx	r7
 800b492:	3001      	adds	r0, #1
 800b494:	f43f aeee 	beq.w	800b274 <_printf_float+0x9c>
 800b498:	f104 031a 	add.w	r3, r4, #26
 800b49c:	f04f 0a00 	mov.w	sl, #0
 800b4a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b4a4:	9307      	str	r3, [sp, #28]
 800b4a6:	e017      	b.n	800b4d8 <_printf_float+0x300>
 800b4a8:	ffffffff 	.word	0xffffffff
 800b4ac:	7fefffff 	.word	0x7fefffff
 800b4b0:	0801dad8 	.word	0x0801dad8
 800b4b4:	0801dad4 	.word	0x0801dad4
 800b4b8:	0801dae0 	.word	0x0801dae0
 800b4bc:	0801dadc 	.word	0x0801dadc
 800b4c0:	0801dd34 	.word	0x0801dd34
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	9a07      	ldr	r2, [sp, #28]
 800b4c8:	4631      	mov	r1, r6
 800b4ca:	4628      	mov	r0, r5
 800b4cc:	47b8      	blx	r7
 800b4ce:	3001      	adds	r0, #1
 800b4d0:	f43f aed0 	beq.w	800b274 <_printf_float+0x9c>
 800b4d4:	f10a 0a01 	add.w	sl, sl, #1
 800b4d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b4da:	9306      	str	r3, [sp, #24]
 800b4dc:	eba3 0309 	sub.w	r3, r3, r9
 800b4e0:	4553      	cmp	r3, sl
 800b4e2:	dcef      	bgt.n	800b4c4 <_printf_float+0x2ec>
 800b4e4:	9b06      	ldr	r3, [sp, #24]
 800b4e6:	4498      	add	r8, r3
 800b4e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	db15      	blt.n	800b51c <_printf_float+0x344>
 800b4f0:	6823      	ldr	r3, [r4, #0]
 800b4f2:	07da      	lsls	r2, r3, #31
 800b4f4:	d412      	bmi.n	800b51c <_printf_float+0x344>
 800b4f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4f8:	9a06      	ldr	r2, [sp, #24]
 800b4fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4fc:	1a9a      	subs	r2, r3, r2
 800b4fe:	eba3 0a01 	sub.w	sl, r3, r1
 800b502:	4592      	cmp	sl, r2
 800b504:	bfa8      	it	ge
 800b506:	4692      	movge	sl, r2
 800b508:	f1ba 0f00 	cmp.w	sl, #0
 800b50c:	dc0e      	bgt.n	800b52c <_printf_float+0x354>
 800b50e:	f04f 0800 	mov.w	r8, #0
 800b512:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b516:	f104 091a 	add.w	r9, r4, #26
 800b51a:	e019      	b.n	800b550 <_printf_float+0x378>
 800b51c:	9b05      	ldr	r3, [sp, #20]
 800b51e:	465a      	mov	r2, fp
 800b520:	4631      	mov	r1, r6
 800b522:	4628      	mov	r0, r5
 800b524:	47b8      	blx	r7
 800b526:	3001      	adds	r0, #1
 800b528:	d1e5      	bne.n	800b4f6 <_printf_float+0x31e>
 800b52a:	e6a3      	b.n	800b274 <_printf_float+0x9c>
 800b52c:	4653      	mov	r3, sl
 800b52e:	4642      	mov	r2, r8
 800b530:	4631      	mov	r1, r6
 800b532:	4628      	mov	r0, r5
 800b534:	47b8      	blx	r7
 800b536:	3001      	adds	r0, #1
 800b538:	d1e9      	bne.n	800b50e <_printf_float+0x336>
 800b53a:	e69b      	b.n	800b274 <_printf_float+0x9c>
 800b53c:	2301      	movs	r3, #1
 800b53e:	464a      	mov	r2, r9
 800b540:	4631      	mov	r1, r6
 800b542:	4628      	mov	r0, r5
 800b544:	47b8      	blx	r7
 800b546:	3001      	adds	r0, #1
 800b548:	f43f ae94 	beq.w	800b274 <_printf_float+0x9c>
 800b54c:	f108 0801 	add.w	r8, r8, #1
 800b550:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b554:	1a9b      	subs	r3, r3, r2
 800b556:	eba3 030a 	sub.w	r3, r3, sl
 800b55a:	4543      	cmp	r3, r8
 800b55c:	dcee      	bgt.n	800b53c <_printf_float+0x364>
 800b55e:	e747      	b.n	800b3f0 <_printf_float+0x218>
 800b560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b562:	2a01      	cmp	r2, #1
 800b564:	dc01      	bgt.n	800b56a <_printf_float+0x392>
 800b566:	07db      	lsls	r3, r3, #31
 800b568:	d539      	bpl.n	800b5de <_printf_float+0x406>
 800b56a:	2301      	movs	r3, #1
 800b56c:	4642      	mov	r2, r8
 800b56e:	4631      	mov	r1, r6
 800b570:	4628      	mov	r0, r5
 800b572:	47b8      	blx	r7
 800b574:	3001      	adds	r0, #1
 800b576:	f43f ae7d 	beq.w	800b274 <_printf_float+0x9c>
 800b57a:	9b05      	ldr	r3, [sp, #20]
 800b57c:	465a      	mov	r2, fp
 800b57e:	4631      	mov	r1, r6
 800b580:	4628      	mov	r0, r5
 800b582:	47b8      	blx	r7
 800b584:	3001      	adds	r0, #1
 800b586:	f108 0801 	add.w	r8, r8, #1
 800b58a:	f43f ae73 	beq.w	800b274 <_printf_float+0x9c>
 800b58e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b594:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b59c:	f103 33ff 	add.w	r3, r3, #4294967295
 800b5a0:	d018      	beq.n	800b5d4 <_printf_float+0x3fc>
 800b5a2:	4642      	mov	r2, r8
 800b5a4:	4631      	mov	r1, r6
 800b5a6:	4628      	mov	r0, r5
 800b5a8:	47b8      	blx	r7
 800b5aa:	3001      	adds	r0, #1
 800b5ac:	d10e      	bne.n	800b5cc <_printf_float+0x3f4>
 800b5ae:	e661      	b.n	800b274 <_printf_float+0x9c>
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	464a      	mov	r2, r9
 800b5b4:	4631      	mov	r1, r6
 800b5b6:	4628      	mov	r0, r5
 800b5b8:	47b8      	blx	r7
 800b5ba:	3001      	adds	r0, #1
 800b5bc:	f43f ae5a 	beq.w	800b274 <_printf_float+0x9c>
 800b5c0:	f108 0801 	add.w	r8, r8, #1
 800b5c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	4543      	cmp	r3, r8
 800b5ca:	dcf1      	bgt.n	800b5b0 <_printf_float+0x3d8>
 800b5cc:	4653      	mov	r3, sl
 800b5ce:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b5d2:	e6dd      	b.n	800b390 <_printf_float+0x1b8>
 800b5d4:	f04f 0800 	mov.w	r8, #0
 800b5d8:	f104 091a 	add.w	r9, r4, #26
 800b5dc:	e7f2      	b.n	800b5c4 <_printf_float+0x3ec>
 800b5de:	2301      	movs	r3, #1
 800b5e0:	e7df      	b.n	800b5a2 <_printf_float+0x3ca>
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	464a      	mov	r2, r9
 800b5e6:	4631      	mov	r1, r6
 800b5e8:	4628      	mov	r0, r5
 800b5ea:	47b8      	blx	r7
 800b5ec:	3001      	adds	r0, #1
 800b5ee:	f43f ae41 	beq.w	800b274 <_printf_float+0x9c>
 800b5f2:	f108 0801 	add.w	r8, r8, #1
 800b5f6:	68e3      	ldr	r3, [r4, #12]
 800b5f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b5fa:	1a9b      	subs	r3, r3, r2
 800b5fc:	4543      	cmp	r3, r8
 800b5fe:	dcf0      	bgt.n	800b5e2 <_printf_float+0x40a>
 800b600:	e6fa      	b.n	800b3f8 <_printf_float+0x220>
 800b602:	f04f 0800 	mov.w	r8, #0
 800b606:	f104 0919 	add.w	r9, r4, #25
 800b60a:	e7f4      	b.n	800b5f6 <_printf_float+0x41e>
 800b60c:	2900      	cmp	r1, #0
 800b60e:	f43f ae8a 	beq.w	800b326 <_printf_float+0x14e>
 800b612:	f04f 0c00 	mov.w	ip, #0
 800b616:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800b61a:	e9cd 0900 	strd	r0, r9, [sp]
 800b61e:	6022      	str	r2, [r4, #0]
 800b620:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b624:	4628      	mov	r0, r5
 800b626:	f7ff fd4f 	bl	800b0c8 <__cvt>
 800b62a:	4680      	mov	r8, r0
 800b62c:	e64a      	b.n	800b2c4 <_printf_float+0xec>
 800b62e:	bf00      	nop

0800b630 <_printf_common>:
 800b630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b634:	4691      	mov	r9, r2
 800b636:	461f      	mov	r7, r3
 800b638:	688a      	ldr	r2, [r1, #8]
 800b63a:	690b      	ldr	r3, [r1, #16]
 800b63c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b640:	4293      	cmp	r3, r2
 800b642:	bfb8      	it	lt
 800b644:	4613      	movlt	r3, r2
 800b646:	f8c9 3000 	str.w	r3, [r9]
 800b64a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b64e:	4606      	mov	r6, r0
 800b650:	460c      	mov	r4, r1
 800b652:	b112      	cbz	r2, 800b65a <_printf_common+0x2a>
 800b654:	3301      	adds	r3, #1
 800b656:	f8c9 3000 	str.w	r3, [r9]
 800b65a:	6823      	ldr	r3, [r4, #0]
 800b65c:	0699      	lsls	r1, r3, #26
 800b65e:	bf42      	ittt	mi
 800b660:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b664:	3302      	addmi	r3, #2
 800b666:	f8c9 3000 	strmi.w	r3, [r9]
 800b66a:	6825      	ldr	r5, [r4, #0]
 800b66c:	f015 0506 	ands.w	r5, r5, #6
 800b670:	d107      	bne.n	800b682 <_printf_common+0x52>
 800b672:	f104 0a19 	add.w	sl, r4, #25
 800b676:	68e3      	ldr	r3, [r4, #12]
 800b678:	f8d9 2000 	ldr.w	r2, [r9]
 800b67c:	1a9b      	subs	r3, r3, r2
 800b67e:	42ab      	cmp	r3, r5
 800b680:	dc28      	bgt.n	800b6d4 <_printf_common+0xa4>
 800b682:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b686:	6822      	ldr	r2, [r4, #0]
 800b688:	3300      	adds	r3, #0
 800b68a:	bf18      	it	ne
 800b68c:	2301      	movne	r3, #1
 800b68e:	0692      	lsls	r2, r2, #26
 800b690:	d42d      	bmi.n	800b6ee <_printf_common+0xbe>
 800b692:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b696:	4639      	mov	r1, r7
 800b698:	4630      	mov	r0, r6
 800b69a:	47c0      	blx	r8
 800b69c:	3001      	adds	r0, #1
 800b69e:	d020      	beq.n	800b6e2 <_printf_common+0xb2>
 800b6a0:	6823      	ldr	r3, [r4, #0]
 800b6a2:	68e5      	ldr	r5, [r4, #12]
 800b6a4:	f8d9 2000 	ldr.w	r2, [r9]
 800b6a8:	f003 0306 	and.w	r3, r3, #6
 800b6ac:	2b04      	cmp	r3, #4
 800b6ae:	bf08      	it	eq
 800b6b0:	1aad      	subeq	r5, r5, r2
 800b6b2:	68a3      	ldr	r3, [r4, #8]
 800b6b4:	6922      	ldr	r2, [r4, #16]
 800b6b6:	bf0c      	ite	eq
 800b6b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6bc:	2500      	movne	r5, #0
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	bfc4      	itt	gt
 800b6c2:	1a9b      	subgt	r3, r3, r2
 800b6c4:	18ed      	addgt	r5, r5, r3
 800b6c6:	f04f 0900 	mov.w	r9, #0
 800b6ca:	341a      	adds	r4, #26
 800b6cc:	454d      	cmp	r5, r9
 800b6ce:	d11a      	bne.n	800b706 <_printf_common+0xd6>
 800b6d0:	2000      	movs	r0, #0
 800b6d2:	e008      	b.n	800b6e6 <_printf_common+0xb6>
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	4652      	mov	r2, sl
 800b6d8:	4639      	mov	r1, r7
 800b6da:	4630      	mov	r0, r6
 800b6dc:	47c0      	blx	r8
 800b6de:	3001      	adds	r0, #1
 800b6e0:	d103      	bne.n	800b6ea <_printf_common+0xba>
 800b6e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b6e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6ea:	3501      	adds	r5, #1
 800b6ec:	e7c3      	b.n	800b676 <_printf_common+0x46>
 800b6ee:	18e1      	adds	r1, r4, r3
 800b6f0:	1c5a      	adds	r2, r3, #1
 800b6f2:	2030      	movs	r0, #48	; 0x30
 800b6f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6f8:	4422      	add	r2, r4
 800b6fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b702:	3302      	adds	r3, #2
 800b704:	e7c5      	b.n	800b692 <_printf_common+0x62>
 800b706:	2301      	movs	r3, #1
 800b708:	4622      	mov	r2, r4
 800b70a:	4639      	mov	r1, r7
 800b70c:	4630      	mov	r0, r6
 800b70e:	47c0      	blx	r8
 800b710:	3001      	adds	r0, #1
 800b712:	d0e6      	beq.n	800b6e2 <_printf_common+0xb2>
 800b714:	f109 0901 	add.w	r9, r9, #1
 800b718:	e7d8      	b.n	800b6cc <_printf_common+0x9c>
	...

0800b71c <_printf_i>:
 800b71c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b720:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b724:	460c      	mov	r4, r1
 800b726:	7e09      	ldrb	r1, [r1, #24]
 800b728:	b085      	sub	sp, #20
 800b72a:	296e      	cmp	r1, #110	; 0x6e
 800b72c:	4617      	mov	r7, r2
 800b72e:	4606      	mov	r6, r0
 800b730:	4698      	mov	r8, r3
 800b732:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b734:	f000 80b3 	beq.w	800b89e <_printf_i+0x182>
 800b738:	d822      	bhi.n	800b780 <_printf_i+0x64>
 800b73a:	2963      	cmp	r1, #99	; 0x63
 800b73c:	d036      	beq.n	800b7ac <_printf_i+0x90>
 800b73e:	d80a      	bhi.n	800b756 <_printf_i+0x3a>
 800b740:	2900      	cmp	r1, #0
 800b742:	f000 80b9 	beq.w	800b8b8 <_printf_i+0x19c>
 800b746:	2958      	cmp	r1, #88	; 0x58
 800b748:	f000 8083 	beq.w	800b852 <_printf_i+0x136>
 800b74c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b750:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b754:	e032      	b.n	800b7bc <_printf_i+0xa0>
 800b756:	2964      	cmp	r1, #100	; 0x64
 800b758:	d001      	beq.n	800b75e <_printf_i+0x42>
 800b75a:	2969      	cmp	r1, #105	; 0x69
 800b75c:	d1f6      	bne.n	800b74c <_printf_i+0x30>
 800b75e:	6820      	ldr	r0, [r4, #0]
 800b760:	6813      	ldr	r3, [r2, #0]
 800b762:	0605      	lsls	r5, r0, #24
 800b764:	f103 0104 	add.w	r1, r3, #4
 800b768:	d52a      	bpl.n	800b7c0 <_printf_i+0xa4>
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	6011      	str	r1, [r2, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	da03      	bge.n	800b77a <_printf_i+0x5e>
 800b772:	222d      	movs	r2, #45	; 0x2d
 800b774:	425b      	negs	r3, r3
 800b776:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b77a:	486f      	ldr	r0, [pc, #444]	; (800b938 <_printf_i+0x21c>)
 800b77c:	220a      	movs	r2, #10
 800b77e:	e039      	b.n	800b7f4 <_printf_i+0xd8>
 800b780:	2973      	cmp	r1, #115	; 0x73
 800b782:	f000 809d 	beq.w	800b8c0 <_printf_i+0x1a4>
 800b786:	d808      	bhi.n	800b79a <_printf_i+0x7e>
 800b788:	296f      	cmp	r1, #111	; 0x6f
 800b78a:	d020      	beq.n	800b7ce <_printf_i+0xb2>
 800b78c:	2970      	cmp	r1, #112	; 0x70
 800b78e:	d1dd      	bne.n	800b74c <_printf_i+0x30>
 800b790:	6823      	ldr	r3, [r4, #0]
 800b792:	f043 0320 	orr.w	r3, r3, #32
 800b796:	6023      	str	r3, [r4, #0]
 800b798:	e003      	b.n	800b7a2 <_printf_i+0x86>
 800b79a:	2975      	cmp	r1, #117	; 0x75
 800b79c:	d017      	beq.n	800b7ce <_printf_i+0xb2>
 800b79e:	2978      	cmp	r1, #120	; 0x78
 800b7a0:	d1d4      	bne.n	800b74c <_printf_i+0x30>
 800b7a2:	2378      	movs	r3, #120	; 0x78
 800b7a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b7a8:	4864      	ldr	r0, [pc, #400]	; (800b93c <_printf_i+0x220>)
 800b7aa:	e055      	b.n	800b858 <_printf_i+0x13c>
 800b7ac:	6813      	ldr	r3, [r2, #0]
 800b7ae:	1d19      	adds	r1, r3, #4
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	6011      	str	r1, [r2, #0]
 800b7b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7bc:	2301      	movs	r3, #1
 800b7be:	e08c      	b.n	800b8da <_printf_i+0x1be>
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	6011      	str	r1, [r2, #0]
 800b7c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b7c8:	bf18      	it	ne
 800b7ca:	b21b      	sxthne	r3, r3
 800b7cc:	e7cf      	b.n	800b76e <_printf_i+0x52>
 800b7ce:	6813      	ldr	r3, [r2, #0]
 800b7d0:	6825      	ldr	r5, [r4, #0]
 800b7d2:	1d18      	adds	r0, r3, #4
 800b7d4:	6010      	str	r0, [r2, #0]
 800b7d6:	0628      	lsls	r0, r5, #24
 800b7d8:	d501      	bpl.n	800b7de <_printf_i+0xc2>
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	e002      	b.n	800b7e4 <_printf_i+0xc8>
 800b7de:	0668      	lsls	r0, r5, #25
 800b7e0:	d5fb      	bpl.n	800b7da <_printf_i+0xbe>
 800b7e2:	881b      	ldrh	r3, [r3, #0]
 800b7e4:	4854      	ldr	r0, [pc, #336]	; (800b938 <_printf_i+0x21c>)
 800b7e6:	296f      	cmp	r1, #111	; 0x6f
 800b7e8:	bf14      	ite	ne
 800b7ea:	220a      	movne	r2, #10
 800b7ec:	2208      	moveq	r2, #8
 800b7ee:	2100      	movs	r1, #0
 800b7f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b7f4:	6865      	ldr	r5, [r4, #4]
 800b7f6:	60a5      	str	r5, [r4, #8]
 800b7f8:	2d00      	cmp	r5, #0
 800b7fa:	f2c0 8095 	blt.w	800b928 <_printf_i+0x20c>
 800b7fe:	6821      	ldr	r1, [r4, #0]
 800b800:	f021 0104 	bic.w	r1, r1, #4
 800b804:	6021      	str	r1, [r4, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d13d      	bne.n	800b886 <_printf_i+0x16a>
 800b80a:	2d00      	cmp	r5, #0
 800b80c:	f040 808e 	bne.w	800b92c <_printf_i+0x210>
 800b810:	4665      	mov	r5, ip
 800b812:	2a08      	cmp	r2, #8
 800b814:	d10b      	bne.n	800b82e <_printf_i+0x112>
 800b816:	6823      	ldr	r3, [r4, #0]
 800b818:	07db      	lsls	r3, r3, #31
 800b81a:	d508      	bpl.n	800b82e <_printf_i+0x112>
 800b81c:	6923      	ldr	r3, [r4, #16]
 800b81e:	6862      	ldr	r2, [r4, #4]
 800b820:	429a      	cmp	r2, r3
 800b822:	bfde      	ittt	le
 800b824:	2330      	movle	r3, #48	; 0x30
 800b826:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b82a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b82e:	ebac 0305 	sub.w	r3, ip, r5
 800b832:	6123      	str	r3, [r4, #16]
 800b834:	f8cd 8000 	str.w	r8, [sp]
 800b838:	463b      	mov	r3, r7
 800b83a:	aa03      	add	r2, sp, #12
 800b83c:	4621      	mov	r1, r4
 800b83e:	4630      	mov	r0, r6
 800b840:	f7ff fef6 	bl	800b630 <_printf_common>
 800b844:	3001      	adds	r0, #1
 800b846:	d14d      	bne.n	800b8e4 <_printf_i+0x1c8>
 800b848:	f04f 30ff 	mov.w	r0, #4294967295
 800b84c:	b005      	add	sp, #20
 800b84e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b852:	4839      	ldr	r0, [pc, #228]	; (800b938 <_printf_i+0x21c>)
 800b854:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b858:	6813      	ldr	r3, [r2, #0]
 800b85a:	6821      	ldr	r1, [r4, #0]
 800b85c:	1d1d      	adds	r5, r3, #4
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	6015      	str	r5, [r2, #0]
 800b862:	060a      	lsls	r2, r1, #24
 800b864:	d50b      	bpl.n	800b87e <_printf_i+0x162>
 800b866:	07ca      	lsls	r2, r1, #31
 800b868:	bf44      	itt	mi
 800b86a:	f041 0120 	orrmi.w	r1, r1, #32
 800b86e:	6021      	strmi	r1, [r4, #0]
 800b870:	b91b      	cbnz	r3, 800b87a <_printf_i+0x15e>
 800b872:	6822      	ldr	r2, [r4, #0]
 800b874:	f022 0220 	bic.w	r2, r2, #32
 800b878:	6022      	str	r2, [r4, #0]
 800b87a:	2210      	movs	r2, #16
 800b87c:	e7b7      	b.n	800b7ee <_printf_i+0xd2>
 800b87e:	064d      	lsls	r5, r1, #25
 800b880:	bf48      	it	mi
 800b882:	b29b      	uxthmi	r3, r3
 800b884:	e7ef      	b.n	800b866 <_printf_i+0x14a>
 800b886:	4665      	mov	r5, ip
 800b888:	fbb3 f1f2 	udiv	r1, r3, r2
 800b88c:	fb02 3311 	mls	r3, r2, r1, r3
 800b890:	5cc3      	ldrb	r3, [r0, r3]
 800b892:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b896:	460b      	mov	r3, r1
 800b898:	2900      	cmp	r1, #0
 800b89a:	d1f5      	bne.n	800b888 <_printf_i+0x16c>
 800b89c:	e7b9      	b.n	800b812 <_printf_i+0xf6>
 800b89e:	6813      	ldr	r3, [r2, #0]
 800b8a0:	6825      	ldr	r5, [r4, #0]
 800b8a2:	6961      	ldr	r1, [r4, #20]
 800b8a4:	1d18      	adds	r0, r3, #4
 800b8a6:	6010      	str	r0, [r2, #0]
 800b8a8:	0628      	lsls	r0, r5, #24
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	d501      	bpl.n	800b8b2 <_printf_i+0x196>
 800b8ae:	6019      	str	r1, [r3, #0]
 800b8b0:	e002      	b.n	800b8b8 <_printf_i+0x19c>
 800b8b2:	066a      	lsls	r2, r5, #25
 800b8b4:	d5fb      	bpl.n	800b8ae <_printf_i+0x192>
 800b8b6:	8019      	strh	r1, [r3, #0]
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	6123      	str	r3, [r4, #16]
 800b8bc:	4665      	mov	r5, ip
 800b8be:	e7b9      	b.n	800b834 <_printf_i+0x118>
 800b8c0:	6813      	ldr	r3, [r2, #0]
 800b8c2:	1d19      	adds	r1, r3, #4
 800b8c4:	6011      	str	r1, [r2, #0]
 800b8c6:	681d      	ldr	r5, [r3, #0]
 800b8c8:	6862      	ldr	r2, [r4, #4]
 800b8ca:	2100      	movs	r1, #0
 800b8cc:	4628      	mov	r0, r5
 800b8ce:	f7f4 fd6f 	bl	80003b0 <memchr>
 800b8d2:	b108      	cbz	r0, 800b8d8 <_printf_i+0x1bc>
 800b8d4:	1b40      	subs	r0, r0, r5
 800b8d6:	6060      	str	r0, [r4, #4]
 800b8d8:	6863      	ldr	r3, [r4, #4]
 800b8da:	6123      	str	r3, [r4, #16]
 800b8dc:	2300      	movs	r3, #0
 800b8de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8e2:	e7a7      	b.n	800b834 <_printf_i+0x118>
 800b8e4:	6923      	ldr	r3, [r4, #16]
 800b8e6:	462a      	mov	r2, r5
 800b8e8:	4639      	mov	r1, r7
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	47c0      	blx	r8
 800b8ee:	3001      	adds	r0, #1
 800b8f0:	d0aa      	beq.n	800b848 <_printf_i+0x12c>
 800b8f2:	6823      	ldr	r3, [r4, #0]
 800b8f4:	079b      	lsls	r3, r3, #30
 800b8f6:	d413      	bmi.n	800b920 <_printf_i+0x204>
 800b8f8:	68e0      	ldr	r0, [r4, #12]
 800b8fa:	9b03      	ldr	r3, [sp, #12]
 800b8fc:	4298      	cmp	r0, r3
 800b8fe:	bfb8      	it	lt
 800b900:	4618      	movlt	r0, r3
 800b902:	e7a3      	b.n	800b84c <_printf_i+0x130>
 800b904:	2301      	movs	r3, #1
 800b906:	464a      	mov	r2, r9
 800b908:	4639      	mov	r1, r7
 800b90a:	4630      	mov	r0, r6
 800b90c:	47c0      	blx	r8
 800b90e:	3001      	adds	r0, #1
 800b910:	d09a      	beq.n	800b848 <_printf_i+0x12c>
 800b912:	3501      	adds	r5, #1
 800b914:	68e3      	ldr	r3, [r4, #12]
 800b916:	9a03      	ldr	r2, [sp, #12]
 800b918:	1a9b      	subs	r3, r3, r2
 800b91a:	42ab      	cmp	r3, r5
 800b91c:	dcf2      	bgt.n	800b904 <_printf_i+0x1e8>
 800b91e:	e7eb      	b.n	800b8f8 <_printf_i+0x1dc>
 800b920:	2500      	movs	r5, #0
 800b922:	f104 0919 	add.w	r9, r4, #25
 800b926:	e7f5      	b.n	800b914 <_printf_i+0x1f8>
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d1ac      	bne.n	800b886 <_printf_i+0x16a>
 800b92c:	7803      	ldrb	r3, [r0, #0]
 800b92e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b932:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b936:	e76c      	b.n	800b812 <_printf_i+0xf6>
 800b938:	0801dae4 	.word	0x0801dae4
 800b93c:	0801daf5 	.word	0x0801daf5

0800b940 <siprintf>:
 800b940:	b40e      	push	{r1, r2, r3}
 800b942:	b500      	push	{lr}
 800b944:	b09c      	sub	sp, #112	; 0x70
 800b946:	ab1d      	add	r3, sp, #116	; 0x74
 800b948:	9002      	str	r0, [sp, #8]
 800b94a:	9006      	str	r0, [sp, #24]
 800b94c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b950:	4809      	ldr	r0, [pc, #36]	; (800b978 <siprintf+0x38>)
 800b952:	9107      	str	r1, [sp, #28]
 800b954:	9104      	str	r1, [sp, #16]
 800b956:	4909      	ldr	r1, [pc, #36]	; (800b97c <siprintf+0x3c>)
 800b958:	f853 2b04 	ldr.w	r2, [r3], #4
 800b95c:	9105      	str	r1, [sp, #20]
 800b95e:	6800      	ldr	r0, [r0, #0]
 800b960:	9301      	str	r3, [sp, #4]
 800b962:	a902      	add	r1, sp, #8
 800b964:	f001 f9f8 	bl	800cd58 <_svfiprintf_r>
 800b968:	9b02      	ldr	r3, [sp, #8]
 800b96a:	2200      	movs	r2, #0
 800b96c:	701a      	strb	r2, [r3, #0]
 800b96e:	b01c      	add	sp, #112	; 0x70
 800b970:	f85d eb04 	ldr.w	lr, [sp], #4
 800b974:	b003      	add	sp, #12
 800b976:	4770      	bx	lr
 800b978:	24000208 	.word	0x24000208
 800b97c:	ffff0208 	.word	0xffff0208

0800b980 <strcpy>:
 800b980:	4603      	mov	r3, r0
 800b982:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b986:	f803 2b01 	strb.w	r2, [r3], #1
 800b98a:	2a00      	cmp	r2, #0
 800b98c:	d1f9      	bne.n	800b982 <strcpy+0x2>
 800b98e:	4770      	bx	lr

0800b990 <quorem>:
 800b990:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b994:	6903      	ldr	r3, [r0, #16]
 800b996:	690c      	ldr	r4, [r1, #16]
 800b998:	42a3      	cmp	r3, r4
 800b99a:	4680      	mov	r8, r0
 800b99c:	f2c0 8082 	blt.w	800baa4 <quorem+0x114>
 800b9a0:	3c01      	subs	r4, #1
 800b9a2:	f101 0714 	add.w	r7, r1, #20
 800b9a6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b9aa:	f100 0614 	add.w	r6, r0, #20
 800b9ae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b9b2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b9b6:	eb06 030c 	add.w	r3, r6, ip
 800b9ba:	3501      	adds	r5, #1
 800b9bc:	eb07 090c 	add.w	r9, r7, ip
 800b9c0:	9301      	str	r3, [sp, #4]
 800b9c2:	fbb0 f5f5 	udiv	r5, r0, r5
 800b9c6:	b395      	cbz	r5, 800ba2e <quorem+0x9e>
 800b9c8:	f04f 0a00 	mov.w	sl, #0
 800b9cc:	4638      	mov	r0, r7
 800b9ce:	46b6      	mov	lr, r6
 800b9d0:	46d3      	mov	fp, sl
 800b9d2:	f850 2b04 	ldr.w	r2, [r0], #4
 800b9d6:	b293      	uxth	r3, r2
 800b9d8:	fb05 a303 	mla	r3, r5, r3, sl
 800b9dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b9e0:	b29b      	uxth	r3, r3
 800b9e2:	ebab 0303 	sub.w	r3, fp, r3
 800b9e6:	0c12      	lsrs	r2, r2, #16
 800b9e8:	f8de b000 	ldr.w	fp, [lr]
 800b9ec:	fb05 a202 	mla	r2, r5, r2, sl
 800b9f0:	fa13 f38b 	uxtah	r3, r3, fp
 800b9f4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b9f8:	fa1f fb82 	uxth.w	fp, r2
 800b9fc:	f8de 2000 	ldr.w	r2, [lr]
 800ba00:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ba04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba08:	b29b      	uxth	r3, r3
 800ba0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba0e:	4581      	cmp	r9, r0
 800ba10:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800ba14:	f84e 3b04 	str.w	r3, [lr], #4
 800ba18:	d2db      	bcs.n	800b9d2 <quorem+0x42>
 800ba1a:	f856 300c 	ldr.w	r3, [r6, ip]
 800ba1e:	b933      	cbnz	r3, 800ba2e <quorem+0x9e>
 800ba20:	9b01      	ldr	r3, [sp, #4]
 800ba22:	3b04      	subs	r3, #4
 800ba24:	429e      	cmp	r6, r3
 800ba26:	461a      	mov	r2, r3
 800ba28:	d330      	bcc.n	800ba8c <quorem+0xfc>
 800ba2a:	f8c8 4010 	str.w	r4, [r8, #16]
 800ba2e:	4640      	mov	r0, r8
 800ba30:	f000 ffbc 	bl	800c9ac <__mcmp>
 800ba34:	2800      	cmp	r0, #0
 800ba36:	db25      	blt.n	800ba84 <quorem+0xf4>
 800ba38:	3501      	adds	r5, #1
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	f04f 0c00 	mov.w	ip, #0
 800ba40:	f857 2b04 	ldr.w	r2, [r7], #4
 800ba44:	f8d0 e000 	ldr.w	lr, [r0]
 800ba48:	b293      	uxth	r3, r2
 800ba4a:	ebac 0303 	sub.w	r3, ip, r3
 800ba4e:	0c12      	lsrs	r2, r2, #16
 800ba50:	fa13 f38e 	uxtah	r3, r3, lr
 800ba54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ba58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba5c:	b29b      	uxth	r3, r3
 800ba5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba62:	45b9      	cmp	r9, r7
 800ba64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ba68:	f840 3b04 	str.w	r3, [r0], #4
 800ba6c:	d2e8      	bcs.n	800ba40 <quorem+0xb0>
 800ba6e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800ba72:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ba76:	b92a      	cbnz	r2, 800ba84 <quorem+0xf4>
 800ba78:	3b04      	subs	r3, #4
 800ba7a:	429e      	cmp	r6, r3
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	d30b      	bcc.n	800ba98 <quorem+0x108>
 800ba80:	f8c8 4010 	str.w	r4, [r8, #16]
 800ba84:	4628      	mov	r0, r5
 800ba86:	b003      	add	sp, #12
 800ba88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba8c:	6812      	ldr	r2, [r2, #0]
 800ba8e:	3b04      	subs	r3, #4
 800ba90:	2a00      	cmp	r2, #0
 800ba92:	d1ca      	bne.n	800ba2a <quorem+0x9a>
 800ba94:	3c01      	subs	r4, #1
 800ba96:	e7c5      	b.n	800ba24 <quorem+0x94>
 800ba98:	6812      	ldr	r2, [r2, #0]
 800ba9a:	3b04      	subs	r3, #4
 800ba9c:	2a00      	cmp	r2, #0
 800ba9e:	d1ef      	bne.n	800ba80 <quorem+0xf0>
 800baa0:	3c01      	subs	r4, #1
 800baa2:	e7ea      	b.n	800ba7a <quorem+0xea>
 800baa4:	2000      	movs	r0, #0
 800baa6:	e7ee      	b.n	800ba86 <quorem+0xf6>

0800baa8 <_dtoa_r>:
 800baa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baac:	ec57 6b10 	vmov	r6, r7, d0
 800bab0:	b095      	sub	sp, #84	; 0x54
 800bab2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bab4:	9108      	str	r1, [sp, #32]
 800bab6:	4604      	mov	r4, r0
 800bab8:	920a      	str	r2, [sp, #40]	; 0x28
 800baba:	9311      	str	r3, [sp, #68]	; 0x44
 800babc:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800bac0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800bac4:	b93d      	cbnz	r5, 800bad6 <_dtoa_r+0x2e>
 800bac6:	2010      	movs	r0, #16
 800bac8:	f000 fd48 	bl	800c55c <malloc>
 800bacc:	6260      	str	r0, [r4, #36]	; 0x24
 800bace:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bad2:	6005      	str	r5, [r0, #0]
 800bad4:	60c5      	str	r5, [r0, #12]
 800bad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bad8:	6819      	ldr	r1, [r3, #0]
 800bada:	b151      	cbz	r1, 800baf2 <_dtoa_r+0x4a>
 800badc:	685a      	ldr	r2, [r3, #4]
 800bade:	604a      	str	r2, [r1, #4]
 800bae0:	2301      	movs	r3, #1
 800bae2:	4093      	lsls	r3, r2
 800bae4:	608b      	str	r3, [r1, #8]
 800bae6:	4620      	mov	r0, r4
 800bae8:	f000 fd7f 	bl	800c5ea <_Bfree>
 800baec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800baee:	2200      	movs	r2, #0
 800baf0:	601a      	str	r2, [r3, #0]
 800baf2:	1e3b      	subs	r3, r7, #0
 800baf4:	bfb9      	ittee	lt
 800baf6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bafa:	9303      	strlt	r3, [sp, #12]
 800bafc:	2300      	movge	r3, #0
 800bafe:	f8c8 3000 	strge.w	r3, [r8]
 800bb02:	9d03      	ldr	r5, [sp, #12]
 800bb04:	4bac      	ldr	r3, [pc, #688]	; (800bdb8 <_dtoa_r+0x310>)
 800bb06:	bfbc      	itt	lt
 800bb08:	2201      	movlt	r2, #1
 800bb0a:	f8c8 2000 	strlt.w	r2, [r8]
 800bb0e:	43ab      	bics	r3, r5
 800bb10:	d11b      	bne.n	800bb4a <_dtoa_r+0xa2>
 800bb12:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bb14:	f242 730f 	movw	r3, #9999	; 0x270f
 800bb18:	6013      	str	r3, [r2, #0]
 800bb1a:	9b02      	ldr	r3, [sp, #8]
 800bb1c:	b923      	cbnz	r3, 800bb28 <_dtoa_r+0x80>
 800bb1e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800bb22:	2d00      	cmp	r5, #0
 800bb24:	f000 84dd 	beq.w	800c4e2 <_dtoa_r+0xa3a>
 800bb28:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bb2a:	b953      	cbnz	r3, 800bb42 <_dtoa_r+0x9a>
 800bb2c:	4ba3      	ldr	r3, [pc, #652]	; (800bdbc <_dtoa_r+0x314>)
 800bb2e:	e020      	b.n	800bb72 <_dtoa_r+0xca>
 800bb30:	4ba3      	ldr	r3, [pc, #652]	; (800bdc0 <_dtoa_r+0x318>)
 800bb32:	9304      	str	r3, [sp, #16]
 800bb34:	3308      	adds	r3, #8
 800bb36:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800bb38:	6013      	str	r3, [r2, #0]
 800bb3a:	9804      	ldr	r0, [sp, #16]
 800bb3c:	b015      	add	sp, #84	; 0x54
 800bb3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb42:	4b9e      	ldr	r3, [pc, #632]	; (800bdbc <_dtoa_r+0x314>)
 800bb44:	9304      	str	r3, [sp, #16]
 800bb46:	3303      	adds	r3, #3
 800bb48:	e7f5      	b.n	800bb36 <_dtoa_r+0x8e>
 800bb4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb4e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bb52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb56:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bb5a:	d10c      	bne.n	800bb76 <_dtoa_r+0xce>
 800bb5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bb5e:	2301      	movs	r3, #1
 800bb60:	6013      	str	r3, [r2, #0]
 800bb62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	f000 84b9 	beq.w	800c4dc <_dtoa_r+0xa34>
 800bb6a:	4b96      	ldr	r3, [pc, #600]	; (800bdc4 <_dtoa_r+0x31c>)
 800bb6c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800bb6e:	6013      	str	r3, [r2, #0]
 800bb70:	3b01      	subs	r3, #1
 800bb72:	9304      	str	r3, [sp, #16]
 800bb74:	e7e1      	b.n	800bb3a <_dtoa_r+0x92>
 800bb76:	a913      	add	r1, sp, #76	; 0x4c
 800bb78:	aa12      	add	r2, sp, #72	; 0x48
 800bb7a:	ed9d 0b04 	vldr	d0, [sp, #16]
 800bb7e:	4620      	mov	r0, r4
 800bb80:	f000 ff8b 	bl	800ca9a <__d2b>
 800bb84:	f3c5 560a 	ubfx	r6, r5, #20, #11
 800bb88:	9001      	str	r0, [sp, #4]
 800bb8a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800bb8c:	2e00      	cmp	r6, #0
 800bb8e:	d046      	beq.n	800bc1e <_dtoa_r+0x176>
 800bb90:	9805      	ldr	r0, [sp, #20]
 800bb92:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800bb96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb9a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800bb9e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bba2:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800bba6:	2700      	movs	r7, #0
 800bba8:	ee07 aa90 	vmov	s15, sl
 800bbac:	ec43 2b16 	vmov	d6, r2, r3
 800bbb0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800bbb4:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 800bda0 <_dtoa_r+0x2f8>
 800bbb8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800bbbc:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bbc0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800bda8 <_dtoa_r+0x300>
 800bbc4:	eea7 6b04 	vfma.f64	d6, d7, d4
 800bbc8:	eeb0 7b46 	vmov.f64	d7, d6
 800bbcc:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800bdb0 <_dtoa_r+0x308>
 800bbd0:	eea5 7b06 	vfma.f64	d7, d5, d6
 800bbd4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800bbd8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800bbdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbe0:	ee16 ba90 	vmov	fp, s13
 800bbe4:	d508      	bpl.n	800bbf8 <_dtoa_r+0x150>
 800bbe6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800bbea:	eeb4 6b47 	vcmp.f64	d6, d7
 800bbee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbf2:	bf18      	it	ne
 800bbf4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800bbf8:	f1bb 0f16 	cmp.w	fp, #22
 800bbfc:	d834      	bhi.n	800bc68 <_dtoa_r+0x1c0>
 800bbfe:	4b72      	ldr	r3, [pc, #456]	; (800bdc8 <_dtoa_r+0x320>)
 800bc00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bc04:	ed93 7b00 	vldr	d7, [r3]
 800bc08:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bc0c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bc10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc14:	dd01      	ble.n	800bc1a <_dtoa_r+0x172>
 800bc16:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	e025      	b.n	800bc6a <_dtoa_r+0x1c2>
 800bc1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bc20:	eb01 0a03 	add.w	sl, r1, r3
 800bc24:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 800bc28:	2b20      	cmp	r3, #32
 800bc2a:	dd17      	ble.n	800bc5c <_dtoa_r+0x1b4>
 800bc2c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800bc30:	9a02      	ldr	r2, [sp, #8]
 800bc32:	409d      	lsls	r5, r3
 800bc34:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 800bc38:	fa22 f303 	lsr.w	r3, r2, r3
 800bc3c:	432b      	orrs	r3, r5
 800bc3e:	ee07 3a90 	vmov	s15, r3
 800bc42:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bc46:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bc4a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bc4e:	9805      	ldr	r0, [sp, #20]
 800bc50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc54:	2701      	movs	r7, #1
 800bc56:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 800bc5a:	e7a5      	b.n	800bba8 <_dtoa_r+0x100>
 800bc5c:	9a02      	ldr	r2, [sp, #8]
 800bc5e:	f1c3 0320 	rsb	r3, r3, #32
 800bc62:	fa02 f303 	lsl.w	r3, r2, r3
 800bc66:	e7ea      	b.n	800bc3e <_dtoa_r+0x196>
 800bc68:	2301      	movs	r3, #1
 800bc6a:	eba1 0a0a 	sub.w	sl, r1, sl
 800bc6e:	9310      	str	r3, [sp, #64]	; 0x40
 800bc70:	f1ba 0301 	subs.w	r3, sl, #1
 800bc74:	9307      	str	r3, [sp, #28]
 800bc76:	bf43      	ittte	mi
 800bc78:	2300      	movmi	r3, #0
 800bc7a:	f1ca 0a01 	rsbmi	sl, sl, #1
 800bc7e:	9307      	strmi	r3, [sp, #28]
 800bc80:	f04f 0a00 	movpl.w	sl, #0
 800bc84:	f1bb 0f00 	cmp.w	fp, #0
 800bc88:	db19      	blt.n	800bcbe <_dtoa_r+0x216>
 800bc8a:	9b07      	ldr	r3, [sp, #28]
 800bc8c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800bc90:	445b      	add	r3, fp
 800bc92:	9307      	str	r3, [sp, #28]
 800bc94:	f04f 0800 	mov.w	r8, #0
 800bc98:	9b08      	ldr	r3, [sp, #32]
 800bc9a:	2b09      	cmp	r3, #9
 800bc9c:	d866      	bhi.n	800bd6c <_dtoa_r+0x2c4>
 800bc9e:	2b05      	cmp	r3, #5
 800bca0:	bfc4      	itt	gt
 800bca2:	3b04      	subgt	r3, #4
 800bca4:	9308      	strgt	r3, [sp, #32]
 800bca6:	9b08      	ldr	r3, [sp, #32]
 800bca8:	f1a3 0302 	sub.w	r3, r3, #2
 800bcac:	bfcc      	ite	gt
 800bcae:	2500      	movgt	r5, #0
 800bcb0:	2501      	movle	r5, #1
 800bcb2:	2b03      	cmp	r3, #3
 800bcb4:	d866      	bhi.n	800bd84 <_dtoa_r+0x2dc>
 800bcb6:	e8df f003 	tbb	[pc, r3]
 800bcba:	5755      	.short	0x5755
 800bcbc:	4909      	.short	0x4909
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	ebaa 0a0b 	sub.w	sl, sl, fp
 800bcc4:	f1cb 0800 	rsb	r8, fp, #0
 800bcc8:	930b      	str	r3, [sp, #44]	; 0x2c
 800bcca:	e7e5      	b.n	800bc98 <_dtoa_r+0x1f0>
 800bccc:	2301      	movs	r3, #1
 800bcce:	9309      	str	r3, [sp, #36]	; 0x24
 800bcd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	dd59      	ble.n	800bd8a <_dtoa_r+0x2e2>
 800bcd6:	9306      	str	r3, [sp, #24]
 800bcd8:	4699      	mov	r9, r3
 800bcda:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bcdc:	2200      	movs	r2, #0
 800bcde:	6072      	str	r2, [r6, #4]
 800bce0:	2204      	movs	r2, #4
 800bce2:	f102 0014 	add.w	r0, r2, #20
 800bce6:	4298      	cmp	r0, r3
 800bce8:	6871      	ldr	r1, [r6, #4]
 800bcea:	d953      	bls.n	800bd94 <_dtoa_r+0x2ec>
 800bcec:	4620      	mov	r0, r4
 800bcee:	f000 fc48 	bl	800c582 <_Balloc>
 800bcf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcf4:	6030      	str	r0, [r6, #0]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	9304      	str	r3, [sp, #16]
 800bcfa:	f1b9 0f0e 	cmp.w	r9, #14
 800bcfe:	f200 80c2 	bhi.w	800be86 <_dtoa_r+0x3de>
 800bd02:	2d00      	cmp	r5, #0
 800bd04:	f000 80bf 	beq.w	800be86 <_dtoa_r+0x3de>
 800bd08:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd0c:	f1bb 0f00 	cmp.w	fp, #0
 800bd10:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800bd14:	f340 80e6 	ble.w	800bee4 <_dtoa_r+0x43c>
 800bd18:	4a2b      	ldr	r2, [pc, #172]	; (800bdc8 <_dtoa_r+0x320>)
 800bd1a:	f00b 030f 	and.w	r3, fp, #15
 800bd1e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bd22:	ed93 7b00 	vldr	d7, [r3]
 800bd26:	ea4f 132b 	mov.w	r3, fp, asr #4
 800bd2a:	06da      	lsls	r2, r3, #27
 800bd2c:	f140 80d8 	bpl.w	800bee0 <_dtoa_r+0x438>
 800bd30:	4a26      	ldr	r2, [pc, #152]	; (800bdcc <_dtoa_r+0x324>)
 800bd32:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800bd36:	ed92 6b08 	vldr	d6, [r2, #32]
 800bd3a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800bd3e:	ed8d 6b02 	vstr	d6, [sp, #8]
 800bd42:	f003 030f 	and.w	r3, r3, #15
 800bd46:	2203      	movs	r2, #3
 800bd48:	4920      	ldr	r1, [pc, #128]	; (800bdcc <_dtoa_r+0x324>)
 800bd4a:	e04a      	b.n	800bde2 <_dtoa_r+0x33a>
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	9309      	str	r3, [sp, #36]	; 0x24
 800bd50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd52:	445b      	add	r3, fp
 800bd54:	f103 0901 	add.w	r9, r3, #1
 800bd58:	9306      	str	r3, [sp, #24]
 800bd5a:	464b      	mov	r3, r9
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	bfb8      	it	lt
 800bd60:	2301      	movlt	r3, #1
 800bd62:	e7ba      	b.n	800bcda <_dtoa_r+0x232>
 800bd64:	2300      	movs	r3, #0
 800bd66:	e7b2      	b.n	800bcce <_dtoa_r+0x226>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	e7f0      	b.n	800bd4e <_dtoa_r+0x2a6>
 800bd6c:	2501      	movs	r5, #1
 800bd6e:	2300      	movs	r3, #0
 800bd70:	e9cd 3508 	strd	r3, r5, [sp, #32]
 800bd74:	f04f 33ff 	mov.w	r3, #4294967295
 800bd78:	9306      	str	r3, [sp, #24]
 800bd7a:	4699      	mov	r9, r3
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	2312      	movs	r3, #18
 800bd80:	920a      	str	r2, [sp, #40]	; 0x28
 800bd82:	e7aa      	b.n	800bcda <_dtoa_r+0x232>
 800bd84:	2301      	movs	r3, #1
 800bd86:	9309      	str	r3, [sp, #36]	; 0x24
 800bd88:	e7f4      	b.n	800bd74 <_dtoa_r+0x2cc>
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	9306      	str	r3, [sp, #24]
 800bd8e:	4699      	mov	r9, r3
 800bd90:	461a      	mov	r2, r3
 800bd92:	e7f5      	b.n	800bd80 <_dtoa_r+0x2d8>
 800bd94:	3101      	adds	r1, #1
 800bd96:	6071      	str	r1, [r6, #4]
 800bd98:	0052      	lsls	r2, r2, #1
 800bd9a:	e7a2      	b.n	800bce2 <_dtoa_r+0x23a>
 800bd9c:	f3af 8000 	nop.w
 800bda0:	636f4361 	.word	0x636f4361
 800bda4:	3fd287a7 	.word	0x3fd287a7
 800bda8:	8b60c8b3 	.word	0x8b60c8b3
 800bdac:	3fc68a28 	.word	0x3fc68a28
 800bdb0:	509f79fb 	.word	0x509f79fb
 800bdb4:	3fd34413 	.word	0x3fd34413
 800bdb8:	7ff00000 	.word	0x7ff00000
 800bdbc:	0801db0f 	.word	0x0801db0f
 800bdc0:	0801db06 	.word	0x0801db06
 800bdc4:	0801dd35 	.word	0x0801dd35
 800bdc8:	0801db40 	.word	0x0801db40
 800bdcc:	0801db18 	.word	0x0801db18
 800bdd0:	07de      	lsls	r6, r3, #31
 800bdd2:	d504      	bpl.n	800bdde <_dtoa_r+0x336>
 800bdd4:	ed91 6b00 	vldr	d6, [r1]
 800bdd8:	3201      	adds	r2, #1
 800bdda:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bdde:	105b      	asrs	r3, r3, #1
 800bde0:	3108      	adds	r1, #8
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d1f4      	bne.n	800bdd0 <_dtoa_r+0x328>
 800bde6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bdea:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bdee:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bdf2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	f000 80a7 	beq.w	800bf48 <_dtoa_r+0x4a0>
 800bdfa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800bdfe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be02:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800be06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be0a:	f140 809d 	bpl.w	800bf48 <_dtoa_r+0x4a0>
 800be0e:	f1b9 0f00 	cmp.w	r9, #0
 800be12:	f000 8099 	beq.w	800bf48 <_dtoa_r+0x4a0>
 800be16:	9b06      	ldr	r3, [sp, #24]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	dd30      	ble.n	800be7e <_dtoa_r+0x3d6>
 800be1c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800be20:	ee27 7b06 	vmul.f64	d7, d7, d6
 800be24:	ed8d 7b02 	vstr	d7, [sp, #8]
 800be28:	9d06      	ldr	r5, [sp, #24]
 800be2a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800be2e:	3201      	adds	r2, #1
 800be30:	ed9d 6b02 	vldr	d6, [sp, #8]
 800be34:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800be38:	ee07 2a90 	vmov	s15, r2
 800be3c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800be40:	eea7 5b06 	vfma.f64	d5, d7, d6
 800be44:	ed8d 5b02 	vstr	d5, [sp, #8]
 800be48:	9a03      	ldr	r2, [sp, #12]
 800be4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be4e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800be52:	2d00      	cmp	r5, #0
 800be54:	d17b      	bne.n	800bf4e <_dtoa_r+0x4a6>
 800be56:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800be5a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800be5e:	ec41 0b17 	vmov	d7, r0, r1
 800be62:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800be66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be6a:	f300 8253 	bgt.w	800c314 <_dtoa_r+0x86c>
 800be6e:	eeb1 7b47 	vneg.f64	d7, d7
 800be72:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800be76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be7a:	f100 8249 	bmi.w	800c310 <_dtoa_r+0x868>
 800be7e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800be82:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800be88:	2b00      	cmp	r3, #0
 800be8a:	f2c0 8119 	blt.w	800c0c0 <_dtoa_r+0x618>
 800be8e:	f1bb 0f0e 	cmp.w	fp, #14
 800be92:	f300 8115 	bgt.w	800c0c0 <_dtoa_r+0x618>
 800be96:	4bc3      	ldr	r3, [pc, #780]	; (800c1a4 <_dtoa_r+0x6fc>)
 800be98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800be9c:	ed93 6b00 	vldr	d6, [r3]
 800bea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	f280 80ba 	bge.w	800c01c <_dtoa_r+0x574>
 800bea8:	f1b9 0f00 	cmp.w	r9, #0
 800beac:	f300 80b6 	bgt.w	800c01c <_dtoa_r+0x574>
 800beb0:	f040 822d 	bne.w	800c30e <_dtoa_r+0x866>
 800beb4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800beb8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bebc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bec0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bec8:	464d      	mov	r5, r9
 800beca:	464f      	mov	r7, r9
 800becc:	f280 8204 	bge.w	800c2d8 <_dtoa_r+0x830>
 800bed0:	9b04      	ldr	r3, [sp, #16]
 800bed2:	9a04      	ldr	r2, [sp, #16]
 800bed4:	1c5e      	adds	r6, r3, #1
 800bed6:	2331      	movs	r3, #49	; 0x31
 800bed8:	7013      	strb	r3, [r2, #0]
 800beda:	f10b 0b01 	add.w	fp, fp, #1
 800bede:	e1ff      	b.n	800c2e0 <_dtoa_r+0x838>
 800bee0:	2202      	movs	r2, #2
 800bee2:	e731      	b.n	800bd48 <_dtoa_r+0x2a0>
 800bee4:	d02e      	beq.n	800bf44 <_dtoa_r+0x49c>
 800bee6:	f1cb 0300 	rsb	r3, fp, #0
 800beea:	4aae      	ldr	r2, [pc, #696]	; (800c1a4 <_dtoa_r+0x6fc>)
 800beec:	f003 010f 	and.w	r1, r3, #15
 800bef0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800bef4:	ed92 7b00 	vldr	d7, [r2]
 800bef8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 800befc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bf00:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800bf04:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800bf08:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800bf0c:	49a6      	ldr	r1, [pc, #664]	; (800c1a8 <_dtoa_r+0x700>)
 800bf0e:	111b      	asrs	r3, r3, #4
 800bf10:	2000      	movs	r0, #0
 800bf12:	2202      	movs	r2, #2
 800bf14:	b93b      	cbnz	r3, 800bf26 <_dtoa_r+0x47e>
 800bf16:	2800      	cmp	r0, #0
 800bf18:	f43f af6b 	beq.w	800bdf2 <_dtoa_r+0x34a>
 800bf1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bf20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf24:	e765      	b.n	800bdf2 <_dtoa_r+0x34a>
 800bf26:	07dd      	lsls	r5, r3, #31
 800bf28:	d509      	bpl.n	800bf3e <_dtoa_r+0x496>
 800bf2a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800bf2e:	ed91 7b00 	vldr	d7, [r1]
 800bf32:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bf36:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800bf3a:	3201      	adds	r2, #1
 800bf3c:	2001      	movs	r0, #1
 800bf3e:	105b      	asrs	r3, r3, #1
 800bf40:	3108      	adds	r1, #8
 800bf42:	e7e7      	b.n	800bf14 <_dtoa_r+0x46c>
 800bf44:	2202      	movs	r2, #2
 800bf46:	e754      	b.n	800bdf2 <_dtoa_r+0x34a>
 800bf48:	465b      	mov	r3, fp
 800bf4a:	464d      	mov	r5, r9
 800bf4c:	e770      	b.n	800be30 <_dtoa_r+0x388>
 800bf4e:	4a95      	ldr	r2, [pc, #596]	; (800c1a4 <_dtoa_r+0x6fc>)
 800bf50:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800bf54:	ed12 4b02 	vldr	d4, [r2, #-8]
 800bf58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf5a:	ec41 0b17 	vmov	d7, r0, r1
 800bf5e:	b35a      	cbz	r2, 800bfb8 <_dtoa_r+0x510>
 800bf60:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800bf64:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800bf68:	9e04      	ldr	r6, [sp, #16]
 800bf6a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800bf6e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bf72:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bf76:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bf7a:	ee14 2a90 	vmov	r2, s9
 800bf7e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bf82:	3230      	adds	r2, #48	; 0x30
 800bf84:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bf88:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bf8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf90:	f806 2b01 	strb.w	r2, [r6], #1
 800bf94:	d43b      	bmi.n	800c00e <_dtoa_r+0x566>
 800bf96:	ee32 5b46 	vsub.f64	d5, d2, d6
 800bf9a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800bf9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfa2:	d472      	bmi.n	800c08a <_dtoa_r+0x5e2>
 800bfa4:	9a04      	ldr	r2, [sp, #16]
 800bfa6:	1ab2      	subs	r2, r6, r2
 800bfa8:	4295      	cmp	r5, r2
 800bfaa:	f77f af68 	ble.w	800be7e <_dtoa_r+0x3d6>
 800bfae:	ee27 7b03 	vmul.f64	d7, d7, d3
 800bfb2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bfb6:	e7de      	b.n	800bf76 <_dtoa_r+0x4ce>
 800bfb8:	9a04      	ldr	r2, [sp, #16]
 800bfba:	ee24 7b07 	vmul.f64	d7, d4, d7
 800bfbe:	1956      	adds	r6, r2, r5
 800bfc0:	4611      	mov	r1, r2
 800bfc2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bfc6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bfca:	ee14 2a90 	vmov	r2, s9
 800bfce:	3230      	adds	r2, #48	; 0x30
 800bfd0:	f801 2b01 	strb.w	r2, [r1], #1
 800bfd4:	42b1      	cmp	r1, r6
 800bfd6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bfda:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bfde:	d11a      	bne.n	800c016 <_dtoa_r+0x56e>
 800bfe0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800bfe4:	ee37 4b05 	vadd.f64	d4, d7, d5
 800bfe8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800bfec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bff0:	dc4b      	bgt.n	800c08a <_dtoa_r+0x5e2>
 800bff2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bff6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bffe:	f57f af3e 	bpl.w	800be7e <_dtoa_r+0x3d6>
 800c002:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c006:	2a30      	cmp	r2, #48	; 0x30
 800c008:	f106 31ff 	add.w	r1, r6, #4294967295
 800c00c:	d001      	beq.n	800c012 <_dtoa_r+0x56a>
 800c00e:	469b      	mov	fp, r3
 800c010:	e02a      	b.n	800c068 <_dtoa_r+0x5c0>
 800c012:	460e      	mov	r6, r1
 800c014:	e7f5      	b.n	800c002 <_dtoa_r+0x55a>
 800c016:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c01a:	e7d4      	b.n	800bfc6 <_dtoa_r+0x51e>
 800c01c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c020:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800c024:	9e04      	ldr	r6, [sp, #16]
 800c026:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c02a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c02e:	ee15 3a10 	vmov	r3, s10
 800c032:	3330      	adds	r3, #48	; 0x30
 800c034:	f806 3b01 	strb.w	r3, [r6], #1
 800c038:	9b04      	ldr	r3, [sp, #16]
 800c03a:	1af3      	subs	r3, r6, r3
 800c03c:	4599      	cmp	r9, r3
 800c03e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c042:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c046:	d133      	bne.n	800c0b0 <_dtoa_r+0x608>
 800c048:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c04c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c054:	dc18      	bgt.n	800c088 <_dtoa_r+0x5e0>
 800c056:	eeb4 7b46 	vcmp.f64	d7, d6
 800c05a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c05e:	d103      	bne.n	800c068 <_dtoa_r+0x5c0>
 800c060:	ee15 3a10 	vmov	r3, s10
 800c064:	07db      	lsls	r3, r3, #31
 800c066:	d40f      	bmi.n	800c088 <_dtoa_r+0x5e0>
 800c068:	9901      	ldr	r1, [sp, #4]
 800c06a:	4620      	mov	r0, r4
 800c06c:	f000 fabd 	bl	800c5ea <_Bfree>
 800c070:	2300      	movs	r3, #0
 800c072:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c074:	7033      	strb	r3, [r6, #0]
 800c076:	f10b 0301 	add.w	r3, fp, #1
 800c07a:	6013      	str	r3, [r2, #0]
 800c07c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c07e:	2b00      	cmp	r3, #0
 800c080:	f43f ad5b 	beq.w	800bb3a <_dtoa_r+0x92>
 800c084:	601e      	str	r6, [r3, #0]
 800c086:	e558      	b.n	800bb3a <_dtoa_r+0x92>
 800c088:	465b      	mov	r3, fp
 800c08a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c08e:	2939      	cmp	r1, #57	; 0x39
 800c090:	f106 32ff 	add.w	r2, r6, #4294967295
 800c094:	d106      	bne.n	800c0a4 <_dtoa_r+0x5fc>
 800c096:	9904      	ldr	r1, [sp, #16]
 800c098:	4291      	cmp	r1, r2
 800c09a:	d107      	bne.n	800c0ac <_dtoa_r+0x604>
 800c09c:	2230      	movs	r2, #48	; 0x30
 800c09e:	700a      	strb	r2, [r1, #0]
 800c0a0:	3301      	adds	r3, #1
 800c0a2:	460a      	mov	r2, r1
 800c0a4:	7811      	ldrb	r1, [r2, #0]
 800c0a6:	3101      	adds	r1, #1
 800c0a8:	7011      	strb	r1, [r2, #0]
 800c0aa:	e7b0      	b.n	800c00e <_dtoa_r+0x566>
 800c0ac:	4616      	mov	r6, r2
 800c0ae:	e7ec      	b.n	800c08a <_dtoa_r+0x5e2>
 800c0b0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c0b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c0b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0bc:	d1b3      	bne.n	800c026 <_dtoa_r+0x57e>
 800c0be:	e7d3      	b.n	800c068 <_dtoa_r+0x5c0>
 800c0c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0c2:	2a00      	cmp	r2, #0
 800c0c4:	f000 808d 	beq.w	800c1e2 <_dtoa_r+0x73a>
 800c0c8:	9a08      	ldr	r2, [sp, #32]
 800c0ca:	2a01      	cmp	r2, #1
 800c0cc:	dc72      	bgt.n	800c1b4 <_dtoa_r+0x70c>
 800c0ce:	2f00      	cmp	r7, #0
 800c0d0:	d06c      	beq.n	800c1ac <_dtoa_r+0x704>
 800c0d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c0d6:	4645      	mov	r5, r8
 800c0d8:	4656      	mov	r6, sl
 800c0da:	9a07      	ldr	r2, [sp, #28]
 800c0dc:	2101      	movs	r1, #1
 800c0de:	441a      	add	r2, r3
 800c0e0:	4620      	mov	r0, r4
 800c0e2:	449a      	add	sl, r3
 800c0e4:	9207      	str	r2, [sp, #28]
 800c0e6:	f000 fb20 	bl	800c72a <__i2b>
 800c0ea:	4607      	mov	r7, r0
 800c0ec:	2e00      	cmp	r6, #0
 800c0ee:	dd0b      	ble.n	800c108 <_dtoa_r+0x660>
 800c0f0:	9b07      	ldr	r3, [sp, #28]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	dd08      	ble.n	800c108 <_dtoa_r+0x660>
 800c0f6:	42b3      	cmp	r3, r6
 800c0f8:	9a07      	ldr	r2, [sp, #28]
 800c0fa:	bfa8      	it	ge
 800c0fc:	4633      	movge	r3, r6
 800c0fe:	ebaa 0a03 	sub.w	sl, sl, r3
 800c102:	1af6      	subs	r6, r6, r3
 800c104:	1ad3      	subs	r3, r2, r3
 800c106:	9307      	str	r3, [sp, #28]
 800c108:	f1b8 0f00 	cmp.w	r8, #0
 800c10c:	d01d      	beq.n	800c14a <_dtoa_r+0x6a2>
 800c10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c110:	2b00      	cmp	r3, #0
 800c112:	d06a      	beq.n	800c1ea <_dtoa_r+0x742>
 800c114:	b18d      	cbz	r5, 800c13a <_dtoa_r+0x692>
 800c116:	4639      	mov	r1, r7
 800c118:	462a      	mov	r2, r5
 800c11a:	4620      	mov	r0, r4
 800c11c:	f000 fba4 	bl	800c868 <__pow5mult>
 800c120:	9a01      	ldr	r2, [sp, #4]
 800c122:	4601      	mov	r1, r0
 800c124:	4607      	mov	r7, r0
 800c126:	4620      	mov	r0, r4
 800c128:	f000 fb08 	bl	800c73c <__multiply>
 800c12c:	9901      	ldr	r1, [sp, #4]
 800c12e:	900c      	str	r0, [sp, #48]	; 0x30
 800c130:	4620      	mov	r0, r4
 800c132:	f000 fa5a 	bl	800c5ea <_Bfree>
 800c136:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c138:	9301      	str	r3, [sp, #4]
 800c13a:	ebb8 0205 	subs.w	r2, r8, r5
 800c13e:	d004      	beq.n	800c14a <_dtoa_r+0x6a2>
 800c140:	9901      	ldr	r1, [sp, #4]
 800c142:	4620      	mov	r0, r4
 800c144:	f000 fb90 	bl	800c868 <__pow5mult>
 800c148:	9001      	str	r0, [sp, #4]
 800c14a:	2101      	movs	r1, #1
 800c14c:	4620      	mov	r0, r4
 800c14e:	f000 faec 	bl	800c72a <__i2b>
 800c152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c154:	4605      	mov	r5, r0
 800c156:	2b00      	cmp	r3, #0
 800c158:	f000 81ca 	beq.w	800c4f0 <_dtoa_r+0xa48>
 800c15c:	461a      	mov	r2, r3
 800c15e:	4601      	mov	r1, r0
 800c160:	4620      	mov	r0, r4
 800c162:	f000 fb81 	bl	800c868 <__pow5mult>
 800c166:	9b08      	ldr	r3, [sp, #32]
 800c168:	2b01      	cmp	r3, #1
 800c16a:	4605      	mov	r5, r0
 800c16c:	dc44      	bgt.n	800c1f8 <_dtoa_r+0x750>
 800c16e:	9b02      	ldr	r3, [sp, #8]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d13c      	bne.n	800c1ee <_dtoa_r+0x746>
 800c174:	9b03      	ldr	r3, [sp, #12]
 800c176:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d137      	bne.n	800c1ee <_dtoa_r+0x746>
 800c17e:	9b03      	ldr	r3, [sp, #12]
 800c180:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c184:	0d1b      	lsrs	r3, r3, #20
 800c186:	051b      	lsls	r3, r3, #20
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d033      	beq.n	800c1f4 <_dtoa_r+0x74c>
 800c18c:	9b07      	ldr	r3, [sp, #28]
 800c18e:	3301      	adds	r3, #1
 800c190:	f10a 0a01 	add.w	sl, sl, #1
 800c194:	9307      	str	r3, [sp, #28]
 800c196:	f04f 0801 	mov.w	r8, #1
 800c19a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c19c:	bb73      	cbnz	r3, 800c1fc <_dtoa_r+0x754>
 800c19e:	2001      	movs	r0, #1
 800c1a0:	e034      	b.n	800c20c <_dtoa_r+0x764>
 800c1a2:	bf00      	nop
 800c1a4:	0801db40 	.word	0x0801db40
 800c1a8:	0801db18 	.word	0x0801db18
 800c1ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c1ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c1b2:	e790      	b.n	800c0d6 <_dtoa_r+0x62e>
 800c1b4:	f109 35ff 	add.w	r5, r9, #4294967295
 800c1b8:	45a8      	cmp	r8, r5
 800c1ba:	bfbf      	itttt	lt
 800c1bc:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800c1be:	eba5 0808 	sublt.w	r8, r5, r8
 800c1c2:	4443      	addlt	r3, r8
 800c1c4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800c1c6:	bfb6      	itet	lt
 800c1c8:	46a8      	movlt	r8, r5
 800c1ca:	eba8 0505 	subge.w	r5, r8, r5
 800c1ce:	2500      	movlt	r5, #0
 800c1d0:	f1b9 0f00 	cmp.w	r9, #0
 800c1d4:	bfb9      	ittee	lt
 800c1d6:	ebaa 0609 	sublt.w	r6, sl, r9
 800c1da:	2300      	movlt	r3, #0
 800c1dc:	4656      	movge	r6, sl
 800c1de:	464b      	movge	r3, r9
 800c1e0:	e77b      	b.n	800c0da <_dtoa_r+0x632>
 800c1e2:	4645      	mov	r5, r8
 800c1e4:	4656      	mov	r6, sl
 800c1e6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c1e8:	e780      	b.n	800c0ec <_dtoa_r+0x644>
 800c1ea:	4642      	mov	r2, r8
 800c1ec:	e7a8      	b.n	800c140 <_dtoa_r+0x698>
 800c1ee:	f04f 0800 	mov.w	r8, #0
 800c1f2:	e7d2      	b.n	800c19a <_dtoa_r+0x6f2>
 800c1f4:	4698      	mov	r8, r3
 800c1f6:	e7d0      	b.n	800c19a <_dtoa_r+0x6f2>
 800c1f8:	f04f 0800 	mov.w	r8, #0
 800c1fc:	692b      	ldr	r3, [r5, #16]
 800c1fe:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c202:	6918      	ldr	r0, [r3, #16]
 800c204:	f000 fa43 	bl	800c68e <__hi0bits>
 800c208:	f1c0 0020 	rsb	r0, r0, #32
 800c20c:	9b07      	ldr	r3, [sp, #28]
 800c20e:	4418      	add	r0, r3
 800c210:	f010 001f 	ands.w	r0, r0, #31
 800c214:	d047      	beq.n	800c2a6 <_dtoa_r+0x7fe>
 800c216:	f1c0 0320 	rsb	r3, r0, #32
 800c21a:	2b04      	cmp	r3, #4
 800c21c:	dd3b      	ble.n	800c296 <_dtoa_r+0x7ee>
 800c21e:	9b07      	ldr	r3, [sp, #28]
 800c220:	f1c0 001c 	rsb	r0, r0, #28
 800c224:	4482      	add	sl, r0
 800c226:	4406      	add	r6, r0
 800c228:	4403      	add	r3, r0
 800c22a:	9307      	str	r3, [sp, #28]
 800c22c:	f1ba 0f00 	cmp.w	sl, #0
 800c230:	dd05      	ble.n	800c23e <_dtoa_r+0x796>
 800c232:	4652      	mov	r2, sl
 800c234:	9901      	ldr	r1, [sp, #4]
 800c236:	4620      	mov	r0, r4
 800c238:	f000 fb64 	bl	800c904 <__lshift>
 800c23c:	9001      	str	r0, [sp, #4]
 800c23e:	9b07      	ldr	r3, [sp, #28]
 800c240:	2b00      	cmp	r3, #0
 800c242:	dd05      	ble.n	800c250 <_dtoa_r+0x7a8>
 800c244:	4629      	mov	r1, r5
 800c246:	461a      	mov	r2, r3
 800c248:	4620      	mov	r0, r4
 800c24a:	f000 fb5b 	bl	800c904 <__lshift>
 800c24e:	4605      	mov	r5, r0
 800c250:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c252:	b353      	cbz	r3, 800c2aa <_dtoa_r+0x802>
 800c254:	4629      	mov	r1, r5
 800c256:	9801      	ldr	r0, [sp, #4]
 800c258:	f000 fba8 	bl	800c9ac <__mcmp>
 800c25c:	2800      	cmp	r0, #0
 800c25e:	da24      	bge.n	800c2aa <_dtoa_r+0x802>
 800c260:	2300      	movs	r3, #0
 800c262:	220a      	movs	r2, #10
 800c264:	9901      	ldr	r1, [sp, #4]
 800c266:	4620      	mov	r0, r4
 800c268:	f000 f9d6 	bl	800c618 <__multadd>
 800c26c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c26e:	9001      	str	r0, [sp, #4]
 800c270:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c274:	2b00      	cmp	r3, #0
 800c276:	f000 8142 	beq.w	800c4fe <_dtoa_r+0xa56>
 800c27a:	2300      	movs	r3, #0
 800c27c:	4639      	mov	r1, r7
 800c27e:	220a      	movs	r2, #10
 800c280:	4620      	mov	r0, r4
 800c282:	f000 f9c9 	bl	800c618 <__multadd>
 800c286:	9b06      	ldr	r3, [sp, #24]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	4607      	mov	r7, r0
 800c28c:	dc4b      	bgt.n	800c326 <_dtoa_r+0x87e>
 800c28e:	9b08      	ldr	r3, [sp, #32]
 800c290:	2b02      	cmp	r3, #2
 800c292:	dd48      	ble.n	800c326 <_dtoa_r+0x87e>
 800c294:	e011      	b.n	800c2ba <_dtoa_r+0x812>
 800c296:	d0c9      	beq.n	800c22c <_dtoa_r+0x784>
 800c298:	9a07      	ldr	r2, [sp, #28]
 800c29a:	331c      	adds	r3, #28
 800c29c:	441a      	add	r2, r3
 800c29e:	449a      	add	sl, r3
 800c2a0:	441e      	add	r6, r3
 800c2a2:	4613      	mov	r3, r2
 800c2a4:	e7c1      	b.n	800c22a <_dtoa_r+0x782>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	e7f6      	b.n	800c298 <_dtoa_r+0x7f0>
 800c2aa:	f1b9 0f00 	cmp.w	r9, #0
 800c2ae:	dc34      	bgt.n	800c31a <_dtoa_r+0x872>
 800c2b0:	9b08      	ldr	r3, [sp, #32]
 800c2b2:	2b02      	cmp	r3, #2
 800c2b4:	dd31      	ble.n	800c31a <_dtoa_r+0x872>
 800c2b6:	f8cd 9018 	str.w	r9, [sp, #24]
 800c2ba:	9b06      	ldr	r3, [sp, #24]
 800c2bc:	b963      	cbnz	r3, 800c2d8 <_dtoa_r+0x830>
 800c2be:	4629      	mov	r1, r5
 800c2c0:	2205      	movs	r2, #5
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	f000 f9a8 	bl	800c618 <__multadd>
 800c2c8:	4601      	mov	r1, r0
 800c2ca:	4605      	mov	r5, r0
 800c2cc:	9801      	ldr	r0, [sp, #4]
 800c2ce:	f000 fb6d 	bl	800c9ac <__mcmp>
 800c2d2:	2800      	cmp	r0, #0
 800c2d4:	f73f adfc 	bgt.w	800bed0 <_dtoa_r+0x428>
 800c2d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2da:	9e04      	ldr	r6, [sp, #16]
 800c2dc:	ea6f 0b03 	mvn.w	fp, r3
 800c2e0:	f04f 0900 	mov.w	r9, #0
 800c2e4:	4629      	mov	r1, r5
 800c2e6:	4620      	mov	r0, r4
 800c2e8:	f000 f97f 	bl	800c5ea <_Bfree>
 800c2ec:	2f00      	cmp	r7, #0
 800c2ee:	f43f aebb 	beq.w	800c068 <_dtoa_r+0x5c0>
 800c2f2:	f1b9 0f00 	cmp.w	r9, #0
 800c2f6:	d005      	beq.n	800c304 <_dtoa_r+0x85c>
 800c2f8:	45b9      	cmp	r9, r7
 800c2fa:	d003      	beq.n	800c304 <_dtoa_r+0x85c>
 800c2fc:	4649      	mov	r1, r9
 800c2fe:	4620      	mov	r0, r4
 800c300:	f000 f973 	bl	800c5ea <_Bfree>
 800c304:	4639      	mov	r1, r7
 800c306:	4620      	mov	r0, r4
 800c308:	f000 f96f 	bl	800c5ea <_Bfree>
 800c30c:	e6ac      	b.n	800c068 <_dtoa_r+0x5c0>
 800c30e:	2500      	movs	r5, #0
 800c310:	462f      	mov	r7, r5
 800c312:	e7e1      	b.n	800c2d8 <_dtoa_r+0x830>
 800c314:	469b      	mov	fp, r3
 800c316:	462f      	mov	r7, r5
 800c318:	e5da      	b.n	800bed0 <_dtoa_r+0x428>
 800c31a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c31c:	f8cd 9018 	str.w	r9, [sp, #24]
 800c320:	2b00      	cmp	r3, #0
 800c322:	f000 80f3 	beq.w	800c50c <_dtoa_r+0xa64>
 800c326:	2e00      	cmp	r6, #0
 800c328:	dd05      	ble.n	800c336 <_dtoa_r+0x88e>
 800c32a:	4639      	mov	r1, r7
 800c32c:	4632      	mov	r2, r6
 800c32e:	4620      	mov	r0, r4
 800c330:	f000 fae8 	bl	800c904 <__lshift>
 800c334:	4607      	mov	r7, r0
 800c336:	f1b8 0f00 	cmp.w	r8, #0
 800c33a:	d04c      	beq.n	800c3d6 <_dtoa_r+0x92e>
 800c33c:	6879      	ldr	r1, [r7, #4]
 800c33e:	4620      	mov	r0, r4
 800c340:	f000 f91f 	bl	800c582 <_Balloc>
 800c344:	693a      	ldr	r2, [r7, #16]
 800c346:	3202      	adds	r2, #2
 800c348:	4606      	mov	r6, r0
 800c34a:	0092      	lsls	r2, r2, #2
 800c34c:	f107 010c 	add.w	r1, r7, #12
 800c350:	300c      	adds	r0, #12
 800c352:	f000 f90b 	bl	800c56c <memcpy>
 800c356:	2201      	movs	r2, #1
 800c358:	4631      	mov	r1, r6
 800c35a:	4620      	mov	r0, r4
 800c35c:	f000 fad2 	bl	800c904 <__lshift>
 800c360:	9b02      	ldr	r3, [sp, #8]
 800c362:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c366:	f003 0301 	and.w	r3, r3, #1
 800c36a:	46b9      	mov	r9, r7
 800c36c:	9307      	str	r3, [sp, #28]
 800c36e:	4607      	mov	r7, r0
 800c370:	4629      	mov	r1, r5
 800c372:	9801      	ldr	r0, [sp, #4]
 800c374:	f7ff fb0c 	bl	800b990 <quorem>
 800c378:	4649      	mov	r1, r9
 800c37a:	4606      	mov	r6, r0
 800c37c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c380:	9801      	ldr	r0, [sp, #4]
 800c382:	f000 fb13 	bl	800c9ac <__mcmp>
 800c386:	463a      	mov	r2, r7
 800c388:	9002      	str	r0, [sp, #8]
 800c38a:	4629      	mov	r1, r5
 800c38c:	4620      	mov	r0, r4
 800c38e:	f000 fb27 	bl	800c9e0 <__mdiff>
 800c392:	68c3      	ldr	r3, [r0, #12]
 800c394:	4602      	mov	r2, r0
 800c396:	bb03      	cbnz	r3, 800c3da <_dtoa_r+0x932>
 800c398:	4601      	mov	r1, r0
 800c39a:	9009      	str	r0, [sp, #36]	; 0x24
 800c39c:	9801      	ldr	r0, [sp, #4]
 800c39e:	f000 fb05 	bl	800c9ac <__mcmp>
 800c3a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	4611      	mov	r1, r2
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	9309      	str	r3, [sp, #36]	; 0x24
 800c3ac:	f000 f91d 	bl	800c5ea <_Bfree>
 800c3b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3b2:	b9a3      	cbnz	r3, 800c3de <_dtoa_r+0x936>
 800c3b4:	9a08      	ldr	r2, [sp, #32]
 800c3b6:	b992      	cbnz	r2, 800c3de <_dtoa_r+0x936>
 800c3b8:	9a07      	ldr	r2, [sp, #28]
 800c3ba:	b982      	cbnz	r2, 800c3de <_dtoa_r+0x936>
 800c3bc:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c3c0:	d029      	beq.n	800c416 <_dtoa_r+0x96e>
 800c3c2:	9b02      	ldr	r3, [sp, #8]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	dd01      	ble.n	800c3cc <_dtoa_r+0x924>
 800c3c8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 800c3cc:	f10a 0601 	add.w	r6, sl, #1
 800c3d0:	f88a 8000 	strb.w	r8, [sl]
 800c3d4:	e786      	b.n	800c2e4 <_dtoa_r+0x83c>
 800c3d6:	4638      	mov	r0, r7
 800c3d8:	e7c2      	b.n	800c360 <_dtoa_r+0x8b8>
 800c3da:	2301      	movs	r3, #1
 800c3dc:	e7e3      	b.n	800c3a6 <_dtoa_r+0x8fe>
 800c3de:	9a02      	ldr	r2, [sp, #8]
 800c3e0:	2a00      	cmp	r2, #0
 800c3e2:	db04      	blt.n	800c3ee <_dtoa_r+0x946>
 800c3e4:	d124      	bne.n	800c430 <_dtoa_r+0x988>
 800c3e6:	9a08      	ldr	r2, [sp, #32]
 800c3e8:	bb12      	cbnz	r2, 800c430 <_dtoa_r+0x988>
 800c3ea:	9a07      	ldr	r2, [sp, #28]
 800c3ec:	bb02      	cbnz	r2, 800c430 <_dtoa_r+0x988>
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	ddec      	ble.n	800c3cc <_dtoa_r+0x924>
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	9901      	ldr	r1, [sp, #4]
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	f000 fa84 	bl	800c904 <__lshift>
 800c3fc:	4629      	mov	r1, r5
 800c3fe:	9001      	str	r0, [sp, #4]
 800c400:	f000 fad4 	bl	800c9ac <__mcmp>
 800c404:	2800      	cmp	r0, #0
 800c406:	dc03      	bgt.n	800c410 <_dtoa_r+0x968>
 800c408:	d1e0      	bne.n	800c3cc <_dtoa_r+0x924>
 800c40a:	f018 0f01 	tst.w	r8, #1
 800c40e:	d0dd      	beq.n	800c3cc <_dtoa_r+0x924>
 800c410:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c414:	d1d8      	bne.n	800c3c8 <_dtoa_r+0x920>
 800c416:	2339      	movs	r3, #57	; 0x39
 800c418:	f10a 0601 	add.w	r6, sl, #1
 800c41c:	f88a 3000 	strb.w	r3, [sl]
 800c420:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c424:	2b39      	cmp	r3, #57	; 0x39
 800c426:	f106 32ff 	add.w	r2, r6, #4294967295
 800c42a:	d04c      	beq.n	800c4c6 <_dtoa_r+0xa1e>
 800c42c:	3301      	adds	r3, #1
 800c42e:	e051      	b.n	800c4d4 <_dtoa_r+0xa2c>
 800c430:	2b00      	cmp	r3, #0
 800c432:	f10a 0601 	add.w	r6, sl, #1
 800c436:	dd05      	ble.n	800c444 <_dtoa_r+0x99c>
 800c438:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c43c:	d0eb      	beq.n	800c416 <_dtoa_r+0x96e>
 800c43e:	f108 0801 	add.w	r8, r8, #1
 800c442:	e7c5      	b.n	800c3d0 <_dtoa_r+0x928>
 800c444:	9b04      	ldr	r3, [sp, #16]
 800c446:	9a06      	ldr	r2, [sp, #24]
 800c448:	f806 8c01 	strb.w	r8, [r6, #-1]
 800c44c:	1af3      	subs	r3, r6, r3
 800c44e:	4293      	cmp	r3, r2
 800c450:	d021      	beq.n	800c496 <_dtoa_r+0x9ee>
 800c452:	2300      	movs	r3, #0
 800c454:	220a      	movs	r2, #10
 800c456:	9901      	ldr	r1, [sp, #4]
 800c458:	4620      	mov	r0, r4
 800c45a:	f000 f8dd 	bl	800c618 <__multadd>
 800c45e:	45b9      	cmp	r9, r7
 800c460:	9001      	str	r0, [sp, #4]
 800c462:	f04f 0300 	mov.w	r3, #0
 800c466:	f04f 020a 	mov.w	r2, #10
 800c46a:	4649      	mov	r1, r9
 800c46c:	4620      	mov	r0, r4
 800c46e:	d105      	bne.n	800c47c <_dtoa_r+0x9d4>
 800c470:	f000 f8d2 	bl	800c618 <__multadd>
 800c474:	4681      	mov	r9, r0
 800c476:	4607      	mov	r7, r0
 800c478:	46b2      	mov	sl, r6
 800c47a:	e779      	b.n	800c370 <_dtoa_r+0x8c8>
 800c47c:	f000 f8cc 	bl	800c618 <__multadd>
 800c480:	4639      	mov	r1, r7
 800c482:	4681      	mov	r9, r0
 800c484:	2300      	movs	r3, #0
 800c486:	220a      	movs	r2, #10
 800c488:	4620      	mov	r0, r4
 800c48a:	f000 f8c5 	bl	800c618 <__multadd>
 800c48e:	4607      	mov	r7, r0
 800c490:	e7f2      	b.n	800c478 <_dtoa_r+0x9d0>
 800c492:	f04f 0900 	mov.w	r9, #0
 800c496:	2201      	movs	r2, #1
 800c498:	9901      	ldr	r1, [sp, #4]
 800c49a:	4620      	mov	r0, r4
 800c49c:	f000 fa32 	bl	800c904 <__lshift>
 800c4a0:	4629      	mov	r1, r5
 800c4a2:	9001      	str	r0, [sp, #4]
 800c4a4:	f000 fa82 	bl	800c9ac <__mcmp>
 800c4a8:	2800      	cmp	r0, #0
 800c4aa:	dcb9      	bgt.n	800c420 <_dtoa_r+0x978>
 800c4ac:	d102      	bne.n	800c4b4 <_dtoa_r+0xa0c>
 800c4ae:	f018 0f01 	tst.w	r8, #1
 800c4b2:	d1b5      	bne.n	800c420 <_dtoa_r+0x978>
 800c4b4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c4b8:	2b30      	cmp	r3, #48	; 0x30
 800c4ba:	f106 32ff 	add.w	r2, r6, #4294967295
 800c4be:	f47f af11 	bne.w	800c2e4 <_dtoa_r+0x83c>
 800c4c2:	4616      	mov	r6, r2
 800c4c4:	e7f6      	b.n	800c4b4 <_dtoa_r+0xa0c>
 800c4c6:	9b04      	ldr	r3, [sp, #16]
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d105      	bne.n	800c4d8 <_dtoa_r+0xa30>
 800c4cc:	9a04      	ldr	r2, [sp, #16]
 800c4ce:	f10b 0b01 	add.w	fp, fp, #1
 800c4d2:	2331      	movs	r3, #49	; 0x31
 800c4d4:	7013      	strb	r3, [r2, #0]
 800c4d6:	e705      	b.n	800c2e4 <_dtoa_r+0x83c>
 800c4d8:	4616      	mov	r6, r2
 800c4da:	e7a1      	b.n	800c420 <_dtoa_r+0x978>
 800c4dc:	4b16      	ldr	r3, [pc, #88]	; (800c538 <_dtoa_r+0xa90>)
 800c4de:	f7ff bb48 	b.w	800bb72 <_dtoa_r+0xca>
 800c4e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	f47f ab23 	bne.w	800bb30 <_dtoa_r+0x88>
 800c4ea:	4b14      	ldr	r3, [pc, #80]	; (800c53c <_dtoa_r+0xa94>)
 800c4ec:	f7ff bb41 	b.w	800bb72 <_dtoa_r+0xca>
 800c4f0:	9b08      	ldr	r3, [sp, #32]
 800c4f2:	2b01      	cmp	r3, #1
 800c4f4:	f77f ae3b 	ble.w	800c16e <_dtoa_r+0x6c6>
 800c4f8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800c4fc:	e64f      	b.n	800c19e <_dtoa_r+0x6f6>
 800c4fe:	9b06      	ldr	r3, [sp, #24]
 800c500:	2b00      	cmp	r3, #0
 800c502:	dc03      	bgt.n	800c50c <_dtoa_r+0xa64>
 800c504:	9b08      	ldr	r3, [sp, #32]
 800c506:	2b02      	cmp	r3, #2
 800c508:	f73f aed7 	bgt.w	800c2ba <_dtoa_r+0x812>
 800c50c:	9e04      	ldr	r6, [sp, #16]
 800c50e:	9801      	ldr	r0, [sp, #4]
 800c510:	4629      	mov	r1, r5
 800c512:	f7ff fa3d 	bl	800b990 <quorem>
 800c516:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c51a:	f806 8b01 	strb.w	r8, [r6], #1
 800c51e:	9b04      	ldr	r3, [sp, #16]
 800c520:	9a06      	ldr	r2, [sp, #24]
 800c522:	1af3      	subs	r3, r6, r3
 800c524:	429a      	cmp	r2, r3
 800c526:	ddb4      	ble.n	800c492 <_dtoa_r+0x9ea>
 800c528:	2300      	movs	r3, #0
 800c52a:	220a      	movs	r2, #10
 800c52c:	9901      	ldr	r1, [sp, #4]
 800c52e:	4620      	mov	r0, r4
 800c530:	f000 f872 	bl	800c618 <__multadd>
 800c534:	9001      	str	r0, [sp, #4]
 800c536:	e7ea      	b.n	800c50e <_dtoa_r+0xa66>
 800c538:	0801dd34 	.word	0x0801dd34
 800c53c:	0801db06 	.word	0x0801db06

0800c540 <_localeconv_r>:
 800c540:	4b04      	ldr	r3, [pc, #16]	; (800c554 <_localeconv_r+0x14>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	6a18      	ldr	r0, [r3, #32]
 800c546:	4b04      	ldr	r3, [pc, #16]	; (800c558 <_localeconv_r+0x18>)
 800c548:	2800      	cmp	r0, #0
 800c54a:	bf08      	it	eq
 800c54c:	4618      	moveq	r0, r3
 800c54e:	30f0      	adds	r0, #240	; 0xf0
 800c550:	4770      	bx	lr
 800c552:	bf00      	nop
 800c554:	24000208 	.word	0x24000208
 800c558:	2400026c 	.word	0x2400026c

0800c55c <malloc>:
 800c55c:	4b02      	ldr	r3, [pc, #8]	; (800c568 <malloc+0xc>)
 800c55e:	4601      	mov	r1, r0
 800c560:	6818      	ldr	r0, [r3, #0]
 800c562:	f000 bb45 	b.w	800cbf0 <_malloc_r>
 800c566:	bf00      	nop
 800c568:	24000208 	.word	0x24000208

0800c56c <memcpy>:
 800c56c:	b510      	push	{r4, lr}
 800c56e:	1e43      	subs	r3, r0, #1
 800c570:	440a      	add	r2, r1
 800c572:	4291      	cmp	r1, r2
 800c574:	d100      	bne.n	800c578 <memcpy+0xc>
 800c576:	bd10      	pop	{r4, pc}
 800c578:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c57c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c580:	e7f7      	b.n	800c572 <memcpy+0x6>

0800c582 <_Balloc>:
 800c582:	b570      	push	{r4, r5, r6, lr}
 800c584:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c586:	4604      	mov	r4, r0
 800c588:	460e      	mov	r6, r1
 800c58a:	b93d      	cbnz	r5, 800c59c <_Balloc+0x1a>
 800c58c:	2010      	movs	r0, #16
 800c58e:	f7ff ffe5 	bl	800c55c <malloc>
 800c592:	6260      	str	r0, [r4, #36]	; 0x24
 800c594:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c598:	6005      	str	r5, [r0, #0]
 800c59a:	60c5      	str	r5, [r0, #12]
 800c59c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c59e:	68eb      	ldr	r3, [r5, #12]
 800c5a0:	b183      	cbz	r3, 800c5c4 <_Balloc+0x42>
 800c5a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5a4:	68db      	ldr	r3, [r3, #12]
 800c5a6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c5aa:	b9b8      	cbnz	r0, 800c5dc <_Balloc+0x5a>
 800c5ac:	2101      	movs	r1, #1
 800c5ae:	fa01 f506 	lsl.w	r5, r1, r6
 800c5b2:	1d6a      	adds	r2, r5, #5
 800c5b4:	0092      	lsls	r2, r2, #2
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	f000 fabe 	bl	800cb38 <_calloc_r>
 800c5bc:	b160      	cbz	r0, 800c5d8 <_Balloc+0x56>
 800c5be:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c5c2:	e00e      	b.n	800c5e2 <_Balloc+0x60>
 800c5c4:	2221      	movs	r2, #33	; 0x21
 800c5c6:	2104      	movs	r1, #4
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	f000 fab5 	bl	800cb38 <_calloc_r>
 800c5ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5d0:	60e8      	str	r0, [r5, #12]
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d1e4      	bne.n	800c5a2 <_Balloc+0x20>
 800c5d8:	2000      	movs	r0, #0
 800c5da:	bd70      	pop	{r4, r5, r6, pc}
 800c5dc:	6802      	ldr	r2, [r0, #0]
 800c5de:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c5e8:	e7f7      	b.n	800c5da <_Balloc+0x58>

0800c5ea <_Bfree>:
 800c5ea:	b570      	push	{r4, r5, r6, lr}
 800c5ec:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c5ee:	4606      	mov	r6, r0
 800c5f0:	460d      	mov	r5, r1
 800c5f2:	b93c      	cbnz	r4, 800c604 <_Bfree+0x1a>
 800c5f4:	2010      	movs	r0, #16
 800c5f6:	f7ff ffb1 	bl	800c55c <malloc>
 800c5fa:	6270      	str	r0, [r6, #36]	; 0x24
 800c5fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c600:	6004      	str	r4, [r0, #0]
 800c602:	60c4      	str	r4, [r0, #12]
 800c604:	b13d      	cbz	r5, 800c616 <_Bfree+0x2c>
 800c606:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c608:	686a      	ldr	r2, [r5, #4]
 800c60a:	68db      	ldr	r3, [r3, #12]
 800c60c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c610:	6029      	str	r1, [r5, #0]
 800c612:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c616:	bd70      	pop	{r4, r5, r6, pc}

0800c618 <__multadd>:
 800c618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c61c:	690d      	ldr	r5, [r1, #16]
 800c61e:	461f      	mov	r7, r3
 800c620:	4606      	mov	r6, r0
 800c622:	460c      	mov	r4, r1
 800c624:	f101 0c14 	add.w	ip, r1, #20
 800c628:	2300      	movs	r3, #0
 800c62a:	f8dc 0000 	ldr.w	r0, [ip]
 800c62e:	b281      	uxth	r1, r0
 800c630:	fb02 7101 	mla	r1, r2, r1, r7
 800c634:	0c0f      	lsrs	r7, r1, #16
 800c636:	0c00      	lsrs	r0, r0, #16
 800c638:	fb02 7000 	mla	r0, r2, r0, r7
 800c63c:	b289      	uxth	r1, r1
 800c63e:	3301      	adds	r3, #1
 800c640:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c644:	429d      	cmp	r5, r3
 800c646:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c64a:	f84c 1b04 	str.w	r1, [ip], #4
 800c64e:	dcec      	bgt.n	800c62a <__multadd+0x12>
 800c650:	b1d7      	cbz	r7, 800c688 <__multadd+0x70>
 800c652:	68a3      	ldr	r3, [r4, #8]
 800c654:	42ab      	cmp	r3, r5
 800c656:	dc12      	bgt.n	800c67e <__multadd+0x66>
 800c658:	6861      	ldr	r1, [r4, #4]
 800c65a:	4630      	mov	r0, r6
 800c65c:	3101      	adds	r1, #1
 800c65e:	f7ff ff90 	bl	800c582 <_Balloc>
 800c662:	6922      	ldr	r2, [r4, #16]
 800c664:	3202      	adds	r2, #2
 800c666:	f104 010c 	add.w	r1, r4, #12
 800c66a:	4680      	mov	r8, r0
 800c66c:	0092      	lsls	r2, r2, #2
 800c66e:	300c      	adds	r0, #12
 800c670:	f7ff ff7c 	bl	800c56c <memcpy>
 800c674:	4621      	mov	r1, r4
 800c676:	4630      	mov	r0, r6
 800c678:	f7ff ffb7 	bl	800c5ea <_Bfree>
 800c67c:	4644      	mov	r4, r8
 800c67e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c682:	3501      	adds	r5, #1
 800c684:	615f      	str	r7, [r3, #20]
 800c686:	6125      	str	r5, [r4, #16]
 800c688:	4620      	mov	r0, r4
 800c68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c68e <__hi0bits>:
 800c68e:	0c02      	lsrs	r2, r0, #16
 800c690:	0412      	lsls	r2, r2, #16
 800c692:	4603      	mov	r3, r0
 800c694:	b9b2      	cbnz	r2, 800c6c4 <__hi0bits+0x36>
 800c696:	0403      	lsls	r3, r0, #16
 800c698:	2010      	movs	r0, #16
 800c69a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c69e:	bf04      	itt	eq
 800c6a0:	021b      	lsleq	r3, r3, #8
 800c6a2:	3008      	addeq	r0, #8
 800c6a4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c6a8:	bf04      	itt	eq
 800c6aa:	011b      	lsleq	r3, r3, #4
 800c6ac:	3004      	addeq	r0, #4
 800c6ae:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c6b2:	bf04      	itt	eq
 800c6b4:	009b      	lsleq	r3, r3, #2
 800c6b6:	3002      	addeq	r0, #2
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	db06      	blt.n	800c6ca <__hi0bits+0x3c>
 800c6bc:	005b      	lsls	r3, r3, #1
 800c6be:	d503      	bpl.n	800c6c8 <__hi0bits+0x3a>
 800c6c0:	3001      	adds	r0, #1
 800c6c2:	4770      	bx	lr
 800c6c4:	2000      	movs	r0, #0
 800c6c6:	e7e8      	b.n	800c69a <__hi0bits+0xc>
 800c6c8:	2020      	movs	r0, #32
 800c6ca:	4770      	bx	lr

0800c6cc <__lo0bits>:
 800c6cc:	6803      	ldr	r3, [r0, #0]
 800c6ce:	f013 0207 	ands.w	r2, r3, #7
 800c6d2:	4601      	mov	r1, r0
 800c6d4:	d00b      	beq.n	800c6ee <__lo0bits+0x22>
 800c6d6:	07da      	lsls	r2, r3, #31
 800c6d8:	d423      	bmi.n	800c722 <__lo0bits+0x56>
 800c6da:	0798      	lsls	r0, r3, #30
 800c6dc:	bf49      	itett	mi
 800c6de:	085b      	lsrmi	r3, r3, #1
 800c6e0:	089b      	lsrpl	r3, r3, #2
 800c6e2:	2001      	movmi	r0, #1
 800c6e4:	600b      	strmi	r3, [r1, #0]
 800c6e6:	bf5c      	itt	pl
 800c6e8:	600b      	strpl	r3, [r1, #0]
 800c6ea:	2002      	movpl	r0, #2
 800c6ec:	4770      	bx	lr
 800c6ee:	b298      	uxth	r0, r3
 800c6f0:	b9a8      	cbnz	r0, 800c71e <__lo0bits+0x52>
 800c6f2:	0c1b      	lsrs	r3, r3, #16
 800c6f4:	2010      	movs	r0, #16
 800c6f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c6fa:	bf04      	itt	eq
 800c6fc:	0a1b      	lsreq	r3, r3, #8
 800c6fe:	3008      	addeq	r0, #8
 800c700:	071a      	lsls	r2, r3, #28
 800c702:	bf04      	itt	eq
 800c704:	091b      	lsreq	r3, r3, #4
 800c706:	3004      	addeq	r0, #4
 800c708:	079a      	lsls	r2, r3, #30
 800c70a:	bf04      	itt	eq
 800c70c:	089b      	lsreq	r3, r3, #2
 800c70e:	3002      	addeq	r0, #2
 800c710:	07da      	lsls	r2, r3, #31
 800c712:	d402      	bmi.n	800c71a <__lo0bits+0x4e>
 800c714:	085b      	lsrs	r3, r3, #1
 800c716:	d006      	beq.n	800c726 <__lo0bits+0x5a>
 800c718:	3001      	adds	r0, #1
 800c71a:	600b      	str	r3, [r1, #0]
 800c71c:	4770      	bx	lr
 800c71e:	4610      	mov	r0, r2
 800c720:	e7e9      	b.n	800c6f6 <__lo0bits+0x2a>
 800c722:	2000      	movs	r0, #0
 800c724:	4770      	bx	lr
 800c726:	2020      	movs	r0, #32
 800c728:	4770      	bx	lr

0800c72a <__i2b>:
 800c72a:	b510      	push	{r4, lr}
 800c72c:	460c      	mov	r4, r1
 800c72e:	2101      	movs	r1, #1
 800c730:	f7ff ff27 	bl	800c582 <_Balloc>
 800c734:	2201      	movs	r2, #1
 800c736:	6144      	str	r4, [r0, #20]
 800c738:	6102      	str	r2, [r0, #16]
 800c73a:	bd10      	pop	{r4, pc}

0800c73c <__multiply>:
 800c73c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c740:	4614      	mov	r4, r2
 800c742:	690a      	ldr	r2, [r1, #16]
 800c744:	6923      	ldr	r3, [r4, #16]
 800c746:	429a      	cmp	r2, r3
 800c748:	bfb8      	it	lt
 800c74a:	460b      	movlt	r3, r1
 800c74c:	4688      	mov	r8, r1
 800c74e:	bfbc      	itt	lt
 800c750:	46a0      	movlt	r8, r4
 800c752:	461c      	movlt	r4, r3
 800c754:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c758:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c75c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c760:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c764:	eb07 0609 	add.w	r6, r7, r9
 800c768:	42b3      	cmp	r3, r6
 800c76a:	bfb8      	it	lt
 800c76c:	3101      	addlt	r1, #1
 800c76e:	f7ff ff08 	bl	800c582 <_Balloc>
 800c772:	f100 0514 	add.w	r5, r0, #20
 800c776:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c77a:	462b      	mov	r3, r5
 800c77c:	2200      	movs	r2, #0
 800c77e:	4573      	cmp	r3, lr
 800c780:	d316      	bcc.n	800c7b0 <__multiply+0x74>
 800c782:	f104 0214 	add.w	r2, r4, #20
 800c786:	f108 0114 	add.w	r1, r8, #20
 800c78a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c78e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c792:	9300      	str	r3, [sp, #0]
 800c794:	9b00      	ldr	r3, [sp, #0]
 800c796:	9201      	str	r2, [sp, #4]
 800c798:	4293      	cmp	r3, r2
 800c79a:	d80c      	bhi.n	800c7b6 <__multiply+0x7a>
 800c79c:	2e00      	cmp	r6, #0
 800c79e:	dd03      	ble.n	800c7a8 <__multiply+0x6c>
 800c7a0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d05d      	beq.n	800c864 <__multiply+0x128>
 800c7a8:	6106      	str	r6, [r0, #16]
 800c7aa:	b003      	add	sp, #12
 800c7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b0:	f843 2b04 	str.w	r2, [r3], #4
 800c7b4:	e7e3      	b.n	800c77e <__multiply+0x42>
 800c7b6:	f8b2 b000 	ldrh.w	fp, [r2]
 800c7ba:	f1bb 0f00 	cmp.w	fp, #0
 800c7be:	d023      	beq.n	800c808 <__multiply+0xcc>
 800c7c0:	4689      	mov	r9, r1
 800c7c2:	46ac      	mov	ip, r5
 800c7c4:	f04f 0800 	mov.w	r8, #0
 800c7c8:	f859 4b04 	ldr.w	r4, [r9], #4
 800c7cc:	f8dc a000 	ldr.w	sl, [ip]
 800c7d0:	b2a3      	uxth	r3, r4
 800c7d2:	fa1f fa8a 	uxth.w	sl, sl
 800c7d6:	fb0b a303 	mla	r3, fp, r3, sl
 800c7da:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c7de:	f8dc 4000 	ldr.w	r4, [ip]
 800c7e2:	4443      	add	r3, r8
 800c7e4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c7e8:	fb0b 840a 	mla	r4, fp, sl, r8
 800c7ec:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c7f0:	46e2      	mov	sl, ip
 800c7f2:	b29b      	uxth	r3, r3
 800c7f4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c7f8:	454f      	cmp	r7, r9
 800c7fa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c7fe:	f84a 3b04 	str.w	r3, [sl], #4
 800c802:	d82b      	bhi.n	800c85c <__multiply+0x120>
 800c804:	f8cc 8004 	str.w	r8, [ip, #4]
 800c808:	9b01      	ldr	r3, [sp, #4]
 800c80a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c80e:	3204      	adds	r2, #4
 800c810:	f1ba 0f00 	cmp.w	sl, #0
 800c814:	d020      	beq.n	800c858 <__multiply+0x11c>
 800c816:	682b      	ldr	r3, [r5, #0]
 800c818:	4689      	mov	r9, r1
 800c81a:	46a8      	mov	r8, r5
 800c81c:	f04f 0b00 	mov.w	fp, #0
 800c820:	f8b9 c000 	ldrh.w	ip, [r9]
 800c824:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c828:	fb0a 440c 	mla	r4, sl, ip, r4
 800c82c:	445c      	add	r4, fp
 800c82e:	46c4      	mov	ip, r8
 800c830:	b29b      	uxth	r3, r3
 800c832:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c836:	f84c 3b04 	str.w	r3, [ip], #4
 800c83a:	f859 3b04 	ldr.w	r3, [r9], #4
 800c83e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c842:	0c1b      	lsrs	r3, r3, #16
 800c844:	fb0a b303 	mla	r3, sl, r3, fp
 800c848:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c84c:	454f      	cmp	r7, r9
 800c84e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c852:	d805      	bhi.n	800c860 <__multiply+0x124>
 800c854:	f8c8 3004 	str.w	r3, [r8, #4]
 800c858:	3504      	adds	r5, #4
 800c85a:	e79b      	b.n	800c794 <__multiply+0x58>
 800c85c:	46d4      	mov	ip, sl
 800c85e:	e7b3      	b.n	800c7c8 <__multiply+0x8c>
 800c860:	46e0      	mov	r8, ip
 800c862:	e7dd      	b.n	800c820 <__multiply+0xe4>
 800c864:	3e01      	subs	r6, #1
 800c866:	e799      	b.n	800c79c <__multiply+0x60>

0800c868 <__pow5mult>:
 800c868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c86c:	4615      	mov	r5, r2
 800c86e:	f012 0203 	ands.w	r2, r2, #3
 800c872:	4606      	mov	r6, r0
 800c874:	460f      	mov	r7, r1
 800c876:	d007      	beq.n	800c888 <__pow5mult+0x20>
 800c878:	3a01      	subs	r2, #1
 800c87a:	4c21      	ldr	r4, [pc, #132]	; (800c900 <__pow5mult+0x98>)
 800c87c:	2300      	movs	r3, #0
 800c87e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c882:	f7ff fec9 	bl	800c618 <__multadd>
 800c886:	4607      	mov	r7, r0
 800c888:	10ad      	asrs	r5, r5, #2
 800c88a:	d035      	beq.n	800c8f8 <__pow5mult+0x90>
 800c88c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c88e:	b93c      	cbnz	r4, 800c8a0 <__pow5mult+0x38>
 800c890:	2010      	movs	r0, #16
 800c892:	f7ff fe63 	bl	800c55c <malloc>
 800c896:	6270      	str	r0, [r6, #36]	; 0x24
 800c898:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c89c:	6004      	str	r4, [r0, #0]
 800c89e:	60c4      	str	r4, [r0, #12]
 800c8a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c8a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c8a8:	b94c      	cbnz	r4, 800c8be <__pow5mult+0x56>
 800c8aa:	f240 2171 	movw	r1, #625	; 0x271
 800c8ae:	4630      	mov	r0, r6
 800c8b0:	f7ff ff3b 	bl	800c72a <__i2b>
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c8ba:	4604      	mov	r4, r0
 800c8bc:	6003      	str	r3, [r0, #0]
 800c8be:	f04f 0800 	mov.w	r8, #0
 800c8c2:	07eb      	lsls	r3, r5, #31
 800c8c4:	d50a      	bpl.n	800c8dc <__pow5mult+0x74>
 800c8c6:	4639      	mov	r1, r7
 800c8c8:	4622      	mov	r2, r4
 800c8ca:	4630      	mov	r0, r6
 800c8cc:	f7ff ff36 	bl	800c73c <__multiply>
 800c8d0:	4639      	mov	r1, r7
 800c8d2:	4681      	mov	r9, r0
 800c8d4:	4630      	mov	r0, r6
 800c8d6:	f7ff fe88 	bl	800c5ea <_Bfree>
 800c8da:	464f      	mov	r7, r9
 800c8dc:	106d      	asrs	r5, r5, #1
 800c8de:	d00b      	beq.n	800c8f8 <__pow5mult+0x90>
 800c8e0:	6820      	ldr	r0, [r4, #0]
 800c8e2:	b938      	cbnz	r0, 800c8f4 <__pow5mult+0x8c>
 800c8e4:	4622      	mov	r2, r4
 800c8e6:	4621      	mov	r1, r4
 800c8e8:	4630      	mov	r0, r6
 800c8ea:	f7ff ff27 	bl	800c73c <__multiply>
 800c8ee:	6020      	str	r0, [r4, #0]
 800c8f0:	f8c0 8000 	str.w	r8, [r0]
 800c8f4:	4604      	mov	r4, r0
 800c8f6:	e7e4      	b.n	800c8c2 <__pow5mult+0x5a>
 800c8f8:	4638      	mov	r0, r7
 800c8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8fe:	bf00      	nop
 800c900:	0801dc08 	.word	0x0801dc08

0800c904 <__lshift>:
 800c904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c908:	460c      	mov	r4, r1
 800c90a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c90e:	6923      	ldr	r3, [r4, #16]
 800c910:	6849      	ldr	r1, [r1, #4]
 800c912:	eb0a 0903 	add.w	r9, sl, r3
 800c916:	68a3      	ldr	r3, [r4, #8]
 800c918:	4607      	mov	r7, r0
 800c91a:	4616      	mov	r6, r2
 800c91c:	f109 0501 	add.w	r5, r9, #1
 800c920:	42ab      	cmp	r3, r5
 800c922:	db32      	blt.n	800c98a <__lshift+0x86>
 800c924:	4638      	mov	r0, r7
 800c926:	f7ff fe2c 	bl	800c582 <_Balloc>
 800c92a:	2300      	movs	r3, #0
 800c92c:	4680      	mov	r8, r0
 800c92e:	f100 0114 	add.w	r1, r0, #20
 800c932:	461a      	mov	r2, r3
 800c934:	4553      	cmp	r3, sl
 800c936:	db2b      	blt.n	800c990 <__lshift+0x8c>
 800c938:	6920      	ldr	r0, [r4, #16]
 800c93a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c93e:	f104 0314 	add.w	r3, r4, #20
 800c942:	f016 021f 	ands.w	r2, r6, #31
 800c946:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c94a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c94e:	d025      	beq.n	800c99c <__lshift+0x98>
 800c950:	f1c2 0e20 	rsb	lr, r2, #32
 800c954:	2000      	movs	r0, #0
 800c956:	681e      	ldr	r6, [r3, #0]
 800c958:	468a      	mov	sl, r1
 800c95a:	4096      	lsls	r6, r2
 800c95c:	4330      	orrs	r0, r6
 800c95e:	f84a 0b04 	str.w	r0, [sl], #4
 800c962:	f853 0b04 	ldr.w	r0, [r3], #4
 800c966:	459c      	cmp	ip, r3
 800c968:	fa20 f00e 	lsr.w	r0, r0, lr
 800c96c:	d814      	bhi.n	800c998 <__lshift+0x94>
 800c96e:	6048      	str	r0, [r1, #4]
 800c970:	b108      	cbz	r0, 800c976 <__lshift+0x72>
 800c972:	f109 0502 	add.w	r5, r9, #2
 800c976:	3d01      	subs	r5, #1
 800c978:	4638      	mov	r0, r7
 800c97a:	f8c8 5010 	str.w	r5, [r8, #16]
 800c97e:	4621      	mov	r1, r4
 800c980:	f7ff fe33 	bl	800c5ea <_Bfree>
 800c984:	4640      	mov	r0, r8
 800c986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c98a:	3101      	adds	r1, #1
 800c98c:	005b      	lsls	r3, r3, #1
 800c98e:	e7c7      	b.n	800c920 <__lshift+0x1c>
 800c990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c994:	3301      	adds	r3, #1
 800c996:	e7cd      	b.n	800c934 <__lshift+0x30>
 800c998:	4651      	mov	r1, sl
 800c99a:	e7dc      	b.n	800c956 <__lshift+0x52>
 800c99c:	3904      	subs	r1, #4
 800c99e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9a2:	f841 2f04 	str.w	r2, [r1, #4]!
 800c9a6:	459c      	cmp	ip, r3
 800c9a8:	d8f9      	bhi.n	800c99e <__lshift+0x9a>
 800c9aa:	e7e4      	b.n	800c976 <__lshift+0x72>

0800c9ac <__mcmp>:
 800c9ac:	6903      	ldr	r3, [r0, #16]
 800c9ae:	690a      	ldr	r2, [r1, #16]
 800c9b0:	1a9b      	subs	r3, r3, r2
 800c9b2:	b530      	push	{r4, r5, lr}
 800c9b4:	d10c      	bne.n	800c9d0 <__mcmp+0x24>
 800c9b6:	0092      	lsls	r2, r2, #2
 800c9b8:	3014      	adds	r0, #20
 800c9ba:	3114      	adds	r1, #20
 800c9bc:	1884      	adds	r4, r0, r2
 800c9be:	4411      	add	r1, r2
 800c9c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c9c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c9c8:	4295      	cmp	r5, r2
 800c9ca:	d003      	beq.n	800c9d4 <__mcmp+0x28>
 800c9cc:	d305      	bcc.n	800c9da <__mcmp+0x2e>
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	bd30      	pop	{r4, r5, pc}
 800c9d4:	42a0      	cmp	r0, r4
 800c9d6:	d3f3      	bcc.n	800c9c0 <__mcmp+0x14>
 800c9d8:	e7fa      	b.n	800c9d0 <__mcmp+0x24>
 800c9da:	f04f 33ff 	mov.w	r3, #4294967295
 800c9de:	e7f7      	b.n	800c9d0 <__mcmp+0x24>

0800c9e0 <__mdiff>:
 800c9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9e4:	460d      	mov	r5, r1
 800c9e6:	4607      	mov	r7, r0
 800c9e8:	4611      	mov	r1, r2
 800c9ea:	4628      	mov	r0, r5
 800c9ec:	4614      	mov	r4, r2
 800c9ee:	f7ff ffdd 	bl	800c9ac <__mcmp>
 800c9f2:	1e06      	subs	r6, r0, #0
 800c9f4:	d108      	bne.n	800ca08 <__mdiff+0x28>
 800c9f6:	4631      	mov	r1, r6
 800c9f8:	4638      	mov	r0, r7
 800c9fa:	f7ff fdc2 	bl	800c582 <_Balloc>
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ca04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca08:	bfa4      	itt	ge
 800ca0a:	4623      	movge	r3, r4
 800ca0c:	462c      	movge	r4, r5
 800ca0e:	4638      	mov	r0, r7
 800ca10:	6861      	ldr	r1, [r4, #4]
 800ca12:	bfa6      	itte	ge
 800ca14:	461d      	movge	r5, r3
 800ca16:	2600      	movge	r6, #0
 800ca18:	2601      	movlt	r6, #1
 800ca1a:	f7ff fdb2 	bl	800c582 <_Balloc>
 800ca1e:	692b      	ldr	r3, [r5, #16]
 800ca20:	60c6      	str	r6, [r0, #12]
 800ca22:	6926      	ldr	r6, [r4, #16]
 800ca24:	f105 0914 	add.w	r9, r5, #20
 800ca28:	f104 0214 	add.w	r2, r4, #20
 800ca2c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ca30:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ca34:	f100 0514 	add.w	r5, r0, #20
 800ca38:	f04f 0e00 	mov.w	lr, #0
 800ca3c:	f852 ab04 	ldr.w	sl, [r2], #4
 800ca40:	f859 4b04 	ldr.w	r4, [r9], #4
 800ca44:	fa1e f18a 	uxtah	r1, lr, sl
 800ca48:	b2a3      	uxth	r3, r4
 800ca4a:	1ac9      	subs	r1, r1, r3
 800ca4c:	0c23      	lsrs	r3, r4, #16
 800ca4e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ca52:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ca56:	b289      	uxth	r1, r1
 800ca58:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ca5c:	45c8      	cmp	r8, r9
 800ca5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ca62:	4694      	mov	ip, r2
 800ca64:	f845 3b04 	str.w	r3, [r5], #4
 800ca68:	d8e8      	bhi.n	800ca3c <__mdiff+0x5c>
 800ca6a:	45bc      	cmp	ip, r7
 800ca6c:	d304      	bcc.n	800ca78 <__mdiff+0x98>
 800ca6e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ca72:	b183      	cbz	r3, 800ca96 <__mdiff+0xb6>
 800ca74:	6106      	str	r6, [r0, #16]
 800ca76:	e7c5      	b.n	800ca04 <__mdiff+0x24>
 800ca78:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ca7c:	fa1e f381 	uxtah	r3, lr, r1
 800ca80:	141a      	asrs	r2, r3, #16
 800ca82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca8c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ca90:	f845 3b04 	str.w	r3, [r5], #4
 800ca94:	e7e9      	b.n	800ca6a <__mdiff+0x8a>
 800ca96:	3e01      	subs	r6, #1
 800ca98:	e7e9      	b.n	800ca6e <__mdiff+0x8e>

0800ca9a <__d2b>:
 800ca9a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca9e:	460e      	mov	r6, r1
 800caa0:	2101      	movs	r1, #1
 800caa2:	ec59 8b10 	vmov	r8, r9, d0
 800caa6:	4615      	mov	r5, r2
 800caa8:	f7ff fd6b 	bl	800c582 <_Balloc>
 800caac:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800cab0:	4607      	mov	r7, r0
 800cab2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cab6:	bb34      	cbnz	r4, 800cb06 <__d2b+0x6c>
 800cab8:	9301      	str	r3, [sp, #4]
 800caba:	f1b8 0300 	subs.w	r3, r8, #0
 800cabe:	d027      	beq.n	800cb10 <__d2b+0x76>
 800cac0:	a802      	add	r0, sp, #8
 800cac2:	f840 3d08 	str.w	r3, [r0, #-8]!
 800cac6:	f7ff fe01 	bl	800c6cc <__lo0bits>
 800caca:	9900      	ldr	r1, [sp, #0]
 800cacc:	b1f0      	cbz	r0, 800cb0c <__d2b+0x72>
 800cace:	9a01      	ldr	r2, [sp, #4]
 800cad0:	f1c0 0320 	rsb	r3, r0, #32
 800cad4:	fa02 f303 	lsl.w	r3, r2, r3
 800cad8:	430b      	orrs	r3, r1
 800cada:	40c2      	lsrs	r2, r0
 800cadc:	617b      	str	r3, [r7, #20]
 800cade:	9201      	str	r2, [sp, #4]
 800cae0:	9b01      	ldr	r3, [sp, #4]
 800cae2:	61bb      	str	r3, [r7, #24]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	bf14      	ite	ne
 800cae8:	2102      	movne	r1, #2
 800caea:	2101      	moveq	r1, #1
 800caec:	6139      	str	r1, [r7, #16]
 800caee:	b1c4      	cbz	r4, 800cb22 <__d2b+0x88>
 800caf0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800caf4:	4404      	add	r4, r0
 800caf6:	6034      	str	r4, [r6, #0]
 800caf8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cafc:	6028      	str	r0, [r5, #0]
 800cafe:	4638      	mov	r0, r7
 800cb00:	b003      	add	sp, #12
 800cb02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb0a:	e7d5      	b.n	800cab8 <__d2b+0x1e>
 800cb0c:	6179      	str	r1, [r7, #20]
 800cb0e:	e7e7      	b.n	800cae0 <__d2b+0x46>
 800cb10:	a801      	add	r0, sp, #4
 800cb12:	f7ff fddb 	bl	800c6cc <__lo0bits>
 800cb16:	9b01      	ldr	r3, [sp, #4]
 800cb18:	617b      	str	r3, [r7, #20]
 800cb1a:	2101      	movs	r1, #1
 800cb1c:	6139      	str	r1, [r7, #16]
 800cb1e:	3020      	adds	r0, #32
 800cb20:	e7e5      	b.n	800caee <__d2b+0x54>
 800cb22:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800cb26:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb2a:	6030      	str	r0, [r6, #0]
 800cb2c:	6918      	ldr	r0, [r3, #16]
 800cb2e:	f7ff fdae 	bl	800c68e <__hi0bits>
 800cb32:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800cb36:	e7e1      	b.n	800cafc <__d2b+0x62>

0800cb38 <_calloc_r>:
 800cb38:	b538      	push	{r3, r4, r5, lr}
 800cb3a:	fb02 f401 	mul.w	r4, r2, r1
 800cb3e:	4621      	mov	r1, r4
 800cb40:	f000 f856 	bl	800cbf0 <_malloc_r>
 800cb44:	4605      	mov	r5, r0
 800cb46:	b118      	cbz	r0, 800cb50 <_calloc_r+0x18>
 800cb48:	4622      	mov	r2, r4
 800cb4a:	2100      	movs	r1, #0
 800cb4c:	f7fe fab4 	bl	800b0b8 <memset>
 800cb50:	4628      	mov	r0, r5
 800cb52:	bd38      	pop	{r3, r4, r5, pc}

0800cb54 <_free_r>:
 800cb54:	b538      	push	{r3, r4, r5, lr}
 800cb56:	4605      	mov	r5, r0
 800cb58:	2900      	cmp	r1, #0
 800cb5a:	d045      	beq.n	800cbe8 <_free_r+0x94>
 800cb5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb60:	1f0c      	subs	r4, r1, #4
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	bfb8      	it	lt
 800cb66:	18e4      	addlt	r4, r4, r3
 800cb68:	f000 fa29 	bl	800cfbe <__malloc_lock>
 800cb6c:	4a1f      	ldr	r2, [pc, #124]	; (800cbec <_free_r+0x98>)
 800cb6e:	6813      	ldr	r3, [r2, #0]
 800cb70:	4610      	mov	r0, r2
 800cb72:	b933      	cbnz	r3, 800cb82 <_free_r+0x2e>
 800cb74:	6063      	str	r3, [r4, #4]
 800cb76:	6014      	str	r4, [r2, #0]
 800cb78:	4628      	mov	r0, r5
 800cb7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb7e:	f000 ba1f 	b.w	800cfc0 <__malloc_unlock>
 800cb82:	42a3      	cmp	r3, r4
 800cb84:	d90c      	bls.n	800cba0 <_free_r+0x4c>
 800cb86:	6821      	ldr	r1, [r4, #0]
 800cb88:	1862      	adds	r2, r4, r1
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	bf04      	itt	eq
 800cb8e:	681a      	ldreq	r2, [r3, #0]
 800cb90:	685b      	ldreq	r3, [r3, #4]
 800cb92:	6063      	str	r3, [r4, #4]
 800cb94:	bf04      	itt	eq
 800cb96:	1852      	addeq	r2, r2, r1
 800cb98:	6022      	streq	r2, [r4, #0]
 800cb9a:	6004      	str	r4, [r0, #0]
 800cb9c:	e7ec      	b.n	800cb78 <_free_r+0x24>
 800cb9e:	4613      	mov	r3, r2
 800cba0:	685a      	ldr	r2, [r3, #4]
 800cba2:	b10a      	cbz	r2, 800cba8 <_free_r+0x54>
 800cba4:	42a2      	cmp	r2, r4
 800cba6:	d9fa      	bls.n	800cb9e <_free_r+0x4a>
 800cba8:	6819      	ldr	r1, [r3, #0]
 800cbaa:	1858      	adds	r0, r3, r1
 800cbac:	42a0      	cmp	r0, r4
 800cbae:	d10b      	bne.n	800cbc8 <_free_r+0x74>
 800cbb0:	6820      	ldr	r0, [r4, #0]
 800cbb2:	4401      	add	r1, r0
 800cbb4:	1858      	adds	r0, r3, r1
 800cbb6:	4282      	cmp	r2, r0
 800cbb8:	6019      	str	r1, [r3, #0]
 800cbba:	d1dd      	bne.n	800cb78 <_free_r+0x24>
 800cbbc:	6810      	ldr	r0, [r2, #0]
 800cbbe:	6852      	ldr	r2, [r2, #4]
 800cbc0:	605a      	str	r2, [r3, #4]
 800cbc2:	4401      	add	r1, r0
 800cbc4:	6019      	str	r1, [r3, #0]
 800cbc6:	e7d7      	b.n	800cb78 <_free_r+0x24>
 800cbc8:	d902      	bls.n	800cbd0 <_free_r+0x7c>
 800cbca:	230c      	movs	r3, #12
 800cbcc:	602b      	str	r3, [r5, #0]
 800cbce:	e7d3      	b.n	800cb78 <_free_r+0x24>
 800cbd0:	6820      	ldr	r0, [r4, #0]
 800cbd2:	1821      	adds	r1, r4, r0
 800cbd4:	428a      	cmp	r2, r1
 800cbd6:	bf04      	itt	eq
 800cbd8:	6811      	ldreq	r1, [r2, #0]
 800cbda:	6852      	ldreq	r2, [r2, #4]
 800cbdc:	6062      	str	r2, [r4, #4]
 800cbde:	bf04      	itt	eq
 800cbe0:	1809      	addeq	r1, r1, r0
 800cbe2:	6021      	streq	r1, [r4, #0]
 800cbe4:	605c      	str	r4, [r3, #4]
 800cbe6:	e7c7      	b.n	800cb78 <_free_r+0x24>
 800cbe8:	bd38      	pop	{r3, r4, r5, pc}
 800cbea:	bf00      	nop
 800cbec:	240004f4 	.word	0x240004f4

0800cbf0 <_malloc_r>:
 800cbf0:	b570      	push	{r4, r5, r6, lr}
 800cbf2:	1ccd      	adds	r5, r1, #3
 800cbf4:	f025 0503 	bic.w	r5, r5, #3
 800cbf8:	3508      	adds	r5, #8
 800cbfa:	2d0c      	cmp	r5, #12
 800cbfc:	bf38      	it	cc
 800cbfe:	250c      	movcc	r5, #12
 800cc00:	2d00      	cmp	r5, #0
 800cc02:	4606      	mov	r6, r0
 800cc04:	db01      	blt.n	800cc0a <_malloc_r+0x1a>
 800cc06:	42a9      	cmp	r1, r5
 800cc08:	d903      	bls.n	800cc12 <_malloc_r+0x22>
 800cc0a:	230c      	movs	r3, #12
 800cc0c:	6033      	str	r3, [r6, #0]
 800cc0e:	2000      	movs	r0, #0
 800cc10:	bd70      	pop	{r4, r5, r6, pc}
 800cc12:	f000 f9d4 	bl	800cfbe <__malloc_lock>
 800cc16:	4a21      	ldr	r2, [pc, #132]	; (800cc9c <_malloc_r+0xac>)
 800cc18:	6814      	ldr	r4, [r2, #0]
 800cc1a:	4621      	mov	r1, r4
 800cc1c:	b991      	cbnz	r1, 800cc44 <_malloc_r+0x54>
 800cc1e:	4c20      	ldr	r4, [pc, #128]	; (800cca0 <_malloc_r+0xb0>)
 800cc20:	6823      	ldr	r3, [r4, #0]
 800cc22:	b91b      	cbnz	r3, 800cc2c <_malloc_r+0x3c>
 800cc24:	4630      	mov	r0, r6
 800cc26:	f000 f98f 	bl	800cf48 <_sbrk_r>
 800cc2a:	6020      	str	r0, [r4, #0]
 800cc2c:	4629      	mov	r1, r5
 800cc2e:	4630      	mov	r0, r6
 800cc30:	f000 f98a 	bl	800cf48 <_sbrk_r>
 800cc34:	1c43      	adds	r3, r0, #1
 800cc36:	d124      	bne.n	800cc82 <_malloc_r+0x92>
 800cc38:	230c      	movs	r3, #12
 800cc3a:	6033      	str	r3, [r6, #0]
 800cc3c:	4630      	mov	r0, r6
 800cc3e:	f000 f9bf 	bl	800cfc0 <__malloc_unlock>
 800cc42:	e7e4      	b.n	800cc0e <_malloc_r+0x1e>
 800cc44:	680b      	ldr	r3, [r1, #0]
 800cc46:	1b5b      	subs	r3, r3, r5
 800cc48:	d418      	bmi.n	800cc7c <_malloc_r+0x8c>
 800cc4a:	2b0b      	cmp	r3, #11
 800cc4c:	d90f      	bls.n	800cc6e <_malloc_r+0x7e>
 800cc4e:	600b      	str	r3, [r1, #0]
 800cc50:	50cd      	str	r5, [r1, r3]
 800cc52:	18cc      	adds	r4, r1, r3
 800cc54:	4630      	mov	r0, r6
 800cc56:	f000 f9b3 	bl	800cfc0 <__malloc_unlock>
 800cc5a:	f104 000b 	add.w	r0, r4, #11
 800cc5e:	1d23      	adds	r3, r4, #4
 800cc60:	f020 0007 	bic.w	r0, r0, #7
 800cc64:	1ac3      	subs	r3, r0, r3
 800cc66:	d0d3      	beq.n	800cc10 <_malloc_r+0x20>
 800cc68:	425a      	negs	r2, r3
 800cc6a:	50e2      	str	r2, [r4, r3]
 800cc6c:	e7d0      	b.n	800cc10 <_malloc_r+0x20>
 800cc6e:	428c      	cmp	r4, r1
 800cc70:	684b      	ldr	r3, [r1, #4]
 800cc72:	bf16      	itet	ne
 800cc74:	6063      	strne	r3, [r4, #4]
 800cc76:	6013      	streq	r3, [r2, #0]
 800cc78:	460c      	movne	r4, r1
 800cc7a:	e7eb      	b.n	800cc54 <_malloc_r+0x64>
 800cc7c:	460c      	mov	r4, r1
 800cc7e:	6849      	ldr	r1, [r1, #4]
 800cc80:	e7cc      	b.n	800cc1c <_malloc_r+0x2c>
 800cc82:	1cc4      	adds	r4, r0, #3
 800cc84:	f024 0403 	bic.w	r4, r4, #3
 800cc88:	42a0      	cmp	r0, r4
 800cc8a:	d005      	beq.n	800cc98 <_malloc_r+0xa8>
 800cc8c:	1a21      	subs	r1, r4, r0
 800cc8e:	4630      	mov	r0, r6
 800cc90:	f000 f95a 	bl	800cf48 <_sbrk_r>
 800cc94:	3001      	adds	r0, #1
 800cc96:	d0cf      	beq.n	800cc38 <_malloc_r+0x48>
 800cc98:	6025      	str	r5, [r4, #0]
 800cc9a:	e7db      	b.n	800cc54 <_malloc_r+0x64>
 800cc9c:	240004f4 	.word	0x240004f4
 800cca0:	240004f8 	.word	0x240004f8

0800cca4 <__ssputs_r>:
 800cca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cca8:	688e      	ldr	r6, [r1, #8]
 800ccaa:	429e      	cmp	r6, r3
 800ccac:	4682      	mov	sl, r0
 800ccae:	460c      	mov	r4, r1
 800ccb0:	4690      	mov	r8, r2
 800ccb2:	4699      	mov	r9, r3
 800ccb4:	d837      	bhi.n	800cd26 <__ssputs_r+0x82>
 800ccb6:	898a      	ldrh	r2, [r1, #12]
 800ccb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ccbc:	d031      	beq.n	800cd22 <__ssputs_r+0x7e>
 800ccbe:	6825      	ldr	r5, [r4, #0]
 800ccc0:	6909      	ldr	r1, [r1, #16]
 800ccc2:	1a6f      	subs	r7, r5, r1
 800ccc4:	6965      	ldr	r5, [r4, #20]
 800ccc6:	2302      	movs	r3, #2
 800ccc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cccc:	fb95 f5f3 	sdiv	r5, r5, r3
 800ccd0:	f109 0301 	add.w	r3, r9, #1
 800ccd4:	443b      	add	r3, r7
 800ccd6:	429d      	cmp	r5, r3
 800ccd8:	bf38      	it	cc
 800ccda:	461d      	movcc	r5, r3
 800ccdc:	0553      	lsls	r3, r2, #21
 800ccde:	d530      	bpl.n	800cd42 <__ssputs_r+0x9e>
 800cce0:	4629      	mov	r1, r5
 800cce2:	f7ff ff85 	bl	800cbf0 <_malloc_r>
 800cce6:	4606      	mov	r6, r0
 800cce8:	b950      	cbnz	r0, 800cd00 <__ssputs_r+0x5c>
 800ccea:	230c      	movs	r3, #12
 800ccec:	f8ca 3000 	str.w	r3, [sl]
 800ccf0:	89a3      	ldrh	r3, [r4, #12]
 800ccf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccf6:	81a3      	strh	r3, [r4, #12]
 800ccf8:	f04f 30ff 	mov.w	r0, #4294967295
 800ccfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd00:	463a      	mov	r2, r7
 800cd02:	6921      	ldr	r1, [r4, #16]
 800cd04:	f7ff fc32 	bl	800c56c <memcpy>
 800cd08:	89a3      	ldrh	r3, [r4, #12]
 800cd0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cd0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd12:	81a3      	strh	r3, [r4, #12]
 800cd14:	6126      	str	r6, [r4, #16]
 800cd16:	6165      	str	r5, [r4, #20]
 800cd18:	443e      	add	r6, r7
 800cd1a:	1bed      	subs	r5, r5, r7
 800cd1c:	6026      	str	r6, [r4, #0]
 800cd1e:	60a5      	str	r5, [r4, #8]
 800cd20:	464e      	mov	r6, r9
 800cd22:	454e      	cmp	r6, r9
 800cd24:	d900      	bls.n	800cd28 <__ssputs_r+0x84>
 800cd26:	464e      	mov	r6, r9
 800cd28:	4632      	mov	r2, r6
 800cd2a:	4641      	mov	r1, r8
 800cd2c:	6820      	ldr	r0, [r4, #0]
 800cd2e:	f000 f92d 	bl	800cf8c <memmove>
 800cd32:	68a3      	ldr	r3, [r4, #8]
 800cd34:	1b9b      	subs	r3, r3, r6
 800cd36:	60a3      	str	r3, [r4, #8]
 800cd38:	6823      	ldr	r3, [r4, #0]
 800cd3a:	441e      	add	r6, r3
 800cd3c:	6026      	str	r6, [r4, #0]
 800cd3e:	2000      	movs	r0, #0
 800cd40:	e7dc      	b.n	800ccfc <__ssputs_r+0x58>
 800cd42:	462a      	mov	r2, r5
 800cd44:	f000 f93d 	bl	800cfc2 <_realloc_r>
 800cd48:	4606      	mov	r6, r0
 800cd4a:	2800      	cmp	r0, #0
 800cd4c:	d1e2      	bne.n	800cd14 <__ssputs_r+0x70>
 800cd4e:	6921      	ldr	r1, [r4, #16]
 800cd50:	4650      	mov	r0, sl
 800cd52:	f7ff feff 	bl	800cb54 <_free_r>
 800cd56:	e7c8      	b.n	800ccea <__ssputs_r+0x46>

0800cd58 <_svfiprintf_r>:
 800cd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd5c:	461d      	mov	r5, r3
 800cd5e:	898b      	ldrh	r3, [r1, #12]
 800cd60:	061f      	lsls	r7, r3, #24
 800cd62:	b09d      	sub	sp, #116	; 0x74
 800cd64:	4680      	mov	r8, r0
 800cd66:	460c      	mov	r4, r1
 800cd68:	4616      	mov	r6, r2
 800cd6a:	d50f      	bpl.n	800cd8c <_svfiprintf_r+0x34>
 800cd6c:	690b      	ldr	r3, [r1, #16]
 800cd6e:	b96b      	cbnz	r3, 800cd8c <_svfiprintf_r+0x34>
 800cd70:	2140      	movs	r1, #64	; 0x40
 800cd72:	f7ff ff3d 	bl	800cbf0 <_malloc_r>
 800cd76:	6020      	str	r0, [r4, #0]
 800cd78:	6120      	str	r0, [r4, #16]
 800cd7a:	b928      	cbnz	r0, 800cd88 <_svfiprintf_r+0x30>
 800cd7c:	230c      	movs	r3, #12
 800cd7e:	f8c8 3000 	str.w	r3, [r8]
 800cd82:	f04f 30ff 	mov.w	r0, #4294967295
 800cd86:	e0c8      	b.n	800cf1a <_svfiprintf_r+0x1c2>
 800cd88:	2340      	movs	r3, #64	; 0x40
 800cd8a:	6163      	str	r3, [r4, #20]
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	9309      	str	r3, [sp, #36]	; 0x24
 800cd90:	2320      	movs	r3, #32
 800cd92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd96:	2330      	movs	r3, #48	; 0x30
 800cd98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd9c:	9503      	str	r5, [sp, #12]
 800cd9e:	f04f 0b01 	mov.w	fp, #1
 800cda2:	4637      	mov	r7, r6
 800cda4:	463d      	mov	r5, r7
 800cda6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cdaa:	b10b      	cbz	r3, 800cdb0 <_svfiprintf_r+0x58>
 800cdac:	2b25      	cmp	r3, #37	; 0x25
 800cdae:	d13e      	bne.n	800ce2e <_svfiprintf_r+0xd6>
 800cdb0:	ebb7 0a06 	subs.w	sl, r7, r6
 800cdb4:	d00b      	beq.n	800cdce <_svfiprintf_r+0x76>
 800cdb6:	4653      	mov	r3, sl
 800cdb8:	4632      	mov	r2, r6
 800cdba:	4621      	mov	r1, r4
 800cdbc:	4640      	mov	r0, r8
 800cdbe:	f7ff ff71 	bl	800cca4 <__ssputs_r>
 800cdc2:	3001      	adds	r0, #1
 800cdc4:	f000 80a4 	beq.w	800cf10 <_svfiprintf_r+0x1b8>
 800cdc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdca:	4453      	add	r3, sl
 800cdcc:	9309      	str	r3, [sp, #36]	; 0x24
 800cdce:	783b      	ldrb	r3, [r7, #0]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	f000 809d 	beq.w	800cf10 <_svfiprintf_r+0x1b8>
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	f04f 32ff 	mov.w	r2, #4294967295
 800cddc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cde0:	9304      	str	r3, [sp, #16]
 800cde2:	9307      	str	r3, [sp, #28]
 800cde4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cde8:	931a      	str	r3, [sp, #104]	; 0x68
 800cdea:	462f      	mov	r7, r5
 800cdec:	2205      	movs	r2, #5
 800cdee:	f817 1b01 	ldrb.w	r1, [r7], #1
 800cdf2:	4850      	ldr	r0, [pc, #320]	; (800cf34 <_svfiprintf_r+0x1dc>)
 800cdf4:	f7f3 fadc 	bl	80003b0 <memchr>
 800cdf8:	9b04      	ldr	r3, [sp, #16]
 800cdfa:	b9d0      	cbnz	r0, 800ce32 <_svfiprintf_r+0xda>
 800cdfc:	06d9      	lsls	r1, r3, #27
 800cdfe:	bf44      	itt	mi
 800ce00:	2220      	movmi	r2, #32
 800ce02:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ce06:	071a      	lsls	r2, r3, #28
 800ce08:	bf44      	itt	mi
 800ce0a:	222b      	movmi	r2, #43	; 0x2b
 800ce0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ce10:	782a      	ldrb	r2, [r5, #0]
 800ce12:	2a2a      	cmp	r2, #42	; 0x2a
 800ce14:	d015      	beq.n	800ce42 <_svfiprintf_r+0xea>
 800ce16:	9a07      	ldr	r2, [sp, #28]
 800ce18:	462f      	mov	r7, r5
 800ce1a:	2000      	movs	r0, #0
 800ce1c:	250a      	movs	r5, #10
 800ce1e:	4639      	mov	r1, r7
 800ce20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce24:	3b30      	subs	r3, #48	; 0x30
 800ce26:	2b09      	cmp	r3, #9
 800ce28:	d94d      	bls.n	800cec6 <_svfiprintf_r+0x16e>
 800ce2a:	b1b8      	cbz	r0, 800ce5c <_svfiprintf_r+0x104>
 800ce2c:	e00f      	b.n	800ce4e <_svfiprintf_r+0xf6>
 800ce2e:	462f      	mov	r7, r5
 800ce30:	e7b8      	b.n	800cda4 <_svfiprintf_r+0x4c>
 800ce32:	4a40      	ldr	r2, [pc, #256]	; (800cf34 <_svfiprintf_r+0x1dc>)
 800ce34:	1a80      	subs	r0, r0, r2
 800ce36:	fa0b f000 	lsl.w	r0, fp, r0
 800ce3a:	4318      	orrs	r0, r3
 800ce3c:	9004      	str	r0, [sp, #16]
 800ce3e:	463d      	mov	r5, r7
 800ce40:	e7d3      	b.n	800cdea <_svfiprintf_r+0x92>
 800ce42:	9a03      	ldr	r2, [sp, #12]
 800ce44:	1d11      	adds	r1, r2, #4
 800ce46:	6812      	ldr	r2, [r2, #0]
 800ce48:	9103      	str	r1, [sp, #12]
 800ce4a:	2a00      	cmp	r2, #0
 800ce4c:	db01      	blt.n	800ce52 <_svfiprintf_r+0xfa>
 800ce4e:	9207      	str	r2, [sp, #28]
 800ce50:	e004      	b.n	800ce5c <_svfiprintf_r+0x104>
 800ce52:	4252      	negs	r2, r2
 800ce54:	f043 0302 	orr.w	r3, r3, #2
 800ce58:	9207      	str	r2, [sp, #28]
 800ce5a:	9304      	str	r3, [sp, #16]
 800ce5c:	783b      	ldrb	r3, [r7, #0]
 800ce5e:	2b2e      	cmp	r3, #46	; 0x2e
 800ce60:	d10c      	bne.n	800ce7c <_svfiprintf_r+0x124>
 800ce62:	787b      	ldrb	r3, [r7, #1]
 800ce64:	2b2a      	cmp	r3, #42	; 0x2a
 800ce66:	d133      	bne.n	800ced0 <_svfiprintf_r+0x178>
 800ce68:	9b03      	ldr	r3, [sp, #12]
 800ce6a:	1d1a      	adds	r2, r3, #4
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	9203      	str	r2, [sp, #12]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	bfb8      	it	lt
 800ce74:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce78:	3702      	adds	r7, #2
 800ce7a:	9305      	str	r3, [sp, #20]
 800ce7c:	4d2e      	ldr	r5, [pc, #184]	; (800cf38 <_svfiprintf_r+0x1e0>)
 800ce7e:	7839      	ldrb	r1, [r7, #0]
 800ce80:	2203      	movs	r2, #3
 800ce82:	4628      	mov	r0, r5
 800ce84:	f7f3 fa94 	bl	80003b0 <memchr>
 800ce88:	b138      	cbz	r0, 800ce9a <_svfiprintf_r+0x142>
 800ce8a:	2340      	movs	r3, #64	; 0x40
 800ce8c:	1b40      	subs	r0, r0, r5
 800ce8e:	fa03 f000 	lsl.w	r0, r3, r0
 800ce92:	9b04      	ldr	r3, [sp, #16]
 800ce94:	4303      	orrs	r3, r0
 800ce96:	3701      	adds	r7, #1
 800ce98:	9304      	str	r3, [sp, #16]
 800ce9a:	7839      	ldrb	r1, [r7, #0]
 800ce9c:	4827      	ldr	r0, [pc, #156]	; (800cf3c <_svfiprintf_r+0x1e4>)
 800ce9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cea2:	2206      	movs	r2, #6
 800cea4:	1c7e      	adds	r6, r7, #1
 800cea6:	f7f3 fa83 	bl	80003b0 <memchr>
 800ceaa:	2800      	cmp	r0, #0
 800ceac:	d038      	beq.n	800cf20 <_svfiprintf_r+0x1c8>
 800ceae:	4b24      	ldr	r3, [pc, #144]	; (800cf40 <_svfiprintf_r+0x1e8>)
 800ceb0:	bb13      	cbnz	r3, 800cef8 <_svfiprintf_r+0x1a0>
 800ceb2:	9b03      	ldr	r3, [sp, #12]
 800ceb4:	3307      	adds	r3, #7
 800ceb6:	f023 0307 	bic.w	r3, r3, #7
 800ceba:	3308      	adds	r3, #8
 800cebc:	9303      	str	r3, [sp, #12]
 800cebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cec0:	444b      	add	r3, r9
 800cec2:	9309      	str	r3, [sp, #36]	; 0x24
 800cec4:	e76d      	b.n	800cda2 <_svfiprintf_r+0x4a>
 800cec6:	fb05 3202 	mla	r2, r5, r2, r3
 800ceca:	2001      	movs	r0, #1
 800cecc:	460f      	mov	r7, r1
 800cece:	e7a6      	b.n	800ce1e <_svfiprintf_r+0xc6>
 800ced0:	2300      	movs	r3, #0
 800ced2:	3701      	adds	r7, #1
 800ced4:	9305      	str	r3, [sp, #20]
 800ced6:	4619      	mov	r1, r3
 800ced8:	250a      	movs	r5, #10
 800ceda:	4638      	mov	r0, r7
 800cedc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cee0:	3a30      	subs	r2, #48	; 0x30
 800cee2:	2a09      	cmp	r2, #9
 800cee4:	d903      	bls.n	800ceee <_svfiprintf_r+0x196>
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d0c8      	beq.n	800ce7c <_svfiprintf_r+0x124>
 800ceea:	9105      	str	r1, [sp, #20]
 800ceec:	e7c6      	b.n	800ce7c <_svfiprintf_r+0x124>
 800ceee:	fb05 2101 	mla	r1, r5, r1, r2
 800cef2:	2301      	movs	r3, #1
 800cef4:	4607      	mov	r7, r0
 800cef6:	e7f0      	b.n	800ceda <_svfiprintf_r+0x182>
 800cef8:	ab03      	add	r3, sp, #12
 800cefa:	9300      	str	r3, [sp, #0]
 800cefc:	4622      	mov	r2, r4
 800cefe:	4b11      	ldr	r3, [pc, #68]	; (800cf44 <_svfiprintf_r+0x1ec>)
 800cf00:	a904      	add	r1, sp, #16
 800cf02:	4640      	mov	r0, r8
 800cf04:	f7fe f968 	bl	800b1d8 <_printf_float>
 800cf08:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cf0c:	4681      	mov	r9, r0
 800cf0e:	d1d6      	bne.n	800cebe <_svfiprintf_r+0x166>
 800cf10:	89a3      	ldrh	r3, [r4, #12]
 800cf12:	065b      	lsls	r3, r3, #25
 800cf14:	f53f af35 	bmi.w	800cd82 <_svfiprintf_r+0x2a>
 800cf18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf1a:	b01d      	add	sp, #116	; 0x74
 800cf1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf20:	ab03      	add	r3, sp, #12
 800cf22:	9300      	str	r3, [sp, #0]
 800cf24:	4622      	mov	r2, r4
 800cf26:	4b07      	ldr	r3, [pc, #28]	; (800cf44 <_svfiprintf_r+0x1ec>)
 800cf28:	a904      	add	r1, sp, #16
 800cf2a:	4640      	mov	r0, r8
 800cf2c:	f7fe fbf6 	bl	800b71c <_printf_i>
 800cf30:	e7ea      	b.n	800cf08 <_svfiprintf_r+0x1b0>
 800cf32:	bf00      	nop
 800cf34:	0801dc14 	.word	0x0801dc14
 800cf38:	0801dc1a 	.word	0x0801dc1a
 800cf3c:	0801dc1e 	.word	0x0801dc1e
 800cf40:	0800b1d9 	.word	0x0800b1d9
 800cf44:	0800cca5 	.word	0x0800cca5

0800cf48 <_sbrk_r>:
 800cf48:	b538      	push	{r3, r4, r5, lr}
 800cf4a:	4c06      	ldr	r4, [pc, #24]	; (800cf64 <_sbrk_r+0x1c>)
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	4605      	mov	r5, r0
 800cf50:	4608      	mov	r0, r1
 800cf52:	6023      	str	r3, [r4, #0]
 800cf54:	f7f6 fb9c 	bl	8003690 <_sbrk>
 800cf58:	1c43      	adds	r3, r0, #1
 800cf5a:	d102      	bne.n	800cf62 <_sbrk_r+0x1a>
 800cf5c:	6823      	ldr	r3, [r4, #0]
 800cf5e:	b103      	cbz	r3, 800cf62 <_sbrk_r+0x1a>
 800cf60:	602b      	str	r3, [r5, #0]
 800cf62:	bd38      	pop	{r3, r4, r5, pc}
 800cf64:	2400d604 	.word	0x2400d604

0800cf68 <__ascii_mbtowc>:
 800cf68:	b082      	sub	sp, #8
 800cf6a:	b901      	cbnz	r1, 800cf6e <__ascii_mbtowc+0x6>
 800cf6c:	a901      	add	r1, sp, #4
 800cf6e:	b142      	cbz	r2, 800cf82 <__ascii_mbtowc+0x1a>
 800cf70:	b14b      	cbz	r3, 800cf86 <__ascii_mbtowc+0x1e>
 800cf72:	7813      	ldrb	r3, [r2, #0]
 800cf74:	600b      	str	r3, [r1, #0]
 800cf76:	7812      	ldrb	r2, [r2, #0]
 800cf78:	1c10      	adds	r0, r2, #0
 800cf7a:	bf18      	it	ne
 800cf7c:	2001      	movne	r0, #1
 800cf7e:	b002      	add	sp, #8
 800cf80:	4770      	bx	lr
 800cf82:	4610      	mov	r0, r2
 800cf84:	e7fb      	b.n	800cf7e <__ascii_mbtowc+0x16>
 800cf86:	f06f 0001 	mvn.w	r0, #1
 800cf8a:	e7f8      	b.n	800cf7e <__ascii_mbtowc+0x16>

0800cf8c <memmove>:
 800cf8c:	4288      	cmp	r0, r1
 800cf8e:	b510      	push	{r4, lr}
 800cf90:	eb01 0302 	add.w	r3, r1, r2
 800cf94:	d807      	bhi.n	800cfa6 <memmove+0x1a>
 800cf96:	1e42      	subs	r2, r0, #1
 800cf98:	4299      	cmp	r1, r3
 800cf9a:	d00a      	beq.n	800cfb2 <memmove+0x26>
 800cf9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfa0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800cfa4:	e7f8      	b.n	800cf98 <memmove+0xc>
 800cfa6:	4283      	cmp	r3, r0
 800cfa8:	d9f5      	bls.n	800cf96 <memmove+0xa>
 800cfaa:	1881      	adds	r1, r0, r2
 800cfac:	1ad2      	subs	r2, r2, r3
 800cfae:	42d3      	cmn	r3, r2
 800cfb0:	d100      	bne.n	800cfb4 <memmove+0x28>
 800cfb2:	bd10      	pop	{r4, pc}
 800cfb4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cfb8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800cfbc:	e7f7      	b.n	800cfae <memmove+0x22>

0800cfbe <__malloc_lock>:
 800cfbe:	4770      	bx	lr

0800cfc0 <__malloc_unlock>:
 800cfc0:	4770      	bx	lr

0800cfc2 <_realloc_r>:
 800cfc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfc4:	4607      	mov	r7, r0
 800cfc6:	4614      	mov	r4, r2
 800cfc8:	460e      	mov	r6, r1
 800cfca:	b921      	cbnz	r1, 800cfd6 <_realloc_r+0x14>
 800cfcc:	4611      	mov	r1, r2
 800cfce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cfd2:	f7ff be0d 	b.w	800cbf0 <_malloc_r>
 800cfd6:	b922      	cbnz	r2, 800cfe2 <_realloc_r+0x20>
 800cfd8:	f7ff fdbc 	bl	800cb54 <_free_r>
 800cfdc:	4625      	mov	r5, r4
 800cfde:	4628      	mov	r0, r5
 800cfe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfe2:	f000 f821 	bl	800d028 <_malloc_usable_size_r>
 800cfe6:	42a0      	cmp	r0, r4
 800cfe8:	d20f      	bcs.n	800d00a <_realloc_r+0x48>
 800cfea:	4621      	mov	r1, r4
 800cfec:	4638      	mov	r0, r7
 800cfee:	f7ff fdff 	bl	800cbf0 <_malloc_r>
 800cff2:	4605      	mov	r5, r0
 800cff4:	2800      	cmp	r0, #0
 800cff6:	d0f2      	beq.n	800cfde <_realloc_r+0x1c>
 800cff8:	4631      	mov	r1, r6
 800cffa:	4622      	mov	r2, r4
 800cffc:	f7ff fab6 	bl	800c56c <memcpy>
 800d000:	4631      	mov	r1, r6
 800d002:	4638      	mov	r0, r7
 800d004:	f7ff fda6 	bl	800cb54 <_free_r>
 800d008:	e7e9      	b.n	800cfde <_realloc_r+0x1c>
 800d00a:	4635      	mov	r5, r6
 800d00c:	e7e7      	b.n	800cfde <_realloc_r+0x1c>

0800d00e <__ascii_wctomb>:
 800d00e:	b149      	cbz	r1, 800d024 <__ascii_wctomb+0x16>
 800d010:	2aff      	cmp	r2, #255	; 0xff
 800d012:	bf85      	ittet	hi
 800d014:	238a      	movhi	r3, #138	; 0x8a
 800d016:	6003      	strhi	r3, [r0, #0]
 800d018:	700a      	strbls	r2, [r1, #0]
 800d01a:	f04f 30ff 	movhi.w	r0, #4294967295
 800d01e:	bf98      	it	ls
 800d020:	2001      	movls	r0, #1
 800d022:	4770      	bx	lr
 800d024:	4608      	mov	r0, r1
 800d026:	4770      	bx	lr

0800d028 <_malloc_usable_size_r>:
 800d028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d02c:	1f18      	subs	r0, r3, #4
 800d02e:	2b00      	cmp	r3, #0
 800d030:	bfbc      	itt	lt
 800d032:	580b      	ldrlt	r3, [r1, r0]
 800d034:	18c0      	addlt	r0, r0, r3
 800d036:	4770      	bx	lr

0800d038 <cos>:
 800d038:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d03a:	eeb0 7b40 	vmov.f64	d7, d0
 800d03e:	ee17 3a90 	vmov	r3, s15
 800d042:	4a19      	ldr	r2, [pc, #100]	; (800d0a8 <cos+0x70>)
 800d044:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d048:	4293      	cmp	r3, r2
 800d04a:	dc04      	bgt.n	800d056 <cos+0x1e>
 800d04c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800d0a0 <cos+0x68>
 800d050:	f000 ff4a 	bl	800dee8 <__kernel_cos>
 800d054:	e004      	b.n	800d060 <cos+0x28>
 800d056:	4a15      	ldr	r2, [pc, #84]	; (800d0ac <cos+0x74>)
 800d058:	4293      	cmp	r3, r2
 800d05a:	dd04      	ble.n	800d066 <cos+0x2e>
 800d05c:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d060:	b005      	add	sp, #20
 800d062:	f85d fb04 	ldr.w	pc, [sp], #4
 800d066:	4668      	mov	r0, sp
 800d068:	f000 fdfe 	bl	800dc68 <__ieee754_rem_pio2>
 800d06c:	f000 0003 	and.w	r0, r0, #3
 800d070:	2801      	cmp	r0, #1
 800d072:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d076:	ed9d 0b00 	vldr	d0, [sp]
 800d07a:	d007      	beq.n	800d08c <cos+0x54>
 800d07c:	2802      	cmp	r0, #2
 800d07e:	d00a      	beq.n	800d096 <cos+0x5e>
 800d080:	2800      	cmp	r0, #0
 800d082:	d0e5      	beq.n	800d050 <cos+0x18>
 800d084:	2001      	movs	r0, #1
 800d086:	f001 fa37 	bl	800e4f8 <__kernel_sin>
 800d08a:	e7e9      	b.n	800d060 <cos+0x28>
 800d08c:	f001 fa34 	bl	800e4f8 <__kernel_sin>
 800d090:	eeb1 0b40 	vneg.f64	d0, d0
 800d094:	e7e4      	b.n	800d060 <cos+0x28>
 800d096:	f000 ff27 	bl	800dee8 <__kernel_cos>
 800d09a:	e7f9      	b.n	800d090 <cos+0x58>
 800d09c:	f3af 8000 	nop.w
	...
 800d0a8:	3fe921fb 	.word	0x3fe921fb
 800d0ac:	7fefffff 	.word	0x7fefffff

0800d0b0 <sin>:
 800d0b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d0b2:	eeb0 7b40 	vmov.f64	d7, d0
 800d0b6:	ee17 3a90 	vmov	r3, s15
 800d0ba:	4a19      	ldr	r2, [pc, #100]	; (800d120 <sin+0x70>)
 800d0bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	dc05      	bgt.n	800d0d0 <sin+0x20>
 800d0c4:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800d118 <sin+0x68>
 800d0c8:	2000      	movs	r0, #0
 800d0ca:	f001 fa15 	bl	800e4f8 <__kernel_sin>
 800d0ce:	e004      	b.n	800d0da <sin+0x2a>
 800d0d0:	4a14      	ldr	r2, [pc, #80]	; (800d124 <sin+0x74>)
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	dd04      	ble.n	800d0e0 <sin+0x30>
 800d0d6:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d0da:	b005      	add	sp, #20
 800d0dc:	f85d fb04 	ldr.w	pc, [sp], #4
 800d0e0:	4668      	mov	r0, sp
 800d0e2:	f000 fdc1 	bl	800dc68 <__ieee754_rem_pio2>
 800d0e6:	f000 0003 	and.w	r0, r0, #3
 800d0ea:	2801      	cmp	r0, #1
 800d0ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d0f0:	ed9d 0b00 	vldr	d0, [sp]
 800d0f4:	d004      	beq.n	800d100 <sin+0x50>
 800d0f6:	2802      	cmp	r0, #2
 800d0f8:	d005      	beq.n	800d106 <sin+0x56>
 800d0fa:	b950      	cbnz	r0, 800d112 <sin+0x62>
 800d0fc:	2001      	movs	r0, #1
 800d0fe:	e7e4      	b.n	800d0ca <sin+0x1a>
 800d100:	f000 fef2 	bl	800dee8 <__kernel_cos>
 800d104:	e7e9      	b.n	800d0da <sin+0x2a>
 800d106:	2001      	movs	r0, #1
 800d108:	f001 f9f6 	bl	800e4f8 <__kernel_sin>
 800d10c:	eeb1 0b40 	vneg.f64	d0, d0
 800d110:	e7e3      	b.n	800d0da <sin+0x2a>
 800d112:	f000 fee9 	bl	800dee8 <__kernel_cos>
 800d116:	e7f9      	b.n	800d10c <sin+0x5c>
	...
 800d120:	3fe921fb 	.word	0x3fe921fb
 800d124:	7fefffff 	.word	0x7fefffff

0800d128 <log10>:
 800d128:	b500      	push	{lr}
 800d12a:	ed2d 8b02 	vpush	{d8}
 800d12e:	eeb0 8b40 	vmov.f64	d8, d0
 800d132:	b08b      	sub	sp, #44	; 0x2c
 800d134:	f000 f998 	bl	800d468 <__ieee754_log10>
 800d138:	4b2d      	ldr	r3, [pc, #180]	; (800d1f0 <log10+0xc8>)
 800d13a:	f993 3000 	ldrsb.w	r3, [r3]
 800d13e:	1c5a      	adds	r2, r3, #1
 800d140:	d051      	beq.n	800d1e6 <log10+0xbe>
 800d142:	eeb4 8b48 	vcmp.f64	d8, d8
 800d146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d14a:	d64c      	bvs.n	800d1e6 <log10+0xbe>
 800d14c:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800d150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d154:	d847      	bhi.n	800d1e6 <log10+0xbe>
 800d156:	4a27      	ldr	r2, [pc, #156]	; (800d1f4 <log10+0xcc>)
 800d158:	9201      	str	r2, [sp, #4]
 800d15a:	2200      	movs	r2, #0
 800d15c:	9208      	str	r2, [sp, #32]
 800d15e:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d162:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d166:	b993      	cbnz	r3, 800d18e <log10+0x66>
 800d168:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d16c:	4922      	ldr	r1, [pc, #136]	; (800d1f8 <log10+0xd0>)
 800d16e:	f04f 4060 	mov.w	r0, #3758096384	; 0xe0000000
 800d172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d176:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d17a:	d025      	beq.n	800d1c8 <log10+0xa0>
 800d17c:	2201      	movs	r2, #1
 800d17e:	2b02      	cmp	r3, #2
 800d180:	9200      	str	r2, [sp, #0]
 800d182:	d116      	bne.n	800d1b2 <log10+0x8a>
 800d184:	f7fd ff6e 	bl	800b064 <__errno>
 800d188:	2321      	movs	r3, #33	; 0x21
 800d18a:	6003      	str	r3, [r0, #0]
 800d18c:	e016      	b.n	800d1bc <log10+0x94>
 800d18e:	491b      	ldr	r1, [pc, #108]	; (800d1fc <log10+0xd4>)
 800d190:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d194:	2000      	movs	r0, #0
 800d196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d19a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d19e:	d1ed      	bne.n	800d17c <log10+0x54>
 800d1a0:	2202      	movs	r2, #2
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	9200      	str	r2, [sp, #0]
 800d1a6:	d111      	bne.n	800d1cc <log10+0xa4>
 800d1a8:	f7fd ff5c 	bl	800b064 <__errno>
 800d1ac:	2322      	movs	r3, #34	; 0x22
 800d1ae:	6003      	str	r3, [r0, #0]
 800d1b0:	e011      	b.n	800d1d6 <log10+0xae>
 800d1b2:	4668      	mov	r0, sp
 800d1b4:	f001 fa84 	bl	800e6c0 <matherr>
 800d1b8:	2800      	cmp	r0, #0
 800d1ba:	d0e3      	beq.n	800d184 <log10+0x5c>
 800d1bc:	4810      	ldr	r0, [pc, #64]	; (800d200 <log10+0xd8>)
 800d1be:	f001 fa83 	bl	800e6c8 <nan>
 800d1c2:	ed8d 0b06 	vstr	d0, [sp, #24]
 800d1c6:	e006      	b.n	800d1d6 <log10+0xae>
 800d1c8:	2302      	movs	r3, #2
 800d1ca:	9300      	str	r3, [sp, #0]
 800d1cc:	4668      	mov	r0, sp
 800d1ce:	f001 fa77 	bl	800e6c0 <matherr>
 800d1d2:	2800      	cmp	r0, #0
 800d1d4:	d0e8      	beq.n	800d1a8 <log10+0x80>
 800d1d6:	9b08      	ldr	r3, [sp, #32]
 800d1d8:	b11b      	cbz	r3, 800d1e2 <log10+0xba>
 800d1da:	f7fd ff43 	bl	800b064 <__errno>
 800d1de:	9b08      	ldr	r3, [sp, #32]
 800d1e0:	6003      	str	r3, [r0, #0]
 800d1e2:	ed9d 0b06 	vldr	d0, [sp, #24]
 800d1e6:	b00b      	add	sp, #44	; 0x2c
 800d1e8:	ecbd 8b02 	vpop	{d8}
 800d1ec:	f85d fb04 	ldr.w	pc, [sp], #4
 800d1f0:	240003d8 	.word	0x240003d8
 800d1f4:	0801dd30 	.word	0x0801dd30
 800d1f8:	c7efffff 	.word	0xc7efffff
 800d1fc:	fff00000 	.word	0xfff00000
 800d200:	0801dc19 	.word	0x0801dc19
 800d204:	00000000 	.word	0x00000000

0800d208 <pow>:
 800d208:	b570      	push	{r4, r5, r6, lr}
 800d20a:	ed2d 8b0a 	vpush	{d8-d12}
 800d20e:	eeb0 9b40 	vmov.f64	d9, d0
 800d212:	eeb0 8b41 	vmov.f64	d8, d1
 800d216:	4c8c      	ldr	r4, [pc, #560]	; (800d448 <pow+0x240>)
 800d218:	b08a      	sub	sp, #40	; 0x28
 800d21a:	f000 f99d 	bl	800d558 <__ieee754_pow>
 800d21e:	f994 3000 	ldrsb.w	r3, [r4]
 800d222:	eeb0 ab40 	vmov.f64	d10, d0
 800d226:	1c5a      	adds	r2, r3, #1
 800d228:	4626      	mov	r6, r4
 800d22a:	d04b      	beq.n	800d2c4 <pow+0xbc>
 800d22c:	eeb4 8b48 	vcmp.f64	d8, d8
 800d230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d234:	d646      	bvs.n	800d2c4 <pow+0xbc>
 800d236:	eeb4 9b49 	vcmp.f64	d9, d9
 800d23a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d23e:	d719      	bvc.n	800d274 <pow+0x6c>
 800d240:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d248:	d13c      	bne.n	800d2c4 <pow+0xbc>
 800d24a:	2201      	movs	r2, #1
 800d24c:	9200      	str	r2, [sp, #0]
 800d24e:	497f      	ldr	r1, [pc, #508]	; (800d44c <pow+0x244>)
 800d250:	4a7f      	ldr	r2, [pc, #508]	; (800d450 <pow+0x248>)
 800d252:	9201      	str	r2, [sp, #4]
 800d254:	2000      	movs	r0, #0
 800d256:	2200      	movs	r2, #0
 800d258:	2b02      	cmp	r3, #2
 800d25a:	9208      	str	r2, [sp, #32]
 800d25c:	ed8d 9b02 	vstr	d9, [sp, #8]
 800d260:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d264:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d268:	d02a      	beq.n	800d2c0 <pow+0xb8>
 800d26a:	4668      	mov	r0, sp
 800d26c:	f001 fa28 	bl	800e6c0 <matherr>
 800d270:	bb00      	cbnz	r0, 800d2b4 <pow+0xac>
 800d272:	e04e      	b.n	800d312 <pow+0x10a>
 800d274:	ed9f bb72 	vldr	d11, [pc, #456]	; 800d440 <pow+0x238>
 800d278:	eeb4 9b4b 	vcmp.f64	d9, d11
 800d27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d280:	eeb0 cb4b 	vmov.f64	d12, d11
 800d284:	d14a      	bne.n	800d31c <pow+0x114>
 800d286:	eeb4 8b4b 	vcmp.f64	d8, d11
 800d28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d28e:	d11f      	bne.n	800d2d0 <pow+0xc8>
 800d290:	2201      	movs	r2, #1
 800d292:	9200      	str	r2, [sp, #0]
 800d294:	4a6e      	ldr	r2, [pc, #440]	; (800d450 <pow+0x248>)
 800d296:	9201      	str	r2, [sp, #4]
 800d298:	2200      	movs	r2, #0
 800d29a:	9208      	str	r2, [sp, #32]
 800d29c:	ed8d 9b02 	vstr	d9, [sp, #8]
 800d2a0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d2a4:	ed8d bb06 	vstr	d11, [sp, #24]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d0de      	beq.n	800d26a <pow+0x62>
 800d2ac:	4b67      	ldr	r3, [pc, #412]	; (800d44c <pow+0x244>)
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d2b4:	9b08      	ldr	r3, [sp, #32]
 800d2b6:	b11b      	cbz	r3, 800d2c0 <pow+0xb8>
 800d2b8:	f7fd fed4 	bl	800b064 <__errno>
 800d2bc:	9b08      	ldr	r3, [sp, #32]
 800d2be:	6003      	str	r3, [r0, #0]
 800d2c0:	ed9d ab06 	vldr	d10, [sp, #24]
 800d2c4:	eeb0 0b4a 	vmov.f64	d0, d10
 800d2c8:	b00a      	add	sp, #40	; 0x28
 800d2ca:	ecbd 8b0a 	vpop	{d8-d12}
 800d2ce:	bd70      	pop	{r4, r5, r6, pc}
 800d2d0:	eeb0 0b48 	vmov.f64	d0, d8
 800d2d4:	f001 f971 	bl	800e5ba <finite>
 800d2d8:	2800      	cmp	r0, #0
 800d2da:	d0f3      	beq.n	800d2c4 <pow+0xbc>
 800d2dc:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800d2e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2e4:	d5ee      	bpl.n	800d2c4 <pow+0xbc>
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	9300      	str	r3, [sp, #0]
 800d2ea:	4b59      	ldr	r3, [pc, #356]	; (800d450 <pow+0x248>)
 800d2ec:	9301      	str	r3, [sp, #4]
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	9308      	str	r3, [sp, #32]
 800d2f2:	f994 3000 	ldrsb.w	r3, [r4]
 800d2f6:	ed8d 9b02 	vstr	d9, [sp, #8]
 800d2fa:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d2fe:	b913      	cbnz	r3, 800d306 <pow+0xfe>
 800d300:	ed8d bb06 	vstr	d11, [sp, #24]
 800d304:	e7b1      	b.n	800d26a <pow+0x62>
 800d306:	4953      	ldr	r1, [pc, #332]	; (800d454 <pow+0x24c>)
 800d308:	2000      	movs	r0, #0
 800d30a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d30e:	2b02      	cmp	r3, #2
 800d310:	d1ab      	bne.n	800d26a <pow+0x62>
 800d312:	f7fd fea7 	bl	800b064 <__errno>
 800d316:	2321      	movs	r3, #33	; 0x21
 800d318:	6003      	str	r3, [r0, #0]
 800d31a:	e7cb      	b.n	800d2b4 <pow+0xac>
 800d31c:	f001 f94d 	bl	800e5ba <finite>
 800d320:	4605      	mov	r5, r0
 800d322:	2800      	cmp	r0, #0
 800d324:	d164      	bne.n	800d3f0 <pow+0x1e8>
 800d326:	eeb0 0b49 	vmov.f64	d0, d9
 800d32a:	f001 f946 	bl	800e5ba <finite>
 800d32e:	2800      	cmp	r0, #0
 800d330:	d05e      	beq.n	800d3f0 <pow+0x1e8>
 800d332:	eeb0 0b48 	vmov.f64	d0, d8
 800d336:	f001 f940 	bl	800e5ba <finite>
 800d33a:	2800      	cmp	r0, #0
 800d33c:	d058      	beq.n	800d3f0 <pow+0x1e8>
 800d33e:	eeb4 ab4a 	vcmp.f64	d10, d10
 800d342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d346:	f994 3000 	ldrsb.w	r3, [r4]
 800d34a:	4a41      	ldr	r2, [pc, #260]	; (800d450 <pow+0x248>)
 800d34c:	d70e      	bvc.n	800d36c <pow+0x164>
 800d34e:	2101      	movs	r1, #1
 800d350:	e9cd 1200 	strd	r1, r2, [sp]
 800d354:	9508      	str	r5, [sp, #32]
 800d356:	ed8d 9b02 	vstr	d9, [sp, #8]
 800d35a:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d0ce      	beq.n	800d300 <pow+0xf8>
 800d362:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 800d366:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d36a:	e7d0      	b.n	800d30e <pow+0x106>
 800d36c:	2103      	movs	r1, #3
 800d36e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d372:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d376:	ee28 8b07 	vmul.f64	d8, d8, d7
 800d37a:	e9cd 1200 	strd	r1, r2, [sp]
 800d37e:	9508      	str	r5, [sp, #32]
 800d380:	ed8d 9b02 	vstr	d9, [sp, #8]
 800d384:	b9fb      	cbnz	r3, 800d3c6 <pow+0x1be>
 800d386:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800d38a:	4b33      	ldr	r3, [pc, #204]	; (800d458 <pow+0x250>)
 800d38c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d394:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d398:	d54b      	bpl.n	800d432 <pow+0x22a>
 800d39a:	eeb0 0b48 	vmov.f64	d0, d8
 800d39e:	f001 f99b 	bl	800e6d8 <rint>
 800d3a2:	eeb4 0b48 	vcmp.f64	d0, d8
 800d3a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3aa:	d004      	beq.n	800d3b6 <pow+0x1ae>
 800d3ac:	4b2b      	ldr	r3, [pc, #172]	; (800d45c <pow+0x254>)
 800d3ae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800d3b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d3b6:	f996 3000 	ldrsb.w	r3, [r6]
 800d3ba:	2b02      	cmp	r3, #2
 800d3bc:	d139      	bne.n	800d432 <pow+0x22a>
 800d3be:	f7fd fe51 	bl	800b064 <__errno>
 800d3c2:	2322      	movs	r3, #34	; 0x22
 800d3c4:	e7a8      	b.n	800d318 <pow+0x110>
 800d3c6:	4b26      	ldr	r3, [pc, #152]	; (800d460 <pow+0x258>)
 800d3c8:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d3d6:	d5ee      	bpl.n	800d3b6 <pow+0x1ae>
 800d3d8:	eeb0 0b48 	vmov.f64	d0, d8
 800d3dc:	f001 f97c 	bl	800e6d8 <rint>
 800d3e0:	eeb4 0b48 	vcmp.f64	d0, d8
 800d3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3e8:	d0e5      	beq.n	800d3b6 <pow+0x1ae>
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	4b19      	ldr	r3, [pc, #100]	; (800d454 <pow+0x24c>)
 800d3ee:	e7e0      	b.n	800d3b2 <pow+0x1aa>
 800d3f0:	eeb5 ab40 	vcmp.f64	d10, #0.0
 800d3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3f8:	f47f af64 	bne.w	800d2c4 <pow+0xbc>
 800d3fc:	eeb0 0b49 	vmov.f64	d0, d9
 800d400:	f001 f8db 	bl	800e5ba <finite>
 800d404:	2800      	cmp	r0, #0
 800d406:	f43f af5d 	beq.w	800d2c4 <pow+0xbc>
 800d40a:	eeb0 0b48 	vmov.f64	d0, d8
 800d40e:	f001 f8d4 	bl	800e5ba <finite>
 800d412:	2800      	cmp	r0, #0
 800d414:	f43f af56 	beq.w	800d2c4 <pow+0xbc>
 800d418:	2304      	movs	r3, #4
 800d41a:	9300      	str	r3, [sp, #0]
 800d41c:	4b0c      	ldr	r3, [pc, #48]	; (800d450 <pow+0x248>)
 800d41e:	9301      	str	r3, [sp, #4]
 800d420:	2300      	movs	r3, #0
 800d422:	9308      	str	r3, [sp, #32]
 800d424:	ed8d 9b02 	vstr	d9, [sp, #8]
 800d428:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d42c:	ed8d cb06 	vstr	d12, [sp, #24]
 800d430:	e7c1      	b.n	800d3b6 <pow+0x1ae>
 800d432:	4668      	mov	r0, sp
 800d434:	f001 f944 	bl	800e6c0 <matherr>
 800d438:	2800      	cmp	r0, #0
 800d43a:	f47f af3b 	bne.w	800d2b4 <pow+0xac>
 800d43e:	e7be      	b.n	800d3be <pow+0x1b6>
	...
 800d448:	240003d8 	.word	0x240003d8
 800d44c:	3ff00000 	.word	0x3ff00000
 800d450:	0801dd36 	.word	0x0801dd36
 800d454:	fff00000 	.word	0xfff00000
 800d458:	47efffff 	.word	0x47efffff
 800d45c:	c7efffff 	.word	0xc7efffff
 800d460:	7ff00000 	.word	0x7ff00000
 800d464:	00000000 	.word	0x00000000

0800d468 <__ieee754_log10>:
 800d468:	b500      	push	{lr}
 800d46a:	ed2d 8b02 	vpush	{d8}
 800d46e:	b083      	sub	sp, #12
 800d470:	ed8d 0b00 	vstr	d0, [sp]
 800d474:	9a01      	ldr	r2, [sp, #4]
 800d476:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800d47a:	da29      	bge.n	800d4d0 <__ieee754_log10+0x68>
 800d47c:	9900      	ldr	r1, [sp, #0]
 800d47e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800d482:	430b      	orrs	r3, r1
 800d484:	d10a      	bne.n	800d49c <__ieee754_log10+0x34>
 800d486:	ed9f 6b26 	vldr	d6, [pc, #152]	; 800d520 <__ieee754_log10+0xb8>
 800d48a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800d528 <__ieee754_log10+0xc0>
 800d48e:	ee86 0b07 	vdiv.f64	d0, d6, d7
 800d492:	b003      	add	sp, #12
 800d494:	ecbd 8b02 	vpop	{d8}
 800d498:	f85d fb04 	ldr.w	pc, [sp], #4
 800d49c:	2a00      	cmp	r2, #0
 800d49e:	da04      	bge.n	800d4aa <__ieee754_log10+0x42>
 800d4a0:	ed9d 7b00 	vldr	d7, [sp]
 800d4a4:	ee37 6b47 	vsub.f64	d6, d7, d7
 800d4a8:	e7ef      	b.n	800d48a <__ieee754_log10+0x22>
 800d4aa:	ed9d 6b00 	vldr	d6, [sp]
 800d4ae:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800d530 <__ieee754_log10+0xc8>
 800d4b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d4b6:	ed8d 7b00 	vstr	d7, [sp]
 800d4ba:	9a01      	ldr	r2, [sp, #4]
 800d4bc:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800d4c0:	4b23      	ldr	r3, [pc, #140]	; (800d550 <__ieee754_log10+0xe8>)
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	dd06      	ble.n	800d4d4 <__ieee754_log10+0x6c>
 800d4c6:	ed9d 7b00 	vldr	d7, [sp]
 800d4ca:	ee37 0b07 	vadd.f64	d0, d7, d7
 800d4ce:	e7e0      	b.n	800d492 <__ieee754_log10+0x2a>
 800d4d0:	2100      	movs	r1, #0
 800d4d2:	e7f5      	b.n	800d4c0 <__ieee754_log10+0x58>
 800d4d4:	1513      	asrs	r3, r2, #20
 800d4d6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d4da:	440b      	add	r3, r1
 800d4dc:	0fd8      	lsrs	r0, r3, #31
 800d4de:	4403      	add	r3, r0
 800d4e0:	ee07 3a90 	vmov	s15, r3
 800d4e4:	f3c2 0113 	ubfx	r1, r2, #0, #20
 800d4e8:	f5c0 707f 	rsb	r0, r0, #1020	; 0x3fc
 800d4ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d4f0:	3003      	adds	r0, #3
 800d4f2:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800d4f6:	ec43 2b10 	vmov	d0, r2, r3
 800d4fa:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 800d4fe:	f001 f9f7 	bl	800e8f0 <__ieee754_log>
 800d502:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800d538 <__ieee754_log10+0xd0>
 800d506:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d50a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800d540 <__ieee754_log10+0xd8>
 800d50e:	eea8 0b07 	vfma.f64	d0, d8, d7
 800d512:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800d548 <__ieee754_log10+0xe0>
 800d516:	eea8 0b07 	vfma.f64	d0, d8, d7
 800d51a:	e7ba      	b.n	800d492 <__ieee754_log10+0x2a>
 800d51c:	f3af 8000 	nop.w
 800d520:	00000000 	.word	0x00000000
 800d524:	c3500000 	.word	0xc3500000
	...
 800d534:	43500000 	.word	0x43500000
 800d538:	1526e50e 	.word	0x1526e50e
 800d53c:	3fdbcb7b 	.word	0x3fdbcb7b
 800d540:	11f12b36 	.word	0x11f12b36
 800d544:	3d59fef3 	.word	0x3d59fef3
 800d548:	509f6000 	.word	0x509f6000
 800d54c:	3fd34413 	.word	0x3fd34413
 800d550:	7fefffff 	.word	0x7fefffff
 800d554:	00000000 	.word	0x00000000

0800d558 <__ieee754_pow>:
 800d558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d55c:	ec57 6b11 	vmov	r6, r7, d1
 800d560:	ed2d 8b02 	vpush	{d8}
 800d564:	eeb0 8b40 	vmov.f64	d8, d0
 800d568:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d56c:	ea58 0306 	orrs.w	r3, r8, r6
 800d570:	b085      	sub	sp, #20
 800d572:	46b9      	mov	r9, r7
 800d574:	ee11 2a10 	vmov	r2, s2
 800d578:	f000 8306 	beq.w	800db88 <__ieee754_pow+0x630>
 800d57c:	ee18 aa90 	vmov	sl, s17
 800d580:	4bb9      	ldr	r3, [pc, #740]	; (800d868 <__ieee754_pow+0x310>)
 800d582:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 800d586:	429c      	cmp	r4, r3
 800d588:	ee10 ba10 	vmov	fp, s0
 800d58c:	dc0b      	bgt.n	800d5a6 <__ieee754_pow+0x4e>
 800d58e:	d105      	bne.n	800d59c <__ieee754_pow+0x44>
 800d590:	f1bb 0f00 	cmp.w	fp, #0
 800d594:	d107      	bne.n	800d5a6 <__ieee754_pow+0x4e>
 800d596:	45a0      	cmp	r8, r4
 800d598:	dc0d      	bgt.n	800d5b6 <__ieee754_pow+0x5e>
 800d59a:	e001      	b.n	800d5a0 <__ieee754_pow+0x48>
 800d59c:	4598      	cmp	r8, r3
 800d59e:	dc02      	bgt.n	800d5a6 <__ieee754_pow+0x4e>
 800d5a0:	4598      	cmp	r8, r3
 800d5a2:	d110      	bne.n	800d5c6 <__ieee754_pow+0x6e>
 800d5a4:	b17a      	cbz	r2, 800d5c6 <__ieee754_pow+0x6e>
 800d5a6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d5aa:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d5ae:	ea54 030b 	orrs.w	r3, r4, fp
 800d5b2:	f000 82e9 	beq.w	800db88 <__ieee754_pow+0x630>
 800d5b6:	48ad      	ldr	r0, [pc, #692]	; (800d86c <__ieee754_pow+0x314>)
 800d5b8:	b005      	add	sp, #20
 800d5ba:	ecbd 8b02 	vpop	{d8}
 800d5be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5c2:	f001 b881 	b.w	800e6c8 <nan>
 800d5c6:	f1ba 0f00 	cmp.w	sl, #0
 800d5ca:	da4e      	bge.n	800d66a <__ieee754_pow+0x112>
 800d5cc:	4ba8      	ldr	r3, [pc, #672]	; (800d870 <__ieee754_pow+0x318>)
 800d5ce:	4598      	cmp	r8, r3
 800d5d0:	dc49      	bgt.n	800d666 <__ieee754_pow+0x10e>
 800d5d2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d5d6:	4598      	cmp	r8, r3
 800d5d8:	dd47      	ble.n	800d66a <__ieee754_pow+0x112>
 800d5da:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d5de:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d5e2:	2b14      	cmp	r3, #20
 800d5e4:	dd24      	ble.n	800d630 <__ieee754_pow+0xd8>
 800d5e6:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d5ea:	fa22 f503 	lsr.w	r5, r2, r3
 800d5ee:	fa05 f303 	lsl.w	r3, r5, r3
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	d139      	bne.n	800d66a <__ieee754_pow+0x112>
 800d5f6:	f005 0501 	and.w	r5, r5, #1
 800d5fa:	f1c5 0502 	rsb	r5, r5, #2
 800d5fe:	2a00      	cmp	r2, #0
 800d600:	d15a      	bne.n	800d6b8 <__ieee754_pow+0x160>
 800d602:	4b99      	ldr	r3, [pc, #612]	; (800d868 <__ieee754_pow+0x310>)
 800d604:	4598      	cmp	r8, r3
 800d606:	d122      	bne.n	800d64e <__ieee754_pow+0xf6>
 800d608:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d60c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d610:	ea53 030b 	orrs.w	r3, r3, fp
 800d614:	f000 82b8 	beq.w	800db88 <__ieee754_pow+0x630>
 800d618:	4b96      	ldr	r3, [pc, #600]	; (800d874 <__ieee754_pow+0x31c>)
 800d61a:	429c      	cmp	r4, r3
 800d61c:	dd27      	ble.n	800d66e <__ieee754_pow+0x116>
 800d61e:	f1b9 0f00 	cmp.w	r9, #0
 800d622:	f280 82b4 	bge.w	800db8e <__ieee754_pow+0x636>
 800d626:	ed9f 7b84 	vldr	d7, [pc, #528]	; 800d838 <__ieee754_pow+0x2e0>
 800d62a:	ed8d 7b00 	vstr	d7, [sp]
 800d62e:	e026      	b.n	800d67e <__ieee754_pow+0x126>
 800d630:	2a00      	cmp	r2, #0
 800d632:	d140      	bne.n	800d6b6 <__ieee754_pow+0x15e>
 800d634:	f1c3 0314 	rsb	r3, r3, #20
 800d638:	fa48 f503 	asr.w	r5, r8, r3
 800d63c:	fa05 f303 	lsl.w	r3, r5, r3
 800d640:	4543      	cmp	r3, r8
 800d642:	f040 82aa 	bne.w	800db9a <__ieee754_pow+0x642>
 800d646:	f005 0501 	and.w	r5, r5, #1
 800d64a:	f1c5 0502 	rsb	r5, r5, #2
 800d64e:	4b8a      	ldr	r3, [pc, #552]	; (800d878 <__ieee754_pow+0x320>)
 800d650:	4598      	cmp	r8, r3
 800d652:	d11b      	bne.n	800d68c <__ieee754_pow+0x134>
 800d654:	f1b9 0f00 	cmp.w	r9, #0
 800d658:	f280 829c 	bge.w	800db94 <__ieee754_pow+0x63c>
 800d65c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800d660:	ee87 7b08 	vdiv.f64	d7, d7, d8
 800d664:	e7e1      	b.n	800d62a <__ieee754_pow+0xd2>
 800d666:	2502      	movs	r5, #2
 800d668:	e7c9      	b.n	800d5fe <__ieee754_pow+0xa6>
 800d66a:	2500      	movs	r5, #0
 800d66c:	e7c7      	b.n	800d5fe <__ieee754_pow+0xa6>
 800d66e:	f1b9 0f00 	cmp.w	r9, #0
 800d672:	dad8      	bge.n	800d626 <__ieee754_pow+0xce>
 800d674:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 800d678:	4633      	mov	r3, r6
 800d67a:	e9cd 3400 	strd	r3, r4, [sp]
 800d67e:	ed9d 0b00 	vldr	d0, [sp]
 800d682:	b005      	add	sp, #20
 800d684:	ecbd 8b02 	vpop	{d8}
 800d688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d68c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d690:	d102      	bne.n	800d698 <__ieee754_pow+0x140>
 800d692:	ee28 7b08 	vmul.f64	d7, d8, d8
 800d696:	e7c8      	b.n	800d62a <__ieee754_pow+0xd2>
 800d698:	4b78      	ldr	r3, [pc, #480]	; (800d87c <__ieee754_pow+0x324>)
 800d69a:	4599      	cmp	r9, r3
 800d69c:	d10c      	bne.n	800d6b8 <__ieee754_pow+0x160>
 800d69e:	f1ba 0f00 	cmp.w	sl, #0
 800d6a2:	db09      	blt.n	800d6b8 <__ieee754_pow+0x160>
 800d6a4:	eeb0 0b48 	vmov.f64	d0, d8
 800d6a8:	b005      	add	sp, #20
 800d6aa:	ecbd 8b02 	vpop	{d8}
 800d6ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6b2:	f000 bc15 	b.w	800dee0 <__ieee754_sqrt>
 800d6b6:	2500      	movs	r5, #0
 800d6b8:	eeb0 0b48 	vmov.f64	d0, d8
 800d6bc:	f000 ff74 	bl	800e5a8 <fabs>
 800d6c0:	ed8d 0b00 	vstr	d0, [sp]
 800d6c4:	f1bb 0f00 	cmp.w	fp, #0
 800d6c8:	d128      	bne.n	800d71c <__ieee754_pow+0x1c4>
 800d6ca:	b124      	cbz	r4, 800d6d6 <__ieee754_pow+0x17e>
 800d6cc:	4b6a      	ldr	r3, [pc, #424]	; (800d878 <__ieee754_pow+0x320>)
 800d6ce:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d122      	bne.n	800d71c <__ieee754_pow+0x1c4>
 800d6d6:	f1b9 0f00 	cmp.w	r9, #0
 800d6da:	da07      	bge.n	800d6ec <__ieee754_pow+0x194>
 800d6dc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800d6e0:	ed9d 6b00 	vldr	d6, [sp]
 800d6e4:	ee87 7b06 	vdiv.f64	d7, d7, d6
 800d6e8:	ed8d 7b00 	vstr	d7, [sp]
 800d6ec:	f1ba 0f00 	cmp.w	sl, #0
 800d6f0:	dac5      	bge.n	800d67e <__ieee754_pow+0x126>
 800d6f2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d6f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d6fa:	ea54 0305 	orrs.w	r3, r4, r5
 800d6fe:	d106      	bne.n	800d70e <__ieee754_pow+0x1b6>
 800d700:	ed9d 7b00 	vldr	d7, [sp]
 800d704:	ee37 7b47 	vsub.f64	d7, d7, d7
 800d708:	ee87 7b07 	vdiv.f64	d7, d7, d7
 800d70c:	e78d      	b.n	800d62a <__ieee754_pow+0xd2>
 800d70e:	2d01      	cmp	r5, #1
 800d710:	d1b5      	bne.n	800d67e <__ieee754_pow+0x126>
 800d712:	ed9d 7b00 	vldr	d7, [sp]
 800d716:	eeb1 7b47 	vneg.f64	d7, d7
 800d71a:	e786      	b.n	800d62a <__ieee754_pow+0xd2>
 800d71c:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800d720:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d724:	ea55 030a 	orrs.w	r3, r5, sl
 800d728:	d104      	bne.n	800d734 <__ieee754_pow+0x1dc>
 800d72a:	ee38 8b48 	vsub.f64	d8, d8, d8
 800d72e:	ee88 7b08 	vdiv.f64	d7, d8, d8
 800d732:	e77a      	b.n	800d62a <__ieee754_pow+0xd2>
 800d734:	4b52      	ldr	r3, [pc, #328]	; (800d880 <__ieee754_pow+0x328>)
 800d736:	4598      	cmp	r8, r3
 800d738:	f340 80a8 	ble.w	800d88c <__ieee754_pow+0x334>
 800d73c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d740:	4598      	cmp	r8, r3
 800d742:	dd0b      	ble.n	800d75c <__ieee754_pow+0x204>
 800d744:	4b4b      	ldr	r3, [pc, #300]	; (800d874 <__ieee754_pow+0x31c>)
 800d746:	429c      	cmp	r4, r3
 800d748:	dc0e      	bgt.n	800d768 <__ieee754_pow+0x210>
 800d74a:	f1b9 0f00 	cmp.w	r9, #0
 800d74e:	f6bf af6a 	bge.w	800d626 <__ieee754_pow+0xce>
 800d752:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800d840 <__ieee754_pow+0x2e8>
 800d756:	ee27 7b07 	vmul.f64	d7, d7, d7
 800d75a:	e766      	b.n	800d62a <__ieee754_pow+0xd2>
 800d75c:	4b49      	ldr	r3, [pc, #292]	; (800d884 <__ieee754_pow+0x32c>)
 800d75e:	429c      	cmp	r4, r3
 800d760:	ddf3      	ble.n	800d74a <__ieee754_pow+0x1f2>
 800d762:	4b45      	ldr	r3, [pc, #276]	; (800d878 <__ieee754_pow+0x320>)
 800d764:	429c      	cmp	r4, r3
 800d766:	dd03      	ble.n	800d770 <__ieee754_pow+0x218>
 800d768:	f1b9 0f00 	cmp.w	r9, #0
 800d76c:	dcf1      	bgt.n	800d752 <__ieee754_pow+0x1fa>
 800d76e:	e75a      	b.n	800d626 <__ieee754_pow+0xce>
 800d770:	ed9d 7b00 	vldr	d7, [sp]
 800d774:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d778:	ed9f 5b33 	vldr	d5, [pc, #204]	; 800d848 <__ieee754_pow+0x2f0>
 800d77c:	ee37 6b46 	vsub.f64	d6, d7, d6
 800d780:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 800d784:	eeb1 3b46 	vneg.f64	d3, d6
 800d788:	eea3 5b07 	vfma.f64	d5, d3, d7
 800d78c:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800d790:	eea5 7b46 	vfms.f64	d7, d5, d6
 800d794:	ee26 5b06 	vmul.f64	d5, d6, d6
 800d798:	ee27 5b05 	vmul.f64	d5, d7, d5
 800d79c:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 800d850 <__ieee754_pow+0x2f8>
 800d7a0:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800d7a4:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800d858 <__ieee754_pow+0x300>
 800d7a8:	eea6 7b05 	vfma.f64	d7, d6, d5
 800d7ac:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 800d860 <__ieee754_pow+0x308>
 800d7b0:	eeb0 4b47 	vmov.f64	d4, d7
 800d7b4:	eea6 4b05 	vfma.f64	d4, d6, d5
 800d7b8:	ec53 2b14 	vmov	r2, r3, d4
 800d7bc:	2200      	movs	r2, #0
 800d7be:	ec43 2b14 	vmov	d4, r2, r3
 800d7c2:	eeb0 6b44 	vmov.f64	d6, d4
 800d7c6:	eea3 6b05 	vfma.f64	d6, d3, d5
 800d7ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d7ce:	3d01      	subs	r5, #1
 800d7d0:	ea55 030a 	orrs.w	r3, r5, sl
 800d7d4:	f04f 0200 	mov.w	r2, #0
 800d7d8:	463b      	mov	r3, r7
 800d7da:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800d7de:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800d7e2:	ec47 6b15 	vmov	d5, r6, r7
 800d7e6:	fe06 8b08 	vseleq.f64	d8, d6, d8
 800d7ea:	ec47 6b13 	vmov	d3, r6, r7
 800d7ee:	ec43 2b16 	vmov	d6, r2, r3
 800d7f2:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d7f6:	ee35 5b46 	vsub.f64	d5, d5, d6
 800d7fa:	4b23      	ldr	r3, [pc, #140]	; (800d888 <__ieee754_pow+0x330>)
 800d7fc:	eea5 7b04 	vfma.f64	d7, d5, d4
 800d800:	ee24 6b06 	vmul.f64	d6, d4, d6
 800d804:	ee37 5b06 	vadd.f64	d5, d7, d6
 800d808:	ee15 1a90 	vmov	r1, s11
 800d80c:	4299      	cmp	r1, r3
 800d80e:	ee15 2a10 	vmov	r2, s10
 800d812:	f340 819b 	ble.w	800db4c <__ieee754_pow+0x5f4>
 800d816:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d81a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d81e:	4313      	orrs	r3, r2
 800d820:	f000 810a 	beq.w	800da38 <__ieee754_pow+0x4e0>
 800d824:	ed9f 7b06 	vldr	d7, [pc, #24]	; 800d840 <__ieee754_pow+0x2e8>
 800d828:	ee28 8b07 	vmul.f64	d8, d8, d7
 800d82c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800d830:	e6fb      	b.n	800d62a <__ieee754_pow+0xd2>
 800d832:	bf00      	nop
 800d834:	f3af 8000 	nop.w
	...
 800d840:	8800759c 	.word	0x8800759c
 800d844:	7e37e43c 	.word	0x7e37e43c
 800d848:	55555555 	.word	0x55555555
 800d84c:	3fd55555 	.word	0x3fd55555
 800d850:	652b82fe 	.word	0x652b82fe
 800d854:	3ff71547 	.word	0x3ff71547
 800d858:	f85ddf44 	.word	0xf85ddf44
 800d85c:	3e54ae0b 	.word	0x3e54ae0b
 800d860:	60000000 	.word	0x60000000
 800d864:	3ff71547 	.word	0x3ff71547
 800d868:	7ff00000 	.word	0x7ff00000
 800d86c:	0801dc19 	.word	0x0801dc19
 800d870:	433fffff 	.word	0x433fffff
 800d874:	3fefffff 	.word	0x3fefffff
 800d878:	3ff00000 	.word	0x3ff00000
 800d87c:	3fe00000 	.word	0x3fe00000
 800d880:	41e00000 	.word	0x41e00000
 800d884:	3feffffe 	.word	0x3feffffe
 800d888:	408fffff 	.word	0x408fffff
 800d88c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800d890:	f280 80ce 	bge.w	800da30 <__ieee754_pow+0x4d8>
 800d894:	ed9d 6b00 	vldr	d6, [sp]
 800d898:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 800dba0 <__ieee754_pow+0x648>
 800d89c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d8a0:	ed8d 7b00 	vstr	d7, [sp]
 800d8a4:	9c01      	ldr	r4, [sp, #4]
 800d8a6:	f06f 0334 	mvn.w	r3, #52	; 0x34
 800d8aa:	1521      	asrs	r1, r4, #20
 800d8ac:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d8b0:	4419      	add	r1, r3
 800d8b2:	4be3      	ldr	r3, [pc, #908]	; (800dc40 <__ieee754_pow+0x6e8>)
 800d8b4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d8b8:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 800d8bc:	429c      	cmp	r4, r3
 800d8be:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 800d8c2:	dd06      	ble.n	800d8d2 <__ieee754_pow+0x37a>
 800d8c4:	4bdf      	ldr	r3, [pc, #892]	; (800dc44 <__ieee754_pow+0x6ec>)
 800d8c6:	429c      	cmp	r4, r3
 800d8c8:	f340 80b4 	ble.w	800da34 <__ieee754_pow+0x4dc>
 800d8cc:	3101      	adds	r1, #1
 800d8ce:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800d8d2:	2400      	movs	r4, #0
 800d8d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8d8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800d8dc:	4603      	mov	r3, r0
 800d8de:	ec43 2b17 	vmov	d7, r2, r3
 800d8e2:	4bd9      	ldr	r3, [pc, #868]	; (800dc48 <__ieee754_pow+0x6f0>)
 800d8e4:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 800d8e8:	4463      	add	r3, ip
 800d8ea:	ed93 5b00 	vldr	d5, [r3]
 800d8ee:	1040      	asrs	r0, r0, #1
 800d8f0:	ee37 2b45 	vsub.f64	d2, d7, d5
 800d8f4:	ee35 6b07 	vadd.f64	d6, d5, d7
 800d8f8:	ee84 1b06 	vdiv.f64	d1, d4, d6
 800d8fc:	ee22 6b01 	vmul.f64	d6, d2, d1
 800d900:	ed8d 6b00 	vstr	d6, [sp]
 800d904:	e9dd 8900 	ldrd	r8, r9, [sp]
 800d908:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 800d90c:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 800d910:	f04f 0800 	mov.w	r8, #0
 800d914:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 800d918:	2200      	movs	r2, #0
 800d91a:	ec49 8b14 	vmov	d4, r8, r9
 800d91e:	ec43 2b16 	vmov	d6, r2, r3
 800d922:	eeb1 3b44 	vneg.f64	d3, d4
 800d926:	eea3 2b06 	vfma.f64	d2, d3, d6
 800d92a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d92e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d932:	eea3 2b07 	vfma.f64	d2, d3, d7
 800d936:	ed9d 7b00 	vldr	d7, [sp]
 800d93a:	ee22 2b01 	vmul.f64	d2, d2, d1
 800d93e:	ee27 5b07 	vmul.f64	d5, d7, d7
 800d942:	ee37 6b04 	vadd.f64	d6, d7, d4
 800d946:	ed9f 1b98 	vldr	d1, [pc, #608]	; 800dba8 <__ieee754_pow+0x650>
 800d94a:	ee25 0b05 	vmul.f64	d0, d5, d5
 800d94e:	ee26 6b02 	vmul.f64	d6, d6, d2
 800d952:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800dbb0 <__ieee754_pow+0x658>
 800d956:	eea5 7b01 	vfma.f64	d7, d5, d1
 800d95a:	ed9f 1b97 	vldr	d1, [pc, #604]	; 800dbb8 <__ieee754_pow+0x660>
 800d95e:	eea7 1b05 	vfma.f64	d1, d7, d5
 800d962:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800dbc0 <__ieee754_pow+0x668>
 800d966:	eea1 7b05 	vfma.f64	d7, d1, d5
 800d96a:	ed9f 1b97 	vldr	d1, [pc, #604]	; 800dbc8 <__ieee754_pow+0x670>
 800d96e:	eea7 1b05 	vfma.f64	d1, d7, d5
 800d972:	ed9f 7b97 	vldr	d7, [pc, #604]	; 800dbd0 <__ieee754_pow+0x678>
 800d976:	eea1 7b05 	vfma.f64	d7, d1, d5
 800d97a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800d97e:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 800d982:	eeb0 5b47 	vmov.f64	d5, d7
 800d986:	eea4 5b04 	vfma.f64	d5, d4, d4
 800d98a:	ee35 5b06 	vadd.f64	d5, d5, d6
 800d98e:	ed8d 5b02 	vstr	d5, [sp, #8]
 800d992:	f8cd 8008 	str.w	r8, [sp, #8]
 800d996:	ed9d 5b02 	vldr	d5, [sp, #8]
 800d99a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d99e:	eea3 7b04 	vfma.f64	d7, d3, d4
 800d9a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d9a6:	ed9d 6b00 	vldr	d6, [sp]
 800d9aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d9ae:	eea2 7b05 	vfma.f64	d7, d2, d5
 800d9b2:	eeb0 6b47 	vmov.f64	d6, d7
 800d9b6:	eea4 6b05 	vfma.f64	d6, d4, d5
 800d9ba:	ed8d 6b00 	vstr	d6, [sp]
 800d9be:	f8cd 8000 	str.w	r8, [sp]
 800d9c2:	ed9d 2b00 	vldr	d2, [sp]
 800d9c6:	eeb0 6b42 	vmov.f64	d6, d2
 800d9ca:	eea3 6b05 	vfma.f64	d6, d3, d5
 800d9ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d9d2:	ed9f 6b81 	vldr	d6, [pc, #516]	; 800dbd8 <__ieee754_pow+0x680>
 800d9d6:	4b9d      	ldr	r3, [pc, #628]	; (800dc4c <__ieee754_pow+0x6f4>)
 800d9d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d9dc:	ed9f 6b80 	vldr	d6, [pc, #512]	; 800dbe0 <__ieee754_pow+0x688>
 800d9e0:	4463      	add	r3, ip
 800d9e2:	eea2 7b06 	vfma.f64	d7, d2, d6
 800d9e6:	ed93 6b00 	vldr	d6, [r3]
 800d9ea:	4b99      	ldr	r3, [pc, #612]	; (800dc50 <__ieee754_pow+0x6f8>)
 800d9ec:	ee37 6b06 	vadd.f64	d6, d7, d6
 800d9f0:	449c      	add	ip, r3
 800d9f2:	ed9c 1b00 	vldr	d1, [ip]
 800d9f6:	eeb0 4b46 	vmov.f64	d4, d6
 800d9fa:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 800dbe8 <__ieee754_pow+0x690>
 800d9fe:	ee07 1a90 	vmov	s15, r1
 800da02:	eea2 4b03 	vfma.f64	d4, d2, d3
 800da06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800da0a:	ee34 4b01 	vadd.f64	d4, d4, d1
 800da0e:	ee34 5b07 	vadd.f64	d5, d4, d7
 800da12:	ed8d 5b00 	vstr	d5, [sp]
 800da16:	f8cd 8000 	str.w	r8, [sp]
 800da1a:	ed9d 4b00 	vldr	d4, [sp]
 800da1e:	ee34 7b47 	vsub.f64	d7, d4, d7
 800da22:	ee37 7b41 	vsub.f64	d7, d7, d1
 800da26:	eea2 7b43 	vfms.f64	d7, d2, d3
 800da2a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800da2e:	e6ce      	b.n	800d7ce <__ieee754_pow+0x276>
 800da30:	2300      	movs	r3, #0
 800da32:	e73a      	b.n	800d8aa <__ieee754_pow+0x352>
 800da34:	2401      	movs	r4, #1
 800da36:	e74d      	b.n	800d8d4 <__ieee754_pow+0x37c>
 800da38:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 800dbf0 <__ieee754_pow+0x698>
 800da3c:	ee35 5b46 	vsub.f64	d5, d5, d6
 800da40:	ee37 4b04 	vadd.f64	d4, d7, d4
 800da44:	eeb4 4bc5 	vcmpe.f64	d4, d5
 800da48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da4c:	f73f aeea 	bgt.w	800d824 <__ieee754_pow+0x2cc>
 800da50:	4a80      	ldr	r2, [pc, #512]	; (800dc54 <__ieee754_pow+0x6fc>)
 800da52:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800da56:	4293      	cmp	r3, r2
 800da58:	f340 808e 	ble.w	800db78 <__ieee754_pow+0x620>
 800da5c:	151b      	asrs	r3, r3, #20
 800da5e:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 800da62:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800da66:	4103      	asrs	r3, r0
 800da68:	440b      	add	r3, r1
 800da6a:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800da6e:	487a      	ldr	r0, [pc, #488]	; (800dc58 <__ieee754_pow+0x700>)
 800da70:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800da74:	4110      	asrs	r0, r2
 800da76:	ea23 0500 	bic.w	r5, r3, r0
 800da7a:	f3c3 0013 	ubfx	r0, r3, #0, #20
 800da7e:	2400      	movs	r4, #0
 800da80:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 800da84:	f1c2 0214 	rsb	r2, r2, #20
 800da88:	ec45 4b15 	vmov	d5, r4, r5
 800da8c:	4110      	asrs	r0, r2
 800da8e:	2900      	cmp	r1, #0
 800da90:	bfb8      	it	lt
 800da92:	4240      	neglt	r0, r0
 800da94:	ee36 6b45 	vsub.f64	d6, d6, d5
 800da98:	ee36 5b07 	vadd.f64	d5, d6, d7
 800da9c:	ec53 2b15 	vmov	r2, r3, d5
 800daa0:	2200      	movs	r2, #0
 800daa2:	ec43 2b15 	vmov	d5, r2, r3
 800daa6:	ed9f 4b54 	vldr	d4, [pc, #336]	; 800dbf8 <__ieee754_pow+0x6a0>
 800daaa:	ee35 6b46 	vsub.f64	d6, d5, d6
 800daae:	ee37 6b46 	vsub.f64	d6, d7, d6
 800dab2:	ed9f 7b53 	vldr	d7, [pc, #332]	; 800dc00 <__ieee754_pow+0x6a8>
 800dab6:	ee25 7b07 	vmul.f64	d7, d5, d7
 800daba:	eea6 7b04 	vfma.f64	d7, d6, d4
 800dabe:	ed9f 6b52 	vldr	d6, [pc, #328]	; 800dc08 <__ieee754_pow+0x6b0>
 800dac2:	eeb0 4b47 	vmov.f64	d4, d7
 800dac6:	eea5 4b06 	vfma.f64	d4, d5, d6
 800daca:	eeb0 3b44 	vmov.f64	d3, d4
 800dace:	eea5 3b46 	vfms.f64	d3, d5, d6
 800dad2:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 800dc10 <__ieee754_pow+0x6b8>
 800dad6:	ee37 7b43 	vsub.f64	d7, d7, d3
 800dada:	ee24 6b04 	vmul.f64	d6, d4, d4
 800dade:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 800dc18 <__ieee754_pow+0x6c0>
 800dae2:	eea4 7b07 	vfma.f64	d7, d4, d7
 800dae6:	eea6 3b05 	vfma.f64	d3, d6, d5
 800daea:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 800dc20 <__ieee754_pow+0x6c8>
 800daee:	eea3 5b06 	vfma.f64	d5, d3, d6
 800daf2:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800dc28 <__ieee754_pow+0x6d0>
 800daf6:	eea5 3b06 	vfma.f64	d3, d5, d6
 800dafa:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 800dc30 <__ieee754_pow+0x6d8>
 800dafe:	eea3 5b06 	vfma.f64	d5, d3, d6
 800db02:	eeb0 3b44 	vmov.f64	d3, d4
 800db06:	eea5 3b46 	vfms.f64	d3, d5, d6
 800db0a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800db0e:	eeb0 6b43 	vmov.f64	d6, d3
 800db12:	ee24 3b03 	vmul.f64	d3, d4, d3
 800db16:	ee36 5b45 	vsub.f64	d5, d6, d5
 800db1a:	ee83 6b05 	vdiv.f64	d6, d3, d5
 800db1e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800db22:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800db26:	ee37 7b44 	vsub.f64	d7, d7, d4
 800db2a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800db2e:	ed8d 7b00 	vstr	d7, [sp]
 800db32:	9901      	ldr	r1, [sp, #4]
 800db34:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 800db38:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800db3c:	da1e      	bge.n	800db7c <__ieee754_pow+0x624>
 800db3e:	eeb0 0b47 	vmov.f64	d0, d7
 800db42:	f000 fe55 	bl	800e7f0 <scalbn>
 800db46:	ee20 7b08 	vmul.f64	d7, d0, d8
 800db4a:	e56e      	b.n	800d62a <__ieee754_pow+0xd2>
 800db4c:	4b43      	ldr	r3, [pc, #268]	; (800dc5c <__ieee754_pow+0x704>)
 800db4e:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 800db52:	4298      	cmp	r0, r3
 800db54:	f77f af7c 	ble.w	800da50 <__ieee754_pow+0x4f8>
 800db58:	4b41      	ldr	r3, [pc, #260]	; (800dc60 <__ieee754_pow+0x708>)
 800db5a:	440b      	add	r3, r1
 800db5c:	4313      	orrs	r3, r2
 800db5e:	d002      	beq.n	800db66 <__ieee754_pow+0x60e>
 800db60:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800dc38 <__ieee754_pow+0x6e0>
 800db64:	e660      	b.n	800d828 <__ieee754_pow+0x2d0>
 800db66:	ee35 5b46 	vsub.f64	d5, d5, d6
 800db6a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800db6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db72:	f6ff af6d 	blt.w	800da50 <__ieee754_pow+0x4f8>
 800db76:	e7f3      	b.n	800db60 <__ieee754_pow+0x608>
 800db78:	2000      	movs	r0, #0
 800db7a:	e78d      	b.n	800da98 <__ieee754_pow+0x540>
 800db7c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db80:	460b      	mov	r3, r1
 800db82:	ec43 2b10 	vmov	d0, r2, r3
 800db86:	e7de      	b.n	800db46 <__ieee754_pow+0x5ee>
 800db88:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800db8c:	e54d      	b.n	800d62a <__ieee754_pow+0xd2>
 800db8e:	e9cd 6700 	strd	r6, r7, [sp]
 800db92:	e574      	b.n	800d67e <__ieee754_pow+0x126>
 800db94:	ed8d 8b00 	vstr	d8, [sp]
 800db98:	e571      	b.n	800d67e <__ieee754_pow+0x126>
 800db9a:	4615      	mov	r5, r2
 800db9c:	e557      	b.n	800d64e <__ieee754_pow+0xf6>
 800db9e:	bf00      	nop
 800dba0:	00000000 	.word	0x00000000
 800dba4:	43400000 	.word	0x43400000
 800dba8:	4a454eef 	.word	0x4a454eef
 800dbac:	3fca7e28 	.word	0x3fca7e28
 800dbb0:	93c9db65 	.word	0x93c9db65
 800dbb4:	3fcd864a 	.word	0x3fcd864a
 800dbb8:	a91d4101 	.word	0xa91d4101
 800dbbc:	3fd17460 	.word	0x3fd17460
 800dbc0:	518f264d 	.word	0x518f264d
 800dbc4:	3fd55555 	.word	0x3fd55555
 800dbc8:	db6fabff 	.word	0xdb6fabff
 800dbcc:	3fdb6db6 	.word	0x3fdb6db6
 800dbd0:	33333303 	.word	0x33333303
 800dbd4:	3fe33333 	.word	0x3fe33333
 800dbd8:	dc3a03fd 	.word	0xdc3a03fd
 800dbdc:	3feec709 	.word	0x3feec709
 800dbe0:	145b01f5 	.word	0x145b01f5
 800dbe4:	be3e2fe0 	.word	0xbe3e2fe0
 800dbe8:	e0000000 	.word	0xe0000000
 800dbec:	3feec709 	.word	0x3feec709
 800dbf0:	652b82fe 	.word	0x652b82fe
 800dbf4:	3c971547 	.word	0x3c971547
 800dbf8:	fefa39ef 	.word	0xfefa39ef
 800dbfc:	3fe62e42 	.word	0x3fe62e42
 800dc00:	0ca86c39 	.word	0x0ca86c39
 800dc04:	be205c61 	.word	0xbe205c61
 800dc08:	00000000 	.word	0x00000000
 800dc0c:	3fe62e43 	.word	0x3fe62e43
 800dc10:	72bea4d0 	.word	0x72bea4d0
 800dc14:	3e663769 	.word	0x3e663769
 800dc18:	c5d26bf1 	.word	0xc5d26bf1
 800dc1c:	bebbbd41 	.word	0xbebbbd41
 800dc20:	af25de2c 	.word	0xaf25de2c
 800dc24:	3f11566a 	.word	0x3f11566a
 800dc28:	16bebd93 	.word	0x16bebd93
 800dc2c:	bf66c16c 	.word	0xbf66c16c
 800dc30:	5555553e 	.word	0x5555553e
 800dc34:	3fc55555 	.word	0x3fc55555
 800dc38:	c2f8f359 	.word	0xc2f8f359
 800dc3c:	01a56e1f 	.word	0x01a56e1f
 800dc40:	0003988e 	.word	0x0003988e
 800dc44:	000bb679 	.word	0x000bb679
 800dc48:	0801dd40 	.word	0x0801dd40
 800dc4c:	0801dd60 	.word	0x0801dd60
 800dc50:	0801dd50 	.word	0x0801dd50
 800dc54:	3fe00000 	.word	0x3fe00000
 800dc58:	000fffff 	.word	0x000fffff
 800dc5c:	4090cbff 	.word	0x4090cbff
 800dc60:	3f6f3400 	.word	0x3f6f3400
 800dc64:	00000000 	.word	0x00000000

0800dc68 <__ieee754_rem_pio2>:
 800dc68:	b570      	push	{r4, r5, r6, lr}
 800dc6a:	eeb0 7b40 	vmov.f64	d7, d0
 800dc6e:	ee17 5a90 	vmov	r5, s15
 800dc72:	4b95      	ldr	r3, [pc, #596]	; (800dec8 <__ieee754_rem_pio2+0x260>)
 800dc74:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800dc78:	429e      	cmp	r6, r3
 800dc7a:	b088      	sub	sp, #32
 800dc7c:	4604      	mov	r4, r0
 800dc7e:	dc07      	bgt.n	800dc90 <__ieee754_rem_pio2+0x28>
 800dc80:	2200      	movs	r2, #0
 800dc82:	2300      	movs	r3, #0
 800dc84:	ed84 0b00 	vstr	d0, [r4]
 800dc88:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800dc8c:	2000      	movs	r0, #0
 800dc8e:	e01b      	b.n	800dcc8 <__ieee754_rem_pio2+0x60>
 800dc90:	4b8e      	ldr	r3, [pc, #568]	; (800decc <__ieee754_rem_pio2+0x264>)
 800dc92:	429e      	cmp	r6, r3
 800dc94:	dc3b      	bgt.n	800dd0e <__ieee754_rem_pio2+0xa6>
 800dc96:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800dc9a:	2d00      	cmp	r5, #0
 800dc9c:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800de88 <__ieee754_rem_pio2+0x220>
 800dca0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800dca4:	dd19      	ble.n	800dcda <__ieee754_rem_pio2+0x72>
 800dca6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800dcaa:	429e      	cmp	r6, r3
 800dcac:	d00e      	beq.n	800dccc <__ieee754_rem_pio2+0x64>
 800dcae:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800de90 <__ieee754_rem_pio2+0x228>
 800dcb2:	ee37 5b46 	vsub.f64	d5, d7, d6
 800dcb6:	ee37 7b45 	vsub.f64	d7, d7, d5
 800dcba:	ed84 5b00 	vstr	d5, [r4]
 800dcbe:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dcc2:	ed84 7b02 	vstr	d7, [r4, #8]
 800dcc6:	2001      	movs	r0, #1
 800dcc8:	b008      	add	sp, #32
 800dcca:	bd70      	pop	{r4, r5, r6, pc}
 800dccc:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800de98 <__ieee754_rem_pio2+0x230>
 800dcd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dcd4:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800dea0 <__ieee754_rem_pio2+0x238>
 800dcd8:	e7eb      	b.n	800dcb2 <__ieee754_rem_pio2+0x4a>
 800dcda:	429e      	cmp	r6, r3
 800dcdc:	ee30 7b06 	vadd.f64	d7, d0, d6
 800dce0:	d00e      	beq.n	800dd00 <__ieee754_rem_pio2+0x98>
 800dce2:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800de90 <__ieee754_rem_pio2+0x228>
 800dce6:	ee37 5b06 	vadd.f64	d5, d7, d6
 800dcea:	ee37 7b45 	vsub.f64	d7, d7, d5
 800dcee:	ed84 5b00 	vstr	d5, [r4]
 800dcf2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800dcf6:	f04f 30ff 	mov.w	r0, #4294967295
 800dcfa:	ed84 7b02 	vstr	d7, [r4, #8]
 800dcfe:	e7e3      	b.n	800dcc8 <__ieee754_rem_pio2+0x60>
 800dd00:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800de98 <__ieee754_rem_pio2+0x230>
 800dd04:	ee37 7b06 	vadd.f64	d7, d7, d6
 800dd08:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800dea0 <__ieee754_rem_pio2+0x238>
 800dd0c:	e7eb      	b.n	800dce6 <__ieee754_rem_pio2+0x7e>
 800dd0e:	4b70      	ldr	r3, [pc, #448]	; (800ded0 <__ieee754_rem_pio2+0x268>)
 800dd10:	429e      	cmp	r6, r3
 800dd12:	dc6c      	bgt.n	800ddee <__ieee754_rem_pio2+0x186>
 800dd14:	f000 fc48 	bl	800e5a8 <fabs>
 800dd18:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800dd1c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800dea8 <__ieee754_rem_pio2+0x240>
 800dd20:	eea0 7b06 	vfma.f64	d7, d0, d6
 800dd24:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800dd28:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800dd2c:	ee17 0a90 	vmov	r0, s15
 800dd30:	eeb1 5b44 	vneg.f64	d5, d4
 800dd34:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800de88 <__ieee754_rem_pio2+0x220>
 800dd38:	eea5 0b07 	vfma.f64	d0, d5, d7
 800dd3c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800de90 <__ieee754_rem_pio2+0x228>
 800dd40:	281f      	cmp	r0, #31
 800dd42:	ee24 7b07 	vmul.f64	d7, d4, d7
 800dd46:	ee30 6b47 	vsub.f64	d6, d0, d7
 800dd4a:	dc08      	bgt.n	800dd5e <__ieee754_rem_pio2+0xf6>
 800dd4c:	1e42      	subs	r2, r0, #1
 800dd4e:	4b61      	ldr	r3, [pc, #388]	; (800ded4 <__ieee754_rem_pio2+0x26c>)
 800dd50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd54:	42b3      	cmp	r3, r6
 800dd56:	d002      	beq.n	800dd5e <__ieee754_rem_pio2+0xf6>
 800dd58:	ed84 6b00 	vstr	d6, [r4]
 800dd5c:	e022      	b.n	800dda4 <__ieee754_rem_pio2+0x13c>
 800dd5e:	ee16 3a90 	vmov	r3, s13
 800dd62:	1536      	asrs	r6, r6, #20
 800dd64:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800dd68:	1af3      	subs	r3, r6, r3
 800dd6a:	2b10      	cmp	r3, #16
 800dd6c:	ddf4      	ble.n	800dd58 <__ieee754_rem_pio2+0xf0>
 800dd6e:	eeb0 6b40 	vmov.f64	d6, d0
 800dd72:	ed9f 3b49 	vldr	d3, [pc, #292]	; 800de98 <__ieee754_rem_pio2+0x230>
 800dd76:	eea5 6b03 	vfma.f64	d6, d5, d3
 800dd7a:	ee30 7b46 	vsub.f64	d7, d0, d6
 800dd7e:	eea5 7b03 	vfma.f64	d7, d5, d3
 800dd82:	ed9f 3b47 	vldr	d3, [pc, #284]	; 800dea0 <__ieee754_rem_pio2+0x238>
 800dd86:	ee94 7b03 	vfnms.f64	d7, d4, d3
 800dd8a:	ee36 3b47 	vsub.f64	d3, d6, d7
 800dd8e:	ee13 3a90 	vmov	r3, s7
 800dd92:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800dd96:	1af6      	subs	r6, r6, r3
 800dd98:	2e31      	cmp	r6, #49	; 0x31
 800dd9a:	dc17      	bgt.n	800ddcc <__ieee754_rem_pio2+0x164>
 800dd9c:	eeb0 0b46 	vmov.f64	d0, d6
 800dda0:	ed84 3b00 	vstr	d3, [r4]
 800dda4:	ed94 6b00 	vldr	d6, [r4]
 800dda8:	2d00      	cmp	r5, #0
 800ddaa:	ee30 0b46 	vsub.f64	d0, d0, d6
 800ddae:	ee30 7b47 	vsub.f64	d7, d0, d7
 800ddb2:	ed84 7b02 	vstr	d7, [r4, #8]
 800ddb6:	da87      	bge.n	800dcc8 <__ieee754_rem_pio2+0x60>
 800ddb8:	eeb1 6b46 	vneg.f64	d6, d6
 800ddbc:	ed84 6b00 	vstr	d6, [r4]
 800ddc0:	eeb1 7b47 	vneg.f64	d7, d7
 800ddc4:	4240      	negs	r0, r0
 800ddc6:	ed84 7b02 	vstr	d7, [r4, #8]
 800ddca:	e77d      	b.n	800dcc8 <__ieee754_rem_pio2+0x60>
 800ddcc:	ed9f 3b38 	vldr	d3, [pc, #224]	; 800deb0 <__ieee754_rem_pio2+0x248>
 800ddd0:	eeb0 0b46 	vmov.f64	d0, d6
 800ddd4:	eea5 0b03 	vfma.f64	d0, d5, d3
 800ddd8:	ee36 7b40 	vsub.f64	d7, d6, d0
 800dddc:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800deb8 <__ieee754_rem_pio2+0x250>
 800dde0:	eea5 7b03 	vfma.f64	d7, d5, d3
 800dde4:	ee94 7b06 	vfnms.f64	d7, d4, d6
 800dde8:	ee30 6b47 	vsub.f64	d6, d0, d7
 800ddec:	e7b4      	b.n	800dd58 <__ieee754_rem_pio2+0xf0>
 800ddee:	4b3a      	ldr	r3, [pc, #232]	; (800ded8 <__ieee754_rem_pio2+0x270>)
 800ddf0:	429e      	cmp	r6, r3
 800ddf2:	dd06      	ble.n	800de02 <__ieee754_rem_pio2+0x19a>
 800ddf4:	ee30 7b40 	vsub.f64	d7, d0, d0
 800ddf8:	ed80 7b02 	vstr	d7, [r0, #8]
 800ddfc:	ed80 7b00 	vstr	d7, [r0]
 800de00:	e744      	b.n	800dc8c <__ieee754_rem_pio2+0x24>
 800de02:	1532      	asrs	r2, r6, #20
 800de04:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800de08:	ee10 0a10 	vmov	r0, s0
 800de0c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800de10:	ec41 0b17 	vmov	d7, r0, r1
 800de14:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800de18:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800dec0 <__ieee754_rem_pio2+0x258>
 800de1c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800de20:	ee37 7b46 	vsub.f64	d7, d7, d6
 800de24:	ed8d 6b02 	vstr	d6, [sp, #8]
 800de28:	ee27 7b05 	vmul.f64	d7, d7, d5
 800de2c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800de30:	a908      	add	r1, sp, #32
 800de32:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800de36:	ee37 7b46 	vsub.f64	d7, d7, d6
 800de3a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800de3e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800de42:	ed8d 7b06 	vstr	d7, [sp, #24]
 800de46:	2303      	movs	r3, #3
 800de48:	ed31 7b02 	vldmdb	r1!, {d7}
 800de4c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800de50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de54:	f103 30ff 	add.w	r0, r3, #4294967295
 800de58:	d013      	beq.n	800de82 <__ieee754_rem_pio2+0x21a>
 800de5a:	4920      	ldr	r1, [pc, #128]	; (800dedc <__ieee754_rem_pio2+0x274>)
 800de5c:	9101      	str	r1, [sp, #4]
 800de5e:	2102      	movs	r1, #2
 800de60:	9100      	str	r1, [sp, #0]
 800de62:	a802      	add	r0, sp, #8
 800de64:	4621      	mov	r1, r4
 800de66:	f000 f8ab 	bl	800dfc0 <__kernel_rem_pio2>
 800de6a:	2d00      	cmp	r5, #0
 800de6c:	f6bf af2c 	bge.w	800dcc8 <__ieee754_rem_pio2+0x60>
 800de70:	ed94 7b00 	vldr	d7, [r4]
 800de74:	eeb1 7b47 	vneg.f64	d7, d7
 800de78:	ed84 7b00 	vstr	d7, [r4]
 800de7c:	ed94 7b02 	vldr	d7, [r4, #8]
 800de80:	e79e      	b.n	800ddc0 <__ieee754_rem_pio2+0x158>
 800de82:	4603      	mov	r3, r0
 800de84:	e7e0      	b.n	800de48 <__ieee754_rem_pio2+0x1e0>
 800de86:	bf00      	nop
 800de88:	54400000 	.word	0x54400000
 800de8c:	3ff921fb 	.word	0x3ff921fb
 800de90:	1a626331 	.word	0x1a626331
 800de94:	3dd0b461 	.word	0x3dd0b461
 800de98:	1a600000 	.word	0x1a600000
 800de9c:	3dd0b461 	.word	0x3dd0b461
 800dea0:	2e037073 	.word	0x2e037073
 800dea4:	3ba3198a 	.word	0x3ba3198a
 800dea8:	6dc9c883 	.word	0x6dc9c883
 800deac:	3fe45f30 	.word	0x3fe45f30
 800deb0:	2e000000 	.word	0x2e000000
 800deb4:	3ba3198a 	.word	0x3ba3198a
 800deb8:	252049c1 	.word	0x252049c1
 800debc:	397b839a 	.word	0x397b839a
 800dec0:	00000000 	.word	0x00000000
 800dec4:	41700000 	.word	0x41700000
 800dec8:	3fe921fb 	.word	0x3fe921fb
 800decc:	4002d97b 	.word	0x4002d97b
 800ded0:	413921fb 	.word	0x413921fb
 800ded4:	0801dd70 	.word	0x0801dd70
 800ded8:	7fefffff 	.word	0x7fefffff
 800dedc:	0801ddf0 	.word	0x0801ddf0

0800dee0 <__ieee754_sqrt>:
 800dee0:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800dee4:	4770      	bx	lr
	...

0800dee8 <__kernel_cos>:
 800dee8:	ee10 1a90 	vmov	r1, s1
 800deec:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800def0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800def4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800def8:	da05      	bge.n	800df06 <__kernel_cos+0x1e>
 800defa:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800defe:	ee16 3a90 	vmov	r3, s13
 800df02:	2b00      	cmp	r3, #0
 800df04:	d03d      	beq.n	800df82 <__kernel_cos+0x9a>
 800df06:	ee20 4b00 	vmul.f64	d4, d0, d0
 800df0a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800df0e:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 800df88 <__kernel_cos+0xa0>
 800df12:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800df16:	ee24 6b06 	vmul.f64	d6, d4, d6
 800df1a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800df90 <__kernel_cos+0xa8>
 800df1e:	eea4 5b03 	vfma.f64	d5, d4, d3
 800df22:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800df98 <__kernel_cos+0xb0>
 800df26:	eea5 3b04 	vfma.f64	d3, d5, d4
 800df2a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800dfa0 <__kernel_cos+0xb8>
 800df2e:	eea3 5b04 	vfma.f64	d5, d3, d4
 800df32:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800dfa8 <__kernel_cos+0xc0>
 800df36:	4b20      	ldr	r3, [pc, #128]	; (800dfb8 <__kernel_cos+0xd0>)
 800df38:	eea5 3b04 	vfma.f64	d3, d5, d4
 800df3c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 800dfb0 <__kernel_cos+0xc8>
 800df40:	4299      	cmp	r1, r3
 800df42:	eea3 5b04 	vfma.f64	d5, d3, d4
 800df46:	ee25 5b04 	vmul.f64	d5, d5, d4
 800df4a:	eea4 1b05 	vfma.f64	d1, d4, d5
 800df4e:	dc04      	bgt.n	800df5a <__kernel_cos+0x72>
 800df50:	ee36 6b41 	vsub.f64	d6, d6, d1
 800df54:	ee37 0b46 	vsub.f64	d0, d7, d6
 800df58:	4770      	bx	lr
 800df5a:	4b18      	ldr	r3, [pc, #96]	; (800dfbc <__kernel_cos+0xd4>)
 800df5c:	4299      	cmp	r1, r3
 800df5e:	dc0d      	bgt.n	800df7c <__kernel_cos+0x94>
 800df60:	2200      	movs	r2, #0
 800df62:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800df66:	ec43 2b15 	vmov	d5, r2, r3
 800df6a:	ee37 0b45 	vsub.f64	d0, d7, d5
 800df6e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800df72:	ee36 6b41 	vsub.f64	d6, d6, d1
 800df76:	ee30 0b46 	vsub.f64	d0, d0, d6
 800df7a:	4770      	bx	lr
 800df7c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800df80:	e7f3      	b.n	800df6a <__kernel_cos+0x82>
 800df82:	eeb0 0b47 	vmov.f64	d0, d7
 800df86:	4770      	bx	lr
 800df88:	be8838d4 	.word	0xbe8838d4
 800df8c:	bda8fae9 	.word	0xbda8fae9
 800df90:	bdb4b1c4 	.word	0xbdb4b1c4
 800df94:	3e21ee9e 	.word	0x3e21ee9e
 800df98:	809c52ad 	.word	0x809c52ad
 800df9c:	be927e4f 	.word	0xbe927e4f
 800dfa0:	19cb1590 	.word	0x19cb1590
 800dfa4:	3efa01a0 	.word	0x3efa01a0
 800dfa8:	16c15177 	.word	0x16c15177
 800dfac:	bf56c16c 	.word	0xbf56c16c
 800dfb0:	5555554c 	.word	0x5555554c
 800dfb4:	3fa55555 	.word	0x3fa55555
 800dfb8:	3fd33332 	.word	0x3fd33332
 800dfbc:	3fe90000 	.word	0x3fe90000

0800dfc0 <__kernel_rem_pio2>:
 800dfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfc4:	ed2d 8b06 	vpush	{d8-d10}
 800dfc8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800dfcc:	469b      	mov	fp, r3
 800dfce:	460e      	mov	r6, r1
 800dfd0:	4bc7      	ldr	r3, [pc, #796]	; (800e2f0 <__kernel_rem_pio2+0x330>)
 800dfd2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800dfd4:	9002      	str	r0, [sp, #8]
 800dfd6:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800dfda:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 800dfdc:	1ed1      	subs	r1, r2, #3
 800dfde:	2318      	movs	r3, #24
 800dfe0:	f06f 0417 	mvn.w	r4, #23
 800dfe4:	fb91 f1f3 	sdiv	r1, r1, r3
 800dfe8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800dfec:	f10b 3aff 	add.w	sl, fp, #4294967295
 800dff0:	fb01 4404 	mla	r4, r1, r4, r4
 800dff4:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 800e2d8 <__kernel_rem_pio2+0x318>
 800dff8:	4414      	add	r4, r2
 800dffa:	eba1 050a 	sub.w	r5, r1, sl
 800dffe:	aa1a      	add	r2, sp, #104	; 0x68
 800e000:	eb09 070a 	add.w	r7, r9, sl
 800e004:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800e008:	4696      	mov	lr, r2
 800e00a:	2300      	movs	r3, #0
 800e00c:	42bb      	cmp	r3, r7
 800e00e:	dd0f      	ble.n	800e030 <__kernel_rem_pio2+0x70>
 800e010:	af6a      	add	r7, sp, #424	; 0x1a8
 800e012:	2200      	movs	r2, #0
 800e014:	454a      	cmp	r2, r9
 800e016:	dc28      	bgt.n	800e06a <__kernel_rem_pio2+0xaa>
 800e018:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800e01c:	eb0b 0302 	add.w	r3, fp, r2
 800e020:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800e024:	9d02      	ldr	r5, [sp, #8]
 800e026:	ed9f 7bac 	vldr	d7, [pc, #688]	; 800e2d8 <__kernel_rem_pio2+0x318>
 800e02a:	f04f 0c00 	mov.w	ip, #0
 800e02e:	e016      	b.n	800e05e <__kernel_rem_pio2+0x9e>
 800e030:	42dd      	cmn	r5, r3
 800e032:	d409      	bmi.n	800e048 <__kernel_rem_pio2+0x88>
 800e034:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800e038:	ee07 2a90 	vmov	s15, r2
 800e03c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e040:	ecae 7b02 	vstmia	lr!, {d7}
 800e044:	3301      	adds	r3, #1
 800e046:	e7e1      	b.n	800e00c <__kernel_rem_pio2+0x4c>
 800e048:	eeb0 7b46 	vmov.f64	d7, d6
 800e04c:	e7f8      	b.n	800e040 <__kernel_rem_pio2+0x80>
 800e04e:	ecb5 5b02 	vldmia	r5!, {d5}
 800e052:	ed33 6b02 	vldmdb	r3!, {d6}
 800e056:	f10c 0c01 	add.w	ip, ip, #1
 800e05a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e05e:	45d4      	cmp	ip, sl
 800e060:	ddf5      	ble.n	800e04e <__kernel_rem_pio2+0x8e>
 800e062:	eca7 7b02 	vstmia	r7!, {d7}
 800e066:	3201      	adds	r2, #1
 800e068:	e7d4      	b.n	800e014 <__kernel_rem_pio2+0x54>
 800e06a:	ab06      	add	r3, sp, #24
 800e06c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800e070:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 800e2e0 <__kernel_rem_pio2+0x320>
 800e074:	ed9f ab9c 	vldr	d10, [pc, #624]	; 800e2e8 <__kernel_rem_pio2+0x328>
 800e078:	9304      	str	r3, [sp, #16]
 800e07a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800e07e:	9303      	str	r3, [sp, #12]
 800e080:	464d      	mov	r5, r9
 800e082:	ab92      	add	r3, sp, #584	; 0x248
 800e084:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 800e088:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e08c:	3f01      	subs	r7, #1
 800e08e:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800e092:	00ff      	lsls	r7, r7, #3
 800e094:	ab92      	add	r3, sp, #584	; 0x248
 800e096:	19da      	adds	r2, r3, r7
 800e098:	3a98      	subs	r2, #152	; 0x98
 800e09a:	2300      	movs	r3, #0
 800e09c:	1ae9      	subs	r1, r5, r3
 800e09e:	2900      	cmp	r1, #0
 800e0a0:	dc4e      	bgt.n	800e140 <__kernel_rem_pio2+0x180>
 800e0a2:	4620      	mov	r0, r4
 800e0a4:	f000 fba4 	bl	800e7f0 <scalbn>
 800e0a8:	eeb0 8b40 	vmov.f64	d8, d0
 800e0ac:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800e0b0:	ee28 0b00 	vmul.f64	d0, d8, d0
 800e0b4:	f000 fa8c 	bl	800e5d0 <floor>
 800e0b8:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800e0bc:	eea0 8b47 	vfms.f64	d8, d0, d7
 800e0c0:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800e0c4:	2c00      	cmp	r4, #0
 800e0c6:	edcd 7a01 	vstr	s15, [sp, #4]
 800e0ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e0ce:	ee38 8b47 	vsub.f64	d8, d8, d7
 800e0d2:	dd4a      	ble.n	800e16a <__kernel_rem_pio2+0x1aa>
 800e0d4:	1e69      	subs	r1, r5, #1
 800e0d6:	ab06      	add	r3, sp, #24
 800e0d8:	f1c4 0018 	rsb	r0, r4, #24
 800e0dc:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800e0e0:	9a01      	ldr	r2, [sp, #4]
 800e0e2:	fa4c f300 	asr.w	r3, ip, r0
 800e0e6:	441a      	add	r2, r3
 800e0e8:	4083      	lsls	r3, r0
 800e0ea:	9201      	str	r2, [sp, #4]
 800e0ec:	ebac 0203 	sub.w	r2, ip, r3
 800e0f0:	ab06      	add	r3, sp, #24
 800e0f2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800e0f6:	f1c4 0317 	rsb	r3, r4, #23
 800e0fa:	fa42 f803 	asr.w	r8, r2, r3
 800e0fe:	f1b8 0f00 	cmp.w	r8, #0
 800e102:	dd43      	ble.n	800e18c <__kernel_rem_pio2+0x1cc>
 800e104:	9b01      	ldr	r3, [sp, #4]
 800e106:	2000      	movs	r0, #0
 800e108:	3301      	adds	r3, #1
 800e10a:	9301      	str	r3, [sp, #4]
 800e10c:	4601      	mov	r1, r0
 800e10e:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 800e112:	4285      	cmp	r5, r0
 800e114:	dc6e      	bgt.n	800e1f4 <__kernel_rem_pio2+0x234>
 800e116:	2c00      	cmp	r4, #0
 800e118:	dd04      	ble.n	800e124 <__kernel_rem_pio2+0x164>
 800e11a:	2c01      	cmp	r4, #1
 800e11c:	d07f      	beq.n	800e21e <__kernel_rem_pio2+0x25e>
 800e11e:	2c02      	cmp	r4, #2
 800e120:	f000 8087 	beq.w	800e232 <__kernel_rem_pio2+0x272>
 800e124:	f1b8 0f02 	cmp.w	r8, #2
 800e128:	d130      	bne.n	800e18c <__kernel_rem_pio2+0x1cc>
 800e12a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e12e:	ee30 8b48 	vsub.f64	d8, d0, d8
 800e132:	b359      	cbz	r1, 800e18c <__kernel_rem_pio2+0x1cc>
 800e134:	4620      	mov	r0, r4
 800e136:	f000 fb5b 	bl	800e7f0 <scalbn>
 800e13a:	ee38 8b40 	vsub.f64	d8, d8, d0
 800e13e:	e025      	b.n	800e18c <__kernel_rem_pio2+0x1cc>
 800e140:	ee20 7b09 	vmul.f64	d7, d0, d9
 800e144:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800e148:	a806      	add	r0, sp, #24
 800e14a:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800e14e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800e152:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e156:	ee10 1a10 	vmov	r1, s0
 800e15a:	ed32 0b02 	vldmdb	r2!, {d0}
 800e15e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800e162:	ee37 0b00 	vadd.f64	d0, d7, d0
 800e166:	3301      	adds	r3, #1
 800e168:	e798      	b.n	800e09c <__kernel_rem_pio2+0xdc>
 800e16a:	d106      	bne.n	800e17a <__kernel_rem_pio2+0x1ba>
 800e16c:	1e6b      	subs	r3, r5, #1
 800e16e:	aa06      	add	r2, sp, #24
 800e170:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e174:	ea4f 58e2 	mov.w	r8, r2, asr #23
 800e178:	e7c1      	b.n	800e0fe <__kernel_rem_pio2+0x13e>
 800e17a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800e17e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e186:	da32      	bge.n	800e1ee <__kernel_rem_pio2+0x22e>
 800e188:	f04f 0800 	mov.w	r8, #0
 800e18c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e194:	f040 80b0 	bne.w	800e2f8 <__kernel_rem_pio2+0x338>
 800e198:	1e6b      	subs	r3, r5, #1
 800e19a:	4618      	mov	r0, r3
 800e19c:	2200      	movs	r2, #0
 800e19e:	4548      	cmp	r0, r9
 800e1a0:	da4e      	bge.n	800e240 <__kernel_rem_pio2+0x280>
 800e1a2:	2a00      	cmp	r2, #0
 800e1a4:	f000 8088 	beq.w	800e2b8 <__kernel_rem_pio2+0x2f8>
 800e1a8:	aa06      	add	r2, sp, #24
 800e1aa:	3c18      	subs	r4, #24
 800e1ac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800e1b0:	2900      	cmp	r1, #0
 800e1b2:	f000 808e 	beq.w	800e2d2 <__kernel_rem_pio2+0x312>
 800e1b6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e1ba:	4620      	mov	r0, r4
 800e1bc:	9302      	str	r3, [sp, #8]
 800e1be:	f000 fb17 	bl	800e7f0 <scalbn>
 800e1c2:	9b02      	ldr	r3, [sp, #8]
 800e1c4:	aa6a      	add	r2, sp, #424	; 0x1a8
 800e1c6:	00d9      	lsls	r1, r3, #3
 800e1c8:	ed9f 6b45 	vldr	d6, [pc, #276]	; 800e2e0 <__kernel_rem_pio2+0x320>
 800e1cc:	1850      	adds	r0, r2, r1
 800e1ce:	f100 0508 	add.w	r5, r0, #8
 800e1d2:	461c      	mov	r4, r3
 800e1d4:	2c00      	cmp	r4, #0
 800e1d6:	f280 80bd 	bge.w	800e354 <__kernel_rem_pio2+0x394>
 800e1da:	2500      	movs	r5, #0
 800e1dc:	1b5c      	subs	r4, r3, r5
 800e1de:	2c00      	cmp	r4, #0
 800e1e0:	f2c0 80dd 	blt.w	800e39e <__kernel_rem_pio2+0x3de>
 800e1e4:	4f43      	ldr	r7, [pc, #268]	; (800e2f4 <__kernel_rem_pio2+0x334>)
 800e1e6:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 800e2d8 <__kernel_rem_pio2+0x318>
 800e1ea:	2400      	movs	r4, #0
 800e1ec:	e0cb      	b.n	800e386 <__kernel_rem_pio2+0x3c6>
 800e1ee:	f04f 0802 	mov.w	r8, #2
 800e1f2:	e787      	b.n	800e104 <__kernel_rem_pio2+0x144>
 800e1f4:	ab06      	add	r3, sp, #24
 800e1f6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e1fa:	b949      	cbnz	r1, 800e210 <__kernel_rem_pio2+0x250>
 800e1fc:	b12b      	cbz	r3, 800e20a <__kernel_rem_pio2+0x24a>
 800e1fe:	aa06      	add	r2, sp, #24
 800e200:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e204:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800e208:	2301      	movs	r3, #1
 800e20a:	3001      	adds	r0, #1
 800e20c:	4619      	mov	r1, r3
 800e20e:	e780      	b.n	800e112 <__kernel_rem_pio2+0x152>
 800e210:	aa06      	add	r2, sp, #24
 800e212:	ebac 0303 	sub.w	r3, ip, r3
 800e216:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800e21a:	460b      	mov	r3, r1
 800e21c:	e7f5      	b.n	800e20a <__kernel_rem_pio2+0x24a>
 800e21e:	1e68      	subs	r0, r5, #1
 800e220:	ab06      	add	r3, sp, #24
 800e222:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e226:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e22a:	aa06      	add	r2, sp, #24
 800e22c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800e230:	e778      	b.n	800e124 <__kernel_rem_pio2+0x164>
 800e232:	1e68      	subs	r0, r5, #1
 800e234:	ab06      	add	r3, sp, #24
 800e236:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e23a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e23e:	e7f4      	b.n	800e22a <__kernel_rem_pio2+0x26a>
 800e240:	a906      	add	r1, sp, #24
 800e242:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800e246:	3801      	subs	r0, #1
 800e248:	430a      	orrs	r2, r1
 800e24a:	e7a8      	b.n	800e19e <__kernel_rem_pio2+0x1de>
 800e24c:	f10c 0c01 	add.w	ip, ip, #1
 800e250:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e254:	2a00      	cmp	r2, #0
 800e256:	d0f9      	beq.n	800e24c <__kernel_rem_pio2+0x28c>
 800e258:	eb0b 0305 	add.w	r3, fp, r5
 800e25c:	aa1a      	add	r2, sp, #104	; 0x68
 800e25e:	00db      	lsls	r3, r3, #3
 800e260:	1898      	adds	r0, r3, r2
 800e262:	3008      	adds	r0, #8
 800e264:	1c69      	adds	r1, r5, #1
 800e266:	3708      	adds	r7, #8
 800e268:	2200      	movs	r2, #0
 800e26a:	4465      	add	r5, ip
 800e26c:	9005      	str	r0, [sp, #20]
 800e26e:	428d      	cmp	r5, r1
 800e270:	f6ff af07 	blt.w	800e082 <__kernel_rem_pio2+0xc2>
 800e274:	a81a      	add	r0, sp, #104	; 0x68
 800e276:	eb02 0c03 	add.w	ip, r2, r3
 800e27a:	4484      	add	ip, r0
 800e27c:	9803      	ldr	r0, [sp, #12]
 800e27e:	f8dd e008 	ldr.w	lr, [sp, #8]
 800e282:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800e286:	9001      	str	r0, [sp, #4]
 800e288:	ee07 0a90 	vmov	s15, r0
 800e28c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e290:	9805      	ldr	r0, [sp, #20]
 800e292:	ed8c 7b00 	vstr	d7, [ip]
 800e296:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800e2d8 <__kernel_rem_pio2+0x318>
 800e29a:	eb00 0802 	add.w	r8, r0, r2
 800e29e:	f04f 0c00 	mov.w	ip, #0
 800e2a2:	45d4      	cmp	ip, sl
 800e2a4:	dd0c      	ble.n	800e2c0 <__kernel_rem_pio2+0x300>
 800e2a6:	eb02 0c07 	add.w	ip, r2, r7
 800e2aa:	a86a      	add	r0, sp, #424	; 0x1a8
 800e2ac:	4484      	add	ip, r0
 800e2ae:	ed8c 7b02 	vstr	d7, [ip, #8]
 800e2b2:	3101      	adds	r1, #1
 800e2b4:	3208      	adds	r2, #8
 800e2b6:	e7da      	b.n	800e26e <__kernel_rem_pio2+0x2ae>
 800e2b8:	9b04      	ldr	r3, [sp, #16]
 800e2ba:	f04f 0c01 	mov.w	ip, #1
 800e2be:	e7c7      	b.n	800e250 <__kernel_rem_pio2+0x290>
 800e2c0:	ecbe 5b02 	vldmia	lr!, {d5}
 800e2c4:	ed38 6b02 	vldmdb	r8!, {d6}
 800e2c8:	f10c 0c01 	add.w	ip, ip, #1
 800e2cc:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e2d0:	e7e7      	b.n	800e2a2 <__kernel_rem_pio2+0x2e2>
 800e2d2:	3b01      	subs	r3, #1
 800e2d4:	e768      	b.n	800e1a8 <__kernel_rem_pio2+0x1e8>
 800e2d6:	bf00      	nop
	...
 800e2e4:	3e700000 	.word	0x3e700000
 800e2e8:	00000000 	.word	0x00000000
 800e2ec:	41700000 	.word	0x41700000
 800e2f0:	0801df38 	.word	0x0801df38
 800e2f4:	0801def8 	.word	0x0801def8
 800e2f8:	4260      	negs	r0, r4
 800e2fa:	eeb0 0b48 	vmov.f64	d0, d8
 800e2fe:	f000 fa77 	bl	800e7f0 <scalbn>
 800e302:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800e4e0 <__kernel_rem_pio2+0x520>
 800e306:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800e30a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e30e:	db18      	blt.n	800e342 <__kernel_rem_pio2+0x382>
 800e310:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800e4e8 <__kernel_rem_pio2+0x528>
 800e314:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e318:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800e31c:	aa06      	add	r2, sp, #24
 800e31e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800e322:	eea5 0b46 	vfms.f64	d0, d5, d6
 800e326:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e32a:	a906      	add	r1, sp, #24
 800e32c:	ee10 3a10 	vmov	r3, s0
 800e330:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800e334:	1c6b      	adds	r3, r5, #1
 800e336:	ee17 2a10 	vmov	r2, s14
 800e33a:	3418      	adds	r4, #24
 800e33c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e340:	e739      	b.n	800e1b6 <__kernel_rem_pio2+0x1f6>
 800e342:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e346:	aa06      	add	r2, sp, #24
 800e348:	ee10 3a10 	vmov	r3, s0
 800e34c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800e350:	462b      	mov	r3, r5
 800e352:	e730      	b.n	800e1b6 <__kernel_rem_pio2+0x1f6>
 800e354:	aa06      	add	r2, sp, #24
 800e356:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800e35a:	9202      	str	r2, [sp, #8]
 800e35c:	ee07 2a90 	vmov	s15, r2
 800e360:	3c01      	subs	r4, #1
 800e362:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e366:	ee27 7b00 	vmul.f64	d7, d7, d0
 800e36a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800e36e:	ed25 7b02 	vstmdb	r5!, {d7}
 800e372:	e72f      	b.n	800e1d4 <__kernel_rem_pio2+0x214>
 800e374:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 800e378:	ecb7 5b02 	vldmia	r7!, {d5}
 800e37c:	ed9c 6b00 	vldr	d6, [ip]
 800e380:	3401      	adds	r4, #1
 800e382:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e386:	454c      	cmp	r4, r9
 800e388:	dc01      	bgt.n	800e38e <__kernel_rem_pio2+0x3ce>
 800e38a:	42a5      	cmp	r5, r4
 800e38c:	daf2      	bge.n	800e374 <__kernel_rem_pio2+0x3b4>
 800e38e:	aa42      	add	r2, sp, #264	; 0x108
 800e390:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 800e394:	ed84 7b00 	vstr	d7, [r4]
 800e398:	3501      	adds	r5, #1
 800e39a:	3808      	subs	r0, #8
 800e39c:	e71e      	b.n	800e1dc <__kernel_rem_pio2+0x21c>
 800e39e:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800e3a0:	2a03      	cmp	r2, #3
 800e3a2:	d84e      	bhi.n	800e442 <__kernel_rem_pio2+0x482>
 800e3a4:	e8df f002 	tbb	[pc, r2]
 800e3a8:	021f1f3e 	.word	0x021f1f3e
 800e3ac:	3108      	adds	r1, #8
 800e3ae:	aa42      	add	r2, sp, #264	; 0x108
 800e3b0:	4411      	add	r1, r2
 800e3b2:	4608      	mov	r0, r1
 800e3b4:	461c      	mov	r4, r3
 800e3b6:	2c00      	cmp	r4, #0
 800e3b8:	dc61      	bgt.n	800e47e <__kernel_rem_pio2+0x4be>
 800e3ba:	4608      	mov	r0, r1
 800e3bc:	461c      	mov	r4, r3
 800e3be:	2c01      	cmp	r4, #1
 800e3c0:	dc6d      	bgt.n	800e49e <__kernel_rem_pio2+0x4de>
 800e3c2:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800e4f0 <__kernel_rem_pio2+0x530>
 800e3c6:	2b01      	cmp	r3, #1
 800e3c8:	dc79      	bgt.n	800e4be <__kernel_rem_pio2+0x4fe>
 800e3ca:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800e3ce:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800e3d2:	f1b8 0f00 	cmp.w	r8, #0
 800e3d6:	d178      	bne.n	800e4ca <__kernel_rem_pio2+0x50a>
 800e3d8:	ed86 5b00 	vstr	d5, [r6]
 800e3dc:	ed86 6b02 	vstr	d6, [r6, #8]
 800e3e0:	ed86 7b04 	vstr	d7, [r6, #16]
 800e3e4:	e02d      	b.n	800e442 <__kernel_rem_pio2+0x482>
 800e3e6:	ed9f 6b42 	vldr	d6, [pc, #264]	; 800e4f0 <__kernel_rem_pio2+0x530>
 800e3ea:	3108      	adds	r1, #8
 800e3ec:	aa42      	add	r2, sp, #264	; 0x108
 800e3ee:	4411      	add	r1, r2
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	2800      	cmp	r0, #0
 800e3f4:	da34      	bge.n	800e460 <__kernel_rem_pio2+0x4a0>
 800e3f6:	f1b8 0f00 	cmp.w	r8, #0
 800e3fa:	d037      	beq.n	800e46c <__kernel_rem_pio2+0x4ac>
 800e3fc:	eeb1 7b46 	vneg.f64	d7, d6
 800e400:	ed86 7b00 	vstr	d7, [r6]
 800e404:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800e408:	a844      	add	r0, sp, #272	; 0x110
 800e40a:	2101      	movs	r1, #1
 800e40c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e410:	428b      	cmp	r3, r1
 800e412:	da2e      	bge.n	800e472 <__kernel_rem_pio2+0x4b2>
 800e414:	f1b8 0f00 	cmp.w	r8, #0
 800e418:	d001      	beq.n	800e41e <__kernel_rem_pio2+0x45e>
 800e41a:	eeb1 7b47 	vneg.f64	d7, d7
 800e41e:	ed86 7b02 	vstr	d7, [r6, #8]
 800e422:	e00e      	b.n	800e442 <__kernel_rem_pio2+0x482>
 800e424:	aa92      	add	r2, sp, #584	; 0x248
 800e426:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800e4f0 <__kernel_rem_pio2+0x530>
 800e42a:	4411      	add	r1, r2
 800e42c:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800e430:	2b00      	cmp	r3, #0
 800e432:	da0f      	bge.n	800e454 <__kernel_rem_pio2+0x494>
 800e434:	f1b8 0f00 	cmp.w	r8, #0
 800e438:	d001      	beq.n	800e43e <__kernel_rem_pio2+0x47e>
 800e43a:	eeb1 7b47 	vneg.f64	d7, d7
 800e43e:	ed86 7b00 	vstr	d7, [r6]
 800e442:	9b01      	ldr	r3, [sp, #4]
 800e444:	f003 0007 	and.w	r0, r3, #7
 800e448:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800e44c:	ecbd 8b06 	vpop	{d8-d10}
 800e450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e454:	ed31 6b02 	vldmdb	r1!, {d6}
 800e458:	3b01      	subs	r3, #1
 800e45a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e45e:	e7e7      	b.n	800e430 <__kernel_rem_pio2+0x470>
 800e460:	ed31 7b02 	vldmdb	r1!, {d7}
 800e464:	3801      	subs	r0, #1
 800e466:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e46a:	e7c2      	b.n	800e3f2 <__kernel_rem_pio2+0x432>
 800e46c:	eeb0 7b46 	vmov.f64	d7, d6
 800e470:	e7c6      	b.n	800e400 <__kernel_rem_pio2+0x440>
 800e472:	ecb0 6b02 	vldmia	r0!, {d6}
 800e476:	3101      	adds	r1, #1
 800e478:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e47c:	e7c8      	b.n	800e410 <__kernel_rem_pio2+0x450>
 800e47e:	ed10 7b04 	vldr	d7, [r0, #-16]
 800e482:	ed30 5b02 	vldmdb	r0!, {d5}
 800e486:	3c01      	subs	r4, #1
 800e488:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e48c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e490:	ed00 6b02 	vstr	d6, [r0, #-8]
 800e494:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e498:	ed80 7b00 	vstr	d7, [r0]
 800e49c:	e78b      	b.n	800e3b6 <__kernel_rem_pio2+0x3f6>
 800e49e:	ed10 7b04 	vldr	d7, [r0, #-16]
 800e4a2:	ed30 5b02 	vldmdb	r0!, {d5}
 800e4a6:	3c01      	subs	r4, #1
 800e4a8:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e4ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e4b0:	ed00 6b02 	vstr	d6, [r0, #-8]
 800e4b4:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e4b8:	ed80 7b00 	vstr	d7, [r0]
 800e4bc:	e77f      	b.n	800e3be <__kernel_rem_pio2+0x3fe>
 800e4be:	ed31 6b02 	vldmdb	r1!, {d6}
 800e4c2:	3b01      	subs	r3, #1
 800e4c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e4c8:	e77d      	b.n	800e3c6 <__kernel_rem_pio2+0x406>
 800e4ca:	eeb1 5b45 	vneg.f64	d5, d5
 800e4ce:	eeb1 6b46 	vneg.f64	d6, d6
 800e4d2:	ed86 5b00 	vstr	d5, [r6]
 800e4d6:	eeb1 7b47 	vneg.f64	d7, d7
 800e4da:	ed86 6b02 	vstr	d6, [r6, #8]
 800e4de:	e77f      	b.n	800e3e0 <__kernel_rem_pio2+0x420>
 800e4e0:	00000000 	.word	0x00000000
 800e4e4:	41700000 	.word	0x41700000
 800e4e8:	00000000 	.word	0x00000000
 800e4ec:	3e700000 	.word	0x3e700000
	...

0800e4f8 <__kernel_sin>:
 800e4f8:	ee10 3a90 	vmov	r3, s1
 800e4fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e500:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e504:	da04      	bge.n	800e510 <__kernel_sin+0x18>
 800e506:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800e50a:	ee17 3a90 	vmov	r3, s15
 800e50e:	b35b      	cbz	r3, 800e568 <__kernel_sin+0x70>
 800e510:	ee20 6b00 	vmul.f64	d6, d0, d0
 800e514:	ee20 5b06 	vmul.f64	d5, d0, d6
 800e518:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800e570 <__kernel_sin+0x78>
 800e51c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e578 <__kernel_sin+0x80>
 800e520:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e524:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800e580 <__kernel_sin+0x88>
 800e528:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e52c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e588 <__kernel_sin+0x90>
 800e530:	eea7 4b06 	vfma.f64	d4, d7, d6
 800e534:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800e590 <__kernel_sin+0x98>
 800e538:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e53c:	b930      	cbnz	r0, 800e54c <__kernel_sin+0x54>
 800e53e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800e598 <__kernel_sin+0xa0>
 800e542:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e546:	eea4 0b05 	vfma.f64	d0, d4, d5
 800e54a:	4770      	bx	lr
 800e54c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800e550:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e554:	eea1 7b04 	vfma.f64	d7, d1, d4
 800e558:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800e55c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800e5a0 <__kernel_sin+0xa8>
 800e560:	eea5 1b07 	vfma.f64	d1, d5, d7
 800e564:	ee30 0b41 	vsub.f64	d0, d0, d1
 800e568:	4770      	bx	lr
 800e56a:	bf00      	nop
 800e56c:	f3af 8000 	nop.w
 800e570:	5acfd57c 	.word	0x5acfd57c
 800e574:	3de5d93a 	.word	0x3de5d93a
 800e578:	8a2b9ceb 	.word	0x8a2b9ceb
 800e57c:	be5ae5e6 	.word	0xbe5ae5e6
 800e580:	57b1fe7d 	.word	0x57b1fe7d
 800e584:	3ec71de3 	.word	0x3ec71de3
 800e588:	19c161d5 	.word	0x19c161d5
 800e58c:	bf2a01a0 	.word	0xbf2a01a0
 800e590:	1110f8a6 	.word	0x1110f8a6
 800e594:	3f811111 	.word	0x3f811111
 800e598:	55555549 	.word	0x55555549
 800e59c:	bfc55555 	.word	0xbfc55555
 800e5a0:	55555549 	.word	0x55555549
 800e5a4:	3fc55555 	.word	0x3fc55555

0800e5a8 <fabs>:
 800e5a8:	ec51 0b10 	vmov	r0, r1, d0
 800e5ac:	ee10 2a10 	vmov	r2, s0
 800e5b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e5b4:	ec43 2b10 	vmov	d0, r2, r3
 800e5b8:	4770      	bx	lr

0800e5ba <finite>:
 800e5ba:	ee10 3a90 	vmov	r3, s1
 800e5be:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800e5c2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e5c6:	0fc0      	lsrs	r0, r0, #31
 800e5c8:	4770      	bx	lr
 800e5ca:	0000      	movs	r0, r0
 800e5cc:	0000      	movs	r0, r0
	...

0800e5d0 <floor>:
 800e5d0:	ee10 1a90 	vmov	r1, s1
 800e5d4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e5d8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800e5dc:	2b13      	cmp	r3, #19
 800e5de:	b530      	push	{r4, r5, lr}
 800e5e0:	ee10 0a10 	vmov	r0, s0
 800e5e4:	ee10 5a10 	vmov	r5, s0
 800e5e8:	dc33      	bgt.n	800e652 <floor+0x82>
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	da17      	bge.n	800e61e <floor+0x4e>
 800e5ee:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800e6b0 <floor+0xe0>
 800e5f2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e5f6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5fe:	dd09      	ble.n	800e614 <floor+0x44>
 800e600:	2900      	cmp	r1, #0
 800e602:	da50      	bge.n	800e6a6 <floor+0xd6>
 800e604:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e608:	4a2b      	ldr	r2, [pc, #172]	; (800e6b8 <floor+0xe8>)
 800e60a:	4303      	orrs	r3, r0
 800e60c:	2000      	movs	r0, #0
 800e60e:	4283      	cmp	r3, r0
 800e610:	bf18      	it	ne
 800e612:	4611      	movne	r1, r2
 800e614:	460b      	mov	r3, r1
 800e616:	4602      	mov	r2, r0
 800e618:	ec43 2b10 	vmov	d0, r2, r3
 800e61c:	e020      	b.n	800e660 <floor+0x90>
 800e61e:	4a27      	ldr	r2, [pc, #156]	; (800e6bc <floor+0xec>)
 800e620:	411a      	asrs	r2, r3
 800e622:	ea01 0402 	and.w	r4, r1, r2
 800e626:	4304      	orrs	r4, r0
 800e628:	d01a      	beq.n	800e660 <floor+0x90>
 800e62a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800e6b0 <floor+0xe0>
 800e62e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e632:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e63a:	ddeb      	ble.n	800e614 <floor+0x44>
 800e63c:	2900      	cmp	r1, #0
 800e63e:	bfbe      	ittt	lt
 800e640:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800e644:	fa40 f303 	asrlt.w	r3, r0, r3
 800e648:	18c9      	addlt	r1, r1, r3
 800e64a:	ea21 0102 	bic.w	r1, r1, r2
 800e64e:	2000      	movs	r0, #0
 800e650:	e7e0      	b.n	800e614 <floor+0x44>
 800e652:	2b33      	cmp	r3, #51	; 0x33
 800e654:	dd05      	ble.n	800e662 <floor+0x92>
 800e656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e65a:	d101      	bne.n	800e660 <floor+0x90>
 800e65c:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e660:	bd30      	pop	{r4, r5, pc}
 800e662:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800e666:	f04f 32ff 	mov.w	r2, #4294967295
 800e66a:	40e2      	lsrs	r2, r4
 800e66c:	4202      	tst	r2, r0
 800e66e:	d0f7      	beq.n	800e660 <floor+0x90>
 800e670:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800e6b0 <floor+0xe0>
 800e674:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e678:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e67c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e680:	ddc8      	ble.n	800e614 <floor+0x44>
 800e682:	2900      	cmp	r1, #0
 800e684:	da02      	bge.n	800e68c <floor+0xbc>
 800e686:	2b14      	cmp	r3, #20
 800e688:	d103      	bne.n	800e692 <floor+0xc2>
 800e68a:	3101      	adds	r1, #1
 800e68c:	ea20 0002 	bic.w	r0, r0, r2
 800e690:	e7c0      	b.n	800e614 <floor+0x44>
 800e692:	2401      	movs	r4, #1
 800e694:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e698:	fa04 f303 	lsl.w	r3, r4, r3
 800e69c:	4418      	add	r0, r3
 800e69e:	42a8      	cmp	r0, r5
 800e6a0:	bf38      	it	cc
 800e6a2:	1909      	addcc	r1, r1, r4
 800e6a4:	e7f2      	b.n	800e68c <floor+0xbc>
 800e6a6:	2000      	movs	r0, #0
 800e6a8:	4601      	mov	r1, r0
 800e6aa:	e7b3      	b.n	800e614 <floor+0x44>
 800e6ac:	f3af 8000 	nop.w
 800e6b0:	8800759c 	.word	0x8800759c
 800e6b4:	7e37e43c 	.word	0x7e37e43c
 800e6b8:	bff00000 	.word	0xbff00000
 800e6bc:	000fffff 	.word	0x000fffff

0800e6c0 <matherr>:
 800e6c0:	2000      	movs	r0, #0
 800e6c2:	4770      	bx	lr
 800e6c4:	0000      	movs	r0, r0
	...

0800e6c8 <nan>:
 800e6c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e6d0 <nan+0x8>
 800e6cc:	4770      	bx	lr
 800e6ce:	bf00      	nop
 800e6d0:	00000000 	.word	0x00000000
 800e6d4:	7ff80000 	.word	0x7ff80000

0800e6d8 <rint>:
 800e6d8:	b530      	push	{r4, r5, lr}
 800e6da:	b085      	sub	sp, #20
 800e6dc:	ed8d 0b00 	vstr	d0, [sp]
 800e6e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6e4:	f3c3 510a 	ubfx	r1, r3, #20, #11
 800e6e8:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 800e6ec:	2813      	cmp	r0, #19
 800e6ee:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 800e6f2:	dc5a      	bgt.n	800e7aa <rint+0xd2>
 800e6f4:	2800      	cmp	r0, #0
 800e6f6:	da2f      	bge.n	800e758 <rint+0x80>
 800e6f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e6fc:	4311      	orrs	r1, r2
 800e6fe:	d027      	beq.n	800e750 <rint+0x78>
 800e700:	f3c3 0513 	ubfx	r5, r3, #0, #20
 800e704:	4315      	orrs	r5, r2
 800e706:	426a      	negs	r2, r5
 800e708:	432a      	orrs	r2, r5
 800e70a:	0b12      	lsrs	r2, r2, #12
 800e70c:	0c5b      	lsrs	r3, r3, #17
 800e70e:	045b      	lsls	r3, r3, #17
 800e710:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800e714:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e718:	ea42 0103 	orr.w	r1, r2, r3
 800e71c:	4b31      	ldr	r3, [pc, #196]	; (800e7e4 <rint+0x10c>)
 800e71e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e722:	ed93 6b00 	vldr	d6, [r3]
 800e726:	ec41 0b17 	vmov	d7, r0, r1
 800e72a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e72e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e732:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e736:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e73a:	ed8d 7b00 	vstr	d7, [sp]
 800e73e:	9b01      	ldr	r3, [sp, #4]
 800e740:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e744:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e748:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 800e74c:	e9cd 0100 	strd	r0, r1, [sp]
 800e750:	ed9d 0b00 	vldr	d0, [sp]
 800e754:	b005      	add	sp, #20
 800e756:	bd30      	pop	{r4, r5, pc}
 800e758:	4923      	ldr	r1, [pc, #140]	; (800e7e8 <rint+0x110>)
 800e75a:	4101      	asrs	r1, r0
 800e75c:	ea03 0501 	and.w	r5, r3, r1
 800e760:	4315      	orrs	r5, r2
 800e762:	d0f5      	beq.n	800e750 <rint+0x78>
 800e764:	0849      	lsrs	r1, r1, #1
 800e766:	ea03 0501 	and.w	r5, r3, r1
 800e76a:	432a      	orrs	r2, r5
 800e76c:	d00b      	beq.n	800e786 <rint+0xae>
 800e76e:	ea23 0101 	bic.w	r1, r3, r1
 800e772:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e776:	2813      	cmp	r0, #19
 800e778:	fa43 f300 	asr.w	r3, r3, r0
 800e77c:	bf0c      	ite	eq
 800e77e:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800e782:	2200      	movne	r2, #0
 800e784:	430b      	orrs	r3, r1
 800e786:	4619      	mov	r1, r3
 800e788:	4b16      	ldr	r3, [pc, #88]	; (800e7e4 <rint+0x10c>)
 800e78a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e78e:	ed94 6b00 	vldr	d6, [r4]
 800e792:	4610      	mov	r0, r2
 800e794:	ec41 0b17 	vmov	d7, r0, r1
 800e798:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e79c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e7a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e7a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e7a8:	e008      	b.n	800e7bc <rint+0xe4>
 800e7aa:	2833      	cmp	r0, #51	; 0x33
 800e7ac:	dd09      	ble.n	800e7c2 <rint+0xea>
 800e7ae:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800e7b2:	d1cd      	bne.n	800e750 <rint+0x78>
 800e7b4:	ed9d 7b00 	vldr	d7, [sp]
 800e7b8:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e7bc:	ed8d 7b00 	vstr	d7, [sp]
 800e7c0:	e7c6      	b.n	800e750 <rint+0x78>
 800e7c2:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 800e7c6:	f04f 31ff 	mov.w	r1, #4294967295
 800e7ca:	40c1      	lsrs	r1, r0
 800e7cc:	420a      	tst	r2, r1
 800e7ce:	d0bf      	beq.n	800e750 <rint+0x78>
 800e7d0:	0849      	lsrs	r1, r1, #1
 800e7d2:	420a      	tst	r2, r1
 800e7d4:	bf1f      	itttt	ne
 800e7d6:	ea22 0101 	bicne.w	r1, r2, r1
 800e7da:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800e7de:	4102      	asrne	r2, r0
 800e7e0:	430a      	orrne	r2, r1
 800e7e2:	e7d0      	b.n	800e786 <rint+0xae>
 800e7e4:	0801df48 	.word	0x0801df48
 800e7e8:	000fffff 	.word	0x000fffff
 800e7ec:	00000000 	.word	0x00000000

0800e7f0 <scalbn>:
 800e7f0:	b500      	push	{lr}
 800e7f2:	ed2d 8b02 	vpush	{d8}
 800e7f6:	b083      	sub	sp, #12
 800e7f8:	ed8d 0b00 	vstr	d0, [sp]
 800e7fc:	9b01      	ldr	r3, [sp, #4]
 800e7fe:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e802:	b9a2      	cbnz	r2, 800e82e <scalbn+0x3e>
 800e804:	9a00      	ldr	r2, [sp, #0]
 800e806:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e80a:	4313      	orrs	r3, r2
 800e80c:	d03a      	beq.n	800e884 <scalbn+0x94>
 800e80e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800e8c8 <scalbn+0xd8>
 800e812:	4b35      	ldr	r3, [pc, #212]	; (800e8e8 <scalbn+0xf8>)
 800e814:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e818:	4298      	cmp	r0, r3
 800e81a:	ed8d 7b00 	vstr	d7, [sp]
 800e81e:	da11      	bge.n	800e844 <scalbn+0x54>
 800e820:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800e8d0 <scalbn+0xe0>
 800e824:	ed9d 6b00 	vldr	d6, [sp]
 800e828:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e82c:	e007      	b.n	800e83e <scalbn+0x4e>
 800e82e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e832:	428a      	cmp	r2, r1
 800e834:	d10a      	bne.n	800e84c <scalbn+0x5c>
 800e836:	ed9d 7b00 	vldr	d7, [sp]
 800e83a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e83e:	ed8d 7b00 	vstr	d7, [sp]
 800e842:	e01f      	b.n	800e884 <scalbn+0x94>
 800e844:	9b01      	ldr	r3, [sp, #4]
 800e846:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800e84a:	3a36      	subs	r2, #54	; 0x36
 800e84c:	4402      	add	r2, r0
 800e84e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e852:	428a      	cmp	r2, r1
 800e854:	dd0a      	ble.n	800e86c <scalbn+0x7c>
 800e856:	ed9f 8b20 	vldr	d8, [pc, #128]	; 800e8d8 <scalbn+0xe8>
 800e85a:	eeb0 0b48 	vmov.f64	d0, d8
 800e85e:	ed9d 1b00 	vldr	d1, [sp]
 800e862:	f000 f95f 	bl	800eb24 <copysign>
 800e866:	ee20 7b08 	vmul.f64	d7, d0, d8
 800e86a:	e7e8      	b.n	800e83e <scalbn+0x4e>
 800e86c:	2a00      	cmp	r2, #0
 800e86e:	dd10      	ble.n	800e892 <scalbn+0xa2>
 800e870:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e874:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e878:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e87c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e880:	e9cd 0100 	strd	r0, r1, [sp]
 800e884:	ed9d 0b00 	vldr	d0, [sp]
 800e888:	b003      	add	sp, #12
 800e88a:	ecbd 8b02 	vpop	{d8}
 800e88e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e892:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e896:	da06      	bge.n	800e8a6 <scalbn+0xb6>
 800e898:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e89c:	4298      	cmp	r0, r3
 800e89e:	dcda      	bgt.n	800e856 <scalbn+0x66>
 800e8a0:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800e8d0 <scalbn+0xe0>
 800e8a4:	e7d9      	b.n	800e85a <scalbn+0x6a>
 800e8a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e8ae:	3236      	adds	r2, #54	; 0x36
 800e8b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e8b4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e8b8:	ec41 0b17 	vmov	d7, r0, r1
 800e8bc:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800e8e0 <scalbn+0xf0>
 800e8c0:	e7b2      	b.n	800e828 <scalbn+0x38>
 800e8c2:	bf00      	nop
 800e8c4:	f3af 8000 	nop.w
 800e8c8:	00000000 	.word	0x00000000
 800e8cc:	43500000 	.word	0x43500000
 800e8d0:	c2f8f359 	.word	0xc2f8f359
 800e8d4:	01a56e1f 	.word	0x01a56e1f
 800e8d8:	8800759c 	.word	0x8800759c
 800e8dc:	7e37e43c 	.word	0x7e37e43c
 800e8e0:	00000000 	.word	0x00000000
 800e8e4:	3c900000 	.word	0x3c900000
 800e8e8:	ffff3cb0 	.word	0xffff3cb0
 800e8ec:	00000000 	.word	0x00000000

0800e8f0 <__ieee754_log>:
 800e8f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e8f2:	ed8d 0b00 	vstr	d0, [sp]
 800e8f6:	9a01      	ldr	r2, [sp, #4]
 800e8f8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800e8fc:	da26      	bge.n	800e94c <__ieee754_log+0x5c>
 800e8fe:	9900      	ldr	r1, [sp, #0]
 800e900:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800e904:	430b      	orrs	r3, r1
 800e906:	d107      	bne.n	800e918 <__ieee754_log+0x28>
 800e908:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800eab8 <__ieee754_log+0x1c8>
 800e90c:	ed9f 7b6c 	vldr	d7, [pc, #432]	; 800eac0 <__ieee754_log+0x1d0>
 800e910:	ee86 0b07 	vdiv.f64	d0, d6, d7
 800e914:	b003      	add	sp, #12
 800e916:	bd30      	pop	{r4, r5, pc}
 800e918:	2a00      	cmp	r2, #0
 800e91a:	da04      	bge.n	800e926 <__ieee754_log+0x36>
 800e91c:	ed9d 7b00 	vldr	d7, [sp]
 800e920:	ee37 6b47 	vsub.f64	d6, d7, d7
 800e924:	e7f2      	b.n	800e90c <__ieee754_log+0x1c>
 800e926:	ed9d 6b00 	vldr	d6, [sp]
 800e92a:	ed9f 7b67 	vldr	d7, [pc, #412]	; 800eac8 <__ieee754_log+0x1d8>
 800e92e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e932:	ed8d 7b00 	vstr	d7, [sp]
 800e936:	9a01      	ldr	r2, [sp, #4]
 800e938:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800e93c:	4b78      	ldr	r3, [pc, #480]	; (800eb20 <__ieee754_log+0x230>)
 800e93e:	429a      	cmp	r2, r3
 800e940:	dd06      	ble.n	800e950 <__ieee754_log+0x60>
 800e942:	ed9d 7b00 	vldr	d7, [sp]
 800e946:	ee37 0b07 	vadd.f64	d0, d7, d7
 800e94a:	e7e3      	b.n	800e914 <__ieee754_log+0x24>
 800e94c:	2100      	movs	r1, #0
 800e94e:	e7f5      	b.n	800e93c <__ieee754_log+0x4c>
 800e950:	1513      	asrs	r3, r2, #20
 800e952:	f3c2 0013 	ubfx	r0, r2, #0, #20
 800e956:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e95a:	4419      	add	r1, r3
 800e95c:	f500 2315 	add.w	r3, r0, #610304	; 0x95000
 800e960:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800e964:	f403 1480 	and.w	r4, r3, #1048576	; 0x100000
 800e968:	f084 557f 	eor.w	r5, r4, #1069547520	; 0x3fc00000
 800e96c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e970:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800e974:	f485 1540 	eor.w	r5, r5, #3145728	; 0x300000
 800e978:	ea45 0300 	orr.w	r3, r5, r0
 800e97c:	ec43 2b10 	vmov	d0, r2, r3
 800e980:	1c82      	adds	r2, r0, #2
 800e982:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e986:	2a02      	cmp	r2, #2
 800e988:	eb01 5414 	add.w	r4, r1, r4, lsr #20
 800e98c:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e990:	dc31      	bgt.n	800e9f6 <__ieee754_log+0x106>
 800e992:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e99a:	d10f      	bne.n	800e9bc <__ieee754_log+0xcc>
 800e99c:	2c00      	cmp	r4, #0
 800e99e:	f000 8086 	beq.w	800eaae <__ieee754_log+0x1be>
 800e9a2:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800ead0 <__ieee754_log+0x1e0>
 800e9a6:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 800ead8 <__ieee754_log+0x1e8>
 800e9aa:	ee07 4a90 	vmov	s15, r4
 800e9ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e9b2:	ee27 0b00 	vmul.f64	d0, d7, d0
 800e9b6:	eea7 0b06 	vfma.f64	d0, d7, d6
 800e9ba:	e7ab      	b.n	800e914 <__ieee754_log+0x24>
 800e9bc:	ed9f 7b48 	vldr	d7, [pc, #288]	; 800eae0 <__ieee754_log+0x1f0>
 800e9c0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800e9c4:	eea0 6b47 	vfms.f64	d6, d0, d7
 800e9c8:	ee20 7b00 	vmul.f64	d7, d0, d0
 800e9cc:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e9d0:	b914      	cbnz	r4, 800e9d8 <__ieee754_log+0xe8>
 800e9d2:	ee30 0b46 	vsub.f64	d0, d0, d6
 800e9d6:	e79d      	b.n	800e914 <__ieee754_log+0x24>
 800e9d8:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 800ead0 <__ieee754_log+0x1e0>
 800e9dc:	ee07 4a90 	vmov	s15, r4
 800e9e0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e9e4:	eea7 6b45 	vfms.f64	d6, d7, d5
 800e9e8:	ee36 0b40 	vsub.f64	d0, d6, d0
 800e9ec:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 800ead8 <__ieee754_log+0x1e8>
 800e9f0:	ee97 0b06 	vfnms.f64	d0, d7, d6
 800e9f4:	e78e      	b.n	800e914 <__ieee754_log+0x24>
 800e9f6:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800e9fa:	ee30 7b07 	vadd.f64	d7, d0, d7
 800e9fe:	ee80 4b07 	vdiv.f64	d4, d0, d7
 800ea02:	ee07 4a90 	vmov	s15, r4
 800ea06:	ee24 2b04 	vmul.f64	d2, d4, d4
 800ea0a:	ed9f 3b37 	vldr	d3, [pc, #220]	; 800eae8 <__ieee754_log+0x1f8>
 800ea0e:	ee22 5b02 	vmul.f64	d5, d2, d2
 800ea12:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800ea16:	ed9f 7b36 	vldr	d7, [pc, #216]	; 800eaf0 <__ieee754_log+0x200>
 800ea1a:	eea5 7b03 	vfma.f64	d7, d5, d3
 800ea1e:	ed9f 3b36 	vldr	d3, [pc, #216]	; 800eaf8 <__ieee754_log+0x208>
 800ea22:	ed9f 1b37 	vldr	d1, [pc, #220]	; 800eb00 <__ieee754_log+0x210>
 800ea26:	eea7 3b05 	vfma.f64	d3, d7, d5
 800ea2a:	ed9f 7b37 	vldr	d7, [pc, #220]	; 800eb08 <__ieee754_log+0x218>
 800ea2e:	eea5 7b01 	vfma.f64	d7, d5, d1
 800ea32:	ed9f 1b37 	vldr	d1, [pc, #220]	; 800eb10 <__ieee754_log+0x220>
 800ea36:	f5a0 21c2 	sub.w	r1, r0, #397312	; 0x61000
 800ea3a:	f5c0 22d7 	rsb	r2, r0, #440320	; 0x6b800
 800ea3e:	eea7 1b05 	vfma.f64	d1, d7, d5
 800ea42:	f2a1 417a 	subw	r1, r1, #1146	; 0x47a
 800ea46:	ed9f 7b34 	vldr	d7, [pc, #208]	; 800eb18 <__ieee754_log+0x228>
 800ea4a:	3251      	adds	r2, #81	; 0x51
 800ea4c:	430a      	orrs	r2, r1
 800ea4e:	2a00      	cmp	r2, #0
 800ea50:	eea1 7b05 	vfma.f64	d7, d1, d5
 800ea54:	ee27 7b02 	vmul.f64	d7, d7, d2
 800ea58:	eea3 7b05 	vfma.f64	d7, d3, d5
 800ea5c:	dd1c      	ble.n	800ea98 <__ieee754_log+0x1a8>
 800ea5e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ea62:	ee20 5b05 	vmul.f64	d5, d0, d5
 800ea66:	ee25 5b00 	vmul.f64	d5, d5, d0
 800ea6a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ea6e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ea72:	b924      	cbnz	r4, 800ea7e <__ieee754_log+0x18e>
 800ea74:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ea78:	ee30 0b47 	vsub.f64	d0, d0, d7
 800ea7c:	e74a      	b.n	800e914 <__ieee754_log+0x24>
 800ea7e:	ed9f 4b14 	vldr	d4, [pc, #80]	; 800ead0 <__ieee754_log+0x1e0>
 800ea82:	eea6 7b04 	vfma.f64	d7, d6, d4
 800ea86:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ea8a:	ee37 0b40 	vsub.f64	d0, d7, d0
 800ea8e:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800ead8 <__ieee754_log+0x1e8>
 800ea92:	ee96 0b07 	vfnms.f64	d0, d6, d7
 800ea96:	e73d      	b.n	800e914 <__ieee754_log+0x24>
 800ea98:	ee30 7b47 	vsub.f64	d7, d0, d7
 800ea9c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800eaa0:	2c00      	cmp	r4, #0
 800eaa2:	d0e9      	beq.n	800ea78 <__ieee754_log+0x188>
 800eaa4:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 800ead0 <__ieee754_log+0x1e0>
 800eaa8:	eea6 7b45 	vfms.f64	d7, d6, d5
 800eaac:	e7ed      	b.n	800ea8a <__ieee754_log+0x19a>
 800eaae:	ed9f 0b04 	vldr	d0, [pc, #16]	; 800eac0 <__ieee754_log+0x1d0>
 800eab2:	e72f      	b.n	800e914 <__ieee754_log+0x24>
 800eab4:	f3af 8000 	nop.w
 800eab8:	00000000 	.word	0x00000000
 800eabc:	c3500000 	.word	0xc3500000
	...
 800eacc:	43500000 	.word	0x43500000
 800ead0:	35793c76 	.word	0x35793c76
 800ead4:	3dea39ef 	.word	0x3dea39ef
 800ead8:	fee00000 	.word	0xfee00000
 800eadc:	3fe62e42 	.word	0x3fe62e42
 800eae0:	55555555 	.word	0x55555555
 800eae4:	3fd55555 	.word	0x3fd55555
 800eae8:	d078c69f 	.word	0xd078c69f
 800eaec:	3fc39a09 	.word	0x3fc39a09
 800eaf0:	1d8e78af 	.word	0x1d8e78af
 800eaf4:	3fcc71c5 	.word	0x3fcc71c5
 800eaf8:	9997fa04 	.word	0x9997fa04
 800eafc:	3fd99999 	.word	0x3fd99999
 800eb00:	df3e5244 	.word	0xdf3e5244
 800eb04:	3fc2f112 	.word	0x3fc2f112
 800eb08:	96cb03de 	.word	0x96cb03de
 800eb0c:	3fc74664 	.word	0x3fc74664
 800eb10:	94229359 	.word	0x94229359
 800eb14:	3fd24924 	.word	0x3fd24924
 800eb18:	55555593 	.word	0x55555593
 800eb1c:	3fe55555 	.word	0x3fe55555
 800eb20:	7fefffff 	.word	0x7fefffff

0800eb24 <copysign>:
 800eb24:	ec51 0b10 	vmov	r0, r1, d0
 800eb28:	ee11 0a90 	vmov	r0, s3
 800eb2c:	ee10 2a10 	vmov	r2, s0
 800eb30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800eb34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800eb38:	ea41 0300 	orr.w	r3, r1, r0
 800eb3c:	ec43 2b10 	vmov	d0, r2, r3
 800eb40:	4770      	bx	lr
	...

0800eb44 <_init>:
 800eb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb46:	bf00      	nop
 800eb48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb4a:	bc08      	pop	{r3}
 800eb4c:	469e      	mov	lr, r3
 800eb4e:	4770      	bx	lr

0800eb50 <_fini>:
 800eb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb52:	bf00      	nop
 800eb54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb56:	bc08      	pop	{r3}
 800eb58:	469e      	mov	lr, r3
 800eb5a:	4770      	bx	lr
